[{"text": "hey guys in this video I'm gonna give", "start": 0.03, "duration": 4.74}, {"text": "you an introduction to erase and a quick", "start": 2.429, "duration": 4.861}, {"text": "overview of how memory works and this", "start": 4.77, "duration": 4.409}, {"text": "video it's gonna be split into three", "start": 7.29, "duration": 3.99}, {"text": "parts first of all I'm gonna cover the", "start": 9.179, "duration": 4.62}, {"text": "basics of arrays and this part is gonna", "start": 11.28, "duration": 4.439}, {"text": "be pretty basic so if we already", "start": 13.799, "duration": 4.021}, {"text": "familiar with erase don't worry about", "start": 15.719, "duration": 4.32}, {"text": "watching this part and in the second", "start": 17.82, "duration": 4.74}, {"text": "part I'm gonna cover what memory is as", "start": 20.039, "duration": 5.82}, {"text": "opposed to storage and finally I'm gonna", "start": 22.56, "duration": 6.12}, {"text": "cover how integers and integer arrays", "start": 25.859, "duration": 5.76}, {"text": "are stored or memory arrays and memory", "start": 28.68, "duration": 5.73}, {"text": "or two of the fundamental topics in data", "start": 31.619, "duration": 5.071}, {"text": "structures and algorithms so let's get", "start": 34.41, "duration": 4.86}, {"text": "started okay so first of all what is an", "start": 36.69, "duration": 4.83}, {"text": "array an array is basically a collection", "start": 39.27, "duration": 4.8}, {"text": "of items of a single type so an example", "start": 41.52, "duration": 4.41}, {"text": "would be this one which is an array of", "start": 44.07, "duration": 4.89}, {"text": "integers or this one which is an array", "start": 45.93, "duration": 6.449}, {"text": "of strings and it's not usual for an", "start": 48.96, "duration": 6.239}, {"text": "array to have multiple types so it's not", "start": 52.379, "duration": 4.891}, {"text": "usual for us to have something like this", "start": 55.199, "duration": 4.981}, {"text": "where this array has both strings and", "start": 57.27, "duration": 5.429}, {"text": "numbers inside and let's take a look at", "start": 60.18, "duration": 5.52}, {"text": "some code snippets in C here to see how", "start": 62.699, "duration": 5.761}, {"text": "you can use arrays in practice I'm only", "start": 65.7, "duration": 4.86}, {"text": "gonna take a look at C here but it's", "start": 68.46, "duration": 3.72}, {"text": "gonna be pretty similar to other", "start": 70.56, "duration": 5.099}, {"text": "languages too like Java this line int", "start": 72.18, "duration": 6.869}, {"text": "sample array square brackets 5 equals 2", "start": 75.659, "duration": 4.621}, {"text": "4 6 and so on", "start": 79.049, "duration": 4.32}, {"text": "says create a new array with five", "start": 80.28, "duration": 5.699}, {"text": "integers and then populate it with the", "start": 83.369, "duration": 7.441}, {"text": "elements 2 4 6 8 and 100 and you can", "start": 85.979, "duration": 8.25}, {"text": "visualize this array as a box with 5", "start": 90.81, "duration": 4.379}, {"text": "partitions", "start": 94.229, "duration": 3.721}, {"text": "because this array is able to contain 5", "start": 95.189, "duration": 5.011}, {"text": "integers if you want to change some of", "start": 97.95, "duration": 4.98}, {"text": "the elements in this array of course you", "start": 100.2, "duration": 5.55}, {"text": "can use code like this the first line", "start": 102.93, "duration": 6.06}, {"text": "says change the first item of this array", "start": 105.75, "duration": 6.27}, {"text": "to 20 and then the second line says", "start": 108.99, "duration": 5.61}, {"text": "change the second element of this array", "start": 112.02, "duration": 6.059}, {"text": "to minus 5 so after executing these two", "start": 114.6, "duration": 5.58}, {"text": "lines of code sample array will look", "start": 118.079, "duration": 4.951}, {"text": "like this you can see that the first two", "start": 120.18, "duration": 5.1}, {"text": "elements have been changed but not the", "start": 123.03, "duration": 4.799}, {"text": "other three elements and of course here", "start": 125.28, "duration": 5.369}, {"text": "the index of the array starts at 0", "start": 127.829, "duration": 5.851}, {"text": "instead of 1 and it's not necessarily", "start": 130.649, "duration": 5.43}, {"text": "the case with all the languages but this", "start": 133.68, "duration": 3.509}, {"text": "is what we're going to use throughout", "start": 136.079, "duration": 3.571}, {"text": "this course - now what if you already", "start": 137.189, "duration": 5.94}, {"text": "have five numbers in this array and you", "start": 139.65, "duration": 5.94}, {"text": "wanted to add two more numbers let's say", "start": 143.129, "duration": 3.991}, {"text": "two and three", "start": 145.59, "duration": 4.95}, {"text": "after the fifth item you might say well", "start": 147.12, "duration": 5.28}, {"text": "why don't you just add two more", "start": 150.54, "duration": 4.169}, {"text": "partitions at the end of this array and", "start": 152.4, "duration": 5.1}, {"text": "then put those numbers in there but", "start": 154.709, "duration": 4.92}, {"text": "actually you can't do that and to", "start": 157.5, "duration": 4.079}, {"text": "understand why that's the case why you", "start": 159.629, "duration": 4.11}, {"text": "can't add more partitions at the end of", "start": 161.579, "duration": 4.11}, {"text": "this array I'll need to give you a quick", "start": 163.739, "duration": 4.051}, {"text": "overview of how memory works on a", "start": 165.689, "duration": 5.461}, {"text": "computer okay so what is memory exactly", "start": 167.79, "duration": 5.91}, {"text": "for me to explain what it is the first", "start": 171.15, "duration": 3.809}, {"text": "thing you'll need to understand is that", "start": 173.7, "duration": 3.899}, {"text": "there are mainly two mechanisms for", "start": 174.959, "duration": 4.5}, {"text": "storing data on your computer", "start": 177.599, "duration": 4.5}, {"text": "the first one is memory or it's", "start": 179.459, "duration": 5.01}, {"text": "sometimes called RAM and the second one", "start": 182.099, "duration": 5.521}, {"text": "is storage which has different types for", "start": 184.469, "duration": 5.64}, {"text": "example a flash drive hard disk or a", "start": 187.62, "duration": 5.16}, {"text": "solid-state drive now the biggest", "start": 190.109, "duration": 5.011}, {"text": "difference between storage and memory is", "start": 192.78, "duration": 5.489}, {"text": "that the data on storage is permanent", "start": 195.12, "duration": 6.479}, {"text": "while the data on memory is not what I", "start": 198.269, "duration": 5.34}, {"text": "mean by that is you know if you think", "start": 201.599, "duration": 4.081}, {"text": "about your laptop when you turn off your", "start": 203.609, "duration": 5.22}, {"text": "laptop the data on storage will still be", "start": 205.68, "duration": 5.279}, {"text": "there but the data on memory will", "start": 208.829, "duration": 4.711}, {"text": "disappear as soon as you switch off your", "start": 210.959, "duration": 5.131}, {"text": "laptop so if you think about the bunch", "start": 213.54, "duration": 5.369}, {"text": "of photos you have on your laptop you", "start": 216.09, "duration": 4.259}, {"text": "know when you turn off your laptop and", "start": 218.909, "duration": 3.78}, {"text": "turn it back on again they should still", "start": 220.349, "duration": 3.63}, {"text": "be there right and that's because", "start": 222.689, "duration": 4.08}, {"text": "they're on storage and not necessarily", "start": 223.979, "duration": 5.94}, {"text": "our memory so like I said the data on", "start": 226.769, "duration": 5.34}, {"text": "memory on the other hand just disappears", "start": 229.919, "duration": 5.19}, {"text": "when you switch off your computer have", "start": 232.109, "duration": 4.71}, {"text": "you ever had an experience where you", "start": 235.109, "duration": 4.111}, {"text": "started working on an essay or you", "start": 236.819, "duration": 3.81}, {"text": "started drawing something on your", "start": 239.22, "duration": 4.259}, {"text": "computer and then suddenly you just lose", "start": 240.629, "duration": 4.651}, {"text": "all your progress because your computer", "start": 243.479, "duration": 4.32}, {"text": "crashes and then it shuts down and", "start": 245.28, "duration": 5.699}, {"text": "that's probably because those documents", "start": 247.799, "duration": 6.991}, {"text": "were on memory but not necessarily on", "start": 250.979, "duration": 6.78}, {"text": "storage so when you you know work on", "start": 254.79, "duration": 5.069}, {"text": "those documents and when you hit the", "start": 257.759, "duration": 5.071}, {"text": "Save button that finally becomes a file", "start": 259.859, "duration": 7.231}, {"text": "on your computer on storage this time", "start": 262.83, "duration": 5.76}, {"text": "so that the next time you know your", "start": 267.09, "duration": 3.51}, {"text": "computer crashes it's still gonna be", "start": 268.59, "duration": 4.14}, {"text": "there so at this point you might say", "start": 270.6, "duration": 5.16}, {"text": "wait why do you need these two separate", "start": 272.73, "duration": 5.31}, {"text": "mechanisms then why can't you just store", "start": 275.76, "duration": 4.98}, {"text": "everything on storage well the thing is", "start": 278.04, "duration": 5.94}, {"text": "reading data from and writing data into", "start": 280.74, "duration": 6.179}, {"text": "storage is pretty slow it's sort of like", "start": 283.98, "duration": 5.46}, {"text": "walking all the way to the file cabinet", "start": 286.919, "duration": 5.821}, {"text": "you have in the basement to retrieve you", "start": 289.44, "duration": 5.07}, {"text": "know the files there whether there are", "start": 292.74, "duration": 4.23}, {"text": "photos or documents it is necessary", "start": 294.51, "duration": 4.409}, {"text": "sometimes because that's where you have", "start": 296.97, "duration": 4.53}, {"text": "those documents but if you do it too", "start": 298.919, "duration": 4.921}, {"text": "often it's just gonna take too much time", "start": 301.5, "duration": 4.59}, {"text": "and that's actually where memory comes", "start": 303.84, "duration": 4.829}, {"text": "in memory is sort of like a temporary", "start": 306.09, "duration": 5.52}, {"text": "desk you have in your room so once you", "start": 308.669, "duration": 4.981}, {"text": "retrieve those documents you know from", "start": 311.61, "duration": 4.05}, {"text": "your storage whether they're text", "start": 313.65, "duration": 4.35}, {"text": "documents or photos you'll be able to", "start": 315.66, "duration": 5.79}, {"text": "put them on your desk or on your memory", "start": 318.0, "duration": 6.3}, {"text": "and once they're there it's gonna be so", "start": 321.45, "duration": 5.34}, {"text": "much faster to work with them and the", "start": 324.3, "duration": 4.02}, {"text": "reason it's so much faster is because", "start": 326.79, "duration": 4.32}, {"text": "it's so much quicker to write data into", "start": 328.32, "duration": 5.58}, {"text": "and read data from memory than it is", "start": 331.11, "duration": 6.09}, {"text": "with storage and then once you finish", "start": 333.9, "duration": 5.13}, {"text": "working with those pieces of data on", "start": 337.2, "duration": 4.62}, {"text": "your memory once you finish editing them", "start": 339.03, "duration": 5.639}, {"text": "and modifying them then you can bring", "start": 341.82, "duration": 5.55}, {"text": "them back to your storage so that you", "start": 344.669, "duration": 4.261}, {"text": "can save them they're more permanently", "start": 347.37, "duration": 4.26}, {"text": "as computer files again so that's the", "start": 348.93, "duration": 5.34}, {"text": "gist of how memory and storage work", "start": 351.63, "duration": 5.73}, {"text": "together with files and the way they", "start": 354.27, "duration": 4.98}, {"text": "work together for applications is", "start": 357.36, "duration": 5.22}, {"text": "actually pretty similar so when you have", "start": 359.25, "duration": 5.46}, {"text": "applications on your computer they're", "start": 362.58, "duration": 5.64}, {"text": "stored on storage originally and you can", "start": 364.71, "duration": 5.97}, {"text": "easily tell that's true because when you", "start": 368.22, "duration": 4.44}, {"text": "you know turn off your laptop and turn", "start": 370.68, "duration": 4.32}, {"text": "it back on again those applications are", "start": 372.66, "duration": 4.8}, {"text": "still gonna be there but when you launch", "start": 375.0, "duration": 5.28}, {"text": "one of them let's say Google Chrome it's", "start": 377.46, "duration": 6.209}, {"text": "gonna be loaded onto memory so that it's", "start": 380.28, "duration": 5.759}, {"text": "faster to use and you know faster to", "start": 383.669, "duration": 5.37}, {"text": "access there and so if you start running", "start": 386.039, "duration": 5.401}, {"text": "too many applications at the same time", "start": 389.039, "duration": 4.471}, {"text": "you know they're all gonna be loaded", "start": 391.44, "duration": 4.469}, {"text": "onto memory and you might actually start", "start": 393.51, "duration": 4.649}, {"text": "running out of memory space and that's", "start": 395.909, "duration": 4.111}, {"text": "why you know that's one of the reasons", "start": 398.159, "duration": 2.671}, {"text": "why", "start": 400.02, "duration": 3.09}, {"text": "to many applications at the same time on", "start": 400.83, "duration": 4.2}, {"text": "your computer might actually slow down", "start": 403.11, "duration": 4.53}, {"text": "your computer and let's now see how this", "start": 405.03, "duration": 4.2}, {"text": "whole thing actually looks on my", "start": 407.64, "duration": 4.38}, {"text": "computer since I'm using a Mac if you", "start": 409.23, "duration": 4.38}, {"text": "want to get an idea about how much", "start": 412.02, "duration": 3.69}, {"text": "memory I have you just need to click", "start": 413.61, "duration": 4.77}, {"text": "this Apple icon and then about this Mac", "start": 415.71, "duration": 4.74}, {"text": "and you can see that I have eight", "start": 418.38, "duration": 3.84}, {"text": "gigabytes of memory here", "start": 420.45, "duration": 4.23}, {"text": "now what about storage for storage I", "start": 422.22, "duration": 5.82}, {"text": "have 251 gigabytes and actually one", "start": 424.68, "duration": 5.43}, {"text": "feature of storage is that it's usually", "start": 428.04, "duration": 5.34}, {"text": "much bigger than memory and actually on", "start": 430.11, "duration": 5.28}, {"text": "the Mac there's a way to get a rough", "start": 433.38, "duration": 4.74}, {"text": "idea about how memory is being consumed", "start": 435.39, "duration": 5.4}, {"text": "you can just open Activity Monitor I", "start": 438.12, "duration": 4.05}, {"text": "think there's something similar for", "start": 440.79, "duration": 4.62}, {"text": "Windows 2 and here you can see that for", "start": 442.17, "duration": 5.85}, {"text": "example Dropbox is using about two", "start": 445.41, "duration": 4.26}, {"text": "hundred forty megabytes of memory and", "start": 448.02, "duration": 4.47}, {"text": "Google Chrome's using about 100", "start": 449.67, "duration": 5.19}, {"text": "megabytes of memory and what happens if", "start": 452.49, "duration": 5.61}, {"text": "I go to Chrome and quit this application", "start": 454.86, "duration": 5.58}, {"text": "it should stop consuming so much memory", "start": 458.1, "duration": 4.05}, {"text": "right let's see if that works", "start": 460.44, "duration": 6.6}, {"text": "I'm gonna quit Google Chrome and it's no", "start": 462.15, "duration": 7.95}, {"text": "longer here now how is all of this", "start": 467.04, "duration": 5.49}, {"text": "related to programming and in particular", "start": 470.1, "duration": 5.49}, {"text": "using a race to understand that let's", "start": 472.53, "duration": 5.01}, {"text": "take a look at this piece of code in C", "start": 475.59, "duration": 5.31}, {"text": "this line int a equals 1 when you", "start": 477.54, "duration": 5.94}, {"text": "compile and execute this line of course", "start": 480.9, "duration": 5.34}, {"text": "a variable called a is created and the", "start": 483.48, "duration": 4.95}, {"text": "integer 1 is assigned to that number and", "start": 486.24, "duration": 5.46}, {"text": "this integer 1 is stored on memory and", "start": 488.43, "duration": 5.94}, {"text": "not on storage and that means that when", "start": 491.7, "duration": 3.96}, {"text": "you turn off your computer after", "start": 494.37, "duration": 4.5}, {"text": "executing this code this integer 1 will", "start": 495.66, "duration": 5.19}, {"text": "just disappear because everything on", "start": 498.87, "duration": 3.81}, {"text": "memory of course disappears when you", "start": 500.85, "duration": 4.44}, {"text": "turn off your computer but how is this", "start": 502.68, "duration": 5.67}, {"text": "integer store on memory exactly for me", "start": 505.29, "duration": 4.5}, {"text": "to explain that you'll need to", "start": 508.35, "duration": 4.14}, {"text": "understand two things the first one is", "start": 509.79, "duration": 5.55}, {"text": "that each integer when it's stored on a", "start": 512.49, "duration": 6.9}, {"text": "computer it's often expressed as 32 ones", "start": 515.34, "duration": 6.81}, {"text": "and there's so for example the number", "start": 519.39, "duration": 6.81}, {"text": "one can be expressed as a bunch of zeros", "start": 522.15, "duration": 7.64}, {"text": "and then one at the end actually that's", "start": 526.2, "duration": 7.05}, {"text": "31 zeros and then one one at the end and", "start": 529.79, "duration": 4.989}, {"text": "the number two", "start": 533.25, "duration": 3.839}, {"text": "can be expressed as a bunch of zeros and", "start": 534.779, "duration": 4.98}, {"text": "then one and then there again that's", "start": 537.089, "duration": 6.6}, {"text": "actually 30 zeros 1 1 and then 1 0 and", "start": 539.759, "duration": 6.781}, {"text": "just like that pretty much any integer", "start": 543.689, "duration": 4.621}, {"text": "that you might encounter in real life", "start": 546.54, "duration": 8.76}, {"text": "whether they're 100 or 200 or minus 223", "start": 548.31, "duration": 9.74}, {"text": "each of them can be expressed as", "start": 555.3, "duration": 6.329}, {"text": "thirty-two ones and zeros now each of", "start": 558.05, "duration": 7.75}, {"text": "these zeros and ones is called a bit so", "start": 561.629, "duration": 8.37}, {"text": "a bit is either 1 or 0 so we say each", "start": 565.8, "duration": 7.68}, {"text": "integer can be expressed with 32 bits", "start": 569.999, "duration": 5.7}, {"text": "and you don't have to worry about how", "start": 573.48, "duration": 4.26}, {"text": "it's converted exactly if you don't know", "start": 575.699, "duration": 3.901}, {"text": "about it yet but just know that pretty", "start": 577.74, "duration": 4.17}, {"text": "much any integer within a reasonable", "start": 579.6, "duration": 5.19}, {"text": "range can be expressed with 32 bits or", "start": 581.91, "duration": 6.27}, {"text": "32 ones and zeros okay the second thing", "start": 584.79, "duration": 5.459}, {"text": "you'll need to understand is a simple", "start": 588.18, "duration": 4.889}, {"text": "model of memory memory can be thought of", "start": 590.249, "duration": 7.411}, {"text": "as a long tape of bytes now what is a", "start": 593.069, "duration": 8.731}, {"text": "bite a byte is basically a small unit of", "start": 597.66, "duration": 8.039}, {"text": "data and it consists of eight bits so", "start": 601.8, "duration": 7.409}, {"text": "each byte might look like this Woori has", "start": 605.699, "duration": 5.851}, {"text": "eight bits or this one", "start": 609.209, "duration": 4.8}, {"text": "now you can visualize the simple model", "start": 611.55, "duration": 5.94}, {"text": "of memory along table bytes like this so", "start": 614.009, "duration": 7.171}, {"text": "this is the long tape and each of these", "start": 617.49, "duration": 6.539}, {"text": "compartment represents each byte so you", "start": 621.18, "duration": 4.8}, {"text": "can sort of imagine a bunch of bits", "start": 624.029, "duration": 4.68}, {"text": "eight bits to be exact being crammed", "start": 625.98, "duration": 5.399}, {"text": "into each of these compartments and then", "start": 628.709, "duration": 4.74}, {"text": "you can store bytes which are of course", "start": 631.379, "duration": 4.2}, {"text": "small units of data in these", "start": 633.449, "duration": 4.801}, {"text": "compartments to represent anything you", "start": 635.579, "duration": 4.2}, {"text": "want to represent on your computer now", "start": 638.25, "duration": 4.769}, {"text": "your computer needs a way to find any", "start": 639.779, "duration": 6.271}, {"text": "particular byte very easily and you want", "start": 643.019, "duration": 4.531}, {"text": "to be able to do that because you want", "start": 646.05, "duration": 4.019}, {"text": "to be able to do things like store two", "start": 647.55, "duration": 5.339}, {"text": "bytes in these two compartments and then", "start": 650.069, "duration": 5.64}, {"text": "store four bytes right after that and", "start": 652.889, "duration": 5.31}, {"text": "maybe retrieve two bytes from the first", "start": 655.709, "duration": 5.07}, {"text": "two compartments and your computer", "start": 658.199, "duration": 5.76}, {"text": "achieves it by assigning an address to", "start": 660.779, "duration": 5.941}, {"text": "each byte and each of those address is", "start": 663.959, "duration": 4.741}, {"text": "represented by a sink", "start": 666.72, "duration": 4.26}, {"text": "integer so in this hypothetical example", "start": 668.7, "duration": 4.43}, {"text": "we have the address", "start": 670.98, "duration": 6.3}, {"text": "124 despite and 121 for this byte and so", "start": 673.13, "duration": 6.67}, {"text": "on at this point you might say wait why", "start": 677.28, "duration": 5.34}, {"text": "do we have these particular numbers 120", "start": 679.8, "duration": 4.32}, {"text": "121 and so on", "start": 682.62, "duration": 3.96}, {"text": "representing the addresses for these", "start": 684.12, "duration": 4.89}, {"text": "bytes well the answer is you know I came", "start": 686.58, "duration": 5.94}, {"text": "out with this arbitrary number 120 to", "start": 689.01, "duration": 6.12}, {"text": "represent the starting address for these", "start": 692.52, "duration": 5.52}, {"text": "bytes but in reality you don't have to", "start": 695.13, "duration": 4.83}, {"text": "worry about it and you know how to worry", "start": 698.04, "duration": 4.01}, {"text": "about it because the operating system", "start": 699.96, "duration": 4.38}, {"text": "determines what this starting address", "start": 702.05, "duration": 3.93}, {"text": "will be for your particular application", "start": 704.34, "duration": 4.47}, {"text": "so basically the operating system", "start": 705.98, "duration": 5.02}, {"text": "whether it's Mac or Windows this size", "start": 708.81, "duration": 5.28}, {"text": "well your application should live over", "start": 711.0, "duration": 5.7}, {"text": "here in memory and then someone else's", "start": 714.09, "duration": 4.38}, {"text": "application let's say Google Chrome", "start": 716.7, "duration": 4.98}, {"text": "should live over here and so on but the", "start": 718.47, "duration": 5.01}, {"text": "important thing to understand here is", "start": 721.68, "duration": 4.8}, {"text": "that even though the starting index 1 to", "start": 723.48, "duration": 5.67}, {"text": "20 is arbitrary here the way you have", "start": 726.48, "duration": 6.75}, {"text": "consecutive addresses 1 to 20 121 122", "start": 729.15, "duration": 6.6}, {"text": "and song that's exactly like a real", "start": 733.23, "duration": 4.95}, {"text": "system on your computer anyway like I", "start": 735.75, "duration": 4.53}, {"text": "said earlier each integer can be", "start": 738.18, "duration": 5.46}, {"text": "represented with 32 bits sometimes", "start": 740.28, "duration": 6.0}, {"text": "depending on the environment it's stored", "start": 743.64, "duration": 5.76}, {"text": "with 64 bits instead but let's just say", "start": 746.28, "duration": 6.06}, {"text": "32 bits for now and the question I have", "start": 749.4, "duration": 5.79}, {"text": "here for you is how many bytes do you", "start": 752.34, "duration": 5.7}, {"text": "need to store each integer well that's", "start": 755.19, "duration": 5.55}, {"text": "pretty simple because you have 8 bits in", "start": 758.04, "duration": 6.54}, {"text": "each byte so if you have 4 bytes you can", "start": 760.74, "duration": 7.11}, {"text": "store 4 times 8 bits which is 32 bits", "start": 764.58, "duration": 5.04}, {"text": "which is just enough to store each", "start": 767.85, "duration": 4.2}, {"text": "integer so how can we store an integer", "start": 769.62, "duration": 5.64}, {"text": "on memory you might say wait why don't", "start": 772.05, "duration": 6.42}, {"text": "you just take 4 bytes the four", "start": 775.26, "duration": 5.25}, {"text": "consecutive bytes right here and then", "start": 778.47, "duration": 4.08}, {"text": "use that to represent an integer and", "start": 780.51, "duration": 4.44}, {"text": "that's exactly what a real computer does", "start": 782.55, "duration": 4.35}, {"text": "so in this particular case when you have", "start": 784.95, "duration": 5.31}, {"text": "int a close one one is first of all", "start": 786.9, "duration": 6.36}, {"text": "converted into 32 bits zeros on ones and", "start": 790.26, "duration": 7.11}, {"text": "those bits will be split into these 4", "start": 793.26, "duration": 6.21}, {"text": "bytes and then they're gonna be stored", "start": 797.37, "duration": 5.04}, {"text": "right here on those 4 bytes", "start": 799.47, "duration": 5.489}, {"text": "if you have one more integer for example", "start": 802.41, "duration": 5.28}, {"text": "int B equals three right after this line", "start": 804.959, "duration": 5.82}, {"text": "that variable will be stored on those", "start": 807.69, "duration": 5.699}, {"text": "four bytes right after the first four", "start": 810.779, "duration": 5.581}, {"text": "bytes so that's how integers are stored", "start": 813.389, "duration": 5.64}, {"text": "on memory but actually the idea is gonna", "start": 816.36, "duration": 4.829}, {"text": "be the same for things like this mouse", "start": 819.029, "duration": 4.62}, {"text": "or characters you might need a different", "start": 821.189, "duration": 5.25}, {"text": "number of bytes to store each different", "start": 823.649, "duration": 6.451}, {"text": "type of data 2.3 or a or whatever but", "start": 826.439, "duration": 6.27}, {"text": "the idea of using consecutive bytes to", "start": 830.1, "duration": 4.89}, {"text": "store each piece of data is exactly the", "start": 832.709, "duration": 4.891}, {"text": "same anyway what if you wanted to store", "start": 834.99, "duration": 5.73}, {"text": "an array of integers instead of single", "start": 837.6, "duration": 5.849}, {"text": "integers to see how that can be done", "start": 840.72, "duration": 5.52}, {"text": "let's take a look at some more code in C", "start": 843.449, "duration": 5.19}, {"text": "here and let's say just like before we", "start": 846.24, "duration": 6.81}, {"text": "have int a equals 1 then that integer a", "start": 848.639, "duration": 8.611}, {"text": "or 1 will be stored let's say in these 4", "start": 853.05, "duration": 9.089}, {"text": "bytes from 122 123 and let's say right", "start": 857.25, "duration": 8.1}, {"text": "after this line we have this line in", "start": 862.139, "duration": 6.721}, {"text": "sample racecar back at 3 e goes 5 3 and", "start": 865.35, "duration": 7.32}, {"text": "20 this array will actually take 12", "start": 868.86, "duration": 6.87}, {"text": "bytes right after the first 4 bytes so", "start": 872.67, "duration": 8.64}, {"text": "that's from 124 to 135 right here and we", "start": 875.73, "duration": 7.89}, {"text": "need 12 bytes because we need to be able", "start": 881.31, "duration": 5.31}, {"text": "to store three integers so that's of", "start": 883.62, "duration": 6.839}, {"text": "course 3 times 4 equals 12 bytes and the", "start": 886.62, "duration": 7.139}, {"text": "first number 5 will be stored in the", "start": 890.459, "duration": 9.151}, {"text": "first 4 bytes so that's from 124 to 127", "start": 893.759, "duration": 8.911}, {"text": "right here and the second number 3 will", "start": 899.61, "duration": 5.699}, {"text": "be stored in the 4 bytes right after", "start": 902.67, "duration": 7.139}, {"text": "that naturally so that's from 128 to 131", "start": 905.309, "duration": 7.5}, {"text": "and then 20 will of course will be", "start": 909.809, "duration": 5.491}, {"text": "stored in the last 4 bytes right here", "start": 912.809, "duration": 4.621}, {"text": "now the question we asked ourselves", "start": 915.3, "duration": 5.759}, {"text": "earlier was why can't we just add two", "start": 917.43, "duration": 6.719}, {"text": "more numbers let's say 1 and 2 to the", "start": 921.059, "duration": 6.09}, {"text": "end of this sample array you know if you", "start": 924.149, "duration": 5.821}, {"text": "look at this model of memory it looks", "start": 927.149, "duration": 5.16}, {"text": "like we'll be able to just allocate 8", "start": 929.97, "duration": 5.099}, {"text": "more bytes over here and then use those", "start": 932.309, "duration": 4.111}, {"text": "8 bytes to", "start": 935.069, "duration": 3.45}, {"text": "store these two integers but actually", "start": 936.42, "duration": 4.38}, {"text": "you can't do that to explain why you", "start": 938.519, "duration": 4.19}, {"text": "can't just do that why you can't just", "start": 940.8, "duration": 5.099}, {"text": "allocate more memory allocate more bytes", "start": 942.709, "duration": 5.651}, {"text": "right after this array I would actually", "start": 945.899, "duration": 4.351}, {"text": "need to explain a little bit more about", "start": 948.36, "duration": 4.44}, {"text": "how memory works exactly but let me give", "start": 950.25, "duration": 4.05}, {"text": "you a more simplified argument here", "start": 952.8, "duration": 3.839}, {"text": "instead the simplified argument here is", "start": 954.3, "duration": 6.57}, {"text": "that after this line after allocating 12", "start": 956.639, "duration": 7.021}, {"text": "bytes for this array we don't know", "start": 960.87, "duration": 5.1}, {"text": "what's gonna be right after that in this", "start": 963.66, "duration": 4.799}, {"text": "memory space so for example you might", "start": 965.97, "duration": 6.419}, {"text": "have this line int C equals 4 right", "start": 968.459, "duration": 7.021}, {"text": "after this line in that case this number", "start": 972.389, "duration": 7.551}, {"text": "4 would be stored in these 4 bytes from", "start": 975.48, "duration": 9.93}, {"text": "136 to 139 and when you store an array", "start": 979.94, "duration": 8.199}, {"text": "you need a bunch of consecutive bytes", "start": 985.41, "duration": 4.799}, {"text": "and that's basically why you won't be", "start": 988.139, "duration": 4.351}, {"text": "able to just add more bytes to this", "start": 990.209, "duration": 4.711}, {"text": "array and actually if you wanted to", "start": 992.49, "duration": 4.92}, {"text": "still add 2 more numbers to this array", "start": 994.92, "duration": 4.5}, {"text": "what you would need to do is you will", "start": 997.41, "duration": 4.83}, {"text": "need to create an entirely new array you", "start": 999.42, "duration": 5.37}, {"text": "know over here in memory and you would", "start": 1002.24, "duration": 5.07}, {"text": "need to make that array longer than the", "start": 1004.79, "duration": 3.27}, {"text": "original array", "start": 1007.31, "duration": 3.12}, {"text": "you know let's say length 5 instead of", "start": 1008.06, "duration": 6.899}, {"text": "length 3 and copy over these numbers one", "start": 1010.43, "duration": 7.2}, {"text": "by one to the new array and you would", "start": 1014.959, "duration": 5.31}, {"text": "probably create this array dynamically", "start": 1017.63, "duration": 5.13}, {"text": "and this word dynamically is important", "start": 1020.269, "duration": 4.081}, {"text": "but if you don't know what it means", "start": 1022.76, "duration": 4.169}, {"text": "exactly don't worry about it for now and", "start": 1024.35, "duration": 4.5}, {"text": "then if you wanted to add even more", "start": 1026.929, "duration": 4.591}, {"text": "numbers let's say three more numbers to", "start": 1028.85, "duration": 5.01}, {"text": "the new array that's longer than the", "start": 1031.52, "duration": 4.23}, {"text": "original rate then you would actually", "start": 1033.86, "duration": 4.74}, {"text": "need to create a new array again which", "start": 1035.75, "duration": 5.189}, {"text": "is even longer than the second array and", "start": 1038.6, "duration": 5.16}, {"text": "then copy over all the elements to the", "start": 1040.939, "duration": 5.551}, {"text": "new array again so you might think this", "start": 1043.76, "duration": 4.919}, {"text": "whole strategy is a little bit awkward", "start": 1046.49, "duration": 4.29}, {"text": "because you need to keep creating new", "start": 1048.679, "duration": 4.651}, {"text": "arrays and maybe keep deleting the old", "start": 1050.78, "duration": 4.8}, {"text": "arrays but that's actually what's used", "start": 1053.33, "duration": 4.71}, {"text": "in practice often so if you wanted to", "start": 1055.58, "duration": 4.95}, {"text": "create sort of a resize of all array you", "start": 1058.04, "duration": 4.59}, {"text": "know a kind of array a kind of new array", "start": 1060.53, "duration": 4.83}, {"text": "you might say that can accommodate as", "start": 1062.63, "duration": 4.71}, {"text": "many elements as you want to put in", "start": 1065.36, "duration": 4.439}, {"text": "there this is one strategy for doing", "start": 1067.34, "duration": 2.94}, {"text": "that", "start": 1069.799, "duration": 4.021}, {"text": "so for this you know resizable ray you", "start": 1070.28, "duration": 6.75}, {"text": "can initialize it as a small array let's", "start": 1073.82, "duration": 5.61}, {"text": "say ten elements and then when you want", "start": 1077.03, "duration": 4.83}, {"text": "to put in the eleventh element you can", "start": 1079.43, "duration": 5.16}, {"text": "make a new array that can accommodate", "start": 1081.86, "duration": 4.86}, {"text": "you know twenty items instead and then", "start": 1084.59, "duration": 4.65}, {"text": "copy over old items to that new one and", "start": 1086.72, "duration": 4.8}, {"text": "then keep going like that you know 28", "start": 1089.24, "duration": 2.91}, {"text": "elements", "start": 1091.52, "duration": 2.79}, {"text": "forty elements and then length eighty", "start": 1092.15, "duration": 4.32}, {"text": "and so on and this is actually the", "start": 1094.31, "duration": 5.37}, {"text": "essence of how many sort of resizable", "start": 1096.47, "duration": 5.19}, {"text": "arrays work in different programming", "start": 1099.68, "duration": 5.46}, {"text": "languages so for example in Python you", "start": 1101.66, "duration": 5.82}, {"text": "might see you know the Python lists and", "start": 1105.14, "duration": 4.83}, {"text": "in Java you might have used the array", "start": 1107.48, "duration": 4.89}, {"text": "list they might not look like resizable", "start": 1109.97, "duration": 4.26}, {"text": "arrays when you look at them or when you", "start": 1112.37, "duration": 3.9}, {"text": "use them but actually if you look at the", "start": 1114.23, "duration": 4.26}, {"text": "source code if you you know sort of look", "start": 1116.27, "duration": 4.8}, {"text": "inside a hood that's how they are", "start": 1118.49, "duration": 5.58}, {"text": "implemented okay so this was actually a", "start": 1121.07, "duration": 5.82}, {"text": "somewhat simplified explanation of these", "start": 1124.07, "duration": 5.58}, {"text": "topics arrays and memory and you'll be", "start": 1126.89, "duration": 4.92}, {"text": "able to actually start using them to", "start": 1129.65, "duration": 4.08}, {"text": "start building more complex data", "start": 1131.81, "duration": 3.15}, {"text": "structures that you got to learn", "start": 1133.73, "duration": 3.81}, {"text": "throughout this course like hash tables", "start": 1134.96, "duration": 5.4}, {"text": "and trees and by the way when I was", "start": 1137.54, "duration": 4.89}, {"text": "doing some research for this video I", "start": 1140.36, "duration": 4.59}, {"text": "actually used this video sponsors", "start": 1142.43, "duration": 5.01}, {"text": "website a lot and it's called brilliant", "start": 1144.95, "duration": 5.76}, {"text": "org so for my research I was using this", "start": 1147.44, "duration": 5.79}, {"text": "computer memory course and the section I", "start": 1150.71, "duration": 4.89}, {"text": "used the most is called linear memory", "start": 1153.23, "duration": 4.74}, {"text": "model which is in the introduction to", "start": 1155.6, "duration": 4.65}, {"text": "memory chapter this linear memory model", "start": 1157.97, "duration": 3.93}, {"text": "section basically gives you a more", "start": 1160.25, "duration": 3.78}, {"text": "detailed picture of what I explained in", "start": 1161.9, "duration": 4.62}, {"text": "this video about memory and it comes", "start": 1164.03, "duration": 4.14}, {"text": "with a bunch of practice problems too", "start": 1166.52, "duration": 4.59}, {"text": "like I said in my last video applying", "start": 1168.17, "duration": 4.44}, {"text": "what you've learned is through solving", "start": 1171.11, "duration": 3.45}, {"text": "problems is a good way to solidify your", "start": 1172.61, "duration": 3.83}, {"text": "understanding of the topic and", "start": 1174.56, "duration": 4.05}, {"text": "personally I found that going through", "start": 1176.44, "duration": 4.93}, {"text": "this section helped me refresh and", "start": 1178.61, "duration": 4.71}, {"text": "solidify my understanding of how memory", "start": 1181.37, "duration": 4.44}, {"text": "works and this linear memory model", "start": 1183.32, "duration": 4.47}, {"text": "section actually assumes that you're", "start": 1185.81, "duration": 3.84}, {"text": "already familiar with binary and", "start": 1187.79, "duration": 4.23}, {"text": "hexadecimal numbers so if you want a", "start": 1189.65, "duration": 5.01}, {"text": "quick refresher on those I'd get started", "start": 1192.02, "duration": 4.83}, {"text": "with the previous section instead and", "start": 1194.66, "duration": 4.83}, {"text": "that one is called binary this mode and", "start": 1196.85, "duration": 4.74}, {"text": "hexadecimal if you want to check it out", "start": 1199.49, "duration": 4.53}, {"text": "for yourself you can go to brilliant org", "start": 1201.59, "duration": 6.78}, {"text": "/ch dojo okay as always i'm YK from CS", "start": 1204.02, "duration": 6.63}, {"text": "dojo thanks for watching and you know", "start": 1208.37, "duration": 4.17}, {"text": "hopefully you can keep what you've", "start": 1210.65, "duration": 4.5}, {"text": "learned in this video in your memory as", "start": 1212.54, "duration": 5.55}, {"text": "well as your storage I guess anyway I'll", "start": 1215.15, "duration": 6.05}, {"text": "see you guys in the next video", "start": 1218.09, "duration": 3.11}]