[{"text": "[MUSIC PLAYING]", "start": 0.0, "duration": 3.486}, {"text": "DAVID J. MALAN: All right, this is\nCS50 and this is a lecture four.", "start": 50.3, "duration": 4.05}, {"text": "So we're here in beautiful\nLowell Lecture Hall", "start": 54.35, "duration": 2.16}, {"text": "and Sanders is in use today.", "start": 56.51, "duration": 1.32}, {"text": "And we're joined by some\nfriends that will soon", "start": 57.83, "duration": 1.958}, {"text": "be clear and present in just a moment.", "start": 59.788, "duration": 2.822}, {"text": "But before then, recall that last\ntime we took a look at CS50 IDE.", "start": 62.61, "duration": 3.53}, {"text": "This was a new web-based programming\nenvironment similar in spirit", "start": 66.14, "duration": 2.85}, {"text": "to CS50 Sandbox and CS50 Lab,\nbut added a few features.", "start": 68.99, "duration": 3.48}, {"text": "For instance, what features\ndid it add to you--", "start": 72.47, "duration": 4.17}, {"text": "to your capabilities?", "start": 76.64, "duration": 0.98}, {"text": "Yeah?", "start": 77.62, "duration": 0.5}, {"text": "AUDIENCE: Debugger.", "start": 78.12, "duration": 0.92}, {"text": "DAVID J. MALAN: What's that?", "start": 79.04, "duration": 0.49}, {"text": "AUDIENCE: The debugger.", "start": 79.53, "duration": 0.68}, {"text": "DAVID J. MALAN: The debugger.", "start": 80.21, "duration": 0.67}, {"text": "So debug50, which opens\nthat side panel that", "start": 80.88, "duration": 2.24}, {"text": "allows you to step through your code,\nstep by step, and see variables.", "start": 83.12, "duration": 3.13}, {"text": "Yeah?", "start": 86.25, "duration": 0.5}, {"text": "AUDIENCE: Check50.", "start": 86.75, "duration": 0.92}, {"text": "DAVID J. MALAN: Sorry, say again?", "start": 87.67, "duration": 0.6}, {"text": "AUDIENCE: Check50.", "start": 88.27, "duration": 0.59}, {"text": "DAVID J. MALAN: Check50 as well,\nwhich is a CS50 specific tool that", "start": 88.86, "duration": 2.84}, {"text": "allows you to check the\ncorrectness of your code", "start": 91.7, "duration": 1.71}, {"text": "much like the teaching fellows\nwould when providing feedback on it.", "start": 93.41, "duration": 3.0}, {"text": "Running a series of tests\nthat pretty much are", "start": 96.41, "duration": 2.199}, {"text": "the same tests that a\nlot of the homework's", "start": 98.609, "duration": 1.791}, {"text": "will encourage you\nyourself to run manually,", "start": 100.4, "duration": 2.01}, {"text": "but it just automates the process.", "start": 102.41, "duration": 1.56}, {"text": "And anything else?", "start": 103.97, "duration": 0.749}, {"text": "AUDIENCE: [INAUDIBLE]", "start": 104.719, "duration": 6.301}, {"text": "DAVID J. MALAN: So that is true too.", "start": 111.02, "duration": 1.5}, {"text": "There's a little hidden Easter egg\nthat we don't use this semester,", "start": 112.52, "duration": 3.01}, {"text": "but yes indeed.", "start": 115.53, "duration": 0.87}, {"text": "If you look for a\nsmall puzzle piece, you", "start": 116.4, "duration": 2.25}, {"text": "can actually convert your C code\nback to Scratch like puzzle pieces", "start": 118.65, "duration": 3.78}, {"text": "and back and forth, and back to forth,\nthanks to Kareem and some of the team.", "start": 122.43, "duration": 3.827}, {"text": "So that is there, but by\nnow, it's probably better", "start": 126.257, "duration": 2.083}, {"text": "to get comfortable with text as well.", "start": 128.34, "duration": 1.589}, {"text": "So there's a couple of\nour other tools that we've", "start": 129.929, "duration": 2.041}, {"text": "used over time of course\nbesides check50 and debug50.", "start": 131.97, "duration": 3.81}, {"text": "We've of course used printf\nand when is printf useful?", "start": 135.78, "duration": 4.26}, {"text": "Like when might you want to use it\nbeyond needing to just print something", "start": 140.04, "duration": 3.99}, {"text": "because the problem set tells you to.", "start": 144.03, "duration": 1.68}, {"text": "Yeah?", "start": 145.71, "duration": 0.18}, {"text": "AUDIENCE: To find where your bug is.", "start": 145.89, "duration": 1.59}, {"text": "DAVID J. MALAN: Yeah, so\nto find where your bug is.", "start": 147.48, "duration": 2.125}, {"text": "If you just, kind of, want to print out\nvariables, value or some kind of text", "start": 149.605, "duration": 3.377}, {"text": "so you know what's going on\nand you don't necessarily", "start": 152.982, "duration": 2.208}, {"text": "want to deploy debug50, you can do that.", "start": 155.19, "duration": 1.81}, {"text": "When else?", "start": 157.0, "duration": 0.5}, {"text": "AUDIENCE: If you have a long\nformula for something [INAUDIBLE]", "start": 157.5, "duration": 3.872}, {"text": "and you want to see [INAUDIBLE].", "start": 161.372, "duration": 1.894}, {"text": "DAVID J. MALAN: Good.", "start": 163.266, "duration": 0.874}, {"text": "Yeah.", "start": 164.14, "duration": 0.499}, {"text": "AUDIENCE: How running-- like\ngoing through debug50 50 times.", "start": 164.639, "duration": 3.853}, {"text": "DAVID J. MALAN: Indeed.", "start": 168.492, "duration": 0.958}, {"text": "Well, in real life-- so you\nmight want to use printf", "start": 169.45, "duration": 2.166}, {"text": "when you have maybe a nested loop, and\nyou want to put a printf inside loop", "start": 171.616, "duration": 3.574}, {"text": "so as to see when it kicks in.", "start": 175.19, "duration": 1.82}, {"text": "Of course, you could\nuse debug50, but you", "start": 177.01, "duration": 2.19}, {"text": "might end up running debug50 or clicking\nnext, next, next, next, next, next,", "start": 179.2, "duration": 3.344}, {"text": "next so many times that\ngets a little tedious.", "start": 182.544, "duration": 1.916}, {"text": "But do keep in mind, you can just put\na breakpoint deeper into your code", "start": 184.46, "duration": 3.56}, {"text": "as well and perhaps remove an\nearlier breakpoint as well.", "start": 188.02, "duration": 2.812}, {"text": "And honestly, all the time, whether\nit's in C or other languages,", "start": 190.832, "duration": 2.708}, {"text": "do I find myself occasionally using\nprintf just to type out printf in here", "start": 193.54, "duration": 4.86}, {"text": "just so that I can literally see if\nmy code got to a certain point in here", "start": 198.4, "duration": 4.181}, {"text": "to see if something's printed.", "start": 202.581, "duration": 1.249}, {"text": "But the debugger you're\ngoing to find now", "start": 203.83, "duration": 1.38}, {"text": "and hence forth so much more\npowerful, so much more versatile.", "start": 205.21, "duration": 2.85}, {"text": "So if you haven't already gotten to\nthe habit of using debug50 by all", "start": 208.06, "duration": 3.22}, {"text": "means start and use those breakpoints\nto actually walk through your code", "start": 211.28, "duration": 3.44}, {"text": "where you care to see what's going on.", "start": 214.72, "duration": 1.736}, {"text": "So style50, of course, checks the style\nof your code much like the teaching", "start": 216.456, "duration": 3.124}, {"text": "fellows might, and it\nshows you in red or green", "start": 219.58, "duration": 2.39}, {"text": "what spaces you might want to\ndelete, what spaces you might", "start": 221.97, "duration": 2.469}, {"text": "want to add just to pretty things up.", "start": 224.439, "duration": 1.541}, {"text": "So it's more readable\nfor you and others.", "start": 225.98, "duration": 1.708}, {"text": "And then what about help50?", "start": 227.688, "duration": 1.432}, {"text": "When should you instinctively\nreach for help50?", "start": 229.12, "duration": 3.42}, {"text": "AUDIENCE: When you don't\nunderstand an error message.", "start": 232.54, "duration": 2.705}, {"text": "DAVID J. MALAN: Exactly.", "start": 235.245, "duration": 1.0}, {"text": "Yeah, when you don't\nunderstand an error message.", "start": 236.245, "duration": 1.775}, {"text": "So you're compiling something.", "start": 238.02, "duration": 1.03}, {"text": "You're running a command.", "start": 239.05, "duration": 0.84}, {"text": "It doesn't really quite work and\nyou're seeing a cryptic error message.", "start": 239.89, "duration": 2.76}, {"text": "Eventually, you'll get the muscle\nmemory and the sort of exposure", "start": 242.65, "duration": 2.708}, {"text": "to just know, oh, I\nremember what that means.", "start": 245.358, "duration": 1.912}, {"text": "But until then, run help50 at the\nbeginning of that same command,", "start": 247.27, "duration": 3.03}, {"text": "and it's going to try to\ndetect what your error is", "start": 250.3, "duration": 2.91}, {"text": "and provide TF-like feedback on\nhow to actually work around that.", "start": 253.21, "duration": 4.05}, {"text": "You'll see two on the course's\nwebsite is a wonderful handout made", "start": 257.26, "duration": 4.86}, {"text": "by Emily Hong, one of\nour own teaching fellows,", "start": 262.12, "duration": 2.55}, {"text": "that introduces all of\nthese tools, and a few more,", "start": 264.67, "duration": 2.25}, {"text": "and gets you into the habit\nof thinking about things.", "start": 266.92, "duration": 2.677}, {"text": "It's kind of a flow chart.", "start": 269.597, "duration": 1.083}, {"text": "If I have this problem,\nthen do this or else", "start": 270.68, "duration": 1.97}, {"text": "if I have this problem\ndo this other thing.", "start": 272.65, "duration": 1.99}, {"text": "So to check that out as well.", "start": 274.64, "duration": 1.8}, {"text": "But today, let's introduce\nreally the last, certainly for C,", "start": 276.44, "duration": 3.414}, {"text": "of our command line tools\nthat's going to help", "start": 279.854, "duration": 1.916}, {"text": "you chase down problems in your code.", "start": 281.77, "duration": 2.58}, {"text": "Last week, recall that we had\ntalked about memory a lot.", "start": 284.35, "duration": 3.04}, {"text": "We talked about malloc,\nallocating memory,", "start": 287.39, "duration": 2.15}, {"text": "and we talked about freeing\nmemory and the like.", "start": 289.54, "duration": 2.07}, {"text": "But it turns out, you\ncan do a lot of damage", "start": 291.61, "duration": 2.04}, {"text": "when you start playing with memory.", "start": 293.65, "duration": 1.57}, {"text": "In fact, probably by now, almost\neveryone-- segmentation fault?", "start": 295.22, "duration": 3.62}, {"text": "[LAUGHTER]", "start": 298.84, "duration": 0.75}, {"text": "Yeah, so that's just one of the\nerrors that you might run into,", "start": 299.59, "duration": 2.91}, {"text": "and frankly, you might have\nerrors in your code now", "start": 302.5, "duration": 3.57}, {"text": "and hence forth that have bugs\nbut you don't even realize it", "start": 306.07, "duration": 2.604}, {"text": "because you're just getting lucky.", "start": 308.674, "duration": 1.416}, {"text": "And the program is just not\ncrashing or it's not freezing,", "start": 310.09, "duration": 3.097}, {"text": "but this can still happen.", "start": 313.187, "duration": 1.083}, {"text": "And so Valgrind is a command\nline program that is probably", "start": 314.27, "duration": 3.62}, {"text": "looks the scariest of\nthe tools we've used,", "start": 317.89, "duration": 1.81}, {"text": "but you can also use\nit with help50, that", "start": 319.7, "duration": 1.91}, {"text": "just tries to find what are called\nmemory leaks in your program.", "start": 321.61, "duration": 3.189}, {"text": "Recall that last week\nwe introduced malloc,", "start": 324.799, "duration": 1.791}, {"text": "and malloc lets you allocate memory.", "start": 326.59, "duration": 1.99}, {"text": "But if you don't free that memory, by\nliterally calling the free function,", "start": 328.58, "duration": 4.25}, {"text": "you're going to constantly ask your\noperating system, MacOS, Linux,", "start": 332.83, "duration": 3.16}, {"text": "Windows, whatever, can\nI have more memory?", "start": 335.99, "duration": 1.822}, {"text": "Can I have more memory?", "start": 337.812, "duration": 0.958}, {"text": "Can I have more memory?", "start": 338.77, "duration": 0.958}, {"text": "And if you never, literally, hand it\nback by calling free your computer", "start": 339.728, "duration": 3.032}, {"text": "may very well slow down\nor freeze or crash.", "start": 342.76, "duration": 2.81}, {"text": "And frankly, if you've ever had that\nhappen on your Mac or PC, very likely", "start": 345.57, "duration": 3.43}, {"text": "that's what some human accidentally did.", "start": 349.0, "duration": 1.92}, {"text": "He or she just allocated\nmore and more memory", "start": 350.92, "duration": 2.19}, {"text": "but never really got around\nto freeing that memory.", "start": 353.11, "duration": 2.95}, {"text": "So Valgrind can help you find those\nmistakes before you or your users do.", "start": 356.06, "duration": 3.89}, {"text": "So let's do a quick example, let\nme go CS50 IDE, and let me go ahead", "start": 359.95, "duration": 4.68}, {"text": "and make one new program here.", "start": 364.63, "duration": 2.55}, {"text": "We'll call it memory.c because\nwe'll see later today how", "start": 367.18, "duration": 3.18}, {"text": "I might chase down those memory leaks.", "start": 370.36, "duration": 1.914}, {"text": "But for now, let's start with something\neven simpler, which all of you", "start": 372.274, "duration": 2.916}, {"text": "may be done by now, which is\nto accidentally touch memory", "start": 375.19, "duration": 3.379}, {"text": "that you shouldn't, changing it, reading\nit and let's see what this might mean.", "start": 378.569, "duration": 3.291}, {"text": "So let me do the\nfamiliar at the top here.", "start": 381.86, "duration": 3.47}, {"text": "Include standard IO.", "start": 385.33, "duration": 3.345}, {"text": "Well, let's not even do that yet.", "start": 388.675, "duration": 1.375}, {"text": "Let's just do this first.", "start": 390.05, "duration": 1.041}, {"text": "Let's do int, main(void),\njust to start a simple program", "start": 391.091, "duration": 3.149}, {"text": "and in here let me go ahead and\njust call a function called f.", "start": 394.24, "duration": 4.2}, {"text": "I don't really care what\nits name is for today.", "start": 398.44, "duration": 2.01}, {"text": "I just want to call a function\nf, and then that's it.", "start": 400.45, "duration": 3.33}, {"text": "Now this function f, let me go ahead\nand define it as follows, void f(void).", "start": 403.78, "duration": 3.84}, {"text": "It's not going to do\nmuch of anything at all.", "start": 407.62, "duration": 2.414}, {"text": "But let's suppose, just for the sake\nof discussion, that f's purpose in life", "start": 410.034, "duration": 3.166}, {"text": "is just to allocate memory\nfor whatever useful purpose,", "start": 413.2, "duration": 2.58}, {"text": "but for now it's just\nfor demonstration's sake.", "start": 415.78, "duration": 2.7}, {"text": "So what's the function with\nwhich you can allocate memory?", "start": 418.48, "duration": 3.35}, {"text": "AUDIENCE: Malloc.", "start": 421.83, "duration": 0.88}, {"text": "DAVID J. MALAN: Malloc.", "start": 422.71, "duration": 0.958}, {"text": "So suppose I want malloc\nspace for, I don't know,", "start": 423.668, "duration": 2.822}, {"text": "something simple like just one integer.", "start": 426.49, "duration": 1.949}, {"text": "We're just doing this for\ndemonstration purposes,", "start": 428.439, "duration": 2.041}, {"text": "or actually let's do more,\n10 integers, 10 integers.", "start": 430.48, "duration": 2.94}, {"text": "I could, of course, do-- well, give me\n10, but how many bytes do what I want?", "start": 433.42, "duration": 4.38}, {"text": "How many bytes do I\nneed for 10 integers?", "start": 437.8, "duration": 2.01}, {"text": "AUDIENCE: sizeof(int).", "start": 439.81, "duration": 0.99}, {"text": "DAVID J. MALAN: Yeah, so I\ncan do literally sizeof(int)", "start": 440.8, "duration": 2.74}, {"text": "and most likely the size\nof an int is going to be?", "start": 443.54, "duration": 4.532}, {"text": "AUDIENCE: Four.", "start": 448.072, "duration": 0.657}, {"text": "DAVID J. MALAN: Four, probably.", "start": 448.729, "duration": 1.291}, {"text": "On many systems today, it's\njust 4 bytes or 32 bits,", "start": 450.02, "duration": 2.73}, {"text": "but you don't want to hard code that\nlest someone else's computer not use", "start": 452.75, "duration": 3.45}, {"text": "those same values.", "start": 456.2, "duration": 0.97}, {"text": "So the size of an int.", "start": 457.17, "duration": 1.11}, {"text": "So 10 times the size of an int.", "start": 458.28, "duration": 1.7}, {"text": "Malloc returns what type of data?", "start": 459.98, "duration": 2.29}, {"text": "What does that hand me back?", "start": 462.27, "duration": 2.984}, {"text": "AUDIENCE: [INAUDIBLE]", "start": 465.254, "duration": 1.488}, {"text": "DAVID J. MALAN: Yeah, returns\nan address or a pointer.", "start": 466.742, "duration": 2.258}, {"text": "Specifically, the address, 100, 900,\nwhatever, of the chunk of memory", "start": 469.0, "duration": 4.6}, {"text": "it just allocated for you.", "start": 473.6, "duration": 1.6}, {"text": "So if I want to keep that around,\nI need to declare a pointer.", "start": 475.2, "duration": 3.2}, {"text": "Let's just call it x for today\nthat stores that address.", "start": 478.4, "duration": 2.67}, {"text": "Could call it x, y, z, whatever, but\nit's not an int that it's returning.", "start": 481.07, "duration": 3.36}, {"text": "It's the address of an int.", "start": 484.43, "duration": 1.29}, {"text": "And remember, that's what\nthe star operator now means.", "start": 485.72, "duration": 2.25}, {"text": "The address of some data type.", "start": 487.97, "duration": 2.04}, {"text": "It's just a number.", "start": 490.01, "duration": 1.26}, {"text": "All right, so now if I were to--", "start": 491.27, "duration": 3.06}, {"text": "first, let's clean this up.", "start": 494.33, "duration": 1.35}, {"text": "Turns out that you use malloc,\nI need to use stdlib.h.", "start": 495.68, "duration": 4.41}, {"text": "We saw that last week, albeit\nbriefly, and then of course", "start": 500.09, "duration": 2.58}, {"text": "if I'm going to call f, what do\nI have to do to fix this code?", "start": 502.67, "duration": 3.72}, {"text": "AUDIENCE: You need to declare.", "start": 506.39, "duration": 1.44}, {"text": "DAVID J. MALAN: Yeah, I\nneed to declare it up here,", "start": 507.83, "duration": 2.124}, {"text": "or I could just move f's\nimplementation up top.", "start": 509.954, "duration": 2.195}, {"text": "So I think this works, even\nthough this program at the moment", "start": 512.149, "duration": 2.541}, {"text": "is completely stupid.", "start": 514.69, "duration": 0.89}, {"text": "It doesn't do anything useful,\nbut it will allocate memory.", "start": 515.58, "duration": 2.93}, {"text": "And I'll do something\nwith it as follows.", "start": 518.51, "duration": 2.5}, {"text": "If I want to change the first\nvalue in this chunk of memory,", "start": 521.01, "duration": 4.349}, {"text": "well how might I do that?", "start": 525.359, "duration": 1.041}, {"text": "Well, I've asked the computer\nfor 10 integers or rather space", "start": 526.4, "duration": 4.62}, {"text": "for 10 integers.", "start": 531.02, "duration": 1.347}, {"text": "What's interesting about\nmalloc is that when", "start": 532.367, "duration": 1.833}, {"text": "it returns a chunk of memory for\nyou it's contiguous, back-to-back.", "start": 534.2, "duration": 4.366}, {"text": "And when you hear\ncontiguous or back-to-back,", "start": 538.566, "duration": 1.874}, {"text": "what kind of data structure\ndoes that recall to mind?", "start": 540.44, "duration": 3.27}, {"text": "AUDIENCE: An array.", "start": 543.71, "duration": 0.859}, {"text": "DAVID J. MALAN: An array.", "start": 544.569, "duration": 1.041}, {"text": "So it turns out we can treat\nthis just random chunk of memory", "start": 545.61, "duration": 3.68}, {"text": "like it's an array.", "start": 549.29, "duration": 1.15}, {"text": "So if we want to go to the first\nlocation in that array of memory,", "start": 550.44, "duration": 3.86}, {"text": "I can just do this and\nput in the number say 50.", "start": 554.3, "duration": 3.9}, {"text": "Or if I want to go to the\nnext location, I can do this.", "start": 558.2, "duration": 3.48}, {"text": "Or if I want to do the next\nlocation, I can do this.", "start": 561.68, "duration": 2.73}, {"text": "Or if I want to go to the last\nlocation, I might do this,", "start": 564.41, "duration": 2.79}, {"text": "but is that good or bad?", "start": 567.2, "duration": 4.864}, {"text": "AUDIENCE: Bad.", "start": 572.064, "duration": 0.886}, {"text": "DAVID J. MALAN: Why bad?", "start": 572.95, "duration": 1.002}, {"text": "AUDIENCE: It's-- it's out of bounds", "start": 573.952, "duration": 1.608}, {"text": "DAVID J. MALAN: Yeah,\nso it's out of bounds.", "start": 575.56, "duration": 1.3}, {"text": "Right?", "start": 576.86, "duration": 0.5}, {"text": "This is sort of week one style\nmistakes when it came to loops.", "start": 577.36, "duration": 2.59}, {"text": "Recall, with for loops or while\nloops, you might go a little too far,", "start": 579.95, "duration": 2.41}, {"text": "and that's fine.", "start": 582.36, "duration": 0.9}, {"text": "But now we actually will\nsee we have a tool that", "start": 583.26, "duration": 2.24}, {"text": "can help us notice these things.", "start": 585.5, "duration": 1.54}, {"text": "So hopefully, just visually, it's\napparent that what I have going on here", "start": 587.04, "duration": 3.74}, {"text": "is just-- on line 12,\nI have a variable x", "start": 590.78, "duration": 4.02}, {"text": "that storing the address\nof that chunk of memory.", "start": 594.8, "duration": 2.07}, {"text": "And then on line 13, I'm just\ntrying to access location 10", "start": 596.87, "duration": 4.02}, {"text": "and set the value 50 there.", "start": 600.89, "duration": 1.29}, {"text": "But as you note, there\nis no location 10.", "start": 602.18, "duration": 2.28}, {"text": "There's location 0, 1, 2, 3, all\nthe way through 9, of course.", "start": 604.46, "duration": 4.29}, {"text": "So how might we detect\nthis with a program?", "start": 608.75, "duration": 2.05}, {"text": "Well, let me go ahead and increase\nmy terminal window just a bit", "start": 610.8, "duration": 2.666}, {"text": "here, save my file, and let me\ngo ahead and compile make memory.", "start": 613.466, "duration": 4.094}, {"text": "OK, all is well.", "start": 617.56, "duration": 1.09}, {"text": "It compiled without any\nerror messages, and now", "start": 618.65, "duration": 2.04}, {"text": "let me go ahead and run memory, enter.", "start": 620.69, "duration": 3.547}, {"text": "All right, so that worked pretty well.", "start": 624.237, "duration": 1.583}, {"text": "Let's actually be a little more\nexplicit here just for good measure.", "start": 625.82, "duration": 3.194}, {"text": "Let me go ahead and print something out.", "start": 629.014, "duration": 1.666}, {"text": "So printf, %i for an integer, and\nlet's make it just more explicit.", "start": 630.68, "duration": 5.61}, {"text": "You inputted %i and\nthen comma x bracket 10.", "start": 636.29, "duration": 5.85}, {"text": "And what do I have to\ninclude you use printf?", "start": 642.14, "duration": 4.265}, {"text": "AUDIENCE: stdio.h.", "start": 646.405, "duration": 0.915}, {"text": "DAVID J. MALAN: Yeah, so stdio.", "start": 647.32, "duration": 1.291}, {"text": "So let's just quickly\nadd that, stdio.h, save.", "start": 648.611, "duration": 3.329}, {"text": "All right, let me recompile\nthis, make memory, enter.", "start": 651.94, "duration": 3.06}, {"text": "And now let me go ahead and do ./memory.", "start": 655.0, "duration": 4.41}, {"text": "Huh?", "start": 659.41, "duration": 1.2}, {"text": "Feels like it's a correct program.", "start": 660.61, "duration": 1.859}, {"text": "And yet, for a couple of weeks now\nwe've been claiming that mm-hmm,", "start": 662.469, "duration": 2.791}, {"text": "don't do that.", "start": 665.26, "duration": 1.23}, {"text": "Don't go beyond the\nboundaries of your array.", "start": 666.49, "duration": 2.61}, {"text": "So how do we reconcile this?", "start": 669.1, "duration": 1.252}, {"text": "Feels like buggy code or at least\nwe've told you it's buggy code,", "start": 670.352, "duration": 2.708}, {"text": "and yet it's working.", "start": 673.06, "duration": 0.875}, {"text": "Yeah?", "start": 676.301, "duration": 0.499}, {"text": "AUDIENCE: [INAUDIBLE]", "start": 676.8, "duration": 2.473}, {"text": "DAVID J. MALAN: That's a\ngood way of putting it.", "start": 679.273, "duration": 1.999}, {"text": "AUDIENCE: It's still very similar.", "start": 681.272, "duration": 1.804}, {"text": "We want that.", "start": 683.076, "duration": 0.904}, {"text": "DAVID J. MALAN: OK.", "start": 683.98, "duration": 0.791}, {"text": "AUDIENCE: So we can theoretically--", "start": 684.771, "duration": 2.349}, {"text": "it just created a program.", "start": 687.12, "duration": 2.782}, {"text": "DAVID J. MALAN: Yeah, and I\nthink if I heard you correctly,", "start": 689.902, "duration": 2.458}, {"text": "you said C doesn't\nscream if you go too far?", "start": 692.36, "duration": 2.706}, {"text": "AUDIENCE: Yeah.", "start": 695.066, "duration": 0.624}, {"text": "DAVID J. MALAN: Yeah, OK.", "start": 695.69, "duration": 0.38}, {"text": "So that's a good way of putting it.", "start": 696.07, "duration": 1.458}, {"text": "Like, you can get\nlucky in C. And you can", "start": 697.528, "duration": 2.112}, {"text": "do something that is objectively,\npedagogically, like technically wrong,", "start": 699.64, "duration": 4.067}, {"text": "but the computer's not going to crash.", "start": 703.707, "duration": 1.583}, {"text": "It's not going to freeze\nbecause you just get lucky.", "start": 705.29, "duration": 1.5}, {"text": "Because often, for\nperformance reasons, when", "start": 706.79, "duration": 2.18}, {"text": "you allocate space for\n10 integers, you're", "start": 708.97, "duration": 2.25}, {"text": "actually going to get\na chunk of memory back", "start": 711.22, "duration": 1.89}, {"text": "that's a little bigger than you need.", "start": 713.11, "duration": 1.541}, {"text": "It's just not safe to assume\nthat it's bigger than you need,", "start": 714.651, "duration": 3.521}, {"text": "but you might just get lucky.", "start": 718.172, "duration": 1.208}, {"text": "And you might end up having more memory\nthat you can technically get away", "start": 719.38, "duration": 3.041}, {"text": "with touching or accessing or changing,\nand the computer's not going to notice.", "start": 722.421, "duration": 3.359}, {"text": "But that's not safe because\non someone else's Mac or PC,", "start": 725.78, "duration": 2.334}, {"text": "their computer might just be operating\na little bit differently than yours,", "start": 728.114, "duration": 3.124}, {"text": "and bam, that bug is going\nto bite them and not you.", "start": 731.238, "duration": 2.542}, {"text": "And those are the hardest, most annoying\nbugs to chase down as some of you", "start": 733.78, "duration": 3.21}, {"text": "might have experienced.", "start": 736.99, "duration": 0.81}, {"text": "Right?", "start": 737.8, "duration": 0.499}, {"text": "It works on your computer but\nnot a friends or vise versa.", "start": 738.299, "duration": 2.901}, {"text": "These are the kinds of\nexplanations for that.", "start": 741.2, "duration": 2.12}, {"text": "So Valgrind can help us track down\neven these most subtle errors.", "start": 743.32, "duration": 3.57}, {"text": "The program seems to be working.", "start": 746.89, "duration": 1.78}, {"text": "Check50 or tools like\nit might even assume", "start": 748.67, "duration": 1.756}, {"text": "that it's working because it\nis printing the right thing,", "start": 750.426, "duration": 2.374}, {"text": "but let's take a look at what\nthis program Valgrind thinks.", "start": 752.8, "duration": 3.21}, {"text": "Let me increase the size of\nthe terminal window here,", "start": 756.01, "duration": 2.73}, {"text": "and go ahead and type\nin Valgrind ./memory.", "start": 758.74, "duration": 3.24}, {"text": "So same program name ./memory but I'm\nprefixing it with the name Valgrind.", "start": 761.98, "duration": 5.26}, {"text": "All right?", "start": 767.24, "duration": 0.5}, {"text": "Unfortunately, Valgrind\nis really quite ugly,", "start": 767.74, "duration": 2.28}, {"text": "and it prints out a whole\nbunch of stuff here.", "start": 770.02, "duration": 2.47}, {"text": "So let's take a look.", "start": 772.49, "duration": 1.01}, {"text": "At the very top, you'll see\nall these numbers on the left,", "start": 773.5, "duration": 2.83}, {"text": "and that's just an\nunfortunate aesthetic.", "start": 776.33, "duration": 1.82}, {"text": "But we do see some useful information.", "start": 778.15, "duration": 2.3}, {"text": "Invalid read of size 4 and\nthen it has these cryptic", "start": 780.45, "duration": 3.13}, {"text": "looking letters and numbers.", "start": 783.58, "duration": 1.5}, {"text": "What are those?", "start": 785.08, "duration": 2.91}, {"text": "They're just addresses and hexadecimal.", "start": 787.99, "duration": 1.644}, {"text": "It doesn't really matter\nwhat they are, but Valgrind", "start": 789.634, "duration": 2.166}, {"text": "can tell us where the memory is\nthat's acting up suspiciously.", "start": 791.8, "duration": 3.87}, {"text": "You can then see next to that,\nthat Valgrind is pointing", "start": 795.67, "duration": 2.7}, {"text": "to function f on memory. c 15th line.", "start": 798.37, "duration": 3.39}, {"text": "So that's perhaps helpful,\nand then main on line 8", "start": 801.76, "duration": 2.567}, {"text": "because that's the\nfunction that was called.", "start": 804.327, "duration": 1.833}, {"text": "So Valgrind is actually kind of nice in\nthat it's showing us all the functions", "start": 806.16, "duration": 3.43}, {"text": "that you called from bottom up,\nmuch like the stack from last week.", "start": 809.59, "duration": 3.57}, {"text": "And so something's going wrong\nline 15, and if we go back to that,", "start": 813.16, "duration": 4.26}, {"text": "let's see line 15 was--", "start": 817.42, "duration": 2.33}, {"text": "well, sure enough.", "start": 819.75, "duration": 1.49}, {"text": "I'm actually trying to\naccess that memory location", "start": 821.24, "duration": 2.42}, {"text": "and frankly I did it on line 14 as well.", "start": 823.66, "duration": 2.38}, {"text": "So hopefully fixing one or both\nof those will address this issue.", "start": 826.04, "duration": 3.5}, {"text": "And notice here, this frankly just\ngets overwhelming pretty quickly.", "start": 829.54, "duration": 4.92}, {"text": "And then, oh, 40 bytes in one block\nare definitely lost in lost record.", "start": 834.46, "duration": 3.924}, {"text": "I mean, this is the problem\nwith Valgrind, honestly.", "start": 838.384, "duration": 2.166}, {"text": "It was written some years ago,\nnot particularly user friendly,", "start": 840.55, "duration": 3.27}, {"text": "but that's fine we have\na tool to address this.", "start": 843.82, "duration": 2.16}, {"text": "Let me go ahead and rerun\nValgrind with help50,", "start": 845.98, "duration": 3.63}, {"text": "enter, and see if we can't\njust assist with this.", "start": 849.61, "duration": 3.54}, {"text": "All right, so still the same amount of\nblack and white input but down here now", "start": 853.15, "duration": 3.84}, {"text": "help50 is noticing, oh, I can help\nyou with an invalid write of size 4.", "start": 856.99, "duration": 4.71}, {"text": "So it's still at the same\nlocation, but this time--", "start": 861.7, "duration": 2.18}, {"text": "or rather same file,\nmemory.c but line 14.", "start": 863.88, "duration": 3.07}, {"text": "And we propose, looks like you're\ntrying to modify 4 bytes of memory that", "start": 866.95, "duration": 3.6}, {"text": "isn't yours, question mark.", "start": 870.55, "duration": 1.479}, {"text": "Did you try to store something\nbeyond the bounds of an array?", "start": 872.029, "duration": 2.541}, {"text": "Take a closer look at\nline 14 of memory.c.", "start": 874.57, "duration": 3.02}, {"text": "So hopefully, even though\nValgrind's output is crazy esoteric,", "start": 877.59, "duration": 3.34}, {"text": "at least that yellow output will\npoint you toward, ah, line 14.", "start": 880.93, "duration": 2.94}, {"text": "I'm indeed touching 4 bytes,\nan integer, that shouldn't be.", "start": 883.87, "duration": 4.412}, {"text": "And so let's go ahead and fix this.", "start": 888.282, "duration": 1.458}, {"text": "If I go into my program,\nand I don't do this.", "start": 889.74, "duration": 3.31}, {"text": "Let's change it to location 9,\nand location 9 here and save.", "start": 893.05, "duration": 4.2}, {"text": "Then let me go ahead and\nrerun Valgrind without help50.", "start": 897.25, "duration": 5.43}, {"text": "All right, progress except--", "start": 902.68, "duration": 2.59}, {"text": "oops.", "start": 905.27, "duration": 0.5}, {"text": "Nope, no progress.", "start": 905.77, "duration": 1.39}, {"text": "I skipped the step.", "start": 907.16, "duration": 1.43}, {"text": "Yeah, I didn't recompile it.", "start": 908.59, "duration": 2.25}, {"text": "A little puzzled why\nI saw the same thing.", "start": 910.84, "duration": 1.75}, {"text": "So now let's rerun Valgrind\nand here it seems to be better.", "start": 912.59, "duration": 6.14}, {"text": "So I don't see that\nsame error message up", "start": 918.73, "duration": 2.1}, {"text": "at the very top like we did before, but\nnotice here, 40 bytes in one blocks.", "start": 920.83, "duration": 4.98}, {"text": "OK, that was bad grammar in\nthe program, but are definitely", "start": 925.81, "duration": 3.33}, {"text": "lost in loss record 1 of 1.", "start": 929.14, "duration": 1.405}, {"text": "So I still don't quite understand that.", "start": 930.545, "duration": 1.625}, {"text": "No big deal.", "start": 932.17, "duration": 0.93}, {"text": "Let's go ahead and run help50 and\nsee what the second of two errors", "start": 933.1, "duration": 3.48}, {"text": "apparently is here.", "start": 936.58, "duration": 1.44}, {"text": "So here it's highlighting those lines.", "start": 938.02, "duration": 2.57}, {"text": "40 bytes and one blocks are definitely\nlost, and looks like your program", "start": 940.59, "duration": 3.37}, {"text": "leaked 40 bytes of memory.", "start": 943.96, "duration": 1.59}, {"text": "Did you forget the free memory\nthat you allocated with malloc?", "start": 945.55, "duration": 2.7}, {"text": "Take a closer look at\nline 13 of memory.c.", "start": 948.25, "duration": 3.33}, {"text": "So in this case line 13\nindeed has a call to malloc.", "start": 951.58, "duration": 3.39}, {"text": "So what's the fix for this problem?", "start": 954.97, "duration": 2.946}, {"text": "AUDIENCE: Free.", "start": 957.916, "duration": 0.743}, {"text": "DAVID J. MALAN: Per help50\nor your own intuition?", "start": 958.659, "duration": 2.041}, {"text": "What do I have to add to this program?", "start": 960.7, "duration": 2.015}, {"text": "AUDIENCE: Free.", "start": 962.715, "duration": 0.625}, {"text": "AUDIENCE: Free.", "start": 963.34, "duration": 0.23}, {"text": "Yeah, free, and where does that go?", "start": 963.57, "duration": 1.458}, {"text": "Right here.", "start": 967.64, "duration": 0.78}, {"text": "So we can free the memory.", "start": 968.42, "duration": 3.27}, {"text": "Why would this be bad?", "start": 971.69, "duration": 1.496}, {"text": "AUDIENCE: [INAUDIBLE]", "start": 973.186, "duration": 3.854}, {"text": "DAVID J. MALAN: Exactly.", "start": 977.04, "duration": 1.0}, {"text": "We're freeing the memory, which is\nlike saying to the operating system,", "start": 978.04, "duration": 2.22}, {"text": "I don't need this anymore.", "start": 980.26, "duration": 1.26}, {"text": "And yet, two lines later we're\nusing it again and again.", "start": 981.52, "duration": 2.67}, {"text": "So bad.", "start": 984.19, "duration": 0.75}, {"text": "We didn't do that mistake\nlast week, but you should only", "start": 984.94, "duration": 2.402}, {"text": "be freeing memory\nwhen, literally, you're", "start": 987.342, "duration": 1.708}, {"text": "ready to free it up and give\nit back, which should probably", "start": 989.05, "duration": 2.82}, {"text": "be at the end of the program.", "start": 991.87, "duration": 1.3}, {"text": "So let me go ahead and re-save\nthis, Open, up my terminal window,", "start": 993.17, "duration": 3.41}, {"text": "recompile it this time, and now,\nlet me run Valgrind one last time", "start": 996.58, "duration": 4.11}, {"text": "without help50.", "start": 1000.69, "duration": 1.5}, {"text": "And still a little verbose, but\nzero errors, from zero contexts.", "start": 1002.19, "duration": 4.88}, {"text": "That sounds pretty good.", "start": 1007.07, "duration": 1.0}, {"text": "And moreover, it also explicitly\nsays, all heap blocks were freed.", "start": 1008.07, "duration": 4.529}, {"text": "And recall that the heap,\nis that chunk of memory", "start": 1012.599, "duration": 2.041}, {"text": "that we drew visually up here, which\nis where malloc takes memory from.", "start": 1014.64, "duration": 3.66}, {"text": "So, done.", "start": 1018.3, "duration": 1.29}, {"text": "So this is kind of the\nmentality with which", "start": 1019.59, "duration": 3.03}, {"text": "to have when approaching the\ncorrectness of your code.", "start": 1022.62, "duration": 3.168}, {"text": "Like, it's one thing to run sample\ninputs, or run the program like I did.", "start": 1025.788, "duration": 3.041}, {"text": "All looked well.", "start": 1028.829, "duration": 0.695}, {"text": "It's one thing to run tools like\ncheck50, which we humans wrote.", "start": 1029.524, "duration": 2.666}, {"text": "But we too are fallible, certainly,\nand we might not think of anything.", "start": 1032.19, "duration": 2.958}, {"text": "And thankfully, smart humans have\nmade tools, that at first glance,", "start": 1035.148, "duration": 2.951}, {"text": "might be a little hard to use.", "start": 1038.099, "duration": 1.25}, {"text": "Like debug 50, as is Valgrind now.", "start": 1039.349, "duration": 2.5}, {"text": "But they ultimately help you\nget your code 100% correct", "start": 1041.849, "duration": 3.061}, {"text": "without you having to struggle visually\nover just staring at the screen.", "start": 1044.91, "duration": 3.33}, {"text": "And we see this a lot in\noffice hours, honestly.", "start": 1048.24, "duration": 2.154}, {"text": "A lot of students, to their credit,\nsort of reasoning through, staring", "start": 1050.394, "duration": 2.916}, {"text": "at the screen, just trying to\nunderstand what's going wrong,", "start": 1053.31, "duration": 2.499}, {"text": "but they're not taking any additional\ninput other than the characters", "start": 1055.809, "duration": 3.141}, {"text": "on the screen.", "start": 1058.95, "duration": 0.6}, {"text": "You have so many tools that can feed\nyou more and more hints along the way.", "start": 1059.55, "duration": 3.81}, {"text": "So do acquire those instincts.", "start": 1063.36, "duration": 3.15}, {"text": "Any questions on this?", "start": 1066.51, "duration": 1.83}, {"text": "Yeah?", "start": 1068.34, "duration": 0.585}, {"text": "AUDIENCE: Sir, if you had a main\nfunction that took arguments.", "start": 1068.925, "duration": 4.83}, {"text": "Would you run Valgrind with\nthose arguments as well?", "start": 1073.755, "duration": 3.499}, {"text": "DAVID J. MALAN: Yes, indeed.", "start": 1077.254, "duration": 1.166}, {"text": "So Valgrind works just like\ndebug 50, just like help50.", "start": 1078.42, "duration": 3.66}, {"text": "If you have command line\narguments, just run them as usual,", "start": 1082.08, "duration": 2.97}, {"text": "but prefix your command with Valgrind,\nor maybe even help50 Valgrind,", "start": 1085.05, "duration": 3.87}, {"text": "to help one with the other.", "start": 1088.92, "duration": 1.17}, {"text": "Good question.", "start": 1090.09, "duration": 0.78}, {"text": "Other thoughts?", "start": 1090.87, "duration": 1.12}, {"text": "Yeah?", "start": 1091.99, "duration": 0.5}, {"text": "AUDIENCE: Where does\nthe data go [INAUDIBLE]??", "start": 1092.49, "duration": 1.916}, {"text": "DAVID J. MALAN: Good question.", "start": 1098.58, "duration": 1.25}, {"text": "So at the end of the\nday, think about what's", "start": 1099.83, "duration": 2.0}, {"text": "inside the computer, which\nis just something like this.", "start": 1101.83, "duration": 2.64}, {"text": "So physically, it's\nobviously still there.", "start": 1104.47, "duration": 2.04}, {"text": "It's just being treated\nby the operating system--", "start": 1106.51, "duration": 2.91}, {"text": "Mac, OS, Windows, Linux, whatever,\nas like a pool of memory.", "start": 1109.42, "duration": 3.42}, {"text": "We keep drawing it as a grid that\nlooks a little something like this.", "start": 1112.84, "duration": 3.58}, {"text": "So the operating systems job is to just\nkeep track of which of those squares", "start": 1116.42, "duration": 3.95}, {"text": "is in use, thanks to malloc.", "start": 1120.37, "duration": 1.959}, {"text": "And which has been freed.", "start": 1122.329, "duration": 1.041}, {"text": "And so you can think of\nit as having little check", "start": 1123.37, "duration": 1.45}, {"text": "marks next to them saying,\nthis is in use, this is in use,", "start": 1124.82, "duration": 2.72}, {"text": "these others are not in use.", "start": 1127.54, "duration": 1.39}, {"text": "So they just go back on the so-called\nfree list into that pool of memory.", "start": 1128.93, "duration": 4.117}, {"text": "Good question.", "start": 1133.047, "duration": 0.583}, {"text": "If you take a higher level course\non operating systems in fact,", "start": 1133.63, "duration": 2.625}, {"text": "or CS61 or 161 at Harvard, you'll\nactually build these kinds of things", "start": 1136.255, "duration": 4.375}, {"text": "yourself.", "start": 1140.63, "duration": 0.5}, {"text": "And implement tools\nlike, malloc, yourself.", "start": 1141.13, "duration": 2.281}, {"text": "Yeah?", "start": 1143.411, "duration": 0.499}, {"text": "AUDIENCE: So why did we have to allocate\nmemory in this case, and what happens", "start": 1143.91, "duration": 3.25}, {"text": "[INAUDIBLE]?", "start": 1147.16, "duration": 0.501}, {"text": "DAVID J. MALAN: Good question.", "start": 1147.661, "duration": 1.249}, {"text": "Why did we have to allocate\nmemory in this case?", "start": 1148.91, "duration": 2.07}, {"text": "We did not.", "start": 1150.98, "duration": 0.86}, {"text": "This was purely, as mentioned,\nfor demonstration purposes.", "start": 1151.84, "duration": 2.97}, {"text": "If we had some program\nin which we wanted", "start": 1154.81, "duration": 2.1}, {"text": "to allocate some amount of memory,\nthen this is how we might do it.", "start": 1156.91, "duration": 3.95}, {"text": "However, a cleaner\nway to do all of this,", "start": 1160.86, "duration": 3.46}, {"text": "would have been to say, hey, computer,\ngive me 10 integers like this,", "start": 1164.32, "duration": 5.284}, {"text": "and not have to worry\nabout memory management.", "start": 1169.604, "duration": 1.916}, {"text": "And that's where we began in week\none, just using arrays on the stack,", "start": 1171.52, "duration": 3.81}, {"text": "so to speak.", "start": 1175.33, "duration": 0.99}, {"text": "Not using malloc at all.", "start": 1176.32, "duration": 1.24}, {"text": "So the point is only, that once\nyou start using malloc, and free,", "start": 1177.56, "duration": 3.11}, {"text": "and memory more generally, you\ntake on more responsibilities", "start": 1180.67, "duration": 3.09}, {"text": "than we did in week one.", "start": 1183.76, "duration": 3.11}, {"text": "Good question.", "start": 1186.87, "duration": 0.69}, {"text": "And the others?", "start": 1187.56, "duration": 1.74}, {"text": "All right.", "start": 1189.3, "duration": 0.51}, {"text": "So, turns out, there's one\nmore tool, in all seriousness.", "start": 1189.81, "duration": 3.28}, {"text": "This is the thing.", "start": 1193.09, "duration": 2.0}, {"text": "[? DDB50. ?] So debug 50 is an allusion\nto a very popular tool called, GDB 50,", "start": 1195.09, "duration": 6.33}, {"text": "[? Gnu ?] debugger.", "start": 1201.42, "duration": 1.3}, {"text": "It's an older tool that you\nwon't use at the command line,", "start": 1202.72, "duration": 2.51}, {"text": "but it's what makes debug 50 work.", "start": 1205.23, "duration": 2.28}, {"text": "Turns out, there's a thing.", "start": 1207.51, "duration": 1.21}, {"text": "And there's an actual\nWikipedia article that you", "start": 1208.72, "duration": 2.0}, {"text": "might have clicked on in my email last\nnight, called rubber duck debugging.", "start": 1210.72, "duration": 3.6}, {"text": "And frankly, you don't have to go as\nall out, as excessive, as we did here,", "start": 1214.32, "duration": 3.82}, {"text": "but the purpose of this technique,\nof rubber duck debugging,", "start": 1218.14, "duration": 2.66}, {"text": "is to keep, literally, like a rubber\nduck on your shelf, or on your desk.", "start": 1220.8, "duration": 3.475}, {"text": "And when you have a bug and you don't\nhave the luxury of a teaching fellow,", "start": 1224.275, "duration": 3.125}, {"text": "or a roommate who took CS50, or a more\ntechnical friend who can help walk you", "start": 1227.4, "duration": 3.81}, {"text": "through your code, literally,\nstart walking through your code", "start": 1231.21, "duration": 3.24}, {"text": "verbally, talking to the duck saying,\nwell, online 2, I'm declaring main,", "start": 1234.45, "duration": 4.96}, {"text": "and on line 3, I'm allocating\nspace for an array.", "start": 1239.41, "duration": 2.9}, {"text": "And then, on line 4, I'm calling-- ah!", "start": 1242.31, "duration": 2.61}, {"text": "That's what I'm doing wrong.", "start": 1244.92, "duration": 1.334}, {"text": "So if any of you have ever had that\nkind of moment, whether in office hours,", "start": 1246.254, "duration": 3.166}, {"text": "or alone, where you're\neither talking in your head,", "start": 1249.42, "duration": 2.284}, {"text": "or you're talking through\nyour code to someone else.", "start": 1251.704, "duration": 2.166}, {"text": "And here, she doesn't\neven have to respond.", "start": 1253.87, "duration": 1.791}, {"text": "You just hear yourself saying the\nwrong thing, or having that aha moment.", "start": 1255.661, "duration": 5.489}, {"text": "You can approximate that by just keeping\none of these little guys on your desk,", "start": 1261.15, "duration": 3.96}, {"text": "and have that conversation.", "start": 1265.11, "duration": 1.2}, {"text": "And it's actually not as crazy\nsounding as it actually is.", "start": 1266.31, "duration": 3.0}, {"text": "It's that process of just talking\nthrough your code logically,", "start": 1269.31, "duration": 2.73}, {"text": "step by step, in a way that you can't\nnecessarily do in your own mind.", "start": 1272.04, "duration": 3.39}, {"text": "At least I can't.", "start": 1275.43, "duration": 1.14}, {"text": "When you hear yourself\nsay something wrong,", "start": 1276.57, "duration": 1.8}, {"text": "or that didn't quite\nfollow logically, bam, you", "start": 1278.37, "duration": 2.55}, {"text": "can actually have that aha moment.", "start": 1280.92, "duration": 1.769}, {"text": "So on the way out today, by all\nmeans, take any one of these ducks.", "start": 1282.689, "duration": 2.791}, {"text": "That took quite a long, time for\n[? Colten ?] to lay out today.", "start": 1285.48, "duration": 2.73}, {"text": "And we'll have more at office hours in\nthe weeks to come, if you would like.", "start": 1288.21, "duration": 3.6}, {"text": "So some of you might recall such\na duck from [? Currier ?] House", "start": 1291.81, "duration": 3.87}, {"text": "last year too, which was\na cousin of his as well.", "start": 1295.68, "duration": 3.16}, {"text": "All right.", "start": 1298.84, "duration": 0.5}, {"text": "So that is rubber duck debugging.", "start": 1299.34, "duration": 2.032}, {"text": "Now, last week, recall that we\nbegan to take off training wheels.", "start": 1301.372, "duration": 2.708}, {"text": "We'd use for a few\nweeks, the CS50 library.", "start": 1304.08, "duration": 2.052}, {"text": "And that's kind of in the past now.", "start": 1306.132, "duration": 1.458}, {"text": "That was just a technique,\na tool, via which", "start": 1307.59, "duration": 2.46}, {"text": "we could get user input a little\nmore pleasantly, than if we actually", "start": 1310.05, "duration": 3.15}, {"text": "started dealing with memory early on.", "start": 1313.2, "duration": 1.8}, {"text": "And we revealed last week that\na \"string\", quote, unquote,", "start": 1315.0, "duration": 3.18}, {"text": "is just what, underneath the hood in C?", "start": 1318.18, "duration": 2.23}, {"text": "Say again.", "start": 1322.93, "duration": 1.46}, {"text": "An array of characters.", "start": 1324.39, "duration": 1.11}, {"text": "And even more specifically, it's a\nsynonym S-T-R-I-N-G for what actual", "start": 1325.5, "duration": 5.28}, {"text": "data type?", "start": 1330.78, "duration": 1.75}, {"text": "char star, as we've called it.", "start": 1332.53, "duration": 1.64}, {"text": "So a char star is just\nthe computer scientists", "start": 1334.17, "duration": 2.79}, {"text": "way of describing a\npointer to a character,", "start": 1336.96, "duration": 2.46}, {"text": "or rather the address\nof a character, which", "start": 1339.42, "duration": 2.37}, {"text": "is functionally equivalent to saying an\narray of memory, or sequence of memory.", "start": 1341.79, "duration": 4.5}, {"text": "But it's kind of the more precise,\nmore technical way of describing it.", "start": 1346.29, "duration": 3.43}, {"text": "And so now that we know that we have\nchar stars underneath the hood, well,", "start": 1349.72, "duration": 3.74}, {"text": "where is all of that coming from?", "start": 1353.46, "duration": 1.384}, {"text": "Well, indeed, it maps\ndirectly to that memory.", "start": 1354.844, "duration": 1.916}, {"text": "We keep pointing out that something\nlike this is inside of your computer.", "start": 1356.76, "duration": 3.33}, {"text": "And we can think of the memory\nas just being chunks of memory,", "start": 1360.09, "duration": 3.45}, {"text": "all of whose bytes are numbered.", "start": 1363.54, "duration": 2.1}, {"text": "0 on up to 2 gigabytes, or 2\nbillion, whatever the value might be.", "start": 1365.64, "duration": 3.96}, {"text": "But of course last week, we pointed\nout that you think about this memory", "start": 1369.6, "duration": 3.18}, {"text": "not as being hardware per se, but as\njust being this pool of memory that's", "start": 1372.78, "duration": 3.929}, {"text": "divided into different regions.", "start": 1376.709, "duration": 1.291}, {"text": "The very top of your\ncomputer's memory, so to speak,", "start": 1378.0, "duration": 2.77}, {"text": "is what we call the text segment.", "start": 1380.77, "duration": 1.68}, {"text": "And what goes in the text\nsegment of your computer's memory", "start": 1382.45, "duration": 3.11}, {"text": "when you're running a program?", "start": 1385.56, "duration": 2.6}, {"text": "Text is like, poor choice of\nwords, frankly, but what is it?", "start": 1388.16, "duration": 4.77}, {"text": "Say again.", "start": 1392.93, "duration": 0.626}, {"text": "AUDIENCE: File Headers?", "start": 1393.556, "duration": 1.294}, {"text": "DAVID J. MALAN: Not the\nfile headers, in this case.", "start": 1394.85, "duration": 2.14}, {"text": "This is in the context of running a\nprogram, not necessarily saving a file.", "start": 1396.99, "duration": 2.86}, {"text": "Yeah?", "start": 1399.85, "duration": 0.39}, {"text": "AUDIENCE: String literals.", "start": 1400.24, "duration": 1.17}, {"text": "DAVID J. MALAN: Not\nstring literals here,", "start": 1401.41, "duration": 1.8}, {"text": "but they're nearby, actually, in memory.", "start": 1403.21, "duration": 2.09}, {"text": "AUDIENCE: Functions.", "start": 1405.3, "duration": 0.88}, {"text": "DAVID J. MALAN: Functions, closer.", "start": 1406.18, "duration": 1.62}, {"text": "Yeah.", "start": 1407.8, "duration": 0.72}, {"text": "The text segment of\nyour computer's memory", "start": 1408.52, "duration": 2.88}, {"text": "is where, when you double\nclick a program to run it,", "start": 1411.4, "duration": 2.55}, {"text": "or in Linux, when you do dot\nflash something, to run it.", "start": 1413.95, "duration": 3.75}, {"text": "That's where the zeros and ones of\nyour actual program, the machine code,", "start": 1417.7, "duration": 3.66}, {"text": "that we talked about in week\nzero, is just loaded into RAM.", "start": 1421.36, "duration": 3.3}, {"text": "So recall from last week, that, you\nknow, anything physical in this world--", "start": 1424.66, "duration": 3.49}, {"text": "hard drives, solid\nstate drives, is slow.", "start": 1428.15, "duration": 3.02}, {"text": "So those devices are slow, but RAM, the\nstuff we keep pulling up on the screen,", "start": 1431.17, "duration": 3.93}, {"text": "is relatively fast.", "start": 1435.1, "duration": 0.99}, {"text": "If only because it has no moving parts.", "start": 1436.09, "duration": 1.68}, {"text": "It's purely electronic.", "start": 1437.77, "duration": 1.092}, {"text": "So when you double click a\nprogram on your Mac or PC,", "start": 1438.862, "duration": 2.208}, {"text": "or do dot slash something\nin Linux, that is", "start": 1441.07, "duration": 2.22}, {"text": "loading from a slow\ndevice, your hard drive,", "start": 1443.29, "duration": 2.64}, {"text": "where the data is stored long\nterm, into RAM or memory,", "start": 1445.93, "duration": 3.78}, {"text": "where it can run much more quickly and\npleasurably in terms of performance.", "start": 1449.71, "duration": 4.36}, {"text": "And so, what does this\nactually mean for us?", "start": 1454.07, "duration": 2.64}, {"text": "Well, it's got to go somewhere.", "start": 1456.71, "duration": 1.34}, {"text": "We just decided, humans,\nyears ago that it's", "start": 1458.05, "duration": 2.13}, {"text": "going to go at the top, so to\nspeak, of this chunk of memory.", "start": 1460.18, "duration": 2.58}, {"text": "Below that though, are the more\ndynamic regions of memory--", "start": 1462.76, "duration": 3.15}, {"text": "the stack and the heap.", "start": 1465.91, "duration": 1.62}, {"text": "And we said this a moment ago, and last\nweek as well, what goes on the heap?", "start": 1467.53, "duration": 3.51}, {"text": "Or who uses the heap?", "start": 1471.04, "duration": 2.405}, {"text": "AUDIENCE: Dynamic memory.", "start": 1473.445, "duration": 1.275}, {"text": "DAVID J. MALAN: Dynamic memory.", "start": 1474.72, "duration": 1.291}, {"text": "Any time you call malloc, you're\nasking the operating system", "start": 1476.011, "duration": 2.729}, {"text": "for memory from the so-called heap.", "start": 1478.74, "duration": 1.59}, {"text": "Anytime you call free, you're sort\nof conceptually putting it back.", "start": 1480.33, "duration": 3.266}, {"text": "Like, it's not actually going anywhere.", "start": 1483.596, "duration": 1.624}, {"text": "You're just marking it as available for\nother functions and variables to use.", "start": 1485.22, "duration": 4.5}, {"text": "The stack, meanwhile, is used for what?", "start": 1489.72, "duration": 3.407}, {"text": "AUDIENCE: Local variables.", "start": 1493.127, "duration": 1.083}, {"text": "DAVID J. MALAN: Local variables\nand any of your functions.", "start": 1494.21, "duration": 2.55}, {"text": "So main, typically takes a\nsliver of memory at the bottom.", "start": 1496.76, "duration": 3.06}, {"text": "If main calls another function, it\ngets a sliver of memory above that.", "start": 1499.82, "duration": 3.42}, {"text": "If that function calls one, it\ngets a sliver of memory above that.", "start": 1503.24, "duration": 3.02}, {"text": "So they each have their own\ndifferent regions of memory.", "start": 1506.26, "duration": 2.41}, {"text": "But of course, these arrows,\nboth pointing at each other,", "start": 1508.67, "duration": 2.91}, {"text": "doesn't seem like such a good design.", "start": 1511.58, "duration": 2.16}, {"text": "But the reality, is\nbad things can happen.", "start": 1513.74, "duration": 2.35}, {"text": "You can allocate so much memory that,\nbam, the stack overflows the heap.", "start": 1516.09, "duration": 4.37}, {"text": "Or the heap overflows the stack.", "start": 1520.46, "duration": 2.07}, {"text": "Thus was born websites like\nStack Overflow, and the like.", "start": 1522.53, "duration": 2.967}, {"text": "But that's just a reality.", "start": 1525.497, "duration": 1.083}, {"text": "If you have a finite amount\nof memory, at some point,", "start": 1526.58, "duration": 2.33}, {"text": "something's going to break.", "start": 1528.91, "duration": 1.27}, {"text": "Or the computer's going to have\nto say, mm-mm, no more memory.", "start": 1530.18, "duration": 2.644}, {"text": "You're going to have to quit some\nprograms, or close some files,", "start": 1532.824, "duration": 2.666}, {"text": "or whatnot.", "start": 1535.49, "duration": 0.826}, {"text": "So that was only to say that\nthat's how the memory is laid out.", "start": 1536.316, "duration": 2.624}, {"text": "And we started to explore\nthis by way of a few programs.", "start": 1538.94, "duration": 3.39}, {"text": "This one here-- it's a little dark here.", "start": 1542.33, "duration": 2.19}, {"text": "This one here, was a swap function.", "start": 1544.52, "duration": 2.42}, {"text": "Now it's even darker.", "start": 1546.94, "duration": 1.06}, {"text": "It was a swap function that actually\ndid swap two values, A and B.", "start": 1548.0, "duration": 6.48}, {"text": "But it didn't actually work\nin the way we intended.", "start": 1554.48, "duration": 2.64}, {"text": "What was broken about this\nswap function last week?", "start": 1557.12, "duration": 2.49}, {"text": "Like, I'm pretty sure it worked.", "start": 1562.39, "duration": 1.89}, {"text": "And when our brave volunteer came up and\nswapped the orange juice and the milk,", "start": 1564.28, "duration": 3.75}, {"text": "that worked.", "start": 1568.03, "duration": 0.82}, {"text": "So like, the logic was correct, but\nthe program itself did not work.", "start": 1568.85, "duration": 5.55}, {"text": "Why?", "start": 1574.4, "duration": 0.57}, {"text": "AUDIENCE: It changed the\nvalues of the copy variables.", "start": 1574.97, "duration": 2.25}, {"text": "DAVID J. MALAN: Exactly.", "start": 1577.22, "duration": 0.44}, {"text": "It changed values in the\ncopies of the variable.", "start": 1577.66, "duration": 2.46}, {"text": "So recall, that when\nmain was the function", "start": 1580.12, "duration": 2.79}, {"text": "we called, and it had two values, x\nand y, that chunk of memory was here.", "start": 1582.91, "duration": 3.99}, {"text": "That chunk of memory was here.", "start": 1586.9, "duration": 1.26}, {"text": "And it had like the numbers 1 and 2.", "start": 1588.16, "duration": 1.77}, {"text": "But when it called the swap function,\nthat got its own chunk of memory.", "start": 1589.93, "duration": 3.15}, {"text": "So main was at the bottom,\nswap was above that.", "start": 1593.08, "duration": 2.85}, {"text": "It had its own chunks of\nmemory called, a and b, which", "start": 1595.93, "duration": 2.55}, {"text": "initially, got the values 1 and 2.", "start": 1598.48, "duration": 1.95}, {"text": "1 and 2 were indeed\nsuccessfully swapped,", "start": 1600.43, "duration": 1.8}, {"text": "but that had no effect on x and y.", "start": 1602.23, "duration": 2.7}, {"text": "So we fixed that.", "start": 1604.93, "duration": 0.867}, {"text": "With the newer version of\nthis program, of course,", "start": 1605.797, "duration": 2.083}, {"text": "it looked a lot more cryptic at\nfirst glance, but in English,", "start": 1607.88, "duration": 3.08}, {"text": "could someone just describe\nwhat it is that happens", "start": 1610.96, "duration": 2.82}, {"text": "in this example that was more correct?", "start": 1613.78, "duration": 2.68}, {"text": "Like, what does this\nprogram do line by line?", "start": 1616.46, "duration": 2.04}, {"text": "Yeah?", "start": 1618.5, "duration": 0.5}, {"text": "AUDIENCE: Instead of passing\ncopies of the variables,", "start": 1619.0, "duration": 2.208}, {"text": "you pass pointers to their addresses.", "start": 1621.208, "duration": 1.892}, {"text": "DAVID J. MALAN: Exactly.", "start": 1623.1, "duration": 1.0}, {"text": "Instead of passing the values of\nthe variables, thereby copying them,", "start": 1624.1, "duration": 2.875}, {"text": "it passes the addresses\nof those variables.", "start": 1626.975, "duration": 2.445}, {"text": "So that's like saying, I don't\ntechnically care where it is in memory,", "start": 1629.42, "duration": 3.69}, {"text": "but I do need to know that\nit is somewhere in memory.", "start": 1633.11, "duration": 2.55}, {"text": "So instead of passing\nan x in the number 1,", "start": 1635.66, "duration": 2.64}, {"text": "let's suppose that x\nis at location 100--", "start": 1638.3, "duration": 2.3}, {"text": "my go to example.", "start": 1640.6, "duration": 1.361}, {"text": "It's actually the number 100\nthat's going to go there.", "start": 1641.961, "duration": 2.249}, {"text": "And if y is at the location\nlike, 104, well, it's", "start": 1644.21, "duration": 3.25}, {"text": "104 that's going to go there, which\nare not the values we want to swap,", "start": 1647.46, "duration": 3.76}, {"text": "but those are sort of like little\nmaps, or breadcrumbs if you will,", "start": 1651.22, "duration": 3.15}, {"text": "that lead us to the right location.", "start": 1654.37, "duration": 2.18}, {"text": "So that when we execute this\ncode, what we're ultimately", "start": 1656.55, "duration": 2.83}, {"text": "swapping in those three lines, is\nthis and this, and all along the way,", "start": 1659.38, "duration": 4.03}, {"text": "recall, we're using a\ntemporary variable there", "start": 1663.41, "duration": 2.33}, {"text": "that can be just thrown away after.", "start": 1665.74, "duration": 2.31}, {"text": "So that's what pointers\nallowed us to do.", "start": 1668.05, "duration": 2.04}, {"text": "And that's what allowed us to actually\nchange values on the so-called stack,", "start": 1670.09, "duration": 4.02}, {"text": "even by calling on other function.", "start": 1674.11, "duration": 4.78}, {"text": "All right.", "start": 1678.89, "duration": 0.5}, {"text": "Any questions then, on where we left off\nlast time with the stack and with swap?", "start": 1679.39, "duration": 6.15}, {"text": "No?", "start": 1685.54, "duration": 1.73}, {"text": "All right.", "start": 1687.27, "duration": 0.5}, {"text": "So recall we introduced Binky as\nwell, who lost his head at one point,", "start": 1687.77, "duration": 4.17}, {"text": "but why?", "start": 1691.94, "duration": 1.2}, {"text": "What went horribly, horribly awry\nwith this scene from last week's film", "start": 1693.14, "duration": 3.412}, {"text": "from Stanford?", "start": 1696.552, "duration": 0.583}, {"text": "Binky was doing everything\ncorrectly, right?", "start": 1700.297, "duration": 1.833}, {"text": "Like, moving values.", "start": 1702.13, "duration": 1.01}, {"text": "42 was successful.", "start": 1703.14, "duration": 1.56}, {"text": "And then, yeah?", "start": 1704.7, "duration": 0.919}, {"text": "AUDIENCE: He tried to\ndereference something that", "start": 1705.619, "duration": 1.999}, {"text": "wasn't pointing to any actual address.", "start": 1707.618, "duration": 3.882}, {"text": "DAVID J. MALAN: Exactly.", "start": 1711.5, "duration": 1.0}, {"text": "He tried to dereference a pointer, an\naddress, that wasn't actually pointing", "start": 1712.5, "duration": 3.9}, {"text": "to a valid address.", "start": 1716.4, "duration": 1.23}, {"text": "Recall that this was the line in code\nin question that was unlucky and bad.", "start": 1717.63, "duration": 3.93}, {"text": "Star y, means, go to the address\nin y, and do something to it.", "start": 1721.56, "duration": 3.75}, {"text": "Set it equal to the number 13.", "start": 1725.31, "duration": 2.07}, {"text": "But the problem was, that in\nthe code we looked at last week,", "start": 1727.38, "duration": 3.3}, {"text": "all we did at the start was say, hey,\ncomputer give me a pointer to an int,", "start": 1730.68, "duration": 3.87}, {"text": "and call it x.", "start": 1734.55, "duration": 1.26}, {"text": "Do the same, and call it y.", "start": 1735.81, "duration": 2.26}, {"text": "Allocate space and point x at it.", "start": 1738.07, "duration": 4.25}, {"text": "But we never did the same for y.", "start": 1742.32, "duration": 2.13}, {"text": "So whereas x contained, last week, the\naddress of an actual chunk of memory,", "start": 1744.45, "duration": 4.41}, {"text": "thanks to malloc, what did y\ncontain at that point in the story?", "start": 1748.86, "duration": 3.78}, {"text": "The yellow line there.", "start": 1752.64, "duration": 1.03}, {"text": "What did y contain?", "start": 1756.29, "duration": 0.986}, {"text": "What value?", "start": 1757.276, "duration": 0.499}, {"text": "AUDIENCE: Null.", "start": 1761.886, "duration": 0.964}, {"text": "DAVID J. MALAN: Null.", "start": 1762.85, "duration": 0.88}, {"text": "Maybe.", "start": 1763.73, "duration": 0.981}, {"text": "Maybe.", "start": 1764.711, "duration": 0.499}, {"text": "But it's not obvious because there's\nno mention of null in the program.", "start": 1765.21, "duration": 3.299}, {"text": "We might get lucky.", "start": 1768.509, "duration": 0.791}, {"text": "Null is just 0.", "start": 1769.3, "duration": 1.34}, {"text": "And sometimes we've seen that 0 are\nthe default values in a program.", "start": 1770.64, "duration": 3.12}, {"text": "So maybe.", "start": 1773.76, "duration": 0.8}, {"text": "But I say, maybe, and I'm hedging why.", "start": 1774.56, "duration": 3.381}, {"text": "AUDIENCE: [INAUDIBLE].", "start": 1777.941, "duration": 1.494}, {"text": "DAVID J. MALAN: Yeah.", "start": 1779.435, "duration": 0.875}, {"text": "And it doesn't allocate-- well,\nallocate, is not quite the right word.", "start": 1780.31, "duration": 2.39}, {"text": "That suggests you are\nallocating actual memory.", "start": 1782.7, "duration": 1.958}, {"text": "It's a garbage value.", "start": 1784.658, "duration": 1.132}, {"text": "There's something there.", "start": 1785.79, "duration": 1.02}, {"text": "Right?", "start": 1786.81, "duration": 0.21}, {"text": "My Mac has been running for a few hours.", "start": 1787.02, "duration": 1.667}, {"text": "And your Macs, and PCs, and phones,\nare probably running all day long.", "start": 1788.687, "duration": 2.916}, {"text": "Or certainly when the lid is up.", "start": 1791.603, "duration": 1.387}, {"text": "And so, your memory is getting\nused, and unused, and used.", "start": 1792.99, "duration": 2.94}, {"text": "Like, lots of stuff is going on.", "start": 1795.93, "duration": 1.6}, {"text": "So your computer is not filled\nwith all zeros or all ones.", "start": 1797.53, "duration": 3.037}, {"text": "If you look at it at some\nrandom point in the day,", "start": 1800.567, "duration": 2.083}, {"text": "it's filled with like bunches\nand bunches of zeros and ones", "start": 1802.65, "duration": 2.64}, {"text": "from previous programs\nthat you quit long ago.", "start": 1805.29, "duration": 2.55}, {"text": "Windows you have in the\nbackground and the like.", "start": 1807.84, "duration": 2.049}, {"text": "So, the short of it\nis, when you're running", "start": 1809.889, "duration": 1.791}, {"text": "a program for the first time, that's\nbeen running now for some time,", "start": 1811.68, "duration": 3.591}, {"text": "it's going to get messy.", "start": 1815.271, "duration": 0.999}, {"text": "That big rectangle of memory is\ngoing to have some ones over here", "start": 1816.27, "duration": 2.708}, {"text": "some zeros over here and vise versa.", "start": 1818.978, "duration": 2.372}, {"text": "So they're garbage values, because\nthose bytes have some values in them.", "start": 1821.35, "duration": 4.95}, {"text": "You just don't necessarily\nknow what they are.", "start": 1826.3, "duration": 2.1}, {"text": "So the point is, you should\nnever ever dereference a pointer", "start": 1828.4, "duration": 3.23}, {"text": "that you have not set yourself.", "start": 1831.63, "duration": 2.31}, {"text": "Maybe you will crash.", "start": 1833.94, "duration": 1.14}, {"text": "Maybe it won't crash.", "start": 1835.08, "duration": 0.93}, {"text": "Valgrind can help you find\nthese things but sometimes.", "start": 1836.01, "duration": 2.82}, {"text": "But it's just not a safe operation.", "start": 1838.83, "duration": 2.97}, {"text": "And lastly, the last thing\nwe introduced last week,", "start": 1841.8, "duration": 2.149}, {"text": "which will be the stepping stone for\nwhat problems we'll solve this week,", "start": 1843.949, "duration": 3.041}, {"text": "was struct.", "start": 1846.99, "duration": 0.89}, {"text": "So struck is kind of cool, in that\nyou can design your own custom data", "start": 1847.88, "duration": 4.66}, {"text": "structures.", "start": 1852.54, "duration": 0.87}, {"text": "C is pretty limited out\nof the box, so to speak.", "start": 1853.41, "duration": 2.22}, {"text": "You only have chars and boules,\nand floats, and ints, and doubles,", "start": 1855.63, "duration": 3.87}, {"text": "and longs, and str--", "start": 1859.5, "duration": 1.23}, {"text": "well, we don't even\nhave strings, per se.", "start": 1860.73, "duration": 1.709}, {"text": "So it doesn't really come with many\nfeatures, like a lot of languages do.", "start": 1862.439, "duration": 3.04}, {"text": "Like Python, which we'll\nsee in a few weeks.", "start": 1865.479, "duration": 2.241}, {"text": "So with struct in C,\nyou have the ability", "start": 1867.72, "duration": 2.25}, {"text": "to solve some problems of your own.", "start": 1869.97, "duration": 1.71}, {"text": "For instance, with the\nstruct, we can actually", "start": 1871.68, "duration": 3.78}, {"text": "start to implement our own features.", "start": 1875.46, "duration": 3.65}, {"text": "Or our own data types.", "start": 1879.11, "duration": 1.15}, {"text": "For instance, let me go up here.", "start": 1880.26, "duration": 1.75}, {"text": "And let me go ahead and\ncreate a file called say,", "start": 1882.01, "duration": 3.5}, {"text": "student, or rather destruct dot h.", "start": 1885.51, "duration": 3.03}, {"text": "So recall that dot h is a header file.", "start": 1888.54, "duration": 1.89}, {"text": "Thus far, you have used header\nfiles that other people made.", "start": 1890.43, "duration": 2.77}, {"text": "Like, CS50 dot h, and standard IO\ndot h, and standard [? lid ?] dot h,", "start": 1893.2, "duration": 3.65}, {"text": "but you can make your own.", "start": 1896.85, "duration": 1.23}, {"text": "Header files are just files that\ntypically contain code that you", "start": 1898.08, "duration": 3.3}, {"text": "want to share across multiple programs.", "start": 1901.38, "duration": 2.07}, {"text": "And we'll see more of this in time.", "start": 1903.45, "duration": 1.719}, {"text": "So let me go ahead and\njust save this file.", "start": 1905.169, "duration": 1.791}, {"text": "And suppose that I want to\nrepresent a student in memory.", "start": 1906.96, "duration": 3.93}, {"text": "A student of course, is\nprobably going to have what?", "start": 1910.89, "duration": 3.99}, {"text": "For instance, how about\na string for their name,", "start": 1914.88, "duration": 4.76}, {"text": "a string for their dorm-- but\nstring is kind of two weeks ago.", "start": 1919.64, "duration": 3.01}, {"text": "Lets call this char star.", "start": 1922.65, "duration": 1.98}, {"text": "And lets call name, char star.", "start": 1924.63, "duration": 3.09}, {"text": "And so you might want to associate like,\nmultiple pieces of data with students.", "start": 1927.72, "duration": 3.43}, {"text": "Right?", "start": 1931.15, "duration": 0.5}, {"text": "And you don't want to have\nmultiple variables, per se.", "start": 1931.65, "duration": 1.63}, {"text": "It would be nice to kind of\nencapsulate these together.", "start": 1933.28, "duration": 1.55}, {"text": "And recall at the very\nend of last week, we", "start": 1934.83, "duration": 2.07}, {"text": "saw this feature where you\ncan define your own type,", "start": 1936.9, "duration": 3.78}, {"text": "with typedef, that is\na structure itself.", "start": 1940.68, "duration": 3.24}, {"text": "And you can give it a name.", "start": 1943.92, "duration": 1.42}, {"text": "So in short, simply by executing\nthis these lines of code,", "start": 1945.34, "duration": 3.72}, {"text": "you have just created\nyour own custom data type.", "start": 1949.06, "duration": 2.0}, {"text": "It's now called student.", "start": 1951.06, "duration": 1.35}, {"text": "And every student in the world\nshall have, per this code, a name", "start": 1952.41, "duration": 3.93}, {"text": "and a dorm associated with them.", "start": 1956.34, "duration": 1.75}, {"text": "Now, why is this useful?", "start": 1958.09, "duration": 1.08}, {"text": "Well the program, we looked at\nthe very end of last time looked", "start": 1959.17, "duration": 3.08}, {"text": "a little something like this.", "start": 1962.25, "duration": 1.58}, {"text": "Instruct zero dot c,\nwe had the following,", "start": 1963.83, "duration": 4.9}, {"text": "I first allocated some\namount of space for student.", "start": 1968.73, "duration": 3.286}, {"text": "I asked the user what's the\nenrollment in the class or whatnot?", "start": 1972.016, "duration": 2.624}, {"text": "That gives us an int.", "start": 1974.64, "duration": 1.38}, {"text": "And then, we allocated an array of\ntype student, called students, plural.", "start": 1976.02, "duration": 5.89}, {"text": "This was an alternative,\nrecall, to doing something", "start": 1981.91, "duration": 2.69}, {"text": "like this, string names enrollment,\nand string dorms enrollment.", "start": 1984.6, "duration": 5.67}, {"text": "Which would work.", "start": 1990.27, "duration": 0.93}, {"text": "You could have two separate\narrays, and you'd just", "start": 1991.2, "duration": 2.083}, {"text": "have to remember that name zero\nand dorm zero is the same human.", "start": 1993.283, "duration": 3.887}, {"text": "But why do that if you\ncan keep things together.", "start": 1997.17, "duration": 2.32}, {"text": "So with structs, we\nwere able to do this.", "start": 1999.49, "duration": 2.12}, {"text": "Give me this many student structures,\nand call the whole array, students.", "start": 2001.61, "duration": 5.64}, {"text": "And the only new syntax we introduce to\nsatisfy this goal, was what operator?", "start": 2007.25, "duration": 7.21}, {"text": "AUDIENCE: The dot.", "start": 2014.46, "duration": 0.896}, {"text": "DAVID J. MALAN: The dot.", "start": 2015.356, "duration": 1.0}, {"text": "Yeah.", "start": 2016.356, "duration": 0.5}, {"text": "So in the past, recall from like\nweek two, we introduced arrays.", "start": 2016.856, "duration": 3.234}, {"text": "And arrays allow you to do\nsquare bracket notation.", "start": 2020.09, "duration": 2.19}, {"text": "So that is no different\nfrom a couple of weeks back.", "start": 2022.28, "duration": 3.21}, {"text": "But if your array is not storing\njust integers, or chars, or floats,", "start": 2025.49, "duration": 3.96}, {"text": "or whatever, it's actually storing\na structure, like a student,", "start": 2029.45, "duration": 3.63}, {"text": "you can get at that student's name\nby literally just saying dot name.", "start": 2033.08, "duration": 4.32}, {"text": "And you can get at their\ndorm by doing dot dorm.", "start": 2037.4, "duration": 2.599}, {"text": "And then everything else is the same.", "start": 2039.999, "duration": 1.541}, {"text": "This is what's called, encapsulation.", "start": 2041.54, "duration": 1.65}, {"text": "And it's kind of like a fundamental\nprinciple of programming", "start": 2043.19, "duration": 2.5}, {"text": "where, if you have some real\nworld entity, like a student,", "start": 2045.69, "duration": 3.259}, {"text": "and you want to represent\nstudents with code, yeah,", "start": 2048.949, "duration": 2.851}, {"text": "you can have a bunch of arrays that all\nhave called names, dorms, emails, phone", "start": 2051.8, "duration": 4.859}, {"text": "numbers, but that just gets messy.", "start": 2056.659, "duration": 1.5}, {"text": "You can instead encapsulate all of that\nrelated Information about a student", "start": 2058.159, "duration": 3.991}, {"text": "into one data structure so that now you\nhave, per week zero, an abstraction.", "start": 2062.15, "duration": 5.16}, {"text": "Like, a student is an abstraction.", "start": 2067.31, "duration": 2.74}, {"text": "And if we break that abstraction,\nwhat is a student actually?", "start": 2070.05, "duration": 4.1}, {"text": "Not in the real world, but\nin our code world here?", "start": 2074.15, "duration": 3.68}, {"text": "Student is an abstraction.", "start": 2077.83, "duration": 1.18}, {"text": "It's a useful word, all of us can\nkind of agree means something,", "start": 2079.01, "duration": 2.899}, {"text": "but technically, what\ndoes it apparently mean?", "start": 2081.909, "duration": 3.901}, {"text": "A student is actually a name in\na dorm, which really kind of is", "start": 2085.81, "duration": 3.179}, {"text": "diminutive to everyone in this\nroom, but we've distilled it in code", "start": 2088.989, "duration": 3.42}, {"text": "to just those two values.", "start": 2092.409, "duration": 1.59}, {"text": "So there we have encapsulation.", "start": 2093.999, "duration": 1.291}, {"text": "You're kind of encapsulating\ntogether multiple values.", "start": 2095.29, "duration": 2.366}, {"text": "And you're abstracting away\njust have a more useful term,", "start": 2097.656, "duration": 2.374}, {"text": "because no one is going to want\nto talk in terms of lines of code", "start": 2100.03, "duration": 2.76}, {"text": "to describe anything.", "start": 2102.79, "duration": 1.41}, {"text": "So, same topic as in the past.", "start": 2104.2, "duration": 1.39}, {"text": "So, now we have the ability to come\nup with our own custom data structures", "start": 2105.59, "duration": 4.43}, {"text": "it seems.", "start": 2110.02, "duration": 0.69}, {"text": "That we can store anything\ninside of them that we want.", "start": 2110.71, "duration": 2.62}, {"text": "So let's now see how\npoorly we've been designing", "start": 2113.33, "duration": 3.53}, {"text": "some things for the past few weeks.", "start": 2116.86, "duration": 2.5}, {"text": "So it turns out that much\nof the code, hopefully", "start": 2119.36, "duration": 3.47}, {"text": "we've been writing in recent\nweeks has been correct,", "start": 2122.83, "duration": 2.38}, {"text": "but we've been not necessarily\ndesigning solutions in the best way.", "start": 2125.21, "duration": 3.744}, {"text": "Recall that when we have\nthis chunk of memory,", "start": 2128.954, "duration": 1.916}, {"text": "we've typically treated\nit as at most, an array.", "start": 2130.87, "duration": 3.28}, {"text": "So just a contiguous chunk of memory.", "start": 2134.15, "duration": 1.55}, {"text": "And thanks to this very simple\nmental model, do we get strings,", "start": 2135.7, "duration": 3.75}, {"text": "do we get arrays of students now.", "start": 2139.45, "duration": 2.76}, {"text": "But arrays aren't necessarily the\nbest data structure in the world.", "start": 2142.21, "duration": 3.75}, {"text": "Like, what is a downside of an array\nif you've encountered ones thus far.", "start": 2145.96, "duration": 3.84}, {"text": "In C, what's a downside of an array?", "start": 2152.43, "duration": 2.34}, {"text": "Yeah?", "start": 2154.77, "duration": 0.99}, {"text": "AUDIENCE: [INAUDIBLE].", "start": 2155.76, "duration": 2.47}, {"text": "DAVID J. MALAN: Can or cannot?", "start": 2158.23, "duration": 1.25}, {"text": "AUDIENCE: Cannot.", "start": 2159.48, "duration": 0.53}, {"text": "DAVID J. MALAN: You cannot.", "start": 2160.01, "duration": 0.67}, {"text": "That is true.", "start": 2160.68, "duration": 0.76}, {"text": "So in C, you cannot mix data\ntypes inside of an array.", "start": 2161.44, "duration": 4.25}, {"text": "They must all be ints, they must all\nbe chars, they must all be students.", "start": 2165.69, "duration": 4.217}, {"text": "It's a bit of a white lie\nbecause technically, you", "start": 2169.907, "duration": 2.083}, {"text": "can have something called a void star,\nand you can actually map-- but yes.", "start": 2171.99, "duration": 3.33}, {"text": "That is true though, strictly\nspeaking-- cannot mix data types.", "start": 2175.32, "duration": 2.841}, {"text": "Though frankly, even though\nother languages let you do that,", "start": 2178.161, "duration": 2.499}, {"text": "it's not necessarily the\nbest design decision.", "start": 2180.66, "duration": 1.92}, {"text": "But sure, a limitation.", "start": 2182.58, "duration": 0.96}, {"text": "Other thoughts.", "start": 2183.54, "duration": 0.65}, {"text": "Yeah?", "start": 2184.19, "duration": 0.544}, {"text": "AUDIENCE: The size cannot change.", "start": 2184.734, "duration": 1.376}, {"text": "DAVID J. MALAN: The size cannot change.", "start": 2186.11, "duration": 1.624}, {"text": "Let's focus on that one.", "start": 2187.734, "duration": 1.026}, {"text": "Because that's sort of even\nmore constraining it would seem.", "start": 2188.76, "duration": 3.48}, {"text": "So if you want an array for,\nsay, two values, what do you do?", "start": 2192.24, "duration": 4.77}, {"text": "Well, you can do something like\nint, x, bracket, 2, semi-colon.", "start": 2197.01, "duration": 4.734}, {"text": "And what does that actually give you\ninside of your computer's memory?", "start": 2201.744, "duration": 2.916}, {"text": "It gives you some chunk\nthat we'll draw a rectangle.", "start": 2204.66, "duration": 2.94}, {"text": "This is location 0.", "start": 2207.6, "duration": 1.25}, {"text": "This is location 1.", "start": 2208.85, "duration": 1.05}, {"text": "Suppose that, oh, a few minutes\nlater, you change your mind.", "start": 2209.9, "duration": 2.5}, {"text": "Oh, darn, I just took a--", "start": 2212.4, "duration": 1.815}, {"text": "I want to type in a\nthird value, or I want", "start": 2214.215, "duration": 2.265}, {"text": "to add another student to the array.", "start": 2216.48, "duration": 1.95}, {"text": "Where do you put that?", "start": 2218.43, "duration": 1.8}, {"text": "Well, you don't.", "start": 2220.23, "duration": 1.32}, {"text": "If you want to add a third\nvalue to an array of size 2,", "start": 2221.55, "duration": 2.94}, {"text": "what's your only option in C?", "start": 2224.49, "duration": 2.41}, {"text": "AUDIENCE: You make a new array.", "start": 2226.9, "duration": 1.48}, {"text": "DAVID J. MALAN: You make a new array.", "start": 2228.38, "duration": 0.9}, {"text": "So literally.", "start": 2229.28, "duration": 0.66}, {"text": "And if this array had\nthe number like 42,", "start": 2229.94, "duration": 3.21}, {"text": "and this had the number 13, the only\nway to add a third number is to allocate", "start": 2233.15, "duration": 4.11}, {"text": "a second array, copy the values into\nthe same locations, 42, 13, and then,", "start": 2237.26, "duration": 6.52}, {"text": "we'll add another value, 50.", "start": 2243.78, "duration": 1.61}, {"text": "And then, so that you're not\nusing up twice as much space", "start": 2245.39, "duration": 2.76}, {"text": "almost permanently, now you\ncan sort of free somehow,", "start": 2248.15, "duration": 3.48}, {"text": "or stop using that chunk of memory.", "start": 2251.63, "duration": 2.2}, {"text": "So that's fine.", "start": 2253.83, "duration": 0.65}, {"text": "It's correct what we just did.", "start": 2254.48, "duration": 1.377}, {"text": "But what's the running\ntime of that process?", "start": 2255.857, "duration": 1.833}, {"text": "Recall a couple of weeks ago, we started\ntalking about efficiency and design.", "start": 2260.362, "duration": 3.208}, {"text": "What's the running time\nof resizing an array.", "start": 2263.57, "duration": 4.18}, {"text": "AUDIENCE: Too long.", "start": 2267.75, "duration": 0.792}, {"text": "DAVID J. MALAN: Say Again.", "start": 2268.542, "duration": 1.082}, {"text": "AUDIENCE: I said, too long.", "start": 2269.624, "duration": 1.236}, {"text": "DAVID J. MALAN: Too long.", "start": 2270.86, "duration": 1.041}, {"text": "Fair.", "start": 2271.901, "duration": 1.236}, {"text": "But let's be more precise.", "start": 2273.137, "duration": 1.083}, {"text": "Big o of-- big o of what?", "start": 2274.22, "duration": 7.725}, {"text": "AUDIENCE: N.", "start": 2281.945, "duration": 0.884}, {"text": "DAVID J. MALAN: N. What's n?", "start": 2282.829, "duration": 1.166}, {"text": "AUDIENCE: [INAUDIBLE].", "start": 2283.995, "duration": 1.155}, {"text": "DAVID J. MALAN: OK.", "start": 2285.15, "duration": 0.35}, {"text": "True.", "start": 2285.5, "duration": 0.27}, {"text": "But what does n represent?", "start": 2285.77, "duration": 1.083}, {"text": "AUDIENCE: [INAUDIBLE].", "start": 2286.853, "duration": 1.522}, {"text": "DAVID J. MALAN: Yeah.", "start": 2288.375, "duration": 0.875}, {"text": "So you don't actually have to not know.", "start": 2289.25, "duration": 1.43}, {"text": "It's just a general answer.", "start": 2290.68, "duration": 1.124}, {"text": "In this case, however long\nthe array is, call it n.", "start": 2291.804, "duration": 2.896}, {"text": "It is that many steps to\nresize it into that plus 1.", "start": 2294.7, "duration": 3.64}, {"text": "Technically it's big o, over n, plus 1.", "start": 2298.34, "duration": 1.802}, {"text": "But recall in our discussion,\n\"The big o notation,\" we just", "start": 2300.142, "duration": 2.458}, {"text": "ignore the smaller terms-- the plus\n1s, the divided by 2s, the plus n.", "start": 2302.6, "duration": 4.29}, {"text": "We focus only on the most powerful\nterm in the expression, which", "start": 2306.89, "duration": 3.51}, {"text": "is just n here.", "start": 2310.4, "duration": 1.14}, {"text": "So yes, if you have an array\nof size 2, and you resize it", "start": 2311.54, "duration": 3.6}, {"text": "into an array of size 3,\nor really, n plus 1, that's", "start": 2315.14, "duration": 3.57}, {"text": "going to take me roughly n steps.", "start": 2318.71, "duration": 1.5}, {"text": "Technically n plus 1 steps.", "start": 2320.21, "duration": 1.5}, {"text": "But n steps.", "start": 2321.71, "duration": 1.11}, {"text": "Ergo big o of n.", "start": 2322.82, "duration": 1.44}, {"text": "So it's a linear process.", "start": 2324.26, "duration": 1.06}, {"text": "So possible but not\nnecessarily the fastest", "start": 2325.32, "duration": 3.24}, {"text": "thing because he literally had to\nmove all those damn values around.", "start": 2328.56, "duration": 3.41}, {"text": "So what would be better than this?", "start": 2331.97, "duration": 4.14}, {"text": "And if you've programed before, you\nmight have the right instincts already.", "start": 2336.11, "duration": 3.84}, {"text": "How do we solve this problem?", "start": 2339.95, "duration": 1.26}, {"text": "Yeah?", "start": 2344.598, "duration": 0.5}, {"text": "AUDIENCE: Would you allocate more\nmemory at the end of the array?", "start": 2345.098, "duration": 2.442}, {"text": "DAVID J. MALAN: Reallocate more\nmemory at the end of the array.", "start": 2347.54, "duration": 2.625}, {"text": "So it turns out c does have\na function called, realloc.", "start": 2350.165, "duration": 5.135}, {"text": "Perfectly, if not obviously,\nnamed that reallocates memory.", "start": 2355.3, "duration": 4.18}, {"text": "And if you pass it, the address of\na chunk of memory you've allocated,", "start": 2359.48, "duration": 3.72}, {"text": "and the operating system\nnotices, oh, yeah you got lucky.", "start": 2363.2, "duration": 2.82}, {"text": "I've got more memory at\nthe end of this array,", "start": 2366.02, "duration": 2.44}, {"text": "it will then allocate that additional\nRAM for you, and let you use it.", "start": 2368.46, "duration": 3.59}, {"text": "Or worst case, if there's\nnothing available at the end", "start": 2372.05, "duration": 2.78}, {"text": "of the array in memory,\nbecause it's being", "start": 2374.83, "duration": 1.75}, {"text": "used by something else in your program.", "start": 2376.58, "duration": 2.31}, {"text": "That's fine.", "start": 2378.89, "duration": 0.87}, {"text": "Realloc will take on the responsibility\nof creating another array somewhere", "start": 2379.76, "duration": 5.16}, {"text": "in memory, copying all of\nthat data for you into it,", "start": 2384.92, "duration": 3.09}, {"text": "and returning the address\nof that new chunk of memory.", "start": 2388.01, "duration": 3.18}, {"text": "Unfortunately, that's still linear.", "start": 2391.19, "duration": 1.841}, {"text": "Yeah?", "start": 2393.031, "duration": 0.499}, {"text": "AUDIENCE: Is this all\nbeing done in the heap?", "start": 2393.53, "duration": 1.752}, {"text": "Or--", "start": 2395.282, "duration": 0.438}, {"text": "DAVID J. MALAN: This is\nall being done in the heap.", "start": 2395.72, "duration": 2.125}, {"text": "Malloc, and realloc, and\nfree, all operate on the heap.", "start": 2397.845, "duration": 2.915}, {"text": "Yes.", "start": 2400.76, "duration": 0.87}, {"text": "So that is a solution, but it doesn't\nreally speak to the efficiency.", "start": 2401.63, "duration": 3.12}, {"text": "Yeah?", "start": 2404.75, "duration": 0.5}, {"text": "AUDIENCE: Could you use linked list?", "start": 2405.25, "duration": 1.11}, {"text": "DAVID J. MALAN: Yeah.", "start": 2406.36, "duration": 0.875}, {"text": "What is a linked list?", "start": 2407.235, "duration": 2.495}, {"text": "Go ahead.", "start": 2409.73, "duration": 0.637}, {"text": "AUDIENCE: It's when you have an element\nthat points to different elements.", "start": 2410.367, "duration": 3.083}, {"text": "DAVID J. MALAN: OK.", "start": 2413.45, "duration": 0.791}, {"text": "Points to other elements.", "start": 2414.241, "duration": 1.15}, {"text": "Yeah.", "start": 2415.391, "duration": 0.499}, {"text": "So let me speak to what's\nthe fundamental issue here.", "start": 2415.89, "duration": 2.21}, {"text": "The fundamental problem is much like\npainting yourself into a corner,", "start": 2418.1, "duration": 5.43}, {"text": "so to speak, as the cliche goes.", "start": 2423.53, "duration": 1.53}, {"text": "With an array, you're deciding in\nadvance how big the data structure is", "start": 2425.06, "duration": 4.2}, {"text": "and committing to it.", "start": 2429.26, "duration": 1.406}, {"text": "Well, what if you just do the opposite.", "start": 2430.666, "duration": 1.624}, {"text": "Don't do that.", "start": 2432.29, "duration": 1.2}, {"text": "If you want initially, room for\njust one value, say one integer,", "start": 2433.49, "duration": 5.64}, {"text": "only ask the computer for that.", "start": 2439.13, "duration": 2.1}, {"text": "Give me space for one integer and\nI'll put my number 42 in here.", "start": 2441.23, "duration": 3.66}, {"text": "And then, if and only if,\nyou want a second integer,", "start": 2444.89, "duration": 3.77}, {"text": "do you ask the computer\nfor a second integer.", "start": 2448.66, "duration": 2.23}, {"text": "And so the computer, as by a malloc,\nor whatnot, will give you another one", "start": 2450.89, "duration": 3.6}, {"text": "like, the number 13.", "start": 2454.49, "duration": 1.02}, {"text": "And if you want a third, just ask the\nsame question of the operating system.", "start": 2455.51, "duration": 3.39}, {"text": "Each time just getting\nback one chunk of memory.", "start": 2458.9, "duration": 3.57}, {"text": "But there's a fundamental gotcha here.", "start": 2462.47, "duration": 3.09}, {"text": "There's always a trade off.", "start": 2465.56, "duration": 1.29}, {"text": "So yes, this is possible.", "start": 2466.85, "duration": 1.35}, {"text": "You can call malloc three times.", "start": 2468.2, "duration": 1.95}, {"text": "Each time asking for a chunk of\nmemory of size 1, instead of size 3,", "start": 2470.15, "duration": 3.54}, {"text": "for instance.", "start": 2473.69, "duration": 1.47}, {"text": "But what's the price you pay?", "start": 2475.16, "duration": 1.29}, {"text": "Or what problem do we\nstill need to solve?", "start": 2476.45, "duration": 2.01}, {"text": "Yeah?", "start": 2478.46, "duration": 0.687}, {"text": "AUDIENCE: They're not\nstored next to each other.", "start": 2479.147, "duration": 1.433}, {"text": "DAVID J. MALAN: Yeah.", "start": 2480.58, "duration": 0.2}, {"text": "They're not being stored\nnext to each other.", "start": 2480.78, "duration": 1.833}, {"text": "So even though I can think of this as\nbeing the first element, the second,", "start": 2482.613, "duration": 3.827}, {"text": "and the third, you do not have, in\nthis story, random access to elements.", "start": 2486.44, "duration": 5.52}, {"text": "And random access, ergo,\nrandom access memory, or RAM,", "start": 2491.96, "duration": 3.75}, {"text": "just means that arithmetically,\nlike, mathematically, you", "start": 2495.71, "duration": 2.58}, {"text": "can jump to location 0, location 1,\nlocation 2, randomly, or in constant", "start": 2498.29, "duration": 4.9}, {"text": "time.", "start": 2503.19, "duration": 0.5}, {"text": "Just instantly.", "start": 2503.69, "duration": 1.141}, {"text": "Because if they're all back to back\nto back, all you have to do is like,", "start": 2504.831, "duration": 2.999}, {"text": "add 1, or add 4, or whatever to\nthe address, and you're there.", "start": 2507.83, "duration": 3.9}, {"text": "But the problem is, if you're\ncalling malloc again and again", "start": 2511.73, "duration": 3.84}, {"text": "and again, there's no guarantee\nthat these things are even", "start": 2515.57, "duration": 2.88}, {"text": "going to be proximal to one another.", "start": 2518.45, "duration": 2.44}, {"text": "These second chunks of\nmemory might end up--", "start": 2520.89, "duration": 2.66}, {"text": "if this is a big chunk of\nmemory we've been talking about,", "start": 2523.55, "duration": 3.33}, {"text": "where the heaps up here,\nand the stacks down here--", "start": 2526.88, "duration": 2.67}, {"text": "42 might end up over here.", "start": 2529.55, "duration": 2.14}, {"text": "The next chunk of memory,\n50, might end up over here.", "start": 2531.69, "duration": 2.66}, {"text": "The third chunk might end up over here.", "start": 2534.35, "duration": 2.25}, {"text": "So you can't just jump from\nlocation 0, to 1, to 2,", "start": 2536.6, "duration": 3.0}, {"text": "because you have to somehow remember\nwhere location 0, and 1, and 2, are.", "start": 2539.6, "duration": 6.13}, {"text": "So how do we solve this?", "start": 2545.73, "duration": 1.557}, {"text": "Even if you haven't programed before,\nlike, what would a solution be here?", "start": 2547.287, "duration": 3.083}, {"text": "AUDIENCE: Somehow store [INAUDIBLE].", "start": 2553.274, "duration": 2.385}, {"text": "DAVID J. MALAN: OK.", "start": 2555.659, "duration": 0.791}, {"text": "Somehow storing the addresses of--", "start": 2556.45, "duration": 2.322}, {"text": "AUDIENCE: Of the [INAUDIBLE]", "start": 2558.772, "duration": 1.728}, {"text": "DAVID J. MALAN: All right.", "start": 2560.5, "duration": 0.39}, {"text": "So let's just suppose, for the sake of\ndiscussion, that this chunk of memory", "start": 2560.89, "duration": 3.166}, {"text": "ended up at location 100.", "start": 2564.056, "duration": 1.364}, {"text": "This one ended up at like 150.", "start": 2565.42, "duration": 2.76}, {"text": "This one ended up at like 475.", "start": 2568.18, "duration": 3.18}, {"text": "Whatever those values are.", "start": 2571.36, "duration": 2.25}, {"text": "It would seem that somehow or other\nI need to remember three values--", "start": 2573.61, "duration": 3.07}, {"text": "100, 150, and 475.", "start": 2576.68, "duration": 3.35}, {"text": "So where can I store that?", "start": 2580.03, "duration": 1.59}, {"text": "Well, it turns out, I can be a\nlittle clever but a little greedy.", "start": 2581.62, "duration": 3.45}, {"text": "I could say to malloc, you know what,\nevery time I call you, don't just", "start": 2585.07, "duration": 2.97}, {"text": "give me space for an integer,\ngive me space for an integer", "start": 2588.04, "duration": 3.54}, {"text": "plus the address of another integer.", "start": 2591.58, "duration": 3.94}, {"text": "So if you've ever kind of seen like\npopcorn strung together on a string,", "start": 2595.52, "duration": 3.83}, {"text": "or any kind of chain link fence\nwhere one link is linking to another.", "start": 2599.35, "duration": 5.01}, {"text": "We could create the\nequivalent of-- oops not that.", "start": 2604.36, "duration": 4.77}, {"text": "We could create the equivalent\nof this kind of picture,", "start": 2609.13, "duration": 4.77}, {"text": "where each of these squares, or nodes,\nwe'll start calling them, kind of links", "start": 2613.9, "duration": 4.11}, {"text": "graphically to the other.", "start": 2618.01, "duration": 1.26}, {"text": "Well, we've seen these\nlinks, or these pointers,", "start": 2619.27, "duration": 2.52}, {"text": "literally arrows that are\npointing implemented in code.", "start": 2621.79, "duration": 2.7}, {"text": "An arrow or a pointer\nis just an address.", "start": 2624.49, "duration": 2.25}, {"text": "So you know what?", "start": 2626.74, "duration": 0.9}, {"text": "We should just ask malloc not for\nenough space for just the number 42,", "start": 2627.64, "duration": 5.67}, {"text": "we should instead, ask for a little\nmore memory in each of these squares,", "start": 2633.31, "duration": 4.68}, {"text": "making them pictorially rectangles now.", "start": 2637.99, "duration": 2.52}, {"text": "So that now, yes, we do have\nthese arrows conceptually", "start": 2640.51, "duration": 3.81}, {"text": "pointing from one location to another.", "start": 2644.32, "duration": 2.14}, {"text": "But what values do I actually want\nto put in these new additional boxes?", "start": 2646.46, "duration": 4.142}, {"text": "AUDIENCE: The addresses of the next.", "start": 2650.602, "duration": 1.968}, {"text": "DAVID J. MALAN: The\naddresses of the next.", "start": 2652.57, "duration": 1.23}, {"text": "So they're like little breadcrumbs.", "start": 2653.8, "duration": 1.458}, {"text": "So in this box here, associated\nwith the first value,", "start": 2655.258, "duration": 3.132}, {"text": "should be the address\nof my second value, 475.", "start": 2658.39, "duration": 4.56}, {"text": "Associated with my second\nvalue here, per the arrow--", "start": 2662.95, "duration": 3.42}, {"text": "and let me draw the arrow\nfrom the right place.", "start": 2666.37, "duration": 2.55}, {"text": "--from the arrow, should be the\naddress 150, because that's the last.", "start": 2668.92, "duration": 4.23}, {"text": "And then, from this extra\nbox, what should I put there?", "start": 2673.15, "duration": 3.94}, {"text": "Yeah?", "start": 2677.09, "duration": 0.5}, {"text": "AUDIENCE: Slash 0 or something?", "start": 2677.59, "duration": 1.29}, {"text": "DAVID J. MALAN: Yeah.", "start": 2678.88, "duration": 0.875}, {"text": "So probably, the equivalent of slash 0,\nwhich in the world of pointer's recall,", "start": 2679.755, "duration": 3.295}, {"text": "is null.", "start": 2683.05, "duration": 1.41}, {"text": "So just a special value that means\nthat's it, this is the end of the line.", "start": 2684.46, "duration": 3.36}, {"text": "That still leaves us with room to\nadd a fourth value and point to it,", "start": 2687.82, "duration": 3.5}, {"text": "but it for now, signifies very clearly\nto us there's nothing actually there.", "start": 2691.32, "duration": 4.7}, {"text": "So what did we just do?", "start": 2696.02, "duration": 2.19}, {"text": "We created a list of values\n50, oh sorry 42, 50, 13,", "start": 2698.21, "duration": 5.0}, {"text": "but we linked to them together.", "start": 2703.21, "duration": 1.339}, {"text": "First, pictorially, with just arrows.", "start": 2704.549, "duration": 1.541}, {"text": "Like any human might\nwith a piece of chalk.", "start": 2706.09, "duration": 2.19}, {"text": "But technically in\ncode, we could do this", "start": 2708.28, "duration": 2.25}, {"text": "by just storing addresses\nin each of these places.", "start": 2710.53, "duration": 3.85}, {"text": "So just to be clear then, what might\nthis actually translate to in code?", "start": 2714.38, "duration": 4.88}, {"text": "Well, what if I proposed this.", "start": 2719.26, "duration": 2.76}, {"text": "In code, we might do\nsomething like this.", "start": 2722.02, "duration": 6.3}, {"text": "If we want to store an integer.", "start": 2728.32, "duration": 1.511}, {"text": "We're of course, going to need to\nstore like int n, we'll call it.", "start": 2729.831, "duration": 2.749}, {"text": "n will represent 42, or 50, or 13.", "start": 2732.58, "duration": 3.21}, {"text": "But if we want to\ncreate a data structure,", "start": 2735.79, "duration": 1.795}, {"text": "we might want to start giving\nthis data structure a name.", "start": 2737.585, "duration": 2.375}, {"text": "I called it, a moment ago, node, which\nis a CS term for a node in a linked", "start": 2739.96, "duration": 4.29}, {"text": "list, so to speak.", "start": 2744.25, "duration": 1.18}, {"text": "And it looks like this.", "start": 2745.43, "duration": 0.98}, {"text": "So typedef means, give me my own type.", "start": 2746.41, "duration": 2.37}, {"text": "Struct means, make it a\nstructure, like a student was.", "start": 2748.78, "duration": 2.34}, {"text": "And then, node, which is going\nto be the name of this thing.", "start": 2751.12, "duration": 2.5}, {"text": "And I'll explain in a moment why I\nhave the word node twice this time.", "start": 2753.62, "duration": 4.1}, {"text": "But I left room on the board\nfor just one more line.", "start": 2757.72, "duration": 4.15}, {"text": "In addition to an int,\ncalled n, or whatever,", "start": 2761.87, "duration": 4.25}, {"text": "I need to somehow represent\nin code, the additional memory", "start": 2766.12, "duration": 3.33}, {"text": "that I want malloc to\ngive me for the address.", "start": 2769.45, "duration": 2.44}, {"text": "So first of all, these are\naddresses of what data types?", "start": 2771.89, "duration": 3.02}, {"text": "Each of those three new boxes.", "start": 2774.91, "duration": 1.81}, {"text": "AUDIENCE: [INAUDIBLE].", "start": 2776.72, "duration": 0.916}, {"text": "DAVID J. MALAN: They are the addresses\nof integers in that point in the story.", "start": 2777.636, "duration": 3.424}, {"text": "But technically, what is\nthis box really pointing to?", "start": 2781.06, "duration": 5.76}, {"text": "Is it pointing specifically to the ints?", "start": 2786.82, "duration": 2.55}, {"text": "AUDIENCE: [INAUDIBLE].", "start": 2789.37, "duration": 1.169}, {"text": "DAVID J. MALAN: It's pointing to that\nwhole chunk of memory, if you will.", "start": 2790.539, "duration": 3.041}, {"text": "So if you start thinking about each\nof these rectangles as being a node,", "start": 2793.58, "duration": 3.44}, {"text": "and each of the arrows as\npointing to another node,", "start": 2797.02, "duration": 2.89}, {"text": "we need to somehow express, I need\nto somehow store a pointer to a node.", "start": 2799.91, "duration": 5.6}, {"text": "In other words, each of these arrows\nneeds to point to another node.", "start": 2805.51, "duration": 3.0}, {"text": "And in code, we could say this.", "start": 2808.51, "duration": 2.99}, {"text": "Right?", "start": 2811.5, "duration": 0.535}, {"text": "Like, let's give it a name.", "start": 2812.035, "duration": 1.125}, {"text": "Instead of n, which is the\nnumber, let's call it next.", "start": 2813.16, "duration": 2.83}, {"text": "So next, shall be the name of this field\nthat points to the next node in memory.", "start": 2815.99, "duration": 3.95}, {"text": "And node star, what does that\nmean in English, if you will?", "start": 2819.94, "duration": 4.166}, {"text": "AUDIENCE: [INAUDIBLE].", "start": 2824.106, "duration": 1.041}, {"text": "DAVID J. MALAN: Say again?", "start": 2825.147, "duration": 1.083}, {"text": "AUDIENCE: Pointing to an address.", "start": 2826.23, "duration": 1.33}, {"text": "DAVID J. MALAN: Pointing to an address.", "start": 2827.56, "duration": 1.0}, {"text": "Right?", "start": 2828.56, "duration": 0.17}, {"text": "It looks different.", "start": 2828.73, "duration": 0.81}, {"text": "Node is a new word\ntoday and that's fine.", "start": 2829.54, "duration": 2.01}, {"text": "But node star, just means\na pointer to a node.", "start": 2831.55, "duration": 3.0}, {"text": "The address of a node.", "start": 2834.55, "duration": 1.41}, {"text": "And it turns out that\nthis is a custom structure", "start": 2835.96, "duration": 2.79}, {"text": "so we actually have to say this.", "start": 2838.75, "duration": 1.65}, {"text": "But it's the same principle even though\nthings are kind of escalating quickly", "start": 2840.4, "duration": 3.36}, {"text": "here, we just need to values, an int,\nand then, a pointer to another thing.", "start": 2843.76, "duration": 5.846}, {"text": "That other thing is\ngoing to be another node.", "start": 2849.606, "duration": 1.874}, {"text": "And we're just using a node,\nfrankly, to encapsulate two values--", "start": 2851.48, "duration": 3.68}, {"text": "an int and a pointer.", "start": 2855.16, "duration": 1.26}, {"text": "And the way you express in C,\nalbeit somewhat cryptically,", "start": 2856.42, "duration": 2.655}, {"text": "a pointer, or one of those arrows, is\nyou say give me a variable called next,", "start": 2859.075, "duration": 4.695}, {"text": "have it point to a\nstructure called node.", "start": 2863.77, "duration": 3.81}, {"text": "Or rather, have it be the address\nof a structure of type node.", "start": 2867.58, "duration": 4.35}, {"text": "Yeah?", "start": 2871.93, "duration": 0.761}, {"text": "AUDIENCE: How can you [? reveal ?]\nthe timing of struct node [INAUDIBLE]??", "start": 2872.691, "duration": 3.928}, {"text": "DAVID J. MALAN: Good question.", "start": 2880.321, "duration": 1.249}, {"text": "So this feels like a circular kind of\ndefinition because I'm defining a node,", "start": 2881.57, "duration": 4.86}, {"text": "and yet, inside of a node is a node.", "start": 2886.43, "duration": 2.55}, {"text": "That is OK because of the star.", "start": 2888.98, "duration": 2.88}, {"text": "It is necessary in C--", "start": 2891.86, "duration": 2.49}, {"text": "remember that C always is\nkind of read top to bottom.", "start": 2894.35, "duration": 3.69}, {"text": "So accordingly, this very first line\nof code here, typedef struct note,", "start": 2898.04, "duration": 4.59}, {"text": "at that point in the story,\nwhen clang has read that line,", "start": 2902.63, "duration": 2.94}, {"text": "it knows that a phrase,\nstruct node, exists.", "start": 2905.57, "duration": 3.251}, {"text": "AUDIENCE: That's why you\nsay nodes [INAUDIBLE]..", "start": 2908.821, "duration": 1.999}, {"text": "DAVID J. MALAN: Exactly.", "start": 2910.82, "duration": 1.211}, {"text": "Exactly.", "start": 2912.031, "duration": 0.499}, {"text": "We didn't need to do this with\nstudents because there were", "start": 2912.53, "duration": 1.62}, {"text": "no pointers involved to other students.", "start": 2914.15, "duration": 2.25}, {"text": "But yes, in this case.", "start": 2916.4, "duration": 1.3}, {"text": "So in short, this tells clang, hey,\nclang, give me a structure called node.", "start": 2917.7, "duration": 4.46}, {"text": "And then, in here, we say,\nhey, clang, each of those nodes", "start": 2922.16, "duration": 2.97}, {"text": "shall have two things,\nan integer called n,", "start": 2925.13, "duration": 2.67}, {"text": "and a pointer to another one of\nthese data structures of type node,", "start": 2927.8, "duration": 4.5}, {"text": "and call the whole thing, node.", "start": 2932.3, "duration": 3.48}, {"text": "It's a bit of a mouthful.", "start": 2935.78, "duration": 1.09}, {"text": "But all this is, is the following.", "start": 2936.87, "duration": 1.74}, {"text": "Let me go ahead and erase all of this.", "start": 2938.61, "duration": 1.85}, {"text": "All this data type is--", "start": 2940.46, "duration": 2.73}, {"text": "if we get rid of the picture\nwe draw on the fly there.", "start": 2943.19, "duration": 4.17}, {"text": "--is this says, hey, clang,\ngive me a data structure", "start": 2947.36, "duration": 3.39}, {"text": "that pictorially looks like this.", "start": 2950.75, "duration": 2.13}, {"text": "It's divided into two parts.", "start": 2952.88, "duration": 1.72}, {"text": "The first part is called n, the\nsecond type is called, next.", "start": 2954.6, "duration": 3.68}, {"text": "This data type is of type int.", "start": 2958.28, "duration": 2.1}, {"text": "This is a pointer to another such node.", "start": 2960.38, "duration": 3.71}, {"text": "And that's it.", "start": 2964.09, "duration": 0.82}, {"text": "Even though the code looks\ncomplex, the idea is exactly that.", "start": 2964.91, "duration": 3.27}, {"text": "Yeah?", "start": 2968.18, "duration": 1.292}, {"text": "AUDIENCE: [INAUDIBLE]?", "start": 2969.472, "duration": 2.48}, {"text": "Why do you have to\nsay struct node again?", "start": 2971.952, "duration": 2.978}, {"text": "DAVID J. MALAN: Good question.", "start": 2974.93, "duration": 2.52}, {"text": "The reason is, as just\ncame up a moment ago, clang", "start": 2977.45, "duration": 4.77}, {"text": "and C, in general, are kind of dumb.", "start": 2982.22, "duration": 1.65}, {"text": "They just read code top to bottom.", "start": 2983.87, "duration": 2.1}, {"text": "And the problem is, you have to\ndeclare the name of this structure", "start": 2985.97, "duration": 3.48}, {"text": "as being a struct node\nbefore you actually use it.", "start": 2989.45, "duration": 3.42}, {"text": "It's similar in spirit to our discussion\nof prototypes-- y functions need", "start": 2992.87, "duration": 3.06}, {"text": "to be mentioned way up top.", "start": 2995.93, "duration": 1.65}, {"text": "This just says to clang, give\nme a type called struct node.", "start": 2997.58, "duration": 3.36}, {"text": "You don't know what it's\ngoing to look like yet.", "start": 3000.94, "duration": 2.05}, {"text": "But I'll finish my thought later.", "start": 3002.99, "duration": 2.39}, {"text": "And then in here, we're just\ntelling clang, inside of that node", "start": 3005.38, "duration": 3.39}, {"text": "should be an integer, as well as,\na pointer to the very type of thing", "start": 3008.77, "duration": 3.91}, {"text": "I'm in the middle of defining.", "start": 3012.68, "duration": 1.37}, {"text": "But if I had left off the word node\nup there, and just said struct,", "start": 3014.05, "duration": 3.3}, {"text": "you couldn't do that because it\nhasn't seen the word N-O-D-E yet.", "start": 3017.35, "duration": 4.38}, {"text": "That's all.", "start": 3021.73, "duration": 1.02}, {"text": "Other questions?", "start": 3022.75, "duration": 1.9}, {"text": "All right.", "start": 3024.65, "duration": 0.5}, {"text": "So if I now have a data\nstructure called node,", "start": 3025.15, "duration": 4.62}, {"text": "I can use it to kind of stitch\ntogether these linked lists.", "start": 3029.77, "duration": 2.727}, {"text": "And maybe just the very\nthings a little bit,", "start": 3032.497, "duration": 1.833}, {"text": "and to start giving away\nsome ducks, would folks", "start": 3034.33, "duration": 2.82}, {"text": "be comfortable with volunteering\nto solve a problem here?", "start": 3037.15, "duration": 3.53}, {"text": "Yeah?", "start": 3040.68, "duration": 0.5}, {"text": "OK.", "start": 3041.18, "duration": 0.17}, {"text": "Come on up.", "start": 3041.35, "duration": 0.8}, {"text": "1, 2--", "start": 3042.15, "duration": 2.338}, {"text": "AUDIENCE: [INAUDIBLE].", "start": 3044.488, "duration": 1.452}, {"text": "DAVID J. MALAN: Sure.", "start": 3045.94, "duration": 0.949}, {"text": "Or you can take a duck and run.", "start": 3046.889, "duration": 1.291}, {"text": "OK.", "start": 3048.18, "duration": 0.5}, {"text": "1, 2, how about 3?", "start": 3048.68, "duration": 1.26}, {"text": "Come on over here, 3.", "start": 3049.94, "duration": 1.29}, {"text": "So if you want to be our first\npointer, you can be number 5.", "start": 3051.23, "duration": 3.54}, {"text": "Come on over here.", "start": 3054.77, "duration": 0.84}, {"text": "You want to be number 9.", "start": 3055.61, "duration": 2.13}, {"text": "And one more.", "start": 3057.74, "duration": 0.87}, {"text": "One more volunteer.", "start": 3058.61, "duration": 0.931}, {"text": "Come on over here.", "start": 3059.541, "duration": 0.749}, {"text": "Yeah.", "start": 3060.29, "duration": 1.11}, {"text": "All right.", "start": 3061.4, "duration": 0.63}, {"text": "So-- I'll meet you over here.", "start": 3062.03, "duration": 6.83}, {"text": "OK, 17.", "start": 3068.86, "duration": 1.28}, {"text": "All right.", "start": 3070.14, "duration": 0.57}, {"text": "So if you'd like to--", "start": 3070.71, "duration": 1.034}, {"text": "just so we pick this up for\nthose following along at home.", "start": 3071.744, "duration": 2.416}, {"text": "If you would like to just\nsay hello to the audience.", "start": 3074.16, "duration": 2.166}, {"text": "ANDREA: Hi, I'm Andrea.", "start": 3076.326, "duration": 1.202}, {"text": "[? COMEY: ?] Hi, [? I'm Comey. ?]", "start": 3077.528, "duration": 2.232}, {"text": "[? KYONG: ?] Hi, [? I'm Kyong. ?]", "start": 3079.76, "duration": 1.736}, {"text": "SPEAKER 2: Hi, I'm [INAUDIBLE].", "start": 3081.496, "duration": 1.421}, {"text": "DAVID J. MALAN: Wonderful.", "start": 3082.917, "duration": 1.083}, {"text": "OK.", "start": 3084.0, "duration": 0.27}, {"text": "If you wouldn't mind all just taking\na big step back over the ducks,", "start": 3084.27, "duration": 2.55}, {"text": "just so that we're a\nlittle farther back.", "start": 3086.82, "duration": 1.72}, {"text": "Let's go ahead and do this.", "start": 3088.54, "duration": 1.25}, {"text": "If you're our first pointer, if you\ncould come over here for instance,", "start": 3089.79, "duration": 3.27}, {"text": "and just stand outside the ducks.", "start": 3093.06, "duration": 1.41}, {"text": "And if you guys could come a little\nover here in front is still fine.", "start": 3094.47, "duration": 3.1}, {"text": "So here we have the\nmakings of a linked list.", "start": 3097.57, "duration": 2.616}, {"text": "And what's your name again?", "start": 3100.186, "duration": 1.124}, {"text": "[? COMEY: ?] [? Comey. ?]", "start": 3101.31, "duration": 1.041}, {"text": "DAVID J. MALAN: [? Comey ?] is\nour first pointer if you will.", "start": 3102.351, "duration": 2.769}, {"text": "Via [? Comey's ?]\nvariable are we just going", "start": 3105.12, "duration": 2.071}, {"text": "to keep track of the first\nelement of the linked list.", "start": 3107.191, "duration": 2.249}, {"text": "So if you could, with your\nleft hand, represent first.", "start": 3109.44, "duration": 3.124}, {"text": "Just point over at--\nwhat was your name again?", "start": 3112.564, "duration": 1.916}, {"text": "ANDREA: Andrea.", "start": 3114.48, "duration": 0.66}, {"text": "DAVID J. MALAN: So\nAndrea is the number 9.", "start": 3115.14, "duration": 1.75}, {"text": "If you could use your left\nhand to point at number 5.", "start": 3116.89, "duration": 2.42}, {"text": "And if you could use your left\nhand, yep, to point at number 17.", "start": 3119.31, "duration": 3.33}, {"text": "And your left hand to just point at\nnull, which we'll just call the ground.", "start": 3122.64, "duration": 3.126}, {"text": "So you don't want to\njust point it randomly", "start": 3125.766, "duration": 1.79}, {"text": "because that would be like following\na bogus pointer, so here means null.", "start": 3127.556, "duration": 3.064}, {"text": "All right.", "start": 3130.62, "duration": 0.5}, {"text": "So this is a linked list.", "start": 3131.12, "duration": 1.84}, {"text": "All you need to store are\nlinked list of three values", "start": 3132.96, "duration": 2.94}, {"text": "is three nodes, inside of\nwhich are three integers,", "start": 3135.9, "duration": 3.51}, {"text": "and their left hands represents\nthat next pointer, so to speak.", "start": 3139.41, "duration": 3.52}, {"text": "[? Comey's ?] a little different,\nin that she's not holding a value.", "start": 3142.93, "duration": 2.99}, {"text": "She's not holding an integer.", "start": 3145.92, "duration": 1.29}, {"text": "Rather, holding just the\nname of the variable, first.", "start": 3147.21, "duration": 4.5}, {"text": "So you're the only one that's\ndifferent here fundamentally.", "start": 3151.71, "duration": 2.5}, {"text": "So suppose I want to\ninsert the number 20?", "start": 3154.21, "duration": 2.4}, {"text": "Could someone volunteer to be number 20?", "start": 3156.61, "duration": 1.86}, {"text": "OK.", "start": 3158.47, "duration": 0.5}, {"text": "Come on up.", "start": 3158.97, "duration": 1.72}, {"text": "All right.", "start": 3160.69, "duration": 0.95}, {"text": "And what's your name?", "start": 3161.64, "duration": 1.761}, {"text": "ERIC: Eric.", "start": 3163.401, "duration": 0.499}, {"text": "DAVID J. MALAN: Eric.", "start": 3163.9, "duration": 0.26}, {"text": "Eric, you're the number 20.", "start": 3164.16, "duration": 1.56}, {"text": "And Eric, actually, let's see.", "start": 3165.72, "duration": 1.935}, {"text": "Actually can we do this?", "start": 3170.76, "duration": 1.53}, {"text": "Let me give-- let me make\nthis a little more different.", "start": 3172.29, "duration": 5.171}, {"text": "OK.", "start": 3177.461, "duration": 0.499}, {"text": "That never happened.", "start": 3177.96, "duration": 1.06}, {"text": "OK.", "start": 3179.02, "duration": 0.65}, {"text": "Eric, give me that please.", "start": 3179.67, "duration": 2.91}, {"text": "I want to insert Eric as number 5.", "start": 3182.58, "duration": 1.95}, {"text": "So Eric, I'm keeping this list sorted.", "start": 3184.53, "duration": 2.144}, {"text": "So where, obviously, you're going to go?", "start": 3186.674, "duration": 1.666}, {"text": "ERIC: Go right there.", "start": 3188.34, "duration": 1.2}, {"text": "DAVID J. MALAN: All right.", "start": 3189.54, "duration": 0.27}, {"text": "But before you do that, let's just\nconsider what this looks like in code.", "start": 3189.81, "duration": 3.041}, {"text": "In code, presumably, we have\nmalloced Eric from the audience.", "start": 3192.851, "duration": 4.609}, {"text": "I've given him a value, n of number 5.", "start": 3197.46, "duration": 2.79}, {"text": "And his left hand is like, it's garbage\nvalue right now, because it's not", "start": 3200.25, "duration": 3.3}, {"text": "pointing to anything specific.", "start": 3203.55, "duration": 1.62}, {"text": "So he's got two values-- an integer,\nand a left hand representing", "start": 3205.17, "duration": 3.51}, {"text": "the next pointer.", "start": 3208.68, "duration": 1.35}, {"text": "If the goal is to put\nEric in sorted order.", "start": 3210.03, "duration": 4.57}, {"text": "What should our steps be?", "start": 3214.6, "duration": 1.61}, {"text": "Like, whose hand should point\nwhere, and in what order?", "start": 3216.21, "duration": 2.48}, {"text": "Yeah.", "start": 3218.69, "duration": 0.5}, {"text": "Give us one step.", "start": 3219.19, "duration": 0.71}, {"text": "AUDIENCE: You should point to number 9.", "start": 3219.9, "duration": 1.695}, {"text": "DAVID J. MALAN: OK so you\nshould point at number 9,", "start": 3221.595, "duration": 2.125}, {"text": "which is equivalent to saying,\npoint at whatever first.", "start": 3223.72, "duration": 2.946}, {"text": "Where [? Comey ?] is pointing at.", "start": 3226.666, "duration": 1.374}, {"text": "So go ahead and do that.", "start": 3228.04, "duration": 1.14}, {"text": "All right next?", "start": 3229.18, "duration": 0.87}, {"text": "What's the next step?", "start": 3230.05, "duration": 0.5}, {"text": "Someone else?", "start": 3230.55, "duration": 0.541}, {"text": "Someone else.", "start": 3234.279, "duration": 0.541}, {"text": "Almost there.", "start": 3234.82, "duration": 0.6}, {"text": "Yeah?", "start": 3235.42, "duration": 0.5}, {"text": "AUDIENCE: First should point to 5.", "start": 3235.92, "duration": 1.417}, {"text": "DAVID J. MALAN: OK.", "start": 3237.337, "duration": 0.791}, {"text": "So first, or [? Comey, ?]\ncould you point to 5.", "start": 3238.128, "duration": 2.026}, {"text": "And that's fine.", "start": 3240.154, "duration": 0.666}, {"text": "You don't even have to move.", "start": 3240.82, "duration": 0.93}, {"text": "Right?", "start": 3241.75, "duration": 0.18}, {"text": "This is the beauty of a linked list.", "start": 3241.93, "duration": 1.5}, {"text": "It doesn't matter where\nyou are in memory,", "start": 3243.43, "duration": 2.044}, {"text": "it's the whole beauty of these\npointers, where you can literally", "start": 3245.474, "duration": 2.666}, {"text": "point at that other location.", "start": 3248.14, "duration": 1.314}, {"text": "It's not an array where they need\nto be standing back to back to back.", "start": 3249.454, "duration": 2.916}, {"text": "They can be pointing anywhere.", "start": 3252.37, "duration": 1.29}, {"text": "All right.", "start": 3253.66, "duration": 0.5}, {"text": "Let's go ahead and insert one more.", "start": 3254.16, "duration": 1.6}, {"text": "Who wants to be say, 55?", "start": 3255.76, "duration": 1.676}, {"text": "Big value.", "start": 3257.436, "duration": 0.499}, {"text": "Yeah.", "start": 3257.935, "duration": 0.5}, {"text": "Come on down.", "start": 3258.435, "duration": 2.495}, {"text": "All right.", "start": 3260.93, "duration": 0.5}, {"text": "What's your name?", "start": 3261.43, "duration": 0.3}, {"text": "[? KYONG: ?] [? Kyong. ?]", "start": 3261.73, "duration": 0.89}, {"text": "DAVID J. MALAN: [? Kyong. ?] OK.", "start": 3262.62, "duration": 0.73}, {"text": "So come on over.", "start": 3263.35, "duration": 0.94}, {"text": "So we've just malloced\n[? Kyong ?] from the audience.", "start": 3264.29, "duration": 2.208}, {"text": "I've given him his end value of 55.", "start": 3266.498, "duration": 2.102}, {"text": "His left hand is just some\ngarbage value right now.", "start": 3268.6, "duration": 2.97}, {"text": "How do we insert [? Kyong ?]\nin the right order?", "start": 3271.57, "duration": 2.79}, {"text": "Where is the obviously supposed to go?", "start": 3274.36, "duration": 2.639}, {"text": "In sorted order, he\nobviously belongs at the end.", "start": 3276.999, "duration": 2.041}, {"text": "But here's the catch\nwith the linked list.", "start": 3279.04, "duration": 3.18}, {"text": "Just like when we've discussed\nsearching and sorting in the past,", "start": 3282.22, "duration": 2.94}, {"text": "the computer is pretty blind\nto all but just one value.", "start": 3285.16, "duration": 3.39}, {"text": "And the linked list, at the moment--", "start": 3288.55, "duration": 1.6}, {"text": "like, I don't know that these\nthree, these four, exist.", "start": 3290.15, "duration": 2.66}, {"text": "All I know really, is\nthat [? Comey ?] exists.", "start": 3292.81, "duration": 2.34}, {"text": "Because via this first\npointer, is the only access", "start": 3295.15, "duration": 3.45}, {"text": "to the rest of the elements.", "start": 3298.6, "duration": 1.5}, {"text": "And so what's cool about a linked\nlist, but perhaps not obvious,", "start": 3300.1, "duration": 3.15}, {"text": "is that you only--", "start": 3303.25, "duration": 1.2}, {"text": "the most important value is the first.", "start": 3304.45, "duration": 2.252}, {"text": "Because from the first value,\nyou can get to everyone else.", "start": 3306.702, "duration": 2.458}, {"text": "It's not useful-- excuse me\nfor me to remember, Andrea?", "start": 3309.16, "duration": 3.03}, {"text": "--Andrea alone, because\nif I do, I've just", "start": 3312.19, "duration": 2.58}, {"text": "lost track of [? Comey ?] and more\nimportantly, because of his number,", "start": 3314.77, "duration": 3.57}, {"text": "Eric.", "start": 3318.34, "duration": 0.594}, {"text": "So all I have to do really,\nis remember [? Comey. ?]", "start": 3318.934, "duration": 2.166}, {"text": "So if the goal now is to insert number\n55, what steps should come first?", "start": 3321.1, "duration": 6.14}, {"text": "No pun intended.", "start": 3327.24, "duration": 1.244}, {"text": "AUDIENCE: [INAUDIBLE].", "start": 3328.484, "duration": 0.916}, {"text": "DAVID J. MALAN: Say again.", "start": 3329.4, "duration": 1.083}, {"text": "AUDIENCE: Finding the first space.", "start": 3330.483, "duration": 1.426}, {"text": "DAVID J. MALAN: OK.", "start": 3331.909, "duration": 0.791}, {"text": "Finding the first space.", "start": 3332.7, "duration": 0.79}, {"text": "So I'm going to start at [? Comey, ?]\nand I'm going to follow this pointer.", "start": 3333.49, "duration": 3.125}, {"text": "Number 5, does 55 belong here?", "start": 3336.615, "duration": 2.396}, {"text": "No.", "start": 3339.011, "duration": 0.499}, {"text": "So I'm going to follow this\npointer and get to Andrea.", "start": 3339.51, "duration": 2.73}, {"text": "Does 55 belong here?", "start": 3342.24, "duration": 1.221}, {"text": "No.", "start": 3343.461, "duration": 0.499}, {"text": "Gonna follow her pointer,\nand 22, does it belong here?", "start": 3343.96, "duration": 2.971}, {"text": "No.", "start": 3346.931, "duration": 0.499}, {"text": "I follow this pointer, 26?", "start": 3347.43, "duration": 1.38}, {"text": "No.", "start": 3348.81, "duration": 0.54}, {"text": "But you have a free hand, it turns out.", "start": 3349.35, "duration": 1.65}, {"text": "So what step should come next?", "start": 3351.0, "duration": 1.874}, {"text": "AUDIENCE: [INAUDIBLE].", "start": 3352.874, "duration": 1.976}, {"text": "DAVID J. MALAN: We could have\nyou point at 55, and now done.", "start": 3354.85, "duration": 3.75}, {"text": "So relatively simple, but what\nwas the running time of this?", "start": 3358.6, "duration": 4.102}, {"text": "AUDIENCE: [INAUDIBLE].", "start": 3362.702, "duration": 1.345}, {"text": "DAVID J. MALAN: It's big o of n.", "start": 3364.047, "duration": 1.333}, {"text": "It's linear.", "start": 3365.38, "duration": 0.84}, {"text": "Because I had to start at\nthe beginning, even though we", "start": 3366.22, "duration": 2.31}, {"text": "humans have the luxury\nof just eyeballing it.", "start": 3368.53, "duration": 1.68}, {"text": "Saying, oh, obviously, he\nbelongs way at the end.", "start": 3370.21, "duration": 1.65}, {"text": "Mm-mm.", "start": 3371.86, "duration": 0.54}, {"text": "Not in code.", "start": 3372.4, "duration": 0.75}, {"text": "Like, we have to start at the beginning\nto reverse the whole darn list,", "start": 3373.15, "duration": 2.958}, {"text": "until we get linearly to the very end.", "start": 3376.108, "duration": 1.662}, {"text": "And now we're done.", "start": 3377.77, "duration": 1.09}, {"text": "Let's try one last one.", "start": 3378.86, "duration": 1.22}, {"text": "How about 20?", "start": 3380.08, "duration": 1.81}, {"text": "Yeah.", "start": 3381.89, "duration": 0.66}, {"text": "Great.", "start": 3382.55, "duration": 0.23}, {"text": "Come on down.", "start": 3382.78, "duration": 0.55}, {"text": "What's your name?", "start": 3383.33, "duration": 0.719}, {"text": "JAMES: James.", "start": 3384.049, "duration": 0.541}, {"text": "DAVID J. MALAN: James.", "start": 3384.59, "duration": 0.916}, {"text": "All right, James.", "start": 3385.506, "duration": 0.724}, {"text": "All right.", "start": 3386.23, "duration": 0.34}, {"text": "So we just malloced James,\ngiven him the number 20.", "start": 3386.57, "duration": 2.18}, {"text": "He obviously belongs\nroughly in the middle.", "start": 3388.75, "duration": 1.791}, {"text": "What's the first step?", "start": 3390.541, "duration": 1.959}, {"text": "AUDIENCE: [INAUDIBLE].", "start": 3392.5, "duration": 0.96}, {"text": "DAVID J. MALAN: Sorry?", "start": 3393.46, "duration": 1.054}, {"text": "AUDIENCE: [INAUDIBLE].", "start": 3394.514, "duration": 0.916}, {"text": "DAVID J. MALAN: All right.", "start": 3395.43, "duration": 0.43}, {"text": "So we start with [? Comey, ?] again.", "start": 3395.86, "duration": 1.12}, {"text": "All right.", "start": 3396.98, "duration": 0.499}, {"text": "First, OK.", "start": 3397.479, "duration": 0.501}, {"text": "5, do you belong here?", "start": 3397.98, "duration": 1.24}, {"text": "No.", "start": 3399.22, "duration": 0.912}, {"text": "Let me follow the link.", "start": 3400.132, "duration": 0.958}, {"text": "OK 9, do you belong here?", "start": 3401.09, "duration": 1.28}, {"text": "No.", "start": 3402.37, "duration": 0.69}, {"text": "Do you belong at 22-- ooh.", "start": 3403.06, "duration": 1.762}, {"text": "But what did I just do wrong?", "start": 3404.822, "duration": 1.208}, {"text": "I went too far.", "start": 3408.74, "duration": 0.842}, {"text": "At least in this story.", "start": 3409.582, "duration": 0.958}, {"text": "Like, I literally--\nAndrea is behind me now.", "start": 3410.54, "duration": 1.79}, {"text": "OK.", "start": 3412.33, "duration": 0.5}, {"text": "So can I follow the pointer backwards?", "start": 3412.83, "duration": 2.53}, {"text": "You can't.", "start": 3415.36, "duration": 0.54}, {"text": "Like in every picture we've\ndrawn, and every example", "start": 3415.9, "duration": 2.1}, {"text": "we've done with an address, we only\nhave the address of the next pointer.", "start": 3418.0, "duration": 2.4}, {"text": "We don't have what's called, a doubly\nlinked list, at least in this story,", "start": 3420.4, "duration": 3.232}, {"text": "where I can just turn around.", "start": 3423.632, "duration": 1.208}, {"text": "So that was a bug.", "start": 3424.84, "duration": 0.75}, {"text": "So I need to start over instead.", "start": 3425.59, "duration": 1.333}, {"text": "First, OK 5, OK 19--", "start": 3426.923, "duration": 2.177}, {"text": "what I really need in\ncode, ultimately, is", "start": 3429.1, "duration": 2.1}, {"text": "to kind of peek ahead and not\nactually move-- not that far.", "start": 3431.2, "duration": 3.0}, {"text": "Just to 22.", "start": 3434.2, "duration": 0.98}, {"text": "Peek ahead at 22 and realize,\noh, that's going to be too far.", "start": 3435.18, "duration": 4.07}, {"text": "This is not yet far enough.", "start": 3439.25, "duration": 1.56}, {"text": "So let's go ahead and bring James over.", "start": 3440.81, "duration": 1.844}, {"text": "Well, actually, you can\nstay there physically.", "start": 3442.654, "duration": 1.916}, {"text": "But what step has to happen first?", "start": 3444.57, "duration": 1.66}, {"text": "I know now he belongs in here.", "start": 3446.23, "duration": 3.769}, {"text": "You want to point at him?", "start": 3449.999, "duration": 1.041}, {"text": "OK.", "start": 3451.04, "duration": 0.5}, {"text": "Point at him.", "start": 3451.54, "duration": 0.754}, {"text": "ANDREA: Oh.", "start": 3452.294, "duration": 0.5}, {"text": "I'm sorry, he points first.", "start": 3452.794, "duration": 1.396}, {"text": "DAVID J. MALAN: Well let's do\nthat, just because it is incorrect.", "start": 3454.19, "duration": 1.75}, {"text": "That's fine.", "start": 3455.94, "duration": 0.53}, {"text": "OK.", "start": 3456.47, "duration": 0.5}, {"text": "Andrea proposed that we point here, but\nshe just broke the whole linked list.", "start": 3456.97, "duration": 3.36}, {"text": "Why?", "start": 3460.33, "duration": 0.5}, {"text": "ANDREA: Because there's\nnothing to point at.", "start": 3460.83, "duration": 1.834}, {"text": "DAVID J. MALAN: Right.", "start": 3462.664, "duration": 0.916}, {"text": "No one is remembering--\nwhat's was your name again?", "start": 3463.58, "duration": 1.53}, {"text": "[? KYONG: ?] [? Kyong. ?]", "start": 3465.11, "duration": 0.36}, {"text": "DAVID J. MALAN: No one's\nremembered where [? Kyong ?] was.", "start": 3465.47, "duration": 1.67}, {"text": "So you can't do that.", "start": 3467.14, "duration": 0.52}, {"text": "Your left hand has to stay there.", "start": 3467.66, "duration": 1.374}, {"text": "So what steps should\nhappen first instead?", "start": 3469.034, "duration": 1.768}, {"text": "AUDIENCE: [INAUDIBLE].", "start": 3470.802, "duration": 1.418}, {"text": "DAVID J. MALAN: James\nshould point at whatever", "start": 3472.22, "duration": 2.37}, {"text": "Andrea is pointing at, perhaps?", "start": 3474.59, "duration": 1.69}, {"text": "So a little redundantly at\nthe moment, just like before.", "start": 3476.28, "duration": 2.334}, {"text": "OK.", "start": 3478.614, "duration": 0.499}, {"text": "Now what happens next?", "start": 3479.113, "duration": 0.947}, {"text": "That's step one.", "start": 3480.06, "duration": 0.666}, {"text": "ANDREA: Now I can point.", "start": 3480.726, "duration": 1.156}, {"text": "DAVID J. MALAN: Now\nyou can point at him.", "start": 3481.882, "duration": 1.708}, {"text": "OK.", "start": 3483.59, "duration": 0.499}, {"text": "You could do that.", "start": 3484.089, "duration": 0.951}, {"text": "All right.", "start": 3485.04, "duration": 0.5}, {"text": "And so now, this looks\nlike a complete mess,", "start": 3485.54, "duration": 2.82}, {"text": "but if we know that\n[? Comey ?] is first,", "start": 3488.36, "duration": 2.43}, {"text": "we can follow the breadcrumbs to Eric,\nand then to Andrea, and then to James,", "start": 3490.79, "duration": 6.12}, {"text": "and then the rest of our\nlist step by step by step.", "start": 3496.91, "duration": 3.9}, {"text": "So it's a huge amount of like logic now.", "start": 3500.81, "duration": 2.46}, {"text": "But what problem have we solved?", "start": 3503.27, "duration": 1.442}, {"text": "And I think we identified\nit over here earlier.", "start": 3504.712, "duration": 1.958}, {"text": "What was the problem first\nand foremost with the arrays?", "start": 3506.67, "duration": 2.962}, {"text": "AUDIENCE: [INAUDIBLE].", "start": 3509.632, "duration": 1.248}, {"text": "DAVID J. MALAN: You have to\ndecide on their size in advance.", "start": 3510.88, "duration": 2.76}, {"text": "And once you do that, if you want\nto add an additional element,", "start": 3513.64, "duration": 3.25}, {"text": "you have to resize the whole darn thing.", "start": 3516.89, "duration": 1.721}, {"text": "Which is expensive because you\nhave to move everyone around.", "start": 3518.611, "duration": 2.499}, {"text": "Now frankly, I'm being\na little greedy here.", "start": 3521.11, "duration": 2.129}, {"text": "And every time we've\ninserted these new elements,", "start": 3523.239, "duration": 2.041}, {"text": "I've been keeping them in sorted order.", "start": 3525.28, "duration": 1.624}, {"text": "So it would seem that if you insert\nthings in sorted order, big o event,", "start": 3526.904, "duration": 3.626}, {"text": "every time.", "start": 3530.53, "duration": 0.54}, {"text": "Because in the worst\ncase, the new element", "start": 3531.07, "duration": 1.53}, {"text": "might end up all the way at the end.", "start": 3532.6, "duration": 1.68}, {"text": "But what if we relax that constraint?", "start": 3534.28, "duration": 1.56}, {"text": "What if I'm not so uptight and need\neverything nice and orderly and sorted?", "start": 3535.84, "duration": 4.11}, {"text": "What if I just want to keep growing\nthe list in any random order?", "start": 3539.95, "duration": 3.0}, {"text": "And I allocate the number 34.", "start": 3542.95, "duration": 2.25}, {"text": "And I'll play the number 34.", "start": 3545.2, "duration": 1.36}, {"text": "Malloc 34.", "start": 3546.56, "duration": 1.53}, {"text": "Where is the quickest\nplace for me to go?", "start": 3548.09, "duration": 3.62}, {"text": "Yeah?", "start": 3551.71, "duration": 0.78}, {"text": "AUDIENCE: Point to 5, and\nthen have [INAUDIBLE]..", "start": 3552.49, "duration": 1.69}, {"text": "DAVID J. MALAN: OK.", "start": 3554.18, "duration": 0.25}, {"text": "I'll point to 5, and then,\n[? Comey, ?] if you could point to me.", "start": 3554.43, "duration": 2.02}, {"text": "Done.", "start": 3556.45, "duration": 0.84}, {"text": "One-- well, two steps.", "start": 3557.29, "duration": 1.24}, {"text": "All right.", "start": 3558.53, "duration": 0.5}, {"text": "Suppose now, I malloc 17 with\nsomeone else, who'll we'll", "start": 3559.03, "duration": 3.354}, {"text": "pretend is right here.", "start": 3562.384, "duration": 0.916}, {"text": "Where's the best place for 17 to go?", "start": 3563.3, "duration": 2.444}, {"text": "AUDIENCE: [INAUDIBLE].", "start": 3565.744, "duration": 1.206}, {"text": "DAVID J. MALAN: Right\nafter [? Comey ?] too.", "start": 3566.95, "duration": 1.833}, {"text": "So now, [? Comey ?] can point at 17, 17\ncan point at me, I can point at Eric,", "start": 3568.783, "duration": 4.537}, {"text": "and so forth.", "start": 3573.32, "duration": 1.17}, {"text": "And that's two steps again.", "start": 3574.49, "duration": 1.25}, {"text": "Two steps-- if it's the same\nnumber of steps every time,", "start": 3575.74, "duration": 2.333}, {"text": "we call that, constant time.", "start": 3578.073, "duration": 1.237}, {"text": "And we write it as big o of 1.", "start": 3579.31, "duration": 2.13}, {"text": "And so here too, it's just a trade off.", "start": 3581.44, "duration": 1.68}, {"text": "If you want really fast insertions,\ndon't worry about sorting.", "start": 3583.12, "duration": 3.45}, {"text": "Just put them at the beginning\nand deal with it later.", "start": 3586.57, "duration": 2.25}, {"text": "If you want a dynamic resizeability,\ndon't use an array, use a linked list,", "start": 3588.82, "duration": 4.084}, {"text": "and just keep allocating more and\nmore as you go without wasting", "start": 3592.904, "duration": 2.666}, {"text": "a huge amount of space too.", "start": 3595.57, "duration": 1.249}, {"text": "Which notice, that's another\nbig problem with an array.", "start": 3596.819, "duration": 2.291}, {"text": "If you over allocate space, and only use\npart of it, you're just wasting space.", "start": 3599.11, "duration": 3.82}, {"text": "So there's no one solution here.", "start": 3602.93, "duration": 1.474}, {"text": "But we do now have the\ncapabilities, thanks to the structs", "start": 3604.404, "duration": 2.416}, {"text": "and pointers to stitch together,\nif you will, these new problems.", "start": 3606.82, "duration": 4.62}, {"text": "Yes, please.", "start": 3611.44, "duration": 0.705}, {"text": "SPEAKER 2: Why can't\nthe node [INAUDIBLE]??", "start": 3612.145, "duration": 1.791}, {"text": "DAVID J. MALAN: And\nwho am I in this story?", "start": 3617.36, "duration": 2.104}, {"text": "SPEAKER 2: [INAUDIBLE].", "start": 3619.464, "duration": 0.968}, {"text": "DAVID J. MALAN: Oh, OK.", "start": 3620.432, "duration": 0.958}, {"text": "Absolutely.", "start": 3621.39, "duration": 0.61}, {"text": "So another very reasonable\nidea would be, well,", "start": 3622.0, "duration": 2.33}, {"text": "why don't we just put\nthe new ones at the end?", "start": 3624.33, "duration": 2.28}, {"text": "That's fine if I keep\ntrack of who is at the end.", "start": 3626.61, "duration": 3.61}, {"text": "The problem, is at the\nmoment in the story,", "start": 3630.22, "duration": 2.03}, {"text": "and we'll ultimately see this in code,\nI'm only remembering [? Comey. ?] And", "start": 3632.25, "duration": 3.166}, {"text": "from [? Comey ?] am I\ngetting everywhere else.", "start": 3635.416, "duration": 2.384}, {"text": "I could have another\npointer, a second pointer,", "start": 3637.8, "duration": 2.43}, {"text": "and literally call it, last,\nthat's equivalent to you.", "start": 3640.23, "duration": 2.52}, {"text": "Or that's always pointing at you.", "start": 3642.75, "duration": 1.65}, {"text": "I just need then two pointers,\none literally called first,", "start": 3644.4, "duration": 2.46}, {"text": "one literally called last.", "start": 3646.86, "duration": 1.083}, {"text": "That's fine.", "start": 3647.943, "duration": 0.687}, {"text": "That's a nice optimization if I want\nto throw all the elements at the end.", "start": 3648.63, "duration": 3.6}, {"text": "And frankly, I could get really fancy--", "start": 3652.23, "duration": 2.34}, {"text": "and to solve the problem\nthat Andrea cited earlier--", "start": 3654.57, "duration": 2.73}, {"text": "if I store not just an int\nand a pointer, but instead,", "start": 3657.3, "duration": 3.57}, {"text": "an int and two pointers,\nI can even have each", "start": 3660.87, "duration": 2.7}, {"text": "of these guys pointing with\ntheir left and right hands", "start": 3663.57, "duration": 2.28}, {"text": "in a doubly linked list, so as to solve\nthe problem Andrea identified, which", "start": 3665.85, "duration": 4.68}, {"text": "was if I go too far no big deal.", "start": 3670.53, "duration": 2.05}, {"text": "Take one step back.", "start": 3672.58, "duration": 0.955}, {"text": "I don't have to think as\nhard about that logic.", "start": 3673.535, "duration": 2.305}, {"text": "So there too, a trade off.", "start": 3675.84, "duration": 1.38}, {"text": "Let's go ahead and take\na five minute break.", "start": 3677.22, "duration": 1.29}, {"text": "I'll turn on some music.", "start": 3678.51, "duration": 0.69}, {"text": "Grab a duck now, if you'd like.", "start": 3679.2, "duration": 1.05}, {"text": "And we'll return with some\nfancier data structures still.", "start": 3680.25, "duration": 2.4}, {"text": "Thanks.", "start": 3682.65, "duration": 1.3}, {"text": "All right.", "start": 3683.95, "duration": 0.5}, {"text": "We're back.", "start": 3684.45, "duration": 0.499}, {"text": "So let's now translate some\nof these ideas to code.", "start": 3684.949, "duration": 2.628}, {"text": "So that we can actually solve\nthis problem a little more", "start": 3687.577, "duration": 2.333}, {"text": "concretely than just having\nhumans pointing at each other.", "start": 3689.91, "duration": 2.86}, {"text": "So for instance, let's\ntry to distill everything", "start": 3692.77, "duration": 2.06}, {"text": "we've been talking about\ninto just a goal in code", "start": 3694.83, "duration": 2.52}, {"text": "of storing a list of numbers.", "start": 3697.35, "duration": 1.83}, {"text": "I would propose that we can take\nlike three passes at this problem.", "start": 3699.18, "duration": 3.45}, {"text": "The first would be, let's just\ndecide in advance how many numbers we", "start": 3702.63, "duration": 2.992}, {"text": "want to store so we don't\nhave to deal with all", "start": 3705.622, "duration": 1.958}, {"text": "this complexity with the pointing\nand the pointers and all this,", "start": 3707.58, "duration": 2.97}, {"text": "and just hard code that\nvalue somehow, and just stop", "start": 3710.55, "duration": 3.18}, {"text": "when the user is inputted\nthat many numbers and no more.", "start": 3713.73, "duration": 2.94}, {"text": "Two, we can improve upon that and at\nleast let the user dynamically resize", "start": 3716.67, "duration": 4.74}, {"text": "their array.", "start": 3721.41, "duration": 0.84}, {"text": "So that if they decide to input\nmore numbers than we intend,", "start": 3722.25, "duration": 2.79}, {"text": "it's going to grow, and deal with that.", "start": 3725.04, "duration": 1.68}, {"text": "Of course, arrays are\nnot necessarily ideal", "start": 3726.72, "duration": 1.95}, {"text": "because they have to do all that\ndamn copying from old to new.", "start": 3728.67, "duration": 2.88}, {"text": "That's linear time.", "start": 3731.55, "duration": 1.05}, {"text": "It would seem smartest to\nget subversion 3, which", "start": 3732.6, "duration": 2.305}, {"text": "is actually going to use a linked list.", "start": 3734.905, "duration": 1.625}, {"text": "So we're just more modestly\nallocating space for another number,", "start": 3736.53, "duration": 4.14}, {"text": "and another number, and another\nnumber, or really a node.", "start": 3740.67, "duration": 2.82}, {"text": "One number at a time.", "start": 3743.49, "duration": 1.66}, {"text": "So let me go ahead and start as follows.", "start": 3745.15, "duration": 2.04}, {"text": "I'm going to go ahead and include\nsome familiar lines in list 0.c,", "start": 3747.19, "duration": 6.23}, {"text": "of the CS50 library, just to make it\neasy to get some user input for this.", "start": 3753.42, "duration": 3.48}, {"text": "And standard iO dot h, for printdef.", "start": 3756.9, "duration": 2.07}, {"text": "And let me go ahead and declare\nmy main function as usual.", "start": 3758.97, "duration": 3.294}, {"text": "And then, in here let's\ndo a couple of things.", "start": 3762.264, "duration": 1.916}, {"text": "First, let's ask the user\nfor the capacity of the array", "start": 3764.18, "duration": 4.45}, {"text": "that we're going to use.", "start": 3768.63, "duration": 1.02}, {"text": "Or rather, let's do this first.", "start": 3769.65, "duration": 1.291}, {"text": "Let me first rewind\nand say, you know what?", "start": 3770.941, "duration": 2.309}, {"text": "Int, numbers, 50.", "start": 3773.25, "duration": 2.04}, {"text": "Well, that's going to be\nannoying to type in 50 numbers.", "start": 3775.29, "duration": 2.79}, {"text": "We're going to give the user two numbers\nat first, that here, she can type in.", "start": 3778.08, "duration": 3.53}, {"text": "Next, let's go ahead and prompt\nthe user for those numbers.", "start": 3781.61, "duration": 4.05}, {"text": "So let me go ahead and say--", "start": 3785.66, "duration": 3.447}, {"text": "let's do this.", "start": 3789.107, "duration": 0.583}, {"text": "Let's at least clean this up a little\nbit so that we can reuse this value.", "start": 3789.69, "duration": 3.81}, {"text": "So we don't have a magic number.", "start": 3793.5, "duration": 1.41}, {"text": "This just came up in\ndiscussion actually.", "start": 3794.91, "duration": 1.92}, {"text": "So while-- do I want to do that?", "start": 3796.83, "duration": 3.891}, {"text": "Nope.", "start": 3800.721, "duration": 0.499}, {"text": "Let me fix this.", "start": 3801.22, "duration": 0.92}, {"text": "This will be my capacity of size 2.", "start": 3802.14, "duration": 2.677}, {"text": "And that's going to give me that size.", "start": 3804.817, "duration": 1.583}, {"text": "And then, I'm going to keep\ntrack of how many integers", "start": 3806.4, "duration": 2.31}, {"text": "I've prompted the user for so far.", "start": 3808.71, "duration": 1.914}, {"text": "So initially, the size of this\nstructure is going to be 0.", "start": 3810.624, "duration": 2.416}, {"text": "But it's capacity, so to speak, is 2.", "start": 3813.04, "duration": 2.24}, {"text": "So size means how many things are in it.", "start": 3815.28, "duration": 1.68}, {"text": "Capacity means how many\nthings can be in it.", "start": 3816.96, "duration": 2.41}, {"text": "And while the size of the structure\nis less than its capacity,", "start": 3819.37, "duration": 3.83}, {"text": "let's go ahead and get\nsome inputs from the user.", "start": 3823.2, "duration": 2.26}, {"text": "Let's go ahead and ask them for a\nnumber, using our old friend, get int.", "start": 3825.46, "duration": 4.28}, {"text": "And just say, give me a number.", "start": 3829.74, "duration": 1.71}, {"text": "And then, let me go ahead\nand insert the number", "start": 3831.45, "duration": 3.36}, {"text": "that they type in into this array\nat location size, like this.", "start": 3834.81, "duration": 5.58}, {"text": "And then, do size plus, plus.", "start": 3840.39, "duration": 2.58}, {"text": "I think.", "start": 3842.97, "duration": 0.69}, {"text": "You know, I wrote it pretty quickly.", "start": 3843.66, "duration": 1.75}, {"text": "But let's consider what I just did.", "start": 3845.41, "duration": 1.79}, {"text": "I initialized size to 0, because\nthere's nothing in it initially.", "start": 3847.2, "duration": 3.33}, {"text": "Then I say, while size is less than\nthe capacity of the whole thing--", "start": 3850.53, "duration": 3.45}, {"text": "and capacity is 2 by default--", "start": 3853.98, "duration": 1.83}, {"text": "go ahead and do the following.", "start": 3855.81, "duration": 1.29}, {"text": "Give me an int from the user.", "start": 3857.1, "duration": 2.36}, {"text": "OK.", "start": 3859.46, "duration": 0.5}, {"text": "So int number gets int.", "start": 3859.96, "duration": 1.76}, {"text": "Then, put at location,\nsize, in my numbers, array,", "start": 3861.72, "duration": 4.2}, {"text": "whatever the human typed in, number.", "start": 3865.92, "duration": 2.1}, {"text": "And then, increment\nsize with plus, plus.", "start": 3868.02, "duration": 2.83}, {"text": "All right.", "start": 3870.85, "duration": 0.5}, {"text": "So on the first iteration size is 0.", "start": 3871.35, "duration": 1.74}, {"text": "So numbers, bracket, 0,\ngets the first number.", "start": 3873.09, "duration": 2.19}, {"text": "Numbers, bracket, 1,\ngets the second number.", "start": 3875.28, "duration": 2.1}, {"text": "Then, size equals capacity.", "start": 3877.38, "duration": 1.81}, {"text": "So it stops, logically.", "start": 3879.19, "duration": 1.25}, {"text": "Any questions on the logic of this code?", "start": 3880.44, "duration": 4.091}, {"text": "All right.", "start": 3884.531, "duration": 0.499}, {"text": "So once we have those numbers,\nlet's just do something simple.", "start": 3885.03, "duration": 3.21}, {"text": "Like for int, I gets 0.", "start": 3888.24, "duration": 2.49}, {"text": "I is less than the actual\nsize I, plus, plus.", "start": 3890.73, "duration": 3.24}, {"text": "Let's just go ahead and\nprint out the number", "start": 3893.97, "duration": 6.24}, {"text": "you inputted, percent I, backslash n,\nand type out numbers, bracket, I. All", "start": 3900.21, "duration": 7.09}, {"text": "right.", "start": 3907.3, "duration": 0.5}, {"text": "So if I made no typos in list 0\ndot C, then, I'm going to go ahead", "start": 3907.8, "duration": 4.98}, {"text": "and do dot, slash, o, dot, C. I'm going\nto be prompted for a couple of numbers.", "start": 3912.78, "duration": 3.4}, {"text": "Let's go ahead and do 1, 2.", "start": 3916.18, "duration": 2.51}, {"text": "You inputted 1, you inputted 2.", "start": 3918.69, "duration": 1.301}, {"text": "All right.", "start": 3919.991, "duration": 0.499}, {"text": "So not bad.", "start": 3920.49, "duration": 0.87}, {"text": "But this is bad design, arguably, why?", "start": 3921.36, "duration": 2.46}, {"text": "Just find one fault. It's correct.", "start": 3927.16, "duration": 2.45}, {"text": "But bad design.", "start": 3929.61, "duration": 2.722}, {"text": "AUDIENCE: Repetitive.", "start": 3932.332, "duration": 1.642}, {"text": "DAVID J. MALAN: Repetitive, because\nI'm using a couple of loops, sure.", "start": 3933.974, "duration": 2.916}, {"text": "And it's fundamentally-- it's\nvery limited in functionality.", "start": 3936.89, "duration": 2.67}, {"text": "Why?", "start": 3939.56, "duration": 0.6}, {"text": "Like how useful is this program?", "start": 3940.16, "duration": 2.137}, {"text": "AUDIENCE: It's hard coded at 2.", "start": 3942.297, "duration": 1.463}, {"text": "DAVID J. MALAN: Yeah.", "start": 3943.76, "duration": 0.157}, {"text": "It's hard coded at 2.", "start": 3943.917, "duration": 1.013}, {"text": "So let's at least improve\nupon this a little bit,", "start": 3944.93, "duration": 2.28}, {"text": "and get rid of this hard coding.", "start": 3947.21, "duration": 1.44}, {"text": "Why don't I at least ask the\nuser for something like this?", "start": 3948.65, "duration": 3.46}, {"text": "Well, instead of just declaring the\ncapacity, let me go ahead and say,", "start": 3952.11, "duration": 4.747}, {"text": "you know what?", "start": 3956.857, "duration": 0.583}, {"text": "Let's just replace the 2.", "start": 3957.44, "duration": 1.14}, {"text": "Get int, and just say\ncapacity, for instance.", "start": 3958.58, "duration": 3.071}, {"text": "All right.", "start": 3961.651, "duration": 0.499}, {"text": "And now if I do this, I'm\ngoing to be prompted--", "start": 3962.15, "duration": 3.21}, {"text": "so make list 0.", "start": 3965.36, "duration": 2.24}, {"text": "Dot slash list 0.", "start": 3967.6, "duration": 2.44}, {"text": "The capacity will be 2.", "start": 3970.04, "duration": 1.98}, {"text": "1, 2, that's nice.", "start": 3972.02, "duration": 2.17}, {"text": "But if I run it again, and\ngive it a capacity of 3--", "start": 3974.19, "duration": 2.93}, {"text": "1, 2, 3, I get more capacity.", "start": 3977.12, "duration": 4.146}, {"text": "So that's nice.", "start": 3981.266, "duration": 0.624}, {"text": "It's an improvement for sure.", "start": 3981.89, "duration": 1.35}, {"text": "There is a bug here.", "start": 3983.24, "duration": 1.92}, {"text": "Before I test it further, can anyone\nidentify a bug or somehow crash this?", "start": 3985.16, "duration": 7.974}, {"text": "AUDIENCE: [INAUDIBLE].", "start": 3993.134, "duration": 0.916}, {"text": "DAVID J. MALAN: Oh, go ahead.", "start": 3994.05, "duration": 0.854}, {"text": "AUDIENCE: If you don't input an integer.", "start": 3994.904, "duration": 1.667}, {"text": "DAVID J. MALAN: If I\ndon't put an integer.", "start": 3996.571, "duration": 1.749}, {"text": "Or-- is that same comment up here?", "start": 3998.32, "duration": 1.524}, {"text": "AUDIENCE: I was going to say,\nwhat happens if you go back", "start": 3999.844, "duration": 2.375}, {"text": "and put in [INAUDIBLE] those other\n[INAUDIBLE] will be in the memory.", "start": 4002.219, "duration": 5.2}, {"text": "DAVID J. MALAN: Oh.", "start": 4007.419, "duration": 0.791}, {"text": "No.", "start": 4008.21, "duration": 0.32}, {"text": "Because I'm rerunning it in each time.", "start": 4008.53, "duration": 1.583}, {"text": "I don't need to worry about\nprevious runs of the program.", "start": 4010.113, "duration": 3.097}, {"text": "Yeah?", "start": 4013.21, "duration": 0.622}, {"text": "AUDIENCE: In the for\nloop, it just goes 1,", "start": 4013.832, "duration": 2.328}, {"text": "2, 3, it doesn't actually\ncare what you put it.", "start": 4016.16, "duration": 3.626}, {"text": "DAVID J. MALAN: [INAUDIBLE] 1, 2,\n3-- well, I am iterating up to size,", "start": 4019.786, "duration": 3.774}, {"text": "which could be capacity.", "start": 4023.56, "duration": 1.08}, {"text": "Because now they do end\nup being equivalent.", "start": 4024.64, "duration": 2.01}, {"text": "Because I'm filling the whole thing.", "start": 4026.65, "duration": 1.53}, {"text": "But let's try this.", "start": 4028.18, "duration": 0.6}, {"text": "If you don't type in a value.", "start": 4028.78, "duration": 1.23}, {"text": "So let me go ahead and rerun this.", "start": 4030.01, "duration": 2.66}, {"text": "My capacity shall be duck.", "start": 4032.67, "duration": 3.201}, {"text": "All right.", "start": 4035.871, "duration": 0.499}, {"text": "So we did handle that.", "start": 4036.37, "duration": 1.41}, {"text": "Because getInt does that for me.", "start": 4037.78, "duration": 1.6}, {"text": "But I bet I can still break this.", "start": 4039.38, "duration": 2.54}, {"text": "Ooh, yeah, let's always\ntry something negative.", "start": 4041.92, "duration": 2.34}, {"text": "Oh, OK.", "start": 4044.26, "duration": 0.9}, {"text": "So bad.", "start": 4045.16, "duration": 0.59}, {"text": "Like cryptic looking\nmessage, but clearly,", "start": 4045.75, "duration": 1.75}, {"text": "has to do with a negative value.", "start": 4047.5, "duration": 1.48}, {"text": "So I should probably be a\nlittle smarter about this.", "start": 4048.98, "duration": 2.28}, {"text": "And recall from like,\nWeek 1, we did do this.", "start": 4051.26, "duration": 2.199}, {"text": "With Mario, you might have done this.", "start": 4053.459, "duration": 1.541}, {"text": "So I could do something like, do,\nwhile capacity is less than 1.", "start": 4055.0, "duration": 6.84}, {"text": "I could go ahead and say,\ncapacity getInt capacity.", "start": 4061.84, "duration": 4.68}, {"text": "So just a little bit of error checking\nto close the bug that you identified.", "start": 4066.52, "duration": 3.58}, {"text": "All right.", "start": 4070.1, "duration": 0.5}, {"text": "So let's go ahead and recompile this.", "start": 4070.6, "duration": 1.74}, {"text": "Make lists 0-- oops we're going\nto start hearing that a lot today.", "start": 4072.34, "duration": 4.704}, {"text": "Aren't we [INAUDIBLE]?", "start": 4077.044, "duration": 0.916}, {"text": "Make list 0, dot, slash, list 0.", "start": 4077.96, "duration": 2.37}, {"text": "Capacity will be 3.", "start": 4080.33, "duration": 1.16}, {"text": "1, 2, 3.", "start": 4081.49, "duration": 1.497}, {"text": "Now capacity will be negative 1.", "start": 4082.987, "duration": 1.333}, {"text": "Doesn't allow it.", "start": 4084.32, "duration": 1.57}, {"text": "Capacity 0, doesn't allow it.", "start": 4085.89, "duration": 1.52}, {"text": "Capacity 1, yes.", "start": 4087.41, "duration": 1.89}, {"text": "So non-exhaustively, I've tested it.", "start": 4089.3, "duration": 1.71}, {"text": "It feels like it's in better shape.", "start": 4091.01, "duration": 1.23}, {"text": "OK.", "start": 4092.24, "duration": 0.5}, {"text": "But this program, while correct,\nand while more featureful,", "start": 4092.74, "duration": 3.67}, {"text": "still has this fundamental limit.", "start": 4096.41, "duration": 1.98}, {"text": "Wouldn't it be nice to allow the\nuser to just keep typing numbers,", "start": 4098.39, "duration": 3.389}, {"text": "as many as they want, and then quit\nonce they're done inputting numbers.", "start": 4101.779, "duration": 4.631}, {"text": "Right?", "start": 4106.41, "duration": 0.5}, {"text": "If you're making a program\nto compute someone's GPA,", "start": 4106.91, "duration": 2.19}, {"text": "different students might\nhave taken different courses,", "start": 4109.1, "duration": 2.25}, {"text": "you don't want to have them\nto type in all 32 courses.", "start": 4111.35, "duration": 2.58}, {"text": "If they're younger and haven't\ntaken all those courses.", "start": 4113.93, "duration": 1.75}, {"text": "Like there's a lot of scenarios\nwhere you don't know in advance how", "start": 4115.68, "duration": 2.791}, {"text": "many numbers the user wants to provide.", "start": 4118.471, "duration": 1.848}, {"text": "But you want to support a few\nnumbers, lots of numbers, or beyond.", "start": 4120.319, "duration": 3.631}, {"text": "So let's do this in a second version.", "start": 4123.95, "duration": 2.369}, {"text": "In list 1 dot C, let me go ahead and\nimprove upon that example as follows.", "start": 4126.319, "duration": 6.401}, {"text": "First, let me give my familiar\nfriends up here CS50 dot for iO,", "start": 4132.72, "duration": 4.7}, {"text": "standard iO dot h, and then,\nin here, int main void.", "start": 4137.42, "duration": 5.49}, {"text": "And then, let's start writing this.", "start": 4142.91, "duration": 2.22}, {"text": "So now, I don't know in advance,\nnecessarily, how many numbers the user", "start": 4145.13, "duration": 5.856}, {"text": "is going to type in.", "start": 4150.986, "duration": 0.833}, {"text": "Like the goal is, I want\nthem to be able to type", "start": 4151.819, "duration": 2.0}, {"text": "in a number, another number,\nanother number, and then", "start": 4153.819, "duration": 2.321}, {"text": "hit the equivalent of like, q, for quit,\nwhen they're done inputting numbers.", "start": 4156.14, "duration": 3.511}, {"text": "Like I don't want them to have to think\nabout in advance, how many numbers it", "start": 4159.651, "duration": 3.208}, {"text": "is they're inputting.", "start": 4162.859, "duration": 2.071}, {"text": "But how do I do that?", "start": 4164.93, "duration": 1.21}, {"text": "Like I can't just come up with an\narray called numbers, and say, 50.", "start": 4166.14, "duration": 3.96}, {"text": "Because if the user wants\nto type in 51 numbers,", "start": 4170.1, "duration": 2.48}, {"text": "I'm going to have to resize that.", "start": 4172.58, "duration": 1.47}, {"text": "But how do you resize an array?", "start": 4174.05, "duration": 2.445}, {"text": "How do you resize an array?", "start": 4179.47, "duration": 2.321}, {"text": "AUDIENCE: [INAUDIBLE].", "start": 4181.791, "duration": 1.219}, {"text": "DAVID J. MALAN: What's that?", "start": 4183.01, "duration": 0.26}, {"text": "AUDIENCE: You can't.", "start": 4183.27, "duration": 0.799}, {"text": "DAVID J. MALAN: You can't.", "start": 4184.069, "duration": 0.781}, {"text": "Right.", "start": 4184.85, "duration": 0.179}, {"text": "We've never seen an instance\nwhere you've re-sized an array.", "start": 4185.029, "duration": 2.691}, {"text": "We talked about it on\nthe blackboard here.", "start": 4187.72, "duration": 1.75}, {"text": "Well, just like, allocate a\nbigger one and copy everything in.", "start": 4189.47, "duration": 3.23}, {"text": "And we did identify realloc.", "start": 4192.7, "duration": 2.02}, {"text": "But you can't actually\nuse realloc on an array.", "start": 4194.72, "duration": 2.88}, {"text": "Realloc actually accepts an\naddress of a chunk of memory", "start": 4197.6, "duration": 3.75}, {"text": "that you want to grow, or shrink.", "start": 4201.35, "duration": 2.7}, {"text": "So it turns out, if we\nnow start to harness", "start": 4204.05, "duration": 2.37}, {"text": "the sort of fundamental definition of\nwhat an array is, a chunk of memory,", "start": 4206.42, "duration": 4.05}, {"text": "we can actually build arrays ourselves.", "start": 4210.47, "duration": 3.03}, {"text": "If an array is just a chunk of\nmemory, or more specifically,", "start": 4213.5, "duration": 3.21}, {"text": "it's like the address of the\nfirst byte of a chunk of memory,", "start": 4216.71, "duration": 4.29}, {"text": "it would seem that I could declare\nmy array, not with square brackets", "start": 4221.0, "duration": 4.62}, {"text": "as we've been doing for\nweeks, but I can say,", "start": 4225.62, "duration": 2.32}, {"text": "you know what numbers really\nis, it's really just a pointer.", "start": 4227.94, "duration": 3.08}, {"text": "And I'm initially going\nto initialize it to null.", "start": 4231.02, "duration": 2.55}, {"text": "Because there is no array.", "start": 4233.57, "duration": 1.9}, {"text": "But now I have the ability\nto point that pointer", "start": 4235.47, "duration": 2.48}, {"text": "at any chunk of memory, small or big.", "start": 4237.95, "duration": 3.06}, {"text": "Now why is this useful?", "start": 4241.01, "duration": 1.15}, {"text": "Well, initially let me\nclaim that my capacity is 0,", "start": 4242.16, "duration": 2.3}, {"text": "because nothing's going on yet.", "start": 4244.46, "duration": 1.32}, {"text": "I haven't called malloc or anything.", "start": 4245.78, "duration": 2.04}, {"text": "And initially, my size is 0 because\nthere's nothing in the array.", "start": 4247.82, "duration": 4.26}, {"text": "And it doesn't even have a size.", "start": 4252.08, "duration": 1.56}, {"text": "But let me just do this forever.", "start": 4253.64, "duration": 2.13}, {"text": "Much like in scratch, we had the forever\nblock you can use, while true, and C,", "start": 4255.77, "duration": 3.45}, {"text": "to just say keep doing this until\nthe user breaks out of this.", "start": 4259.22, "duration": 3.63}, {"text": "And let me go ahead and ask the\nuser, give me a number, getInt.", "start": 4262.85, "duration": 3.84}, {"text": "And just ask them for a number.", "start": 4266.69, "duration": 2.37}, {"text": "And then, we just need\na place to put that.", "start": 4269.06, "duration": 2.52}, {"text": "So where do I put this number?", "start": 4271.58, "duration": 3.0}, {"text": "Well, do I have, at the moment,\nany place to put the number?", "start": 4274.58, "duration": 3.42}, {"text": "No.", "start": 4278.0, "duration": 0.6}, {"text": "And technically speaking,\nhow do you express that?", "start": 4278.6, "duration": 2.19}, {"text": "Like in pseudo code, I want to\nsay, if no place for number.", "start": 4280.79, "duration": 4.32}, {"text": "But technically, I could do this.", "start": 4285.11, "duration": 1.59}, {"text": "Well, if the size of the array at\nthe moment, equals its capacity,", "start": 4286.7, "duration": 6.33}, {"text": "that feels like a lower level\nway of expressing the same thing.", "start": 4293.03, "duration": 3.33}, {"text": "If whatever the capacity is, if the\nsize is the same, there is no more room.", "start": 4296.36, "duration": 4.77}, {"text": "And that simple statement also covers\nthe scenario where the capacity is 0,", "start": 4301.13, "duration": 5.97}, {"text": "the size is therefore, 0.", "start": 4307.1, "duration": 1.47}, {"text": "So its the same question.", "start": 4308.57, "duration": 1.71}, {"text": "Either we have no space at\nall, or we have some space", "start": 4310.28, "duration": 2.31}, {"text": "but we've used it all-- size\nequals, equals, capacity.", "start": 4312.59, "duration": 3.67}, {"text": "So if the size equals\ncapacity, or put more casually,", "start": 4316.26, "duration": 3.47}, {"text": "if I don't have enough space.", "start": 4319.73, "duration": 1.56}, {"text": "What do I want to do intuitively?", "start": 4321.29, "duration": 2.514}, {"text": "AUDIENCE: [INAUDIBLE].", "start": 4323.804, "duration": 0.985}, {"text": "DAVID J. MALAN: Allocate more memory.", "start": 4324.789, "duration": 1.541}, {"text": "And it turns out, you proposed,\nor someone proposed earlier,", "start": 4326.33, "duration": 2.73}, {"text": "reallocating memory.", "start": 4329.06, "duration": 1.23}, {"text": "We can use this function\nfor the very first time.", "start": 4330.29, "duration": 2.71}, {"text": "Let me go ahead and say this--", "start": 4333.0, "duration": 1.617}, {"text": "the catch with realloc is you\nhave to be smart about it,", "start": 4334.617, "duration": 2.333}, {"text": "because it returns a pointer.", "start": 4336.95, "duration": 1.208}, {"text": "So let me propose this code first.", "start": 4338.158, "duration": 1.822}, {"text": "First, just give me a temporary\nvariable, call it, temp,", "start": 4339.98, "duration": 3.27}, {"text": "that's going to store the following.", "start": 4343.25, "duration": 2.51}, {"text": "Actually, no.", "start": 4345.76, "duration": 0.64}, {"text": "Let me start this more simply.", "start": 4346.4, "duration": 2.31}, {"text": "Let me go ahead and say, numbers\nshould be reallocated please,", "start": 4348.71, "duration": 5.93}, {"text": "realloc by passing its self in.", "start": 4354.64, "duration": 4.37}, {"text": "And this time, give me the\nsize of an int, times--", "start": 4359.01, "duration": 4.13}, {"text": "how many ints do I want this time?", "start": 4363.14, "duration": 4.02}, {"text": "How many numbers did the\nhuman just input presumably?", "start": 4367.16, "duration": 5.16}, {"text": "AUDIENCE: [INAUDIBLE].", "start": 4372.32, "duration": 1.32}, {"text": "DAVID J. MALAN: Just one.", "start": 4373.64, "duration": 0.6}, {"text": "Right.", "start": 4374.24, "duration": 0.5}, {"text": "Because literally, we've only\ncalled getInt once in this story.", "start": 4374.74, "duration": 2.83}, {"text": "So whatever the size of this array\nis now, we need to increase it by 1.", "start": 4377.57, "duration": 5.98}, {"text": "That's all.", "start": 4383.55, "duration": 0.92}, {"text": "So this line of code here\nis saying, hey computer,", "start": 4384.47, "duration": 5.32}, {"text": "go ahead and reallocate this array\nfrom whatever its current size is,", "start": 4389.79, "duration": 5.84}, {"text": "and make it this size instead.", "start": 4395.63, "duration": 3.21}, {"text": "The size of whatever it is, plus\n1, times the size of an int.", "start": 4398.84, "duration": 3.702}, {"text": "Because that's what we're\ntrying to store, is an int.", "start": 4402.542, "duration": 2.208}, {"text": "So we have to do that multiplication.", "start": 4404.75, "duration": 1.68}, {"text": "And realloc, as mentioned\nearlier, is pretty fancy.", "start": 4406.43, "duration": 2.329}, {"text": "It's going to take an pointer,\nwhatever chunk of memory", "start": 4408.759, "duration": 2.291}, {"text": "you've already allocated, and\nit's going to then reallocate", "start": 4411.05, "duration": 3.78}, {"text": "a bigger chunk of memory.", "start": 4414.83, "duration": 1.26}, {"text": "Hopefully, what's going\nto happen is this--", "start": 4416.09, "duration": 1.98}, {"text": "if your chunk of memory\ninitially looks like this,", "start": 4418.07, "duration": 3.45}, {"text": "it's going to hopefully notice,\noh, this memory is free.", "start": 4421.52, "duration": 2.719}, {"text": "Let me just give you\nback the same address.", "start": 4424.239, "duration": 1.791}, {"text": "So if this is address\n100, and you get lucky", "start": 4426.03, "duration": 2.42}, {"text": "and this address is also\navailable, the realloc function's", "start": 4428.45, "duration": 3.1}, {"text": "going to remember that\nfor the operating system.", "start": 4431.55, "duration": 2.0}, {"text": "It's going to return\nthe number 100 again.", "start": 4433.55, "duration": 1.65}, {"text": "And you're good to go.", "start": 4435.2, "duration": 0.916}, {"text": "You can safely touch memory here.", "start": 4436.116, "duration": 1.634}, {"text": "Or if this is in use already, this\nchunk of memory, and therefore we", "start": 4437.75, "duration": 5.64}, {"text": "can't fit another byte there\nbecause some other code you wrote", "start": 4443.39, "duration": 3.42}, {"text": "is using that memory.", "start": 4446.81, "duration": 1.27}, {"text": "But there is twice as much\nmemory available down here.", "start": 4448.08, "duration": 3.56}, {"text": "What realloc will do, is if\nyou've stored the number 50,", "start": 4451.64, "duration": 3.12}, {"text": "it will handle the process of\ncopying 50 to the new value.", "start": 4454.76, "duration": 3.28}, {"text": "This is going to be left as a\ngarbage value for you to deal with.", "start": 4458.04, "duration": 2.78}, {"text": "And it's going to return to you the\naddress of the new chunk of memory,", "start": 4460.82, "duration": 4.15}, {"text": "having done the copying for you.", "start": 4464.97, "duration": 2.39}, {"text": "So even though it's technically\nre-allocating the array,", "start": 4467.36, "duration": 3.28}, {"text": "it's not necessarily\njust going to grow it.", "start": 4470.64, "duration": 1.97}, {"text": "It might relocate it in\nmemory to a bigger chunk,", "start": 4472.61, "duration": 3.42}, {"text": "and then give you the new\naddress of that memory.", "start": 4476.03, "duration": 3.12}, {"text": "Question?", "start": 4479.15, "duration": 0.801}, {"text": "AUDIENCE: Is that\nprocess really preferable", "start": 4479.951, "duration": 2.109}, {"text": "to just creating extra\nmemory in it's place.", "start": 4482.06, "duration": 3.2}, {"text": "And then saving the time and energy of\nreallocating them [? all at once. ?]", "start": 4485.26, "duration": 4.844}, {"text": "DAVID J. MALAN: That's\na really good question.", "start": 4490.104, "duration": 1.916}, {"text": "Honestly, we could avoid this problem\nslightly by just doing, you know what,", "start": 4492.02, "duration": 3.39}, {"text": "give me at least--", "start": 4495.41, "duration": 2.55}, {"text": "go ahead and give me at least\nthe size of an int, times--", "start": 4497.96, "duration": 3.37}, {"text": "I don't know, most humans are not\ngoing to type in more than 50 numbers.", "start": 4501.33, "duration": 3.0}, {"text": "Let's just pick 50.", "start": 4504.33, "duration": 1.13}, {"text": "So you could do this, and that\nwould indeed save you time.", "start": 4505.46, "duration": 3.122}, {"text": "Because the approach\nI'm currently taking", "start": 4508.582, "duration": 1.708}, {"text": "is pretty inefficient because\nevery damn time the user", "start": 4510.29, "duration": 3.42}, {"text": "calls getInt, and gives an int,\nwe're resizing, resizing, resizing.", "start": 4513.71, "duration": 3.33}, {"text": "Very expensive.", "start": 4517.04, "duration": 1.41}, {"text": "As to what the best value is though--", "start": 4518.45, "duration": 1.8}, {"text": "50?", "start": 4520.25, "duration": 0.66}, {"text": "Should it be 25?", "start": 4520.91, "duration": 1.08}, {"text": "Should it be 1,000?", "start": 4521.99, "duration": 1.2}, {"text": "I'm either going to\nunder bet or over bet.", "start": 4523.19, "duration": 2.07}, {"text": "And it just depends on you to decide\nwhich of those is the worst decisions.", "start": 4525.26, "duration": 4.98}, {"text": "AUDIENCE: But, like,\nin terms of programs,", "start": 4530.24, "duration": 2.37}, {"text": "is it also pretty expensive to\nhave memory that you're not using", "start": 4532.61, "duration": 3.54}, {"text": "or generally, is it usually more OK?", "start": 4536.15, "duration": 1.83}, {"text": "DAVID J. MALAN: Good question.", "start": 4537.98, "duration": 1.25}, {"text": "In programs you're writing, is it better\nto have more memory than you're using,", "start": 4539.23, "duration": 3.1}, {"text": "or should you really be conservative?", "start": 4542.33, "duration": 1.62}, {"text": "These days, memory is cheap.", "start": 4543.95, "duration": 1.47}, {"text": "We all have gigabytes of memory.", "start": 4545.42, "duration": 1.86}, {"text": "And so wasting 50 bytes or 200 bytes,\ntimes 4, of memory, not a big deal.", "start": 4547.28, "duration": 5.04}, {"text": "Like, just get the job\ndone quickly and easily.", "start": 4552.32, "duration": 2.46}, {"text": "But in resource constrained\ndevices, maybe, things like phones", "start": 4554.78, "duration": 3.18}, {"text": "or little internet of\nthings style devices", "start": 4557.96, "duration": 2.16}, {"text": "that have a lot fewer resources, you\ndon't really want to go wasting bytes.", "start": 4560.12, "duration": 4.014}, {"text": "But honestly, the CPUs, the\nbrains in our computers,", "start": 4564.134, "duration": 2.166}, {"text": "are so darned fast these days,\neven if you're calling malloc", "start": 4566.3, "duration": 2.52}, {"text": "10 times, 1,000 times, it's\nhappening so darned fast", "start": 4568.82, "duration": 2.73}, {"text": "that the human doesn't even notice.", "start": 4571.55, "duration": 1.65}, {"text": "So there too.", "start": 4573.2, "duration": 0.619}, {"text": "These are what are\ncalled design decisions.", "start": 4573.819, "duration": 1.791}, {"text": "And these are the kinds of\nthings that, in the real world,", "start": 4575.61, "duration": 1.95}, {"text": "you might actually debate\nwith someone at a whiteboard,", "start": 4577.56, "duration": 1.88}, {"text": "saying, no, this is stupid\nbecause of this reason.", "start": 4579.44, "duration": 2.1}, {"text": "Or he or she might push\nback for other reasons.", "start": 4581.54, "duration": 1.958}, {"text": "And no one's necessarily right.", "start": 4583.498, "duration": 1.612}, {"text": "The whole goal is to just\nthat thought process first", "start": 4585.11, "duration": 2.54}, {"text": "so you're at least\nconfident in what you chose.", "start": 4587.65, "duration": 1.48}, {"text": "Yeah?", "start": 4589.13, "duration": 0.5}, {"text": "AUDIENCE: When we were writing\nto a file in the last PSET,", "start": 4589.63, "duration": 2.895}, {"text": "was it storing it in memory first or\nputting it right on the hard drive?", "start": 4592.525, "duration": 4.375}, {"text": "DAVID J. MALAN: When\nyou were calling fread,", "start": 4596.9, "duration": 2.73}, {"text": "you were by definition in\nthe forensics problem set", "start": 4599.63, "duration": 3.24}, {"text": "reading bytes from disk into memory.", "start": 4602.87, "duration": 3.12}, {"text": "When you were calling fwrite, you were\ncopying bytes from memory back to disk.", "start": 4605.99, "duration": 5.81}, {"text": "If that answers the question.", "start": 4611.8, "duration": 1.27}, {"text": "OK.", "start": 4613.07, "duration": 0.25}, {"text": "Other questions?", "start": 4613.32, "duration": 0.51}, {"text": "Yeah?", "start": 4613.83, "duration": 0.654}, {"text": "AUDIENCE: Why did you\nsay, size + 1, in line 16?", "start": 4614.484, "duration": 4.086}, {"text": "DAVID J. MALAN: Why do I\nsay, size + 1, in line 16?", "start": 4618.57, "duration": 2.61}, {"text": "Because the whole goal is to make room\nin this array for the newly inputted", "start": 4621.18, "duration": 4.83}, {"text": "number that the human just typed in.", "start": 4626.01, "duration": 2.07}, {"text": "And so whatever the current\nsize of the array is,", "start": 4628.08, "duration": 2.16}, {"text": "I clearly need one more space.", "start": 4630.24, "duration": 1.53}, {"text": "AUDIENCE: So that repeats on and on?", "start": 4634.475, "duration": 2.587}, {"text": "DAVID J. MALAN: It\ndoes repeat on and on.", "start": 4637.062, "duration": 1.708}, {"text": "Because at the moment, I'm\ninside of this while loop.", "start": 4638.77, "duration": 3.85}, {"text": "So we do need to ask a question,\nwhen is the human done inputting.", "start": 4642.62, "duration": 3.599}, {"text": "And it turns out-- and\nthis is not obvious.", "start": 4646.219, "duration": 1.791}, {"text": "And it's not the best user experience\non a keyboard for the human.", "start": 4648.01, "duration": 3.3}, {"text": "But we can actually detect\nthe following sentiments--", "start": 4651.31, "duration": 4.59}, {"text": "if user is done inputting numbers,\nthen let's go ahead and break.", "start": 4655.9, "duration": 6.48}, {"text": "But the question then is, how\ndo you express that pseudo code?", "start": 4662.38, "duration": 3.15}, {"text": "Well, you could in some\nprograms maybe type q for quit.", "start": 4665.53, "duration": 4.08}, {"text": "But is that going to\nwork when using getInt?", "start": 4669.61, "duration": 3.0}, {"text": "Could we detect q?", "start": 4672.61, "duration": 2.13}, {"text": "Why not?", "start": 4674.74, "duration": 0.51}, {"text": "AUDIENCE: Because getInt immediately\nprompts you for another integer.", "start": 4678.722, "duration": 2.978}, {"text": "DAVID J. MALAN: Exactly.", "start": 4681.7, "duration": 0.59}, {"text": "Because getInt immediately\nprompts you for another int.", "start": 4682.29, "duration": 2.02}, {"text": "So because of the way we designed\nthe CS50 library, you can't detect q,", "start": 4684.31, "duration": 2.97}, {"text": "or you can't have the human type\nquit unless you don't use getInt.", "start": 4687.28, "duration": 4.41}, {"text": "You instead use?", "start": 4691.69, "duration": 2.382}, {"text": "AUDIENCE: getString.", "start": 4694.072, "duration": 1.774}, {"text": "DAVID J. MALAN: We could use getString.", "start": 4695.846, "duration": 1.624}, {"text": "And then every time the human\ntypes in a number, we could use,", "start": 4697.47, "duration": 2.76}, {"text": "like, A2i to convert it to an int.", "start": 4700.23, "duration": 2.91}, {"text": "But if the human types in q or Q-U-I-T--", "start": 4703.14, "duration": 2.88}, {"text": "a string also-- we could just have an if\ncondition with string compare and quit.", "start": 4706.02, "duration": 4.17}, {"text": "But honestly, then you're\nreimplementing getInt--", "start": 4710.19, "duration": 2.61}, {"text": "so trade-off.", "start": 4712.8, "duration": 1.23}, {"text": "Anyhow, a common way to\nwork around this would", "start": 4714.03, "duration": 2.46}, {"text": "be, you know that Control-C\nquits programs, perhaps,", "start": 4716.49, "duration": 3.12}, {"text": "cancels out of your program.", "start": 4719.61, "duration": 1.44}, {"text": "There's another popular\nkeystroke, Control-D,", "start": 4721.05, "duration": 2.82}, {"text": "that sends what's called end of file.", "start": 4723.87, "duration": 1.89}, {"text": "It simulates the end of a file.", "start": 4725.76, "duration": 2.48}, {"text": "It simulates the end\nof the human's input.", "start": 4728.24, "duration": 1.921}, {"text": "So it's kind of like the period\nat the end of an English sentence.", "start": 4730.161, "duration": 2.749}, {"text": "So if you want to signal to a computer\nthat's waiting for input from you that", "start": 4732.91, "duration": 3.557}, {"text": "you don't want to quit the\nprogram-- that would be Control-C--", "start": 4736.467, "duration": 2.583}, {"text": "but you just want to be done\ninputting input to the computer,", "start": 4739.05, "duration": 3.3}, {"text": "you hit Control-D,\notherwise known as EOF.", "start": 4742.35, "duration": 2.085}, {"text": "And the way to express this--\nand you would only know this from", "start": 4744.435, "duration": 2.625}, {"text": "documentation-- would be\nto say something like this,", "start": 4747.06, "duration": 2.68}, {"text": "if the number the human\ntyped in equals end of file--", "start": 4749.74, "duration": 4.02}, {"text": "but there is no such\nthing in this context--", "start": 4753.76, "duration": 2.3}, {"text": "you actually do this because\nof the CS50 library works.", "start": 4756.06, "duration": 3.87}, {"text": "It turns out that if the only\nvalues a function can return", "start": 4759.93, "duration": 3.36}, {"text": "are integers, that means you can\nreturn 0, 1, negative 1, 2 billion,", "start": 4763.29, "duration": 5.1}, {"text": "negative 2 billion give or take.", "start": 4768.39, "duration": 1.83}, {"text": "What humans did for years\nwith old programming languages", "start": 4770.22, "duration": 3.17}, {"text": "is they would just steal\none or a few numbers.", "start": 4773.39, "duration": 2.47}, {"text": "For instance, you'd steal the number\ntwo billion and call it intmax--", "start": 4775.86, "duration": 3.84}, {"text": "the maximum integer.", "start": 4779.7, "duration": 1.35}, {"text": "And you'd just say, you can\nnever actually type 2 billion,", "start": 4781.05, "duration": 2.67}, {"text": "because we're using that as\na special value to signify", "start": 4783.72, "duration": 3.03}, {"text": "that the human hit Control-D. Or\nyou could do negative 2 billion,", "start": 4786.75, "duration": 3.0}, {"text": "or you could do 0, or 50.", "start": 4789.75, "duration": 1.89}, {"text": "But at some point, you have to steal\none of the 4 billion available numbers", "start": 4791.64, "duration": 3.99}, {"text": "to use as a sentinel\nvalue, a special value", "start": 4795.63, "duration": 2.67}, {"text": "that you can then check\nfor as a constant.", "start": 4798.3, "duration": 2.4}, {"text": "So anyhow, this just means, when\nthe user is done typing input,", "start": 4800.7, "duration": 3.39}, {"text": "go ahead and break out\nof this while loop.", "start": 4804.09, "duration": 2.56}, {"text": "And as an aside, let me fix one thing.", "start": 4806.65, "duration": 2.34}, {"text": "It turns out things can\ngo wrong with realloc.", "start": 4808.99, "duration": 2.78}, {"text": "And if realloc fails\nto allocate memory, it", "start": 4811.77, "duration": 3.3}, {"text": "can return null, a special value that\njust means, eh, something went wrong.", "start": 4815.07, "duration": 4.27}, {"text": "It's an invalid pointer.", "start": 4819.34, "duration": 1.07}, {"text": "It's the address 0.", "start": 4820.41, "duration": 1.38}, {"text": "And so it turns out there's a subtle\nbug here where, technically, I", "start": 4821.79, "duration": 4.14}, {"text": "should actually do this--", "start": 4825.93, "duration": 1.44}, {"text": "store realloc's return value\nin a temporary variable.", "start": 4827.37, "duration": 4.03}, {"text": "Because if temp = null,\nsomething went wrong.", "start": 4831.4, "duration": 4.25}, {"text": "And I should actually go ahead\nand quit out of this program.", "start": 4835.65, "duration": 3.99}, {"text": "But let me wave my hand at that for\nnow because it's more of a corner case.", "start": 4839.64, "duration": 3.152}, {"text": "But you'll see in the online version of\nthis program we have additional error", "start": 4842.792, "duration": 3.208}, {"text": "checking that just checks, in\nthe rare case that realloc fails,", "start": 4846.0, "duration": 4.44}, {"text": "clean it up and return properly.", "start": 4850.44, "duration": 1.89}, {"text": "But I'll wave to the\nonline code for that.", "start": 4852.33, "duration": 2.61}, {"text": "All right.", "start": 4854.94, "duration": 0.88}, {"text": "Any questions on that\nexample before we move on?", "start": 4855.82, "duration": 4.026}, {"text": "Yeah?", "start": 4859.846, "duration": 0.499}, {"text": "AUDIENCE: So in realloc, when it creates\nthe new pointer for the [INAUDIBLE],,", "start": 4860.345, "duration": 5.695}, {"text": "does it clear the memory\nfrom the original pointer?", "start": 4866.04, "duration": 2.262}, {"text": "Does it automatically clear it?", "start": 4868.302, "duration": 1.292}, {"text": "DAVID J. MALAN: Good question.", "start": 4869.594, "duration": 1.249}, {"text": "When you call realloc and it\nends up allocating more space,", "start": 4870.843, "duration": 2.997}, {"text": "does it clear the original memory?", "start": 4873.84, "duration": 2.85}, {"text": "No.", "start": 4876.69, "duration": 0.63}, {"text": "And that is where garbage\nvalues come from, for instance.", "start": 4877.32, "duration": 4.154}, {"text": "Because they're just left in\nmemory from the previous use.", "start": 4881.474, "duration": 2.416}, {"text": "Other questions?", "start": 4883.89, "duration": 0.93}, {"text": "Yeah?", "start": 4884.82, "duration": 0.5}, {"text": "AUDIENCE: What does the\nuser actually type to break?", "start": 4885.32, "duration": 3.82}, {"text": "DAVID J. MALAN: Oh, Control-D.\nControl-D. And it's not break.", "start": 4889.14, "duration": 4.32}, {"text": "It is to send end of file, end of input.", "start": 4893.46, "duration": 2.95}, {"text": "Control-C kills or breaks\nout of the program itself.", "start": 4896.41, "duration": 2.3}, {"text": "AUDIENCE: And that's the\nsame as the intmax kind of?", "start": 4898.71, "duration": 2.37}, {"text": "DAVID J. MALAN: Same as intmax?", "start": 4901.08, "duration": 2.831}, {"text": "Yes.", "start": 4903.911, "duration": 0.499}, {"text": "AUDIENCE: Because you're not\nadding, like, a giant value.", "start": 4904.41, "duration": 1.68}, {"text": "DAVID J. MALAN: Correct.", "start": 4906.09, "duration": 1.0}, {"text": "In the CS50 library,\nintmax, yes, is the symbol.", "start": 4907.09, "duration": 3.18}, {"text": "Yes.", "start": 4910.27, "duration": 0.5}, {"text": "Yeah?", "start": 4910.77, "duration": 0.635}, {"text": "AUDIENCE: Could you also\njust ask the user to say,", "start": 4911.405, "duration": 3.765}, {"text": "do you want to enter\nanother number yes or no?", "start": 4915.17, "duration": 2.12}, {"text": "DAVID J. MALAN: Absolutely.", "start": 4917.29, "duration": 0.74}, {"text": "We could add more logic.", "start": 4918.03, "duration": 1.05}, {"text": "And you could use getString.", "start": 4919.08, "duration": 1.11}, {"text": "And we could prompt him or her, hey,\ndo you want to input another number.", "start": 4920.19, "duration": 2.64}, {"text": "The only downside of\nthat would be, now, I", "start": 4922.83, "duration": 1.75}, {"text": "have to type in not only my\nnumber, but yes or no constantly.", "start": 4924.58, "duration": 3.0}, {"text": "So it's just a trade-off\nuser interface-wise.", "start": 4927.58, "duration": 2.701}, {"text": "All right.", "start": 4930.281, "duration": 0.499}, {"text": "So let me go ahead.", "start": 4930.78, "duration": 1.5}, {"text": "And let me go ahead and return 0\nhere just as my simple solution", "start": 4932.28, "duration": 4.44}, {"text": "to this problem of\nsomething going wrong.", "start": 4936.72, "duration": 3.18}, {"text": "I've just compiled this program.", "start": 4939.9, "duration": 1.71}, {"text": "Let me go ahead and run it.", "start": 4941.61, "duration": 1.17}, {"text": "I'm going to type in one number,\ntwo numbers, three numbers.", "start": 4942.78, "duration": 4.44}, {"text": "And now I'm bored.", "start": 4947.22, "duration": 0.75}, {"text": "I don't want to keep doing this.", "start": 4947.97, "duration": 1.333}, {"text": "How do I tell the computer I'm done?", "start": 4949.303, "duration": 1.727}, {"text": "AUDIENCE: Control-D.", "start": 4951.03, "duration": 0.9}, {"text": "DAVID J. MALAN: Control-D. Oops.", "start": 4951.93, "duration": 2.67}, {"text": "Oh, OK.", "start": 4954.6, "duration": 0.519}, {"text": "That's correct behavior\nbecause I forgot a key step.", "start": 4955.119, "duration": 2.166}, {"text": "What's that?", "start": 4959.83, "duration": 1.27}, {"text": "AUDIENCE: [INAUDIBLE].", "start": 4961.1, "duration": 0.945}, {"text": "DAVID J. MALAN: Yeah.", "start": 4962.045, "duration": 0.875}, {"text": "I'm not actually doing\nanything with the values.", "start": 4962.92, "duration": 2.0}, {"text": "I should probably for int\nI get 0, I less than size,", "start": 4964.92, "duration": 4.315}, {"text": "I + + code we had before.", "start": 4969.235, "duration": 2.905}, {"text": "And I should probably print\nout You inputted %I, this.", "start": 4972.14, "duration": 5.85}, {"text": "Save that.", "start": 4977.99, "duration": 1.28}, {"text": "Make list one.", "start": 4979.27, "duration": 1.41}, {"text": "So all I did was re-add\nthe printing code.", "start": 4980.68, "duration": 2.64}, {"text": "Now if I rerun this-- one,\ntwo three, Control-D--", "start": 4983.32, "duration": 4.78}, {"text": "dammit.", "start": 4988.1, "duration": 0.828}, {"text": "AUDIENCE: [INAUDIBLE].", "start": 4988.928, "duration": 1.651}, {"text": "DAVID J. MALAN: Oh.", "start": 4990.579, "duration": 0.791}, {"text": "OK.", "start": 4991.37, "duration": 0.499}, {"text": "Now I broke my code here.", "start": 4991.869, "duration": 2.751}, {"text": "Let me do this.", "start": 4994.62, "duration": 0.966}, {"text": "We're going to get rid\nof this error checking", "start": 4995.586, "duration": 1.874}, {"text": "because I'm not actually ever resizing.", "start": 4997.46, "duration": 2.13}, {"text": "numbers gets realloc.", "start": 4999.59, "duration": 2.04}, {"text": "Oh, and maybe someone\nchiming in with this--", "start": 5001.63, "duration": 2.94}, {"text": "numbers bracket size\ngets the user's input.", "start": 5004.57, "duration": 5.19}, {"text": "Size + +-- was this a key\ndetail someone wanted me to do?", "start": 5009.76, "duration": 4.35}, {"text": "OK.", "start": 5014.11, "duration": 0.5}, {"text": "So I didn't actually\nfinish the program earlier.", "start": 5014.61, "duration": 2.35}, {"text": "Notice we left off as follows--", "start": 5016.96, "duration": 2.15}, {"text": "hey, computer, give me an\narray of size 0 initially", "start": 5019.11, "duration": 4.02}, {"text": "that's null-- there's no memory for it.", "start": 5023.13, "duration": 2.08}, {"text": "Therefore, the size of this array is 0.", "start": 5025.21, "duration": 2.57}, {"text": "Do the following forever.", "start": 5027.78, "duration": 1.68}, {"text": "Get a number from the human.", "start": 5029.46, "duration": 2.25}, {"text": "If the number equals this\nspecial value, intmax just", "start": 5031.71, "duration": 2.87}, {"text": "breakout because the program is done.", "start": 5034.58, "duration": 3.1}, {"text": "And actually, sorry.", "start": 5037.68, "duration": 2.31}, {"text": "This is why I write\nthese in advance too.", "start": 5039.99, "duration": 4.515}, {"text": "OK.", "start": 5044.505, "duration": 1.455}, {"text": "Go ahead and prompt\nthe user for a number.", "start": 5045.96, "duration": 2.34}, {"text": "If they have inputted the Control-D,\njust break out of this loop.", "start": 5048.3, "duration": 3.88}, {"text": "However, if the size of the array\nequals its current capacity,", "start": 5052.18, "duration": 3.74}, {"text": "go ahead and reallocate space for this\nthing being one number bigger than it", "start": 5055.92, "duration": 5.25}, {"text": "previously was.", "start": 5061.17, "duration": 1.41}, {"text": "Now, assuming that succeeded\nand we have memory,", "start": 5062.58, "duration": 3.0}, {"text": "go ahead, and just like our list 0\nexample, store in the numbers array", "start": 5065.58, "duration": 4.59}, {"text": "at the current location, which is 0,\nwhatever number the human typed in.", "start": 5070.17, "duration": 3.99}, {"text": "And then increment the size by\none to remember what we have done.", "start": 5074.16, "duration": 4.3}, {"text": "I'm also though going to\nneed to do capacity + + here", "start": 5078.46, "duration": 3.38}, {"text": "to remember that we've increased\nthe capacity of the array.", "start": 5081.84, "duration": 2.71}, {"text": "So again, two new measures.", "start": 5084.55, "duration": 1.31}, {"text": "capacity is how much\nspace there is in total.", "start": 5085.86, "duration": 2.47}, {"text": "size is how much we're using.", "start": 5088.33, "duration": 1.79}, {"text": "They happen to be\nidentical at the moment", "start": 5090.12, "duration": 2.52}, {"text": "because we're growing this\nthing step by step by step.", "start": 5092.64, "duration": 3.92}, {"text": "All right.", "start": 5096.56, "duration": 0.5}, {"text": "Let me go ahead and hit Save.", "start": 5097.06, "duration": 1.37}, {"text": "Let me go ahead and\ncompile this one last time.", "start": 5098.43, "duration": 2.95}, {"text": "./list1 and input 1, 2, 3.", "start": 5101.38, "duration": 3.68}, {"text": "Control-D. OK.", "start": 5105.06, "duration": 2.01}, {"text": "Now it's just an aesthetic bug.", "start": 5107.07, "duration": 1.59}, {"text": "I forgot my /n.", "start": 5108.66, "duration": 2.15}, {"text": "So just to prove that I can actually\nprogram, ./list1; 1, 2, 3; Control-D.", "start": 5110.81, "duration": 7.96}, {"text": "Phew.", "start": 5118.77, "duration": 0.93}, {"text": "All right.", "start": 5119.7, "duration": 0.75}, {"text": "So you inputted 1.", "start": 5120.45, "duration": 0.886}, {"text": "And the reason it didn't\nmove to another line", "start": 5121.336, "duration": 1.874}, {"text": "is because Control-D gets sent\nimmediately without hitting Enter.", "start": 5123.21, "duration": 3.42}, {"text": "All right.", "start": 5126.63, "duration": 0.772}, {"text": "Phew.", "start": 5127.402, "duration": 1.148}, {"text": "That's all using arrays.", "start": 5128.55, "duration": 1.11}, {"text": "Now let's do the sort of cake baked\nalready and pull it out of the oven.", "start": 5129.66, "duration": 5.34}, {"text": "The third and final\nexample here is list two.", "start": 5135.0, "duration": 3.78}, {"text": "And actually, before we get\nthere, let me note one thing.", "start": 5138.78, "duration": 3.192}, {"text": "Yeah, let's do one last thing here.", "start": 5141.972, "duration": 1.458}, {"text": "Let me go ahead and run, per earlier,\nour new friend valgrind on list1.", "start": 5143.43, "duration": 5.95}, {"text": "Enter.", "start": 5149.38, "duration": 1.31}, {"text": "It's waiting for me to type in 1, 2, 3.", "start": 5150.69, "duration": 3.45}, {"text": "Let me go ahead and hit\nControl-D. Interesting.", "start": 5154.14, "duration": 3.45}, {"text": "I seem to have a buggy program even\nthough I claimed a moment ago that I", "start": 5157.59, "duration": 3.6}, {"text": "knew what I was doing.", "start": 5161.19, "duration": 1.2}, {"text": "12 bytes in one blocks are definitely\nlost in lost record one of one.", "start": 5162.39, "duration": 3.664}, {"text": "Again, I don't understand\nmost of those words.", "start": 5166.054, "duration": 1.916}, {"text": "But 12 bytes definitely lost--", "start": 5167.97, "duration": 2.52}, {"text": "probably my fault. Why is it 12?", "start": 5170.49, "duration": 3.09}, {"text": "And what are those 12 bytes?", "start": 5173.58, "duration": 3.29}, {"text": "Yeah?", "start": 5176.87, "duration": 0.615}, {"text": "AUDIENCE: I think you\nmade three integers.", "start": 5177.485, "duration": 2.144}, {"text": "DAVID J. MALAN: Yeah, 1, 2, and 3.", "start": 5179.629, "duration": 1.416}, {"text": "AUDIENCE: And each one is 4 bytes.", "start": 5181.045, "duration": 1.053}, {"text": "And you never freed them\nafter you used malloc.", "start": 5182.098, "duration": 1.712}, {"text": "DAVID J. MALAN: Exactly.", "start": 5183.81, "duration": 0.48}, {"text": "I typed in three numbers--", "start": 5184.29, "duration": 0.87}, {"text": "1, 2, and 3.", "start": 5185.16, "duration": 0.561}, {"text": "Each of those is 4\nbytes on this computer.", "start": 5185.721, "duration": 1.749}, {"text": "That's 12-- 3 times 4.", "start": 5187.47, "duration": 1.89}, {"text": "And so I'd never freed them seems\nto be the source of the issue.", "start": 5189.36, "duration": 3.48}, {"text": "So at the end, let's\njust prove that valgrind", "start": 5192.84, "duration": 3.18}, {"text": "can detect correctness as well.", "start": 5196.02, "duration": 1.83}, {"text": "Free my numbers, semi-colon.", "start": 5197.85, "duration": 2.49}, {"text": "Let me go ahead and rerun make list1.", "start": 5200.34, "duration": 2.88}, {"text": "And now let me increase the size\nof this and do valgrind again", "start": 5203.22, "duration": 4.02}, {"text": "on list1, typing in the same values--", "start": 5207.24, "duration": 2.52}, {"text": "1, 2, and 3.", "start": 5209.76, "duration": 0.81}, {"text": "Control-D. All he blocks were freed.", "start": 5210.57, "duration": 2.79}, {"text": "No leaks are possible.", "start": 5213.36, "duration": 1.414}, {"text": "So again, valgrind is your friend.", "start": 5214.774, "duration": 1.416}, {"text": "It finds problems that you\ndidn't even necessarily notice.", "start": 5216.19, "duration": 2.02}, {"text": "And you didn't have to read\nthrough your lines of code again", "start": 5218.21, "duration": 2.5}, {"text": "and again to identify the source\nof the issue unnecessarily.", "start": 5220.71, "duration": 2.8}, {"text": "All right.", "start": 5223.51, "duration": 0.5}, {"text": "Any questions then on these arrays\nthat are dynamically allocated", "start": 5224.01, "duration": 4.53}, {"text": "and the bugs we find\ntherein with valgrind?", "start": 5228.54, "duration": 3.56}, {"text": "All right.", "start": 5232.1, "duration": 0.53}, {"text": "So the last demonstration\nof code is going to be this.", "start": 5232.63, "duration": 4.98}, {"text": "I have stolen, for this final\nexample, some of the building blocks", "start": 5237.61, "duration": 4.2}, {"text": "that we had on the screen earlier.", "start": 5241.81, "duration": 1.77}, {"text": "In my code for list2.c, I\nneed a structure called node.", "start": 5243.58, "duration": 5.16}, {"text": "And that node, as we claimed\nearlier with our human volunteers,", "start": 5248.74, "duration": 2.88}, {"text": "is going to contain a\nnumber called number,", "start": 5251.62, "duration": 1.8}, {"text": "we'll call it this time, instead of n.", "start": 5253.42, "duration": 1.77}, {"text": "And it's going to contain a ptr\ncalled next to another such node.", "start": 5255.19, "duration": 4.86}, {"text": "So that's copied and pasted earlier,\nalbeit with the integer renamed", "start": 5260.05, "duration": 3.09}, {"text": "to number for clarity.", "start": 5263.14, "duration": 1.87}, {"text": "Now, notice in main\nwhat I'm doing first.", "start": 5265.01, "duration": 2.81}, {"text": "Go ahead and allocate an\narray of no space initially.", "start": 5267.82, "duration": 5.43}, {"text": "So this was like when Comey was\nholding up first and representing", "start": 5273.25, "duration": 3.66}, {"text": "the beginning of our data structure.", "start": 5276.91, "duration": 2.08}, {"text": "This is the analog using an array,\nthat the piece of paper that", "start": 5278.99, "duration": 3.23}, {"text": "would be held up here would be numbers.", "start": 5282.22, "duration": 1.83}, {"text": "And it's just pointing at\nnothing, null-- like left hand", "start": 5284.05, "duration": 2.34}, {"text": "down on the floor.", "start": 5286.39, "duration": 1.04}, {"text": "Because there is no\nmemory yet allocated.", "start": 5287.43, "duration": 2.38}, {"text": "But then, and while true,\ngo ahead and get an integer", "start": 5289.81, "duration": 4.08}, {"text": "from the user with this code here.", "start": 5293.89, "duration": 2.49}, {"text": "Check if the user hit Control-D,\nas with this arcane technique.", "start": 5296.38, "duration": 5.43}, {"text": "And then our code is\nsimilar in spirit, but we", "start": 5301.81, "duration": 3.45}, {"text": "have to stitch these things together.", "start": 5305.26, "duration": 2.26}, {"text": "Allocate space for the number.", "start": 5307.52, "duration": 1.95}, {"text": "So when I malloc an additional\nvolunteer from the audience", "start": 5309.47, "duration": 2.75}, {"text": "and he or she came down, the\nequivalent in code is this--", "start": 5312.22, "duration": 3.21}, {"text": "hey, computer, allocate with malloc\nenough space to fit the size of a node,", "start": 5315.43, "duration": 6.0}, {"text": "then store the results\nin a ptr called n.", "start": 5321.43, "duration": 3.03}, {"text": "So node *n just means, give me\na pointer to a node, call it n,", "start": 5324.46, "duration": 4.83}, {"text": "and store the address that was just\nallocated from the audience as before.", "start": 5329.29, "duration": 3.78}, {"text": "Why do I have these lines of code\nhere that I've highlighted in blue?", "start": 5333.07, "duration": 3.03}, {"text": "What's that expressing?", "start": 5336.1, "duration": 1.374}, {"text": "If bang n, or if not n would\nbe how you pronounce it--", "start": 5343.9, "duration": 4.37}, {"text": "what's going on there?", "start": 5348.27, "duration": 2.34}, {"text": "Yeah?", "start": 5350.61, "duration": 0.92}, {"text": "AUDIENCE: If there is no more memory\nthat you can point to, then it fails.", "start": 5351.53, "duration": 3.83}, {"text": "DAVID J. MALAN: Exactly.", "start": 5355.36, "duration": 1.0}, {"text": "This isn't going to\nhappen all that often.", "start": 5356.36, "duration": 1.75}, {"text": "But if the computer is out of\nmemory, and therefore malloc fails,", "start": 5358.11, "duration": 3.47}, {"text": "you don't want the program\njust to crash or freeze.", "start": 5361.58, "duration": 2.17}, {"text": "Like, all of us hate when that\nhappens on Mac OS or Windows.", "start": 5363.75, "duration": 2.61}, {"text": "So check for it.", "start": 5366.36, "duration": 1.01}, {"text": "If not n, or equivalently,\nif n = = null, just return 1.", "start": 5367.37, "duration": 5.79}, {"text": "Quit gracefully, even though annoyingly.", "start": 5373.16, "duration": 2.25}, {"text": "But don't just crash or\ndo something unexpected.", "start": 5375.41, "duration": 2.28}, {"text": "So you can simplify that check to just\nif not n-- if n is not a valid ptr,", "start": 5377.69, "duration": 6.06}, {"text": "return 1.", "start": 5383.75, "duration": 1.23}, {"text": "Now, here's the code with which we\nwere implementing the demonstration", "start": 5384.98, "duration": 4.29}, {"text": "with our humans.", "start": 5389.27, "duration": 0.69}, {"text": "And this is the scariest\nlooking or most cryptic at least", "start": 5389.96, "duration": 2.43}, {"text": "looking code we're going to see in C.", "start": 5392.39, "duration": 2.43}, {"text": "Today is our final day in\nC. We've been running up", "start": 5394.82, "duration": 4.47}, {"text": "a really steep hill of\nlate, learning about memory,", "start": 5399.29, "duration": 2.52}, {"text": "and now data structures and syntax.", "start": 5401.81, "duration": 2.12}, {"text": "This is the last of our syntax in C.", "start": 5403.93, "duration": 2.35}, {"text": "So what are the symbols to be aware of?", "start": 5406.28, "duration": 3.42}, {"text": "This line of code here is how I handed\none of our volunteers a piece of paper.", "start": 5409.7, "duration": 6.0}, {"text": "On the right-hand side is the\nnumber that was typed in--", "start": 5415.7, "duration": 2.57}, {"text": "55, or 5, or 20, or\nwhatever the value is.", "start": 5418.27, "duration": 3.19}, {"text": "On the left-hand side is\nwhere you want to put it.", "start": 5421.46, "duration": 2.67}, {"text": "n and then literally an\narrow number does this.", "start": 5424.13, "duration": 4.95}, {"text": "It has, with malloc a line or\nso prior, given me in memory", "start": 5429.08, "duration": 5.22}, {"text": "just one of these big rectangles.", "start": 5434.3, "duration": 2.01}, {"text": "And again, the top of this in\nthis example is called the number", "start": 5436.31, "duration": 4.11}, {"text": "and the bottom is called next.", "start": 5440.42, "duration": 1.65}, {"text": "So that's our human having stood\nup from the back of the room.", "start": 5442.07, "duration": 3.21}, {"text": "When I hand that human a number,\nlike 55, it visually goes there.", "start": 5445.28, "duration": 4.59}, {"text": "The line of code with which\nyou achieve that is this here.", "start": 5449.87, "duration": 3.36}, {"text": "Because notice on line 31\nhere, when I malloc that node,", "start": 5453.23, "duration": 4.62}, {"text": "I stored its address\nin a variable called n.", "start": 5457.85, "duration": 4.23}, {"text": "And that's a pointer, as drawn\nwith an arrow, to that big node.", "start": 5462.08, "duration": 3.84}, {"text": "Or if we really want to be\nnit-picky, if this is in address 100,", "start": 5465.92, "duration": 3.0}, {"text": "yes, then the pointer actually\nhas the value 100 in it.", "start": 5468.92, "duration": 2.67}, {"text": "But again, that's rarely\nuseful information.", "start": 5471.59, "duration": 1.95}, {"text": "So we can abstract away\nwith just an arrow.", "start": 5473.54, "duration": 3.07}, {"text": "So line 31 is what creates\nthose boxes on the screen.", "start": 5476.61, "duration": 4.76}, {"text": "Line 38 is what puts the number--", "start": 5481.37, "duration": 3.75}, {"text": "for instance, 55-- into the box exactly,\nmuch like I handed a piece of paper", "start": 5485.12, "duration": 5.13}, {"text": "over.", "start": 5490.25, "duration": 0.78}, {"text": "So what is this?", "start": 5491.03, "duration": 1.6}, {"text": "This is the only real\nnew notation today,", "start": 5492.63, "duration": 2.99}, {"text": "even though we're using\nlots of stars elsewhere--", "start": 5495.62, "duration": 2.56}, {"text": "arrow This is wonderfully the first time\nin C it actually maps to our pictures.", "start": 5498.18, "duration": 5.48}, {"text": "If n is the variable and\nyou do n arrow something,", "start": 5503.66, "duration": 2.89}, {"text": "that means follow the arrow--", "start": 5506.55, "duration": 1.499}, {"text": "kind of like Chutes and Ladders\nif you grew up playing that--", "start": 5508.049, "duration": 2.541}, {"text": "and then put the number where the arrow\nhas led you in the field called number.", "start": 5510.59, "duration": 6.6}, {"text": "So as an aside, we can think about this\na different way. n is what data type?", "start": 5517.19, "duration": 5.64}, {"text": "What is this thing in blue--", "start": 5522.83, "duration": 1.18}, {"text": "n?", "start": 5524.01, "duration": 0.5}, {"text": "AUDIENCE: Pointer.", "start": 5527.807, "duration": 0.943}, {"text": "DAVID J. MALAN: It's a pointer.", "start": 5528.75, "duration": 1.291}, {"text": "And it's a pointer to one of these\nthings that we created earlier.", "start": 5530.041, "duration": 2.886}, {"text": "So we're not doing students\nanymore with our structures.", "start": 5532.927, "duration": 2.333}, {"text": "We're implementing nodes, which\nhave numbers and next pointers.", "start": 5535.26, "duration": 3.66}, {"text": "So it turns out that if n\nis a pointer to a node--", "start": 5538.92, "duration": 5.52}, {"text": "recall that dot notation from before--", "start": 5544.44, "duration": 3.13}, {"text": "this is not how you access\nnumber in this case.", "start": 5547.57, "duration": 2.0}, {"text": "Because n is not a node itself.", "start": 5549.57, "duration": 1.38}, {"text": "It's a pointer.", "start": 5550.95, "duration": 1.14}, {"text": "But if n is a pointer, how\ndo you go to a pointer?", "start": 5552.09, "duration": 3.39}, {"text": "How do you go to an address?", "start": 5555.48, "duration": 1.65}, {"text": "With what notation?", "start": 5557.13, "duration": 1.776}, {"text": "AUDIENCE: Star.", "start": 5558.906, "duration": 0.624}, {"text": "DAVID J. MALAN: Star.", "start": 5559.53, "duration": 0.94}, {"text": "So recall from last week, if\nwe want to go to an address,", "start": 5560.47, "duration": 3.81}, {"text": "you could do syntax like this.", "start": 5564.28, "duration": 1.361}, {"text": "Ignore the parentheses for a moment.", "start": 5565.641, "duration": 1.499}, {"text": "Just *n means if n is an address of\na chunk of memory, *n means go there.", "start": 5567.14, "duration": 5.15}, {"text": "Once you're there, you're conceptually\nright here-- top left-hand corner.", "start": 5572.29, "duration": 4.23}, {"text": "How do you access individual\nfields like number or next?", "start": 5576.52, "duration": 3.15}, {"text": "You use dot notation.", "start": 5579.67, "duration": 1.75}, {"text": "So if you literally do *n.number, that\nmeans go to the address and access", "start": 5581.42, "duration": 6.98}, {"text": "the number field.", "start": 5588.4, "duration": 1.22}, {"text": "There is nice syntactic\nsugar in C, which", "start": 5589.62, "duration": 2.47}, {"text": "is just a fancy way of saying shorthand\nnotation, where it's just the arrow.", "start": 5592.09, "duration": 4.02}, {"text": "But that's all it is.", "start": 5596.11, "duration": 0.96}, {"text": "This arrow notation\ndoesn't do anything new.", "start": 5597.07, "duration": 2.38}, {"text": "It just combines, go there, with, access\na field in a struct, all in one breath", "start": 5599.45, "duration": 5.54}, {"text": "if you will.", "start": 5604.99, "duration": 1.21}, {"text": "And this just looks a little prettier.", "start": 5606.2, "duration": 2.36}, {"text": "When I told our volunteers\nearlier, point your hand", "start": 5608.56, "duration": 2.43}, {"text": "down at the floor, that's all\nthat line of code is doing.", "start": 5610.99, "duration": 2.77}, {"text": "It's saying, go to n's address,\nwhich is here, access the next field,", "start": 5613.76, "duration": 4.94}, {"text": "and write in that field\nnull, which is just", "start": 5618.7, "duration": 2.4}, {"text": "the address 0-- the default, special\naddress, like pointing at the floor.", "start": 5621.1, "duration": 5.01}, {"text": "This line of code, 40, is\njust a quick error check.", "start": 5626.11, "duration": 3.42}, {"text": "if (numbers)-- what\nis that equivalent to?", "start": 5629.53, "duration": 2.01}, {"text": "That's actually just saying,\nif numbers, not equals null.", "start": 5631.54, "duration": 2.61}, {"text": "So if numbers is legitimate, if malloc\nworked correctly, then let's go ahead", "start": 5634.15, "duration": 5.16}, {"text": "and do the following.", "start": 5639.31, "duration": 2.148}, {"text": "Phew.", "start": 5641.458, "duration": 0.812}, {"text": "This is a mouthful.", "start": 5642.27, "duration": 1.78}, {"text": "What is going on here?", "start": 5644.05, "duration": 1.94}, {"text": "So this is a for-loop\nthat's not using numbers.", "start": 5645.99, "duration": 2.51}, {"text": "Well, or is it?", "start": 5648.5, "duration": 0.987}, {"text": "Almost every for-loop we've written\nand you've probably written just", "start": 5649.487, "duration": 2.833}, {"text": "uses I, J, maybe K, but\njust integers probably.", "start": 5652.32, "duration": 4.34}, {"text": "But that doesn't have to be the case.", "start": 5656.66, "duration": 1.89}, {"text": "What is a pointer?", "start": 5658.55, "duration": 1.044}, {"text": "It's an address.", "start": 5659.594, "duration": 0.666}, {"text": "What is an address?", "start": 5660.26, "duration": 0.791}, {"text": "AUDIENCE: A place in memory.", "start": 5663.484, "duration": 1.166}, {"text": "DAVID J. MALAN: A place in\nmemory, or a number really.", "start": 5664.65, "duration": 1.92}, {"text": "So you can certainly use for-loops\njust involving addresses.", "start": 5666.57, "duration": 2.7}, {"text": "But how?", "start": 5669.27, "duration": 0.96}, {"text": "So we'll consider this line of code.", "start": 5670.23, "duration": 2.05}, {"text": "This here looks different\ntoday, but it's everything", "start": 5672.28, "duration": 2.96}, {"text": "before that first semi-colon.", "start": 5675.24, "duration": 1.38}, {"text": "That's just where you\ninitialize a value.", "start": 5676.62, "duration": 2.02}, {"text": "So this is like saying, hey,\ncomputer, go ahead and give me", "start": 5678.64, "duration": 3.62}, {"text": "a variable called ptr and initialize\nit to be the start of my list.", "start": 5682.26, "duration": 9.16}, {"text": "Then I'm saying, hey, computer, do this\nso long as ptr does not equal null.", "start": 5691.42, "duration": 5.93}, {"text": "And then what am I doing?", "start": 5697.35, "duration": 1.96}, {"text": "if-- and let's ignore this\nfor now, it's an error check--", "start": 5699.31, "duration": 3.62}, {"text": "go ahead and-- sorry, let\nme think for one second.", "start": 5702.93, "duration": 6.0}, {"text": "OK.", "start": 5713.33, "duration": 0.5}, {"text": "Let's do this.", "start": 5713.83, "duration": 0.855}, {"text": "What are these lines of code doing?", "start": 5717.34, "duration": 2.43}, {"text": "This is the code that\nwas actually suggested", "start": 5719.77, "duration": 1.9}, {"text": "at the very end of our human example.", "start": 5721.67, "duration": 1.73}, {"text": "Like, what if we wanted to\ninsert all of the elements", "start": 5723.4, "duration": 3.06}, {"text": "at the end of the link list?", "start": 5726.46, "duration": 2.04}, {"text": "How do you express that?", "start": 5728.5, "duration": 1.53}, {"text": "So in this highlighted lines of\ncode, we're asking the question,", "start": 5730.03, "duration": 4.02}, {"text": "if the current pointer's next\nfield is null, we've found the end.", "start": 5734.05, "duration": 4.32}, {"text": "Go ahead and update that next\nfield to equal n and then break.", "start": 5738.37, "duration": 4.44}, {"text": "So let me translate this\nto an actual picture,", "start": 5742.81, "duration": 2.33}, {"text": "but using smaller boxes that makes\nclear where something is going.", "start": 5745.14, "duration": 4.69}, {"text": "So suppose that this program's\nbeen running for a little while", "start": 5749.83, "duration": 3.58}, {"text": "and we have a length list\nthat looks like this,", "start": 5753.41, "duration": 4.07}, {"text": "where this one is pointing here\nand maybe this one's pointing here.", "start": 5757.48, "duration": 4.72}, {"text": "And this says null here.", "start": 5762.2, "duration": 2.15}, {"text": "And this points here.", "start": 5764.35, "duration": 1.05}, {"text": "And the numbers are, as we've\nbeen using today, 42, 50, 13.", "start": 5765.4, "duration": 5.91}, {"text": "So the start of this\nlist is called numbers.", "start": 5771.31, "duration": 3.345}, {"text": "This points to the start of the list.", "start": 5777.18, "duration": 2.04}, {"text": "What am I doing in this for-loop?", "start": 5779.22, "duration": 1.8}, {"text": "I am just implementing the\nfollowing logic with this loop--", "start": 5781.02, "duration": 3.63}, {"text": "give me a variable called\nptr, as represented", "start": 5784.65, "duration": 2.67}, {"text": "in the story by my left\nfinger, here, and initialize", "start": 5787.32, "duration": 3.48}, {"text": "that to be the start of the list.", "start": 5790.8, "duration": 2.32}, {"text": "If that node's next pointer is\nequal to null, add a new node here.", "start": 5793.12, "duration": 9.38}, {"text": "But this is not null.", "start": 5802.5, "duration": 1.38}, {"text": "I want to follow the\nbread crumbs to here.", "start": 5803.88, "duration": 2.94}, {"text": "And then, oh, we're at\nthe end of the list.", "start": 5806.82, "duration": 1.86}, {"text": "I want to insert this new thing here.", "start": 5808.68, "duration": 1.92}, {"text": "So how do express this\ncode actually in C?", "start": 5810.6, "duration": 5.04}, {"text": "So if I look back up here,\nthis is the line of code", "start": 5815.64, "duration": 6.12}, {"text": "that allocates my left finger\nhere called ptr and initialize it", "start": 5821.76, "duration": 4.22}, {"text": "to equal numbers, which is the same\nas pointing at the first element.", "start": 5825.98, "duration": 3.34}, {"text": "It's kind of like Comey was\nrepresenting first earlier.", "start": 5829.32, "duration": 2.61}, {"text": "But now our array is called numbers.", "start": 5831.93, "duration": 2.01}, {"text": "Next, what am I doing?", "start": 5833.94, "duration": 2.34}, {"text": "Does ptr equal null?", "start": 5836.28, "duration": 1.33}, {"text": "Well, no.", "start": 5837.61, "duration": 0.95}, {"text": "If my left hand is pointing here,\nit obviously doesn't equal null.", "start": 5838.56, "duration": 3.06}, {"text": "So we don't have to worry yet.", "start": 5841.62, "duration": 1.59}, {"text": "Then what do I want to do?", "start": 5843.21, "duration": 1.8}, {"text": "If ptr next equals null,\nwell, what does that mean?", "start": 5845.01, "duration": 3.67}, {"text": "Well, ptr is here.", "start": 5848.68, "duration": 1.49}, {"text": "ptr arrow next means here.", "start": 5850.17, "duration": 2.55}, {"text": "Does this equal null in this story?", "start": 5852.72, "duration": 3.122}, {"text": "I mean, it literally doesn't.", "start": 5855.842, "duration": 1.208}, {"text": "Because null is not written\nthere. null is way down there.", "start": 5857.05, "duration": 2.58}, {"text": "So the condition does not pass.", "start": 5859.63, "duration": 2.83}, {"text": "So what do I do next?", "start": 5862.46, "duration": 1.67}, {"text": "If ptr is equal to null doesn't\napply, here's a weird update.", "start": 5864.13, "duration": 6.12}, {"text": "ptr gets ptr next.", "start": 5870.25, "duration": 2.64}, {"text": "So it's cryptic-looking syntax.", "start": 5872.89, "duration": 1.89}, {"text": "But if ptr is pointing\nhere, what is ptr next?", "start": 5874.78, "duration": 4.14}, {"text": "That's just this, right?", "start": 5878.92, "duration": 1.2}, {"text": "This is n.", "start": 5880.12, "duration": 0.63}, {"text": "This is next.", "start": 5880.75, "duration": 0.871}, {"text": "Or this is number.", "start": 5881.621, "duration": 0.749}, {"text": "This is next.", "start": 5882.37, "duration": 0.9}, {"text": "So ptr next is this.", "start": 5883.27, "duration": 2.59}, {"text": "So what is this value?", "start": 5885.86, "duration": 1.41}, {"text": "Well, this is a pointer pointing here.", "start": 5887.27, "duration": 2.15}, {"text": "So that highlighted block of\ncode, ptr equals ptr next,", "start": 5889.42, "duration": 4.47}, {"text": "has the effect visually of doing this.", "start": 5893.89, "duration": 4.02}, {"text": "Why?", "start": 5897.91, "duration": 0.75}, {"text": "If the arrows are a little too magical,\njust think about these being addresses.", "start": 5898.66, "duration": 3.54}, {"text": "If this is saying, the next\naddress is location 100,", "start": 5902.2, "duration": 3.63}, {"text": "ptr equals ptr next is like\nsaying, well, this also equals 100.", "start": 5905.83, "duration": 4.62}, {"text": "Whatever 100 is, for\ninstance, over here is", "start": 5910.45, "duration": 2.82}, {"text": "what both arrows should now point out.", "start": 5913.27, "duration": 2.14}, {"text": "And if you now repeat this\nprocess and repeat this process,", "start": 5915.41, "duration": 2.75}, {"text": "eventually that question we\nasked earlier is going to apply--", "start": 5918.16, "duration": 3.81}, {"text": "if ptr next equals null,\nwhat do I want to do?", "start": 5921.97, "duration": 4.18}, {"text": "Well, if ptr x equals null, there's\ntwo lines going on. ptr next equals n.", "start": 5926.15, "duration": 7.61}, {"text": "So ptr next is no longer null.", "start": 5933.76, "duration": 2.55}, {"text": "It should instead be pointing\nat n, which is the new node.", "start": 5936.31, "duration": 4.08}, {"text": "And then that's it.", "start": 5940.39, "duration": 1.95}, {"text": "Because this was already\ninitialized to null.", "start": 5942.34, "duration": 1.89}, {"text": "And let's suppose this was 55.", "start": 5944.23, "duration": 1.95}, {"text": "And we're done.", "start": 5946.18, "duration": 1.13}, {"text": "So much easier to do, obviously,\nin person with just humans,", "start": 5947.31, "duration": 2.5}, {"text": "and moving around, and\npointing with their left hands.", "start": 5949.81, "duration": 2.91}, {"text": "But in code, you just have to think\nabout the basic building blocks.", "start": 5952.72, "duration": 3.76}, {"text": "What is each of these values?", "start": 5956.48, "duration": 1.49}, {"text": "Where is each of it pointing?", "start": 5957.97, "duration": 2.16}, {"text": "And which of those fields\ndo you need to update?", "start": 5960.13, "duration": 2.16}, {"text": "And the only new code here-- even though\nwe're kind of combining it all in one", "start": 5962.29, "duration": 3.51}, {"text": "massive example--", "start": 5965.8, "duration": 0.9}, {"text": "is this.", "start": 5966.7, "duration": 0.78}, {"text": "We are actually using arrow\nnotation to say, go to that address", "start": 5967.48, "duration": 3.75}, {"text": "and access some value therein.", "start": 5971.23, "duration": 3.09}, {"text": "And this condition down here, which\nI'll wave my hand out for now,", "start": 5974.32, "duration": 2.82}, {"text": "just handles this situation where\nthe list is initially empty.", "start": 5977.14, "duration": 4.85}, {"text": "Any questions on this thus far?", "start": 5981.99, "duration": 3.69}, {"text": "All right.", "start": 5985.68, "duration": 1.05}, {"text": "So let's take a look more graphically\nat some final problems we can solve.", "start": 5986.73, "duration": 6.0}, {"text": "And what you'll see in the\ndays ahead is the following", "start": 5992.73, "duration": 3.36}, {"text": "when it comes to these\nlinked lists and more.", "start": 5996.09, "duration": 2.25}, {"text": "We now have the ability to actually\nallocate things in memory dynamically.", "start": 5998.34, "duration": 3.279}, {"text": "We don't necessarily know in\nadvance how many numbers we have", "start": 6001.619, "duration": 2.541}, {"text": "or, in the case of the next problem\nset, how many words we have.", "start": 6004.16, "duration": 2.79}, {"text": "We have the ability though to use\nmalloc, and maybe even realloc,", "start": 6006.95, "duration": 3.09}, {"text": "to grow and grow our\ndata structure in memory.", "start": 6010.04, "duration": 2.46}, {"text": "And we have the ability\nin code to actually", "start": 6012.5, "duration": 2.1}, {"text": "traverse those values\nin such a way that we", "start": 6014.6, "duration": 2.76}, {"text": "can access memory that's\nall over the board now", "start": 6017.36, "duration": 2.79}, {"text": "and not necessarily\nback to back to back.", "start": 6020.15, "duration": 2.47}, {"text": "But what happens if we want to combine\nthese ideas into fancier solutions", "start": 6022.62, "duration": 4.16}, {"text": "still?", "start": 6026.78, "duration": 0.87}, {"text": "Well, let's take a look at that.", "start": 6027.65, "duration": 2.05}, {"text": "In particular, if I go let's\nsay over here to the following,", "start": 6029.7, "duration": 5.79}, {"text": "let's consider a problem\nwe might now solve.", "start": 6035.49, "duration": 2.51}, {"text": "If I wanted to store everyone's name\nin this room in a data structure,", "start": 6038.0, "duration": 4.71}, {"text": "I could do what?", "start": 6042.71, "duration": 2.05}, {"text": "Well, we could use an array.", "start": 6044.76, "duration": 1.41}, {"text": "So I could actually decide how\nmany people are in the room--", "start": 6046.17, "duration": 2.6}, {"text": "let's call it n--", "start": 6048.77, "duration": 1.02}, {"text": "and actually draw n boxes on the\nboard, and then iteratively ask", "start": 6049.79, "duration": 3.0}, {"text": "everyone for their name,\nand actually write it down.", "start": 6052.79, "duration": 2.55}, {"text": "If I then wanted to take attendance\nthereafter and say, oh, is Alice here,", "start": 6055.34, "duration": 4.32}, {"text": "or is Bob here, or is\nKareem here, or Brian,", "start": 6059.66, "duration": 2.58}, {"text": "I could just look through that array\nand say yes or no, that human is here.", "start": 6062.24, "duration": 3.72}, {"text": "But what's the running\ntime of that algorithm?", "start": 6065.96, "duration": 2.1}, {"text": "How long would it take to look\nup a name in a data structure", "start": 6068.06, "duration": 3.48}, {"text": "where I've just drawn it as an\narray, a big list on the board?", "start": 6071.54, "duration": 2.702}, {"text": "AUDIENCE: A big O of n.", "start": 6074.242, "duration": 0.958}, {"text": "DAVID J. MALAN: What's that?", "start": 6075.2, "duration": 0.516}, {"text": "AUDIENCE: A big O of n.", "start": 6075.716, "duration": 0.734}, {"text": "DAVID J. MALAN: A big O of n, right?", "start": 6076.45, "duration": 0.97}, {"text": "Because if it's just a list of\nnames, it's going to take big 0 of n.", "start": 6077.42, "duration": 2.833}, {"text": "And frankly, that seems a little slow.", "start": 6080.253, "duration": 2.057}, {"text": "How could I do an optimization?", "start": 6082.31, "duration": 2.1}, {"text": "Well, what if we combined\nsome of these ideas?", "start": 6084.41, "duration": 2.22}, {"text": "Arrays are nice because\nthey give me random sort", "start": 6086.63, "duration": 2.07}, {"text": "of instant access to memory locations.", "start": 6088.7, "duration": 2.71}, {"text": "But linked lists are nice because they\nallow me to dynamically add or subtract", "start": 6091.41, "duration": 4.31}, {"text": "elements even if I want from the list.", "start": 6095.72, "duration": 2.562}, {"text": "So you know what?", "start": 6098.282, "duration": 0.708}, {"text": "Instead of writing down everyone's\nnames, like Alice, and Bob,", "start": 6098.99, "duration": 5.22}, {"text": "and Charlie, like this in just one big\narray of some fixed size that might", "start": 6104.21, "duration": 8.13}, {"text": "paint me into a corner-- now I\nonly have room for one more name--", "start": 6112.34, "duration": 2.97}, {"text": "what if I instead do things\na little more cleverly?", "start": 6115.31, "duration": 2.64}, {"text": "So when I'm actually jotting down\neveryone's name in the room, what", "start": 6117.95, "duration": 3.21}, {"text": "if I instead did, OK, is Alice here.", "start": 6121.16, "duration": 3.13}, {"text": "All right.", "start": 6124.29, "duration": 0.5}, {"text": "Alice is here.", "start": 6124.79, "duration": 1.4}, {"text": "And then Brian is here.", "start": 6126.19, "duration": 1.675}, {"text": "I'm going to put Brian here.", "start": 6127.865, "duration": 1.275}, {"text": "And then maybe Charlie is here.", "start": 6129.14, "duration": 2.081}, {"text": "All right.", "start": 6131.221, "duration": 0.499}, {"text": "So Charlie.", "start": 6131.72, "duration": 2.04}, {"text": "And then maybe Arnold is here.", "start": 6133.76, "duration": 2.527}, {"text": "Where should I put Arnold?", "start": 6136.287, "duration": 1.083}, {"text": "So also starts with A. You know what?", "start": 6137.37, "duration": 1.79}, {"text": "Let's just put Arnold here.", "start": 6139.16, "duration": 2.61}, {"text": "Arnold.", "start": 6141.77, "duration": 1.74}, {"text": "And Abby is here.", "start": 6143.51, "duration": 1.032}, {"text": "So you know what?", "start": 6144.542, "duration": 0.708}, {"text": "Let's just put Abby up here as well.", "start": 6145.25, "duration": 2.71}, {"text": "Bob came as well.", "start": 6147.96, "duration": 1.31}, {"text": "So Bob-- so what's the pattern\nI'm obviously following", "start": 6149.27, "duration": 2.25}, {"text": "as I'm hearing names called out?", "start": 6151.52, "duration": 3.587}, {"text": "AUDIENCE: Alphabetically sorted.", "start": 6155.107, "duration": 1.333}, {"text": "DAVID J. MALAN: Alphabetically sorted--", "start": 6156.44, "duration": 1.42}, {"text": "kind of.", "start": 6157.86, "duration": 0.63}, {"text": "Like, Abby kind of ended\nup in a weird place here.", "start": 6158.49, "duration": 2.79}, {"text": "But that's fine because I\ndidn't hear her name first.", "start": 6161.28, "duration": 3.12}, {"text": "But I did kind of bucketize people\ninto different rows of the board.", "start": 6164.4, "duration": 4.68}, {"text": "In other words, all\nof the A names I seem", "start": 6169.08, "duration": 1.74}, {"text": "to just write down for\nconvenience at the top,", "start": 6170.82, "duration": 2.23}, {"text": "and then all of the B names\ntogether, and C names.", "start": 6173.05, "duration": 1.67}, {"text": "And probably if I kept going,\nI could do this all the way", "start": 6174.72, "duration": 1.77}, {"text": "through Z in the English alphabet.", "start": 6176.49, "duration": 1.93}, {"text": "So what's nice about this is that,\nyeah, I'm making lists of names,", "start": 6178.42, "duration": 3.35}, {"text": "but how long is each of those lists?", "start": 6181.77, "duration": 2.22}, {"text": "If there's n people in\nthe room, each of my lists", "start": 6183.99, "duration": 2.79}, {"text": "is not going to be n\nlong, which is slow.", "start": 6186.78, "duration": 2.94}, {"text": "It's going to be what? n\ndivided by 26, give or take.", "start": 6189.72, "duration": 4.785}, {"text": "If we assume that there's\nan equal number of people", "start": 6194.505, "duration": 2.125}, {"text": "with Z names and A names, it's going\nto be roughly n divided by 26 so", "start": 6196.63, "duration": 4.08}, {"text": "that I have these chains\nof human names, but they're", "start": 6200.71, "duration": 2.79}, {"text": "much shorter than they would have been\nif I just grouped everyone together.", "start": 6203.5, "duration": 3.39}, {"text": "And this is a fundamental technique\nin programming called hashing.", "start": 6206.89, "duration": 4.59}, {"text": "It turns out there are things in\nthis world called hash functions.", "start": 6211.48, "duration": 3.16}, {"text": "These are just mathematical, or\nverbal, or code-implemented functions", "start": 6214.64, "duration": 4.46}, {"text": "that take as input something and produce\nas output a number typically-- a number", "start": 6219.1, "duration": 4.89}, {"text": "from 0 to, say, 25, or from 1 to 26.", "start": 6223.99, "duration": 2.94}, {"text": "But they can also output strings\nin other contexts as well.", "start": 6226.93, "duration": 2.82}, {"text": "So my hash function here in my\nmind is, if you hand me a name,", "start": 6229.75, "duration": 3.795}, {"text": "I'm going to look at the\nfirst letter in your name.", "start": 6233.545, "duration": 2.125}, {"text": "And if it's A, I'm\nputting you in location 0.", "start": 6235.67, "duration": 2.24}, {"text": "If it's B, I'm going to\nput you in location 1.", "start": 6237.91, "duration": 2.27}, {"text": "If it's a Z, I'm going to put\nyou in location 25 at the end.", "start": 6240.18, "duration": 3.36}, {"text": "So these are all buckets\nI've got, so to speak,", "start": 6243.54, "duration": 2.08}, {"text": "in computer science--\nlike 26 buckets or room", "start": 6245.62, "duration": 2.46}, {"text": "on the board that represent\nthe starts of people's names.", "start": 6248.08, "duration": 3.27}, {"text": "So what is that?", "start": 6251.35, "duration": 1.32}, {"text": "Well, it would seem that if I don't\nknow in advance how many A names I have,", "start": 6252.67, "duration": 4.02}, {"text": "that's kind of like drawing this\nas a linked list, if you will,", "start": 6256.69, "duration": 3.19}, {"text": "that might just get longer and longer.", "start": 6259.88, "duration": 2.48}, {"text": "But I do know that I only have a\nfinite number of first letters.", "start": 6262.36, "duration": 4.89}, {"text": "So that-- at the risk of\ndrawing a little messily--", "start": 6267.25, "duration": 3.54}, {"text": "is kind of like drawing\nwhat data structure?", "start": 6270.79, "duration": 1.849}, {"text": "AUDIENCE: An array.", "start": 6272.639, "duration": 0.791}, {"text": "DAVID J. MALAN: Yeah.", "start": 6273.43, "duration": 0.875}, {"text": "It's kind of like drawing an\narray that just has 26 spots.", "start": 6274.305, "duration": 5.305}, {"text": "And what's nice about an array\nis that I have random access.", "start": 6279.61, "duration": 3.36}, {"text": "I can jump right to any letter of the\nalphabet in constant time, one step.", "start": 6282.97, "duration": 4.3}, {"text": "And once I get there, I'm still\ngoing to see a list of names.", "start": 6287.27, "duration": 3.26}, {"text": "Thankfully, thanks to linked lists,\nthat list can be short or long.", "start": 6290.53, "duration": 3.65}, {"text": "But on average, let's\nsay it's going to be", "start": 6294.18, "duration": 1.75}, {"text": "126th the length that it would have been\nif I just used one array or one linked", "start": 6295.93, "duration": 6.14}, {"text": "list.", "start": 6302.07, "duration": 0.88}, {"text": "So this technique of using a\nhash function-- which, again,", "start": 6302.95, "duration": 3.99}, {"text": "I've defined as you give me\na name; I take that as input;", "start": 6306.94, "duration": 2.82}, {"text": "I look at the first letter; and I\nreturn as output a number from 0 to 25--", "start": 6309.76, "duration": 4.08}, {"text": "a hash function lets\nyou create a hash table.", "start": 6313.84, "duration": 3.354}, {"text": "And there's different ways\nto implement hash tables,", "start": 6317.194, "duration": 2.166}, {"text": "but perhaps one of the most\ncommon is indeed like this.", "start": 6319.36, "duration": 3.18}, {"text": "You decide in advance\non the size of an array.", "start": 6322.54, "duration": 3.63}, {"text": "But that array does not contain\nthe strings or the humans' names.", "start": 6326.17, "duration": 3.9}, {"text": "That array actually\ncontains linked lists.", "start": 6330.07, "duration": 4.2}, {"text": "And it's the linked lists\nthat contain the names.", "start": 6334.27, "duration": 2.94}, {"text": "So we borrow ideas from, like, week two.", "start": 6337.21, "duration": 1.8}, {"text": "We merge them with an idea today\nfrom week four of adding arrays", "start": 6339.01, "duration": 3.57}, {"text": "to linked list respectively.", "start": 6342.58, "duration": 1.6}, {"text": "And we kind of get the\nbest of both worlds.", "start": 6344.18, "duration": 2.18}, {"text": "Because I can immediately jump to any\nletter of the alphabet super fast.", "start": 6346.36, "duration": 3.4}, {"text": "And once I'm there,\nyeah, there's a list,", "start": 6349.76, "duration": 1.8}, {"text": "but it's not nearly as long as it would\nhave been if I didn't use this trick.", "start": 6351.56, "duration": 3.98}, {"text": "So what's the running\ntime of all of this?", "start": 6355.54, "duration": 2.11}, {"text": "Well, it turns out that a\nhash table in the worst case", "start": 6357.65, "duration": 3.8}, {"text": "might still take you how many steps\nto find someone's name once it's", "start": 6361.45, "duration": 2.85}, {"text": "been added to the list?", "start": 6364.3, "duration": 1.7}, {"text": "In the very worst case, how many\nsteps, if there's n people in the room?", "start": 6366.0, "duration": 3.644}, {"text": "AUDIENCE: n.", "start": 6369.644, "duration": 0.996}, {"text": "DAVID J. MALAN: Maybe n.", "start": 6370.64, "duration": 1.0}, {"text": "Why?", "start": 6371.64, "duration": 1.21}, {"text": "It's kind of a perverse situation.", "start": 6372.85, "duration": 1.47}, {"text": "But can you contrive\na scenario in which,", "start": 6374.32, "duration": 2.681}, {"text": "even though we're doing\nthis fanciness, it still", "start": 6377.001, "duration": 1.999}, {"text": "takes me n steps to confirm\nor deny that someone's here?", "start": 6379.0, "duration": 2.51}, {"text": "Yeah?", "start": 6381.51, "duration": 0.29}, {"text": "AUDIENCE: Everyone's name\nstarts with the same letter.", "start": 6381.8, "duration": 1.51}, {"text": "DAVID J. MALAN: Everyone's name\nstarts with the same letter", "start": 6383.31, "duration": 1.84}, {"text": "for some weird reason.", "start": 6385.15, "duration": 1.137}, {"text": "Now, it's a little silly\nin the human world.", "start": 6386.287, "duration": 1.833}, {"text": "But it could happen\nif you're just talking", "start": 6388.12, "duration": 1.75}, {"text": "data or whatever in the computer world.", "start": 6389.87, "duration": 2.21}, {"text": "This can devolve into, sure, an array\nwith just one really linked list.", "start": 6392.08, "duration": 5.16}, {"text": "But in practice, that's not\nlikely going to happen, right?", "start": 6397.24, "duration": 2.745}, {"text": "If we actually spent the time here\nand asked everyone for their name,", "start": 6399.985, "duration": 2.875}, {"text": "we'd probably get a reasonably\nuniform distribution of letters,", "start": 6402.86, "duration": 3.38}, {"text": "at least as is statistically\nlikely with just human names.", "start": 6406.24, "duration": 3.48}, {"text": "So that would kind of spread things out.", "start": 6409.72, "duration": 1.83}, {"text": "And so there's this fundamental\ndistinction between sort of real-world", "start": 6411.55, "duration": 3.6}, {"text": "running time, or wall clock time--\nhow many seconds are actually spinning", "start": 6415.15, "duration": 3.24}, {"text": "on the clock--", "start": 6418.39, "duration": 0.69}, {"text": "versus asymptotic running time.", "start": 6419.08, "duration": 1.77}, {"text": "We've talked for a couple of weeks now\nabout running time as being big O of n.", "start": 6420.85, "duration": 3.3}, {"text": "And that might be still the case, that\na hash table-- yes, in the worst case,", "start": 6424.15, "duration": 4.44}, {"text": "it's still a big O of n data structure.", "start": 6428.59, "duration": 1.891}, {"text": "Because in the worst case,\nit's going to take n steps.", "start": 6430.481, "duration": 2.249}, {"text": "But in the real world, big O of n\nis really big O of n divided by 26,", "start": 6432.73, "duration": 5.82}, {"text": "even though we always ignore\nthose lower-order terms.", "start": 6438.55, "duration": 2.77}, {"text": "But when it's you, the human, running\nthe code and analyzing the data,", "start": 6441.32, "duration": 3.62}, {"text": "running 26 times faster is\nactually real time saved,", "start": 6444.94, "duration": 5.34}, {"text": "even though a mathematician might say,\nah, that's the same fundamentally.", "start": 6450.28, "duration": 3.33}, {"text": "And indeed, one of the problems\nahead for the next problem set", "start": 6453.61, "duration": 3.0}, {"text": "is going to be to suss out\nexactly what the implications are", "start": 6456.61, "duration": 3.06}, {"text": "in your own code for actual\nwall clock running time.", "start": 6459.67, "duration": 3.6}, {"text": "And making smarter design\ndecisions, like something like this,", "start": 6463.27, "duration": 3.3}, {"text": "can actually really speed up your\ncode to be 26 times as fast, even", "start": 6466.57, "duration": 3.63}, {"text": "though, yes, a\ntheoretician would say, ah,", "start": 6470.2, "duration": 1.83}, {"text": "but that's still asymptotically\nor mathematically", "start": 6472.03, "duration": 3.6}, {"text": "equivalent to just something linear.", "start": 6475.63, "duration": 2.37}, {"text": "So it's this fine tuning that will\nmake your code even better and better.", "start": 6478.0, "duration": 3.09}, {"text": "Now, frankly, hashing\non first names probably", "start": 6481.09, "duration": 2.37}, {"text": "isn't the smartest thing alone, right?", "start": 6483.46, "duration": 1.86}, {"text": "Like, does anyone's-- and\nthis is going to be hard.", "start": 6485.32, "duration": 3.831}, {"text": "Does anyone's name start with X here?", "start": 6489.151, "duration": 2.109}, {"text": "AUDIENCE: [INAUDIBLE].", "start": 6491.26, "duration": 1.365}, {"text": "DAVID J. MALAN: [INAUDIBLE] is not here.", "start": 6492.625, "duration": 0.995}, {"text": "But thank you for that\nperfect counter-example.", "start": 6493.62, "duration": 1.92}, {"text": "But she's not here.", "start": 6495.54, "duration": 0.81}, {"text": "So look, there's no Zs.", "start": 6496.35, "duration": 1.35}, {"text": "So now we're down to 25 possible values.", "start": 6497.7, "duration": 2.299}, {"text": "And I could probably pick\nsome less common letters too.", "start": 6499.999, "duration": 2.291}, {"text": "The point is there's probably\na few more As than there are Zs", "start": 6502.29, "duration": 2.97}, {"text": "or a few more B's than there are\nQ's just by nature of human names.", "start": 6505.26, "duration": 3.6}, {"text": "So maybe just using the first\nletter isn't good enough.", "start": 6508.86, "duration": 3.4}, {"text": "And frankly, with 26 names-- suppose\nwe did this for all of Harvard", "start": 6512.26, "duration": 3.44}, {"text": "and had thousands of names.", "start": 6515.7, "duration": 1.44}, {"text": "Each of my chains might still have\nhundreds or thousands of names.", "start": 6517.14, "duration": 3.15}, {"text": "So another design question is going to\nbe, well, how many buckets should you", "start": 6520.29, "duration": 3.39}, {"text": "have, how big should the array be.", "start": 6523.68, "duration": 1.605}, {"text": "Maybe you shouldn't look\nat the first letter.", "start": 6525.285, "duration": 1.875}, {"text": "What if you look at the first and the\nsecond letter together-- so AA, and AB,", "start": 6527.16, "duration": 3.66}, {"text": "and AC, and then dot dot dot,\nBA, BB, BC, so you could come up", "start": 6530.82, "duration": 4.86}, {"text": "with more and more buckets?", "start": 6535.68, "duration": 1.41}, {"text": "But what else?", "start": 6537.09, "duration": 0.66}, {"text": "How else might we kind of\nuniformly distribute people?", "start": 6537.75, "duration": 3.99}, {"text": "What do all of you have that we could\nuse as input to a hash function?", "start": 6541.74, "duration": 4.626}, {"text": "AUDIENCE: A last name.", "start": 6546.366, "duration": 0.964}, {"text": "DAVID J. MALAN: OK.", "start": 6547.33, "duration": 0.18}, {"text": "Well, you could do last\nname, which might give us", "start": 6547.51, "duration": 2.041}, {"text": "a different or similar distribution.", "start": 6549.551, "duration": 1.53}, {"text": "Yeah?", "start": 6551.081, "duration": 0.499}, {"text": "AUDIENCE: ID number.", "start": 6551.58, "duration": 0.66}, {"text": "DAVID J. MALAN: Whats that?", "start": 6552.24, "duration": 0.58}, {"text": "AUDIENCE: ID number.", "start": 6552.82, "duration": 0.63}, {"text": "DAVID J. MALAN: Yeah.", "start": 6553.45, "duration": 0.42}, {"text": "We could use your ID number and actually\nlook at the first digit of your ID.", "start": 6553.87, "duration": 3.166}, {"text": "And odds are, it's 0 through 9.", "start": 6557.036, "duration": 2.434}, {"text": "So we could probably at least\nget 10 buckets that way.", "start": 6559.47, "duration": 2.41}, {"text": "And that's probably\nuniformly distributed.", "start": 6561.88, "duration": 2.01}, {"text": "I'm not sure.", "start": 6563.89, "duration": 0.81}, {"text": "We could use birth dates in some way.", "start": 6564.7, "duration": 2.73}, {"text": "Like, we could put all of\nthe freshmen in one bucket,", "start": 6567.43, "duration": 2.22}, {"text": "all the seniors in another\nbucket, and everyone else,", "start": 6569.65, "duration": 2.04}, {"text": "and so forth, in their own buckets,\nwhich would also give us some input.", "start": 6571.69, "duration": 2.999}, {"text": "So again, a hash function is entirely\nup to you to program and design.", "start": 6574.689, "duration": 3.671}, {"text": "The goal though is to smooth things out.", "start": 6578.36, "duration": 2.78}, {"text": "You want to have roughly the same\nnumber of things in each linked list", "start": 6581.14, "duration": 3.72}, {"text": "just so that you have\nabout the same performance", "start": 6584.86, "duration": 3.39}, {"text": "across all of these various inputs.", "start": 6588.25, "duration": 2.534}, {"text": "So let's take a look at a\ncouple of other data structures,", "start": 6590.784, "duration": 2.416}, {"text": "again, in this abstract way.", "start": 6593.2, "duration": 1.59}, {"text": "Now that we know that, even though\nit's not obvious at first attempt,", "start": 6594.79, "duration": 3.3}, {"text": "we know how to construct arrays.", "start": 6598.09, "duration": 1.71}, {"text": "We kind of know now how\nto construct linked lists.", "start": 6599.8, "duration": 2.52}, {"text": "It stands to reason we could\nimplement them together in code.", "start": 6602.32, "duration": 3.3}, {"text": "What else could we do now\nwith these building blocks?", "start": 6605.62, "duration": 3.03}, {"text": "So for instance, this structure here\nis a very common one, known as a tree.", "start": 6608.65, "duration": 5.115}, {"text": "A tree like a family tree, where\nthere's one patriarch or matriarch", "start": 6613.765, "duration": 2.876}, {"text": "at the top, and then their children,\nand then their grandchildren,", "start": 6616.641, "duration": 2.749}, {"text": "and great grandchildren, and so forth.", "start": 6619.39, "duration": 1.92}, {"text": "And what's nice about a tree structure\nis that, if you're storing data,", "start": 6621.31, "duration": 3.78}, {"text": "you can actually store the data\nin clever ways to the left child,", "start": 6625.09, "duration": 3.84}, {"text": "to the right child, and\nso forth, as follows.", "start": 6628.93, "duration": 3.48}, {"text": "Notice here, there's something curious\nabout all the numbers in this data", "start": 6632.41, "duration": 4.98}, {"text": "structure.", "start": 6637.39, "duration": 1.41}, {"text": "What is noteworthy about them?", "start": 6638.8, "duration": 2.722}, {"text": "What is noteworthy?", "start": 6644.639, "duration": 0.791}, {"text": "Yeah?", "start": 6645.43, "duration": 0.426}, {"text": "AUDIENCE: Multiples of 11.", "start": 6645.856, "duration": 0.854}, {"text": "DAVID J. MALAN: What's that?", "start": 6646.71, "duration": 0.4}, {"text": "AUDIENCE: They're multiples of 11.", "start": 6647.11, "duration": 1.2}, {"text": "DAVID J. MALAN: They\nare multiples of 11.", "start": 6648.31, "duration": 1.708}, {"text": "That was just to make them look\npretty though by the author here.", "start": 6650.018, "duration": 3.263}, {"text": "Yeah?", "start": 6653.281, "duration": 0.499}, {"text": "AUDIENCE: [INAUDIBLE].", "start": 6653.78, "duration": 1.635}, {"text": "DAVID J. MALAN: Yeah.", "start": 6655.415, "duration": 0.875}, {"text": "There's a mathematical significance too.", "start": 6656.29, "duration": 1.83}, {"text": "Like, no matter what node or\ncircle you look at, the value in it", "start": 6658.12, "duration": 4.44}, {"text": "is bigger than the left child and\nit's smaller than the right child.", "start": 6662.56, "duration": 5.716}, {"text": "So it's kind of in-between.", "start": 6668.276, "duration": 1.124}, {"text": "Any circle you look at, the\nnumber to the left is smaller,", "start": 6669.4, "duration": 2.31}, {"text": "the number to the right is bigger.", "start": 6671.71, "duration": 1.416}, {"text": "And I think that applies\nuniversally all over the place.", "start": 6673.126, "duration": 2.604}, {"text": "Yes?", "start": 6675.73, "duration": 0.81}, {"text": "So what does that mean?", "start": 6676.54, "duration": 1.02}, {"text": "We'll recall from, like, week 0 when we\nhad a whole bunch of phone book pages", "start": 6677.56, "duration": 5.84}, {"text": "that we were searching--", "start": 6683.4, "duration": 1.0}, {"text": "1, 2, 3, 4, 5, 6.", "start": 6684.4, "duration": 1.6}, {"text": "Let's give ourselves a 7th one.", "start": 6686.0, "duration": 1.56}, {"text": "Recall that when we did divide\nand conquer, or binary search,", "start": 6687.56, "duration": 2.99}, {"text": "we did it on an array.", "start": 6690.55, "duration": 1.169}, {"text": "And what was nice about binary\nsearch was we started in the middle,", "start": 6691.719, "duration": 2.791}, {"text": "and then we maybe went left,\nor we maybe went right,", "start": 6694.51, "duration": 1.92}, {"text": "and we kind of divided\nand divided and divided", "start": 6696.43, "duration": 1.916}, {"text": "and conquered the problem much more\nefficiently in logarithmic time", "start": 6698.346, "duration": 3.574}, {"text": "than it would have been\nif we did it linearly.", "start": 6701.92, "duration": 2.58}, {"text": "But we know now weeks later that\narrays are kind of limiting, right?", "start": 6704.5, "duration": 4.11}, {"text": "If I keep storing all of\nmy values in an array,", "start": 6708.61, "duration": 2.71}, {"text": "what can I not do with the array?", "start": 6711.32, "duration": 2.192}, {"text": "Make it bigger, right?", "start": 6716.47, "duration": 1.14}, {"text": "I can't add an element to it\nwithout copying every darn element,", "start": 6717.61, "duration": 3.15}, {"text": "as we've discussed thus far today.", "start": 6720.76, "duration": 2.01}, {"text": "But what if I was a\nlittle smarter about it?", "start": 6722.77, "duration": 2.22}, {"text": "What if I stored my values,\nnot just in an array,", "start": 6724.99, "duration": 2.91}, {"text": "but I started storing\nthem in these circles--", "start": 6727.9, "duration": 2.64}, {"text": "let's call them nodes--", "start": 6730.54, "duration": 1.47}, {"text": "and each of those nodes is really just\nan integer plus two additional values?", "start": 6732.01, "duration": 6.39}, {"text": "How would we implement this\ndata structure in memory?", "start": 6738.4, "duration": 2.42}, {"text": "Well, here's an int n-- could\nrepresent the number in question.", "start": 6740.82, "duration": 3.43}, {"text": "And we could put that\nin a data structure", "start": 6744.25, "duration": 2.01}, {"text": "called a node that just has the\nsame syntax as earlier today,", "start": 6746.26, "duration": 3.6}, {"text": "but I've left room for two more fields.", "start": 6749.86, "duration": 1.9}, {"text": "What is it that I want\nto represent in code if I", "start": 6751.76, "duration": 2.78}, {"text": "want to start storing my numbers,\nnot in this old-school week 0 array,", "start": 6754.54, "duration": 3.87}, {"text": "but in a tree?", "start": 6758.41, "duration": 3.732}, {"text": "AUDIENCE: Two pointers.", "start": 6762.142, "duration": 0.968}, {"text": "DAVID J. MALAN: Two--", "start": 6763.11, "duration": 0.49}, {"text": "AUDIENCE: Pointers.", "start": 6763.6, "duration": 0.98}, {"text": "DAVID J. MALAN: Two pointers.", "start": 6764.58, "duration": 0.395}, {"text": "Right?", "start": 6764.975, "duration": 0.655}, {"text": "A tree, as drawn here\nliterally with arrows,", "start": 6765.63, "duration": 3.44}, {"text": "is just like saying every\none of these nodes or circles", "start": 6769.07, "duration": 2.8}, {"text": "has a left child and a right child.", "start": 6771.87, "duration": 1.89}, {"text": "How do you implement children?", "start": 6773.76, "duration": 1.8}, {"text": "Well, you can literally just use\npointer notation as well here.", "start": 6775.56, "duration": 3.04}, {"text": "A left child is just a pointer\nto another struct on the left.", "start": 6778.6, "duration": 3.32}, {"text": "And a right child is just another\npointer to the child on the right.", "start": 6781.92, "duration": 3.18}, {"text": "And what's nice about this\nultimately is that we can now", "start": 6785.1, "duration": 3.63}, {"text": "traverse this tree just as efficiently\nas we can traverse this array.", "start": 6788.73, "duration": 5.85}, {"text": "Because notice if I want to\nsearch for the number 66,", "start": 6794.58, "duration": 3.82}, {"text": "how many steps does it take\nme if I start at the top?", "start": 6798.4, "duration": 5.255}, {"text": "Just like Comey represented\nthe start of our linked list,", "start": 6803.655, "duration": 2.375}, {"text": "so in the world of a tree does the\nroot have special significance.", "start": 6806.03, "duration": 3.42}, {"text": "And that's where we always begin.", "start": 6809.45, "duration": 1.77}, {"text": "So how many steps does it take\nme to find 66 given the top?", "start": 6811.22, "duration": 2.684}, {"text": "AUDIENCE: Three.", "start": 6813.904, "duration": 0.666}, {"text": "AUDIENCE: Two.", "start": 6814.57, "duration": 0.88}, {"text": "DAVID J. MALAN: It looks like--", "start": 6815.45, "duration": 1.291}, {"text": "yeah, two or three, right?", "start": 6816.741, "duration": 1.188}, {"text": "I start at the top.", "start": 6817.929, "duration": 0.791}, {"text": "I look at it and say, hmm,\n55, which way do I go.", "start": 6818.72, "duration": 2.52}, {"text": "I go to the right.", "start": 6821.24, "duration": 0.96}, {"text": "Then I see 77.", "start": 6822.2, "duration": 0.91}, {"text": "OK.", "start": 6823.11, "duration": 0.5}, {"text": "Which way do I go?", "start": 6823.61, "duration": 0.99}, {"text": "I go to the left.", "start": 6824.6, "duration": 0.96}, {"text": "So it's the same logic as week 0 in\ndividing and conquering the phone book", "start": 6825.56, "duration": 3.66}, {"text": "or an array a couple of weeks later.", "start": 6829.22, "duration": 1.95}, {"text": "But we get to the number we\ncare about pretty quickly.", "start": 6831.17, "duration": 3.27}, {"text": "And it's not linear.", "start": 6834.44, "duration": 1.194}, {"text": "And in fact, if we actually\ndid out the math, what's", "start": 6835.634, "duration": 2.166}, {"text": "really cool about a binary search\ntree is that if you have n elements,", "start": 6837.8, "duration": 3.11}, {"text": "n circles, the height of that tree is\nby definition mathematically log n.", "start": 6840.91, "duration": 6.01}, {"text": "So the height of the\ntree just so happens", "start": 6846.92, "duration": 2.13}, {"text": "to correspond to exactly how\nmany times you can take n", "start": 6849.05, "duration": 3.87}, {"text": "and divide it, divide it,\ndivide it, divide it in two.", "start": 6852.92, "duration": 2.52}, {"text": "And you can actually see this if you\nthink about it the reverse direction.", "start": 6855.44, "duration": 3.083}, {"text": "On the bottom row, there\nare how many elements?", "start": 6858.523, "duration": 2.967}, {"text": "All right?", "start": 6861.49, "duration": 0.5}, {"text": "And on the middle row, there is?", "start": 6861.99, "duration": 1.333}, {"text": "AUDIENCE: Two.", "start": 6863.323, "duration": 0.584}, {"text": "DAVID J. MALAN: Two.", "start": 6863.907, "duration": 0.832}, {"text": "And on the top row, there's one.", "start": 6864.739, "duration": 1.471}, {"text": "So you can actually see it\nin the reverse direction.", "start": 6866.21, "duration": 1.65}, {"text": "This is like divide and conquer,\nbut in a different conceptual way.", "start": 6867.86, "duration": 3.06}, {"text": "Every row in the tree has half as\nmany elements as the one below it.", "start": 6873.93, "duration": 4.23}, {"text": "And so the implication of that is just\nlike from week 0 in the phone book", "start": 6878.16, "duration": 3.29}, {"text": "when we're dividing, and dividing, and\ndividing in half, and half, and half.", "start": 6881.45, "duration": 3.91}, {"text": "So this is only to say, now that\nwe have structures and pointers,", "start": 6885.36, "duration": 3.05}, {"text": "we can build something like this.", "start": 6888.41, "duration": 1.9}, {"text": "But let's try one\nother example here too.", "start": 6890.31, "duration": 2.84}, {"text": "This is a crazy looking example.", "start": 6893.15, "duration": 2.43}, {"text": "But it's kind of amazing.", "start": 6895.58, "duration": 1.77}, {"text": "Suppose that, if we wanted to\nstore a dictionary of words--", "start": 6897.35, "duration": 4.2}, {"text": "so not humans' names this\ntime, but English words.", "start": 6901.55, "duration": 2.58}, {"text": "So Merriam Webster or Oxford\nEnglish Dictionary has what?", "start": 6904.13, "duration": 2.58}, {"text": "Thousands, hundreds\nof thousands of words", "start": 6906.71, "duration": 1.86}, {"text": "these days in English for instance?", "start": 6908.57, "duration": 2.127}, {"text": "How do you actually store those?", "start": 6910.697, "duration": 1.333}, {"text": "Well, if you just look up words in\na dictionary back in yesteryear,", "start": 6912.03, "duration": 3.23}, {"text": "that is linear.", "start": 6915.26, "duration": 0.78}, {"text": "You have to start at the\nbeginning and look through it", "start": 6916.04, "duration": 2.25}, {"text": "page by page, looking for words.", "start": 6918.29, "duration": 1.386}, {"text": "Or you could be a little smarter.", "start": 6919.676, "duration": 1.374}, {"text": "Because the words in any dictionary\nare hopefully alphabetized,", "start": 6921.05, "duration": 2.88}, {"text": "you can do the Mike Smith-style divide\nand conquer by going to the middle,", "start": 6923.93, "duration": 3.35}, {"text": "then the middle of the\nmiddle, and so forth--", "start": 6927.28, "duration": 2.08}, {"text": "log of n.", "start": 6929.36, "duration": 0.93}, {"text": "But what if I told you, you could\nlook up words in constant time--", "start": 6930.29, "duration": 4.41}, {"text": "some fixed number of steps?", "start": 6934.7, "duration": 1.819}, {"text": "None of this divide\nand conquer complexity.", "start": 6936.519, "duration": 1.791}, {"text": "No log n.", "start": 6938.31, "duration": 0.86}, {"text": "Just constant time-- you want\na word, go get it instantly.", "start": 6939.17, "duration": 4.44}, {"text": "That's where this last structure\ncomes in, which is called a trie--", "start": 6943.61, "duration": 3.33}, {"text": "T-R-I-E-- short for retrieval, even\nthough it's pronounced the opposite.", "start": 6946.94, "duration": 4.17}, {"text": "So a trie is a tree each\nof whose nodes is an array.", "start": 6951.11, "duration": 6.34}, {"text": "So it's like this weird Frankenstein's\nmonster kind of data structure.", "start": 6957.45, "duration": 3.45}, {"text": "We're just really combining lots\nof different ideas, as follows.", "start": 6960.9, "duration": 3.35}, {"text": "And the way a trie works, as is implied\nby this partial diagram on the board,", "start": 6964.25, "duration": 6.0}, {"text": "is that if you want to store\nthe name Brian, for instance,", "start": 6970.25, "duration": 3.75}, {"text": "in your dictionary--\nit's the first word--", "start": 6974.0, "duration": 1.98}, {"text": "what you do is you start by\ncreating a tree with just one node.", "start": 6975.98, "duration": 3.96}, {"text": "But that node is effectively an array.", "start": 6979.94, "duration": 2.49}, {"text": "That array is of size, let's\nsay for simplicity, 26.", "start": 6982.43, "duration": 3.69}, {"text": "So A through Z. This location here\ntherefore represents B for Brian.", "start": 6986.12, "duration": 6.24}, {"text": "So if I want to insert Brian into this\ntree, I create one node at the top.", "start": 6992.36, "duration": 4.65}, {"text": "And then for the second\nletter in his name, R,", "start": 6997.01, "duration": 2.82}, {"text": "I create another node,\nalso an array, A through Z.", "start": 6999.83, "duration": 4.2}, {"text": "And so here, I put a\npointer to this node here.", "start": 7004.03, "duration": 4.05}, {"text": "B-R-I. So I should have\ndrawn some more boxes.", "start": 7008.08, "duration": 3.48}, {"text": "A, B, C, D, E, F, G, H, I. So here, I'm\ngoing to draw another pointer to B--", "start": 7011.56, "duration": 10.141}, {"text": "wait.", "start": 7021.701, "duration": 0.499}, {"text": "Bian.", "start": 7022.2, "duration": 0.5}, {"text": "[LAUGHTER]", "start": 7022.7, "duration": 1.511}, {"text": "OK.", "start": 7024.211, "duration": 0.499}, {"text": "That's wrong.", "start": 7024.71, "duration": 2.31}, {"text": "Billy shall be our name.", "start": 7027.02, "duration": 2.52}, {"text": "Billy is at B. Wait.", "start": 7029.54, "duration": 3.33}, {"text": "No.", "start": 7032.87, "duration": 1.69}, {"text": "Dammit.", "start": 7034.56, "duration": 0.5}, {"text": "B, B. B-I-A-- yes, this works.", "start": 7035.06, "duration": 3.55}, {"text": "This works.", "start": 7038.61, "duration": 0.5}, {"text": "OK.", "start": 7039.11, "duration": 0.33}, {"text": "Sorry.", "start": 7039.44, "duration": 0.6}, {"text": "So here we go.", "start": 7040.04, "duration": 0.73}, {"text": "We're inserting Billy into\nthis fancy data structure.", "start": 7040.77, "duration": 2.75}, {"text": "So the first node\nrepresents the first letter.", "start": 7043.52, "duration": 1.965}, {"text": "The second node represents\nthe second letter.", "start": 7045.485, "duration": 1.875}, {"text": "The third node represents\nthe third letter.", "start": 7047.36, "duration": 1.99}, {"text": "And so forth.", "start": 7049.35, "duration": 0.99}, {"text": "But what's cool about\nthis is the re-usability.", "start": 7050.34, "duration": 2.36}, {"text": "So notice if this is the second letter\nand I counted this out correctly,", "start": 7052.7, "duration": 3.99}, {"text": "I, this is going to lead\nto a third node deeper", "start": 7056.69, "duration": 2.82}, {"text": "in the tree where it's L that we\ncare about next, and then another one", "start": 7059.51, "duration": 5.01}, {"text": "down here which represents another L.", "start": 7064.52, "duration": 3.042}, {"text": "And I'll start drawing the letters.", "start": 7067.562, "duration": 1.458}, {"text": "L. This is B. This is I.\nL. And we'll call this L.", "start": 7069.02, "duration": 4.84}, {"text": "And then, finally, another one\nover here, which is a Y. And this", "start": 7073.86, "duration": 5.49}, {"text": "gets pointing down here.", "start": 7079.35, "duration": 1.43}, {"text": "This gets pointing here.", "start": 7080.78, "duration": 1.53}, {"text": "And so forth.", "start": 7082.31, "duration": 1.18}, {"text": "So in short, we have\none node essentially", "start": 7083.49, "duration": 3.17}, {"text": "for every letter in the word that we're\ninserting into the data structure.", "start": 7086.66, "duration": 4.63}, {"text": "Now, this looks stupidly\ninefficient at the moment.", "start": 7091.29, "duration": 2.96}, {"text": "Because to store B, I, L, L, Y,\nhow much memory did I just use?", "start": 7094.25, "duration": 6.33}, {"text": "26 plus 26 plus 26 plus 26 plus 26.", "start": 7100.58, "duration": 5.79}, {"text": "Just to store five\ncharacters, I use 26 times 5.", "start": 7106.37, "duration": 4.29}, {"text": "But this is kind of thematic\nin computer science--", "start": 7110.66, "duration": 2.4}, {"text": "spend a little more space, and I bet\nI can decrease the amount of time", "start": 7113.06, "duration": 3.39}, {"text": "it takes to find anyone.", "start": 7116.45, "duration": 1.53}, {"text": "Because now no matter how many other\nstudents are in this data structure--", "start": 7117.98, "duration": 4.41}, {"text": "and for instance, let's do another one.", "start": 7122.39, "duration": 1.98}, {"text": "If we had another one, like Bob--", "start": 7124.37, "duration": 4.02}, {"text": "so B is the same first letter.", "start": 7128.39, "duration": 2.61}, {"text": "That leads us to this second node.", "start": 7131.0, "duration": 1.74}, {"text": "O is somewhere else in\nthis array, say, over here.", "start": 7132.74, "duration": 4.62}, {"text": "So this represents O. And\nthen Bob has another one.", "start": 7137.36, "duration": 3.12}, {"text": "So there's going to\nbe another array here.", "start": 7140.48, "duration": 1.8}, {"text": "And this is why the picture\nabove draws this so succinctly.", "start": 7142.28, "duration": 4.59}, {"text": "This is how we might store Bob.", "start": 7146.87, "duration": 1.62}, {"text": "So B, I, L, L, Y. Or you can\nfollow a different route, B, O, B.", "start": 7148.49, "duration": 8.49}, {"text": "So we can start to reuse\nsome of these arrays.", "start": 7156.98, "duration": 2.036}, {"text": "So there's where you start to\nget some of the efficiency.", "start": 7159.016, "duration": 2.374}, {"text": "Any time names share a few letters,\nthen you start reusing those same nodes.", "start": 7161.39, "duration": 3.63}, {"text": "So it's not super, super wasteful.", "start": 7165.02, "duration": 2.14}, {"text": "But the question now is, if there's\nlike 1,000 students in the class,", "start": 7167.16, "duration": 3.53}, {"text": "or 1,000 students in the room,\nwe're going have a lot of nodes", "start": 7170.69, "duration": 2.67}, {"text": "there on the board.", "start": 7173.36, "duration": 1.62}, {"text": "But how many steps does\nit take to find Billy,", "start": 7174.98, "duration": 3.45}, {"text": "or Bob, or any name with this data\nstructure, and to conclude yes or no", "start": 7178.43, "duration": 6.5}, {"text": "that student is in the class?", "start": 7184.93, "duration": 3.51}, {"text": "So, like, five for Billy, three for Bob.", "start": 7188.44, "duration": 3.51}, {"text": "And notice none of that\nmath has any relationship", "start": 7191.95, "duration": 4.08}, {"text": "to how many students are in the room.", "start": 7196.03, "duration": 2.07}, {"text": "If we instead wrote out a long list\nof 1,000 names, in the worst case,", "start": 7198.1, "duration": 4.02}, {"text": "it might take me 1,000\nsteps to find Billy or Bob.", "start": 7202.12, "duration": 2.362}, {"text": "Maybe I could be a little\nsmarter if I sort it.", "start": 7204.482, "duration": 1.958}, {"text": "But in the worst case,\nbig O of n, it's linear.", "start": 7206.44, "duration": 2.28}, {"text": "Or if I used a hash table\nbefore, and maybe there's", "start": 7208.72, "duration": 3.42}, {"text": "1,000 students in the\nroom, but, OK, there's", "start": 7212.14, "duration": 2.01}, {"text": "26 letters in the English\nalphabet at least.", "start": 7214.15, "duration": 2.07}, {"text": "So that's 26 buckets.", "start": 7216.22, "duration": 0.92}, {"text": "So maybe it's 1,000\ndivided by 26, worst case,", "start": 7217.14, "duration": 2.65}, {"text": "if I'm using those linked\nlists inside my array.", "start": 7219.79, "duration": 3.72}, {"text": "But wait a minute.", "start": 7223.51, "duration": 0.96}, {"text": "If I'm using this structure, a\ntrie, where every node in the tree", "start": 7224.47, "duration": 3.93}, {"text": "is just in an array that leads me to the\nnext node, ala breadcrumbs, B, I, L, L,", "start": 7228.4, "duration": 5.887}, {"text": "Y is 5 and always 5.", "start": 7234.287, "duration": 1.883}, {"text": "B, O, B is always 3.", "start": 7236.17, "duration": 2.22}, {"text": "B, R, I, A, N would have been 5 as well.", "start": 7238.39, "duration": 3.52}, {"text": "None of these totals has\nany impact or any influence", "start": 7241.91, "duration": 4.22}, {"text": "from the number of total\nnames in the data structure.", "start": 7246.13, "duration": 3.76}, {"text": "So a trie in some sense\nis this amazing holy grail", "start": 7249.89, "duration": 4.37}, {"text": "in that, by combining these various data\nstructures, now you get constant time,", "start": 7254.26, "duration": 3.39}, {"text": "but you do pay a price.", "start": 7257.65, "duration": 1.76}, {"text": "And just to be clear, what is\nthe price we seem to be paying?", "start": 7259.41, "duration": 3.256}, {"text": "AUDIENCE: Memory.", "start": 7262.666, "duration": 1.106}, {"text": "DAVID J. MALAN: Memory.", "start": 7263.772, "duration": 0.958}, {"text": "And in fact, this is why I'm\nnot really drawing it much more.", "start": 7264.73, "duration": 2.58}, {"text": "Because it just becomes a big\nmess on the screen because it's", "start": 7267.31, "duration": 2.541}, {"text": "hard to draw such wide data structures.", "start": 7269.851, "duration": 1.809}, {"text": "It's taking a huge amount of memory.", "start": 7271.66, "duration": 1.5}, {"text": "But theoretically, it's coming faster.", "start": 7273.16, "duration": 2.59}, {"text": "Yeah?", "start": 7275.75, "duration": 0.5}, {"text": "Question.", "start": 7276.25, "duration": 1.38}, {"text": "AUDIENCE: So would you deal with\na case if someone is in the Bob,", "start": 7277.63, "duration": 2.79}, {"text": "but then the other kid is in the Bobby?", "start": 7280.42, "duration": 1.991}, {"text": "DAVID J. MALAN: Good question.", "start": 7282.411, "duration": 1.249}, {"text": "So it's a bit of a simplification.", "start": 7283.66, "duration": 1.44}, {"text": "If you were storing both Bob and\nBobby, you would actually keep going.", "start": 7285.1, "duration": 3.33}, {"text": "So each of these elements\nis not just one letter.", "start": 7288.43, "duration": 2.79}, {"text": "You also have essentially a node\nthere or some other data structure", "start": 7291.22, "duration": 4.44}, {"text": "that says either stop here or continue.", "start": 7295.66, "duration": 2.147}, {"text": "And you'll see actually\nin the problems that we'll", "start": 7297.807, "duration": 2.083}, {"text": "propose to you how you can\nrepresent that idea if you", "start": 7299.89, "duration": 2.208}, {"text": "choose to go this route.", "start": 7302.098, "duration": 1.242}, {"text": "Indeed, the challenge ahead ultimately\nis something quite like this.", "start": 7303.34, "duration": 3.33}, {"text": "You will implement your\nvery own spell checker.", "start": 7306.67, "duration": 2.141}, {"text": "And we will give you code that\ngets you started with this process.", "start": 7308.811, "duration": 2.749}, {"text": "And of course, a spell checker\nthese days in Google Docs", "start": 7311.56, "duration": 2.333}, {"text": "and Microsoft Word just underlines\nin red misspelled words.", "start": 7313.893, "duration": 2.504}, {"text": "But what's going on?", "start": 7316.397, "duration": 0.833}, {"text": "And how is it that\nWord or Google Docs can", "start": 7317.23, "duration": 2.16}, {"text": "spell check your English or\nwhatever language so quickly?", "start": 7319.39, "duration": 3.33}, {"text": "Well, it has a dictionary in memory,\nprobably with tens of thousands", "start": 7322.72, "duration": 2.85}, {"text": "or hundreds of thousands of words.", "start": 7325.57, "duration": 1.89}, {"text": "And all they're doing constantly\nis, every time you type a word", "start": 7327.46, "duration": 3.39}, {"text": "and hit the Spacebar,\nor Period, or Enter,", "start": 7330.85, "duration": 2.25}, {"text": "it's quickly looking up that new\nword or those words in its dictionary", "start": 7333.1, "duration": 3.12}, {"text": "and saying, yes or no, should I squiggle\na red line underneath this word.", "start": 7336.22, "duration": 4.39}, {"text": "And so what we're going to do is\ngive you a big text file, ASCII text,", "start": 7340.61, "duration": 3.11}, {"text": "containing 100-plus thousand words.", "start": 7343.72, "duration": 2.29}, {"text": "You're going to have to\ndecide how to load those", "start": 7346.01, "duration": 2.0}, {"text": "into memory, not just correctly,\nbut in a way that's well designed.", "start": 7348.01, "duration": 4.507}, {"text": "And we'll even give you a\ntool, if you choose to use it,", "start": 7352.517, "duration": 2.333}, {"text": "that times how long your code takes.", "start": 7354.85, "duration": 1.71}, {"text": "And it even counts how much\nRAM you're actually using.", "start": 7356.56, "duration": 2.55}, {"text": "But the key goals for this\nweek and our final week in C", "start": 7359.11, "duration": 3.202}, {"text": "is to take some of these\nbasic building blocks,", "start": 7362.312, "duration": 1.958}, {"text": "like arrays, and\npointers, and structures,", "start": 7364.27, "duration": 4.41}, {"text": "and decide for yourselves how you're\nmost comfortable stitching them", "start": 7368.68, "duration": 3.3}, {"text": "together, to what extent you want to\nreally fine tune your code beyond just", "start": 7371.98, "duration": 3.6}, {"text": "getting it correct, and to give you\na better sense of the underlying code", "start": 7375.58, "duration": 4.47}, {"text": "that people have had to\nwrite for years in libraries", "start": 7380.05, "duration": 2.4}, {"text": "to make programming doable, ala Scratch.", "start": 7382.45, "duration": 2.572}, {"text": "Because in just a few weeks, we're\ngoing to transition to Python.", "start": 7385.022, "duration": 2.708}, {"text": "And the dozens of lines of\ncode you've been writing now", "start": 7387.73, "duration": 2.76}, {"text": "are going to be whittled\ndown to one line, two line,", "start": 7390.49, "duration": 2.224}, {"text": "because we're going to get a lot\nmore features from these newer,", "start": 7392.714, "duration": 2.666}, {"text": "fancier languages.", "start": 7395.38, "duration": 0.9}, {"text": "But you'll hopefully have an\nappreciation of what is actually", "start": 7396.28, "duration": 2.58}, {"text": "going on underneath that hood.", "start": 7398.86, "duration": 1.74}, {"text": "So I'll stick around for\nany one-on-one questions.", "start": 7400.6, "duration": 1.53}, {"text": "Let's call it a day.", "start": 7402.13, "duration": 0.66}, {"text": "Take a duck on your way\nout for roommates as well.", "start": 7402.79, "duration": 2.083}, {"text": "And we'll see you next time.", "start": 7404.873, "duration": 2.047}]