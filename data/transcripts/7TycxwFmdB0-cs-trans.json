[{"text": "Hi, I'm Kerry Ann and welcome to Crash Course computer science.", "start": 2.76, "duration": 3.4}, {"text": "Over the past few episodes, we've been building up our understanding of computer science", "start": 6.16, "duration": 3.56}, {"text": "fundamentals, such as functions,\nalgorithms and data structures.", "start": 9.72, "duration": 3.3}, {"text": "Today, we're going to take a step back and", "start": 13.06, "duration": 1.94}, {"text": "look at the person who formulated many of the theoretical concepts that underline modern computation.", "start": 15.0, "duration": 4.42}, {"text": "The father of computer science and not quite Benedict Cumberbatch lookalike Alan Turing.", "start": 19.42, "duration": 4.88}, {"text": "[Crash Course intro playing]", "start": 24.3, "duration": 9.0}, {"text": "Alan Mathison Turing was born in London in 1912", "start": 33.36, "duration": 2.88}, {"text": "and showed an incredible aptitude for maths and science throughout his early education.", "start": 36.24, "duration": 3.86}, {"text": "His first brush of what we now call computer science came in 1935 while he was a master's student at King's College in Cambridge.", "start": 40.1, "duration": 6.26}, {"text": "He set out to solve a problem posed by German Mathematician David Hilbert known as the Entscheidungsproblem", "start": 46.44, "duration": 5.4}, {"text": "or decision problem, which asked the following:", "start": 51.84, "duration": 2.5}, {"text": "is there an algorithm that takes as input a statement written in formal logic, and", "start": 54.34, "duration": 4.18}, {"text": "produces a \"yes\" or \"no\" answer that's always accurate?", "start": 58.54, "duration": 2.74}, {"text": "If such an algorithm existed,", "start": 61.28, "duration": 1.44}, {"text": "we could use it to answer questions like,\n\"Is there a number bigger than all numbers?\"", "start": 62.72, "duration": 3.42}, {"text": "No, there's not. We know the answer to that one,", "start": 66.14, "duration": 1.949}, {"text": "but there are many other questions in mathematics that we'd like to know the answer to.", "start": 68.089, "duration": 3.491}, {"text": "So if this algorithm existed,\nwe'd want to know it.", "start": 71.74, "duration": 3.02}, {"text": "The American mathematician Alonzo Church first presented a solution to this problem in 1935.", "start": 74.76, "duration": 4.94}, {"text": "He developed a system of mathematical expressions called Lambda Calculus", "start": 79.7, "duration": 3.82}, {"text": "and demonstrated that no such universal algorithm could exist.", "start": 83.58, "duration": 3.2}, {"text": "Although Lambda Calculus was capable of representing any computation,", "start": 86.78, "duration": 3.26}, {"text": "the mathematical technique was difficult to apply and understand.", "start": 90.04, "duration": 3.18}, {"text": "At pretty much the same time on the other side of the Atlantic,", "start": 93.26, "duration": 2.48}, {"text": "Alan Turing came up with his own approach to solve the decision problem.", "start": 95.74, "duration": 3.16}, {"text": "He proposed a hypothetical computing machine,\nwhich we now call a Turing Machine.", "start": 98.9, "duration": 4.48}, {"text": "Turing Machines provided a simple, yet powerful", "start": 103.38, "duration": 2.32}, {"text": "mathematical model of computation.", "start": 105.7, "duration": 1.919}, {"text": "Although using totally different mathematics,", "start": 107.619, "duration": 2.301}, {"text": "they were functionally equivalent to lambda calculus in terms of their computational power.", "start": 109.92, "duration": 4.0}, {"text": "However their relative simplicity made them much more popular in the burgeoning field of computer science.", "start": 114.0, "duration": 4.7}, {"text": "In fact, they're simple enough that I'm going to explain it right now.", "start": 118.7, "duration": 3.52}, {"text": "A Turing Machine is a theoretical", "start": 122.22, "duration": 1.5}, {"text": "computing device equipped with an infinitely long memory tape which stores symbols", "start": 123.88, "duration": 4.36}, {"text": "and a device called a read/write head which can read and write, or", "start": 128.24, "duration": 2.62}, {"text": "modify, symbols on that tape.", "start": 130.86, "duration": 1.68}, {"text": "There's also a state variable in which we can hold a piece of information", "start": 132.54, "duration": 3.3}, {"text": "about the current state of the machine.", "start": 135.84, "duration": 1.62}, {"text": "And a set of rules that describes what the machine does.", "start": 137.46, "duration": 2.619}, {"text": "Given a state and the current symbol the head is reading,", "start": 140.079, "duration": 2.841}, {"text": "the rule can be to write a symbol on the tape change the state", "start": 142.92, "duration": 2.969}, {"text": "of the machine move the read/write head to the left or right by one spot or any", "start": 145.889, "duration": 3.811}, {"text": "combination of these actions.", "start": 149.7, "duration": 1.76}, {"text": "To make this concrete let's work through a simple example:", "start": 151.46, "duration": 2.64}, {"text": "a Turing Machine that reads a string of ones ending in a zero and", "start": 154.1, "duration": 3.369}, {"text": "computes whether there is an even number of ones. If that's true", "start": 157.54, "duration": 3.29}, {"text": "The machine will write a one to the tape and if it's false, it'll write a zero. First", "start": 160.83, "duration": 4.29}, {"text": "We need to define our Turing machine rules. If the state is even and the current symbol of the tape is one,", "start": 165.12, "duration": 5.22}, {"text": "then we update the machine state to odd and move the head to the right. On the other hand if the state is even and", "start": 170.47, "duration": 5.9}, {"text": "The current symbol is zero, which means we've reached the end of the string of ones, then we write one to the tape and change", "start": 176.37, "duration": 5.159}, {"text": "the state to halt, as in we're finished and the Turing machine has completed the", "start": 181.53, "duration": 3.75}, {"text": "computation. We also need rules for when the Turing machine is in an odd state,", "start": 185.47, "duration": 3.32}, {"text": "one rule for the symbol on the tape is a zero and another for when it is one.", "start": 188.86, "duration": 3.919}, {"text": "Lastly we need to define a", "start": 192.94, "duration": 1.26}, {"text": "Starting state, which we'll set to be even. Now we've defined the rules in the starting state of our Turing machine,", "start": 194.2, "duration": 5.089}, {"text": "which is comparable to a computer program, we can run it on some example input. Let's say we store 1 1 0 onto tape.", "start": 199.29, "duration": 6.179}, {"text": "That's two ones which means there is an even number of ones, and if that's news to you,", "start": 205.48, "duration": 4.009}, {"text": "We should probably get working on crash course Math.", "start": 209.49, "duration": 2.16}, {"text": "Notice that our rules only ever move their head to the right so the rest of the tape is irrelevant.", "start": 211.81, "duration": 4.1}, {"text": "We'll leave it blank for simplicity. Our Turing machine is all ready to go so let's start it. Our state is even and the first", "start": 216.07, "duration": 6.11}, {"text": "number we see is a one. That matches our topmost rule", "start": 222.18, "duration": 2.879}, {"text": "and so we execute the effect, which is to update the state to odd and move the read/write head to the right by one spot.", "start": 225.06, "duration": 5.369}, {"text": "Okay, now we see another one on the tape", "start": 230.43, "duration": 2.1}, {"text": "But this time our state is odd", "start": 232.53, "duration": 1.62}, {"text": "and so we execute our third rule which sets the state back to even and moves the head to the right. Now", "start": 234.15, "duration": 5.64}, {"text": "we see a 0 and our current state is even so we execute our second rule", "start": 239.79, "duration": 3.69}, {"text": "which is to write a 1 to the tape signifying that yes, it's true,", "start": 243.48, "duration": 3.359}, {"text": "there is an even number of ones, and finally the machine halts.", "start": 246.87, "duration": 3.45}, {"text": "That's how turing machines work pretty simple right so you might be wondering why there's such a big deal", "start": 250.39, "duration": 5.029}, {"text": "Well cheering shows that this simple hypothetical machine can perform any computation if given enough time and memory", "start": 255.42, "duration": 6.089}, {"text": "It's a general-purpose computer our program was a simple example", "start": 261.54, "duration": 3.389}, {"text": "But with enough Rules states and tape you could build anything - a web browser, world of warcraft - whatever! Of course it would be", "start": 265.21, "duration": 6.469}, {"text": "ridiculously inefficient, but it is theoretically possible.", "start": 271.9, "duration": 2.42}, {"text": "And that's why, as a model of computing, it's such a powerful idea.", "start": 274.45, "duration": 3.109}, {"text": "In fact in terms of what it can and cannot compute", "start": 277.69, "duration": 2.869}, {"text": "there's no computer more powerful than a turing machine. A computer that is as powerful is called Turing complete", "start": 280.56, "duration": 5.67}, {"text": "Every modern computing system your laptop your smartphone and even the little computer inside your microwave and thermostat are all Turing Complete.", "start": 286.51, "duration": 7.969}, {"text": "To answer Hilbert's decision problem, Turing applied these new Turing machines to an intriguing", "start": 294.479, "duration": 3.51}, {"text": "computational puzzle: the halting problem. Put simply this asks", "start": 298.33, "duration": 3.589}, {"text": "\"Is there an algorithm that can determine, given a description of a turing machine and the input from its tape,", "start": 301.919, "duration": 5.25}, {"text": "whether the Machine will run forever or halt?\" For example we know our Turing machine will halt when given the input 1 1 0", "start": 307.27, "duration": 6.049}, {"text": "Because we literally walk through the example until it halted, but what about a more complex problem?", "start": 313.389, "duration": 4.639}, {"text": "Is there a way to figure out if the program will halt without", "start": 318.029, "duration": 2.67}, {"text": "executing it? Some programs might take years to run", "start": 321.009, "duration": 2.6}, {"text": "so it would be useful to know before we run it and wait and wait and wait and then start getting worried and wonder and", "start": 323.61, "duration": 6.029}, {"text": "Then decades later when you're old and gray control-alt-delete so much sadness", "start": 329.639, "duration": 4.109}, {"text": "Unfortunately turing came up with a proof that shows the halting problem was in fact unsolvable, through a clever logical contradiction.", "start": 334.12, "duration": 6.109}, {"text": "Let's Follow his reasoning. Imagine", "start": 340.229, "duration": 1.891}, {"text": "we have a hypothetical Turing machine that takes a description of a program and some input for his tape and always outputs either", "start": 342.12, "duration": 5.969}, {"text": "Yes, it halts or no, it doesn't and I'm going to give this machine a fun name", "start": 348.089, "duration": 4.02}, {"text": "H for Holtz. Don't worry about how it works. Let's just assume such a machine exists", "start": 352.11, "duration": 4.229}, {"text": "We're talking theory here. Turing reasoned if there existed a program", "start": 356.339, "duration": 3.36}, {"text": "Whose halting behavior was not decidable by age it would mean the halting problem is", "start": 359.699, "duration": 3.839}, {"text": "Unsolvable to find one Turing designed another Turing machine that built on top of H. If H says the program holds", "start": 363.699, "duration": 5.959}, {"text": "Then we'll make our new machine loop forever. If the answer is no", "start": 369.819, "duration": 3.589}, {"text": "It doesn't halt, we'll have the new machine output a no and halt. In essence", "start": 373.409, "duration": 4.23}, {"text": "We're building a machine that does the opposite of what H says: halt if the program doesn't halt and run forever if the program halts", "start": 377.639, "duration": 6.0}, {"text": "For this argument we'll also need to add a splitter to the front of our new machine", "start": 383.849, "duration": 3.179}, {"text": "So that it accepts only one input and passes that as both the program and input into H. Let's call this new machine \"Bizzaro\"", "start": 387.22, "duration": 7.04}, {"text": "So far this seems like a plausible machine, right?", "start": 394.44, "duration": 2.58}, {"text": "Now it's going to get pretty complicated", "start": 397.02, "duration": 1.34}, {"text": "But bear with me for a second. Look what happens when you pass Bizzaro a description of itself as the input", "start": 398.36, "duration": 5.52}, {"text": "This means we're asking H what Bizzaro will do when asked to evaluate itself", "start": 403.88, "duration": 3.82}, {"text": "But if H says Bizzaro halts then Bizzaro enters its infinite loop and thus doesn't halt", "start": 407.7, "duration": 5.56}, {"text": "And if H says Bizarro doesn't halt then Bizzaro outputs a no and halts", "start": 413.26, "duration": 4.22}, {"text": "so H can't possibly decide the halting problem correctly because there is no answer. It's a paradox and this paradox means", "start": 417.48, "duration": 6.45}, {"text": "That the halting problem cannot be solved with Turing machines. Remember Turing proved that Turing machines could implement any computation", "start": 423.93, "duration": 6.91}, {"text": "So this solution to the halting problem proves that not all problems can be solved by computation. Wow, that's some heavy stuff", "start": 430.92, "duration": 5.96}, {"text": "I might have to watch that again myself.", "start": 436.96, "duration": 2.0}, {"text": "Long story short Church", "start": 439.23, "duration": 1.32}, {"text": "and Turing showed there were limits to the ability of computers no matter how much time or memory you have there are just some problems", "start": 440.55, "duration": 6.12}, {"text": "that cannot be solved ever.", "start": 446.67, "duration": 6.569}, {"text": "At this point in", "start": 456.3, "duration": 0.7}, {"text": "1936 Turing was only 24 years old and really only just beginning his career. From 1936 through", "start": 457.0, "duration": 6.649}, {"text": "1938 he completed a PhD at Princeton University", "start": 463.99, "duration": 2.33}, {"text": "under the guidance of Church then after graduating he returned to Cambridge.", "start": 466.87, "duration": 3.679}, {"text": "Shortly after in", "start": 471.16, "duration": 0.84}, {"text": "1939 Britain became embroiled in World War II Turing's genius was quickly applied to the war effort. In fact a year before the war", "start": 472.0, "duration": 6.47}, {"text": "Started he was already working part-time at the uk's government code and Cypher school", "start": 478.54, "duration": 3.769}, {"text": "Which was the British code breaking group based out of Bletchley Park. One of his main efforts was figuring out how to decrypt German communications", "start": 482.5, "duration": 6.29}, {"text": "Especially those that use the enigma machine. In short these machines scrambled text. Like you'd type the letters", "start": 489.28, "duration": 5.809}, {"text": "H-E-L-L-O", "start": 495.34, "duration": 0.66}, {"text": "and the letters XWDBJ", "start": 496.0, "duration": 2.18}, {"text": "Would come out. This process is called encryption", "start": 498.18, "duration": 2.6}, {"text": "The scrambling wasn't random. The behavior was defined by a series of re-orderable rotors on the top of the enigma machine", "start": 500.98, "duration": 5.56}, {"text": "Each with 26 possible rotational positions. There was also a plug board at the front of the machine that allowed pairs of letters to be swapped", "start": 506.56, "duration": 7.14}, {"text": "In total there were billions of possible settings. If you had your own enigma machine and you knew the correct rotor and plug board settings", "start": 513.72, "duration": 7.0}, {"text": "You could type in XWDBJ", "start": 520.72, "duration": 2.1}, {"text": "and hello would come out. In other words, you decrypted the message", "start": 522.9, "duration": 3.72}, {"text": "Of course the German military wasn't sharing their enigma settings on Social Media", "start": 526.78, "duration": 3.32}, {"text": "So the allies had to break the code with billions of Rotor and plug board combinations", "start": 530.1, "duration": 4.17}, {"text": "There was no way to check them all by hand", "start": 534.27, "duration": 2.0}, {"text": "Fortunately for Turing, enigma machines and the people who operated them were not perfect", "start": 536.32, "duration": 3.89}, {"text": "Like one key flaw was that a letter would never be encoded as itself as in an h was never encrypted as an h", "start": 540.31, "duration": 6.26}, {"text": "Turing, building on earlier work by Polish code breakers, designed a special-Purpose", "start": 546.82, "duration": 3.619}, {"text": "electromechanical", "start": 550.78, "duration": 0.81}, {"text": "Computer called the Bombe that took advantage of this flaw. It tried lots and lots of combinations of enigma settings", "start": 551.59, "duration": 5.599}, {"text": "for a given encrypted message if the Bombe found a setting that led to a letter being encoded as itself", "start": 557.28, "duration": 5.28}, {"text": "Which we know the real Enigma machine couldn't do, that combination was discarded then the machine moved on to try another combination", "start": 562.66, "duration": 6.18}, {"text": "So Bombes were used to greatly narrow the number of Possible enigma settings", "start": 569.08, "duration": 3.38}, {"text": "This allowed human code breakers to hone their efforts on the most probable solutions", "start": 572.64, "duration": 3.659}, {"text": "Looking for things like common german words in fragments of decoded text", "start": 576.52, "duration": 3.26}, {"text": "Periodically the Germans would suspect someone was decoding their communications and upgrade the enigma machine like they'd add another rotor creating many more combinations", "start": 580.12, "duration": 7.729}, {"text": "they even built entirely new encryption machines. Throughout the war Turing and his colleagues at bletchley park worked tirelessly to defeat these mechanisms and", "start": 588.31, "duration": 7.549}, {"text": "overall the intelligence gained from Decrypted German communications", "start": 596.08, "duration": 2.839}, {"text": "Gave the allies an Edge in many theatres with some historians arguing it shortened the war by years", "start": 599.23, "duration": 5.57}, {"text": "after the war turing returned to Academia and", "start": 604.87, "duration": 2.39}, {"text": "Contributed to many early electronic computing efforts like the Manchester Mark 1 which was an early and influential stored-Program computer", "start": 607.57, "duration": 6.229}, {"text": "But his most famous post-war contribution was to artificial intelligence, a field so new that it didn't even get that name until 1956", "start": 614.23, "duration": 7.01}, {"text": "It's a huge topic", "start": 621.34, "duration": 1.14}, {"text": "So we'll get to it again in future episodes", "start": 622.48, "duration": 2.42}, {"text": "In 1950 Turing could envision a future where computers were powerful enough to exhibit intelligence equivalent to or at least", "start": 625.36, "duration": 6.23}, {"text": "indistinguishable from that of a human", "start": 632.05, "duration": 1.64}, {"text": "Turing postulated that a computer would deserve to be called intelligent", "start": 633.69, "duration": 3.599}, {"text": "If it could deceive a human into believing that it was human. This became the basis of a simple test now called the turing test", "start": 637.29, "duration": 6.059}, {"text": "Imagine that you are having a conversation with two different people not by voice or in person", "start": 643.69, "duration": 4.07}, {"text": "But by sending typed notes back and forth. You can ask any questions you want and you get replies", "start": 647.76, "duration": 4.679}, {"text": "But one of those two people is actually a computer. If you can't tell which one is human and which one is a computer then", "start": 652.63, "duration": 6.2}, {"text": "the computer passes the test", "start": 658.83, "duration": 1.26}, {"text": "There's a modern version of this test called a completely automated public turing test to tell computers and humans apart or captcha for short", "start": 660.09, "duration": 7.079}, {"text": "These are frequently used on the internet to prevent automated systems from doing things like posting spam on Websites. I'll admit sometimes", "start": 667.33, "duration": 6.889}, {"text": "I can't read what those squiggly things say. Does that mean I'm a computer? Normally in this series", "start": 674.22, "duration": 5.07}, {"text": "We don't delve into the personal lives of these historical figures", "start": 679.29, "duration": 2.82}, {"text": "But in Turing's case his name has been inextricably tied to tragedy so his story is worth mentioning", "start": 682.27, "duration": 5.809}, {"text": "Turing was gay in a time when homosexuality was illegal in the united Kingdom and much of the world. An investigation into a 1952 Burglary", "start": 688.36, "duration": 7.36}, {"text": "at his home revealed his sexual orientation to the authorities who charged him with gross indecency. Turing was convicted and given a choice between", "start": 696.08, "duration": 6.96}, {"text": "Imprisonment or probation with hormonal treatments to suppress his sexuality", "start": 703.48, "duration": 3.59}, {"text": "He chose the latter in part to continue his academic work, but it altered his mood and personality", "start": 707.2, "duration": 5.539}, {"text": "Although the exact circumstances will never be known, it's most widely accepted that Alan Turing took his own life by poison in 1954", "start": 713.64, "duration": 7.68}, {"text": "He was only 41. Many things have been named in recognition of Turing's contributions to theoretical computer science", "start": 721.32, "duration": 5.72}, {"text": "But perhaps the most prestigious among them is the turing award the highest distinction in the field of computer science", "start": 727.18, "duration": 5.96}, {"text": "Equivalent to a nobel prize in Physics, chemistry or other sciences. Despite a life cut short", "start": 733.84, "duration": 4.67}, {"text": "Alan inspired th e first generation of computer scientists and laid key groundwork that enabled a digital era we get to enjoy today", "start": 738.7, "duration": 6.92}, {"text": "I'll see you next week. Crash course computer science is produced in association with PBS digital studios at their channel", "start": 745.9, "duration": 6.4}, {"text": "You can check out our pla ylist to show like gross science", "start": 752.309, "duration": 2.331}, {"text": "ACS  reactions and the art assignment. this episode was filmed at the Chad and stacey Emigholz studio in Indianapolis, Indiana", "start": 755.11, "duration": 6.59}, {"text": "And it was made with the help of all these nice people and a wonderful graphics team thought cafe", "start": 761.7, "duration": 4.409}, {"text": "Thanks for watching and try turning it off and then back [on] again", "start": 766.14, "duration": 2.61}]