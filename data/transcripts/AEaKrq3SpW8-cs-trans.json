[{"text": "Hi, I\u2019m Carrie Anne, and welcome to CrashCourse\nComputer Science!", "start": 3.26, "duration": 2.74}, {"text": "As we talked about last episode, your computer\nis connected to a large, distributed network,", "start": 6.08, "duration": 4.52}, {"text": "called The Internet.", "start": 10.6, "duration": 1.0}, {"text": "I know this because you\u2019re watching a youtube\nvideo, which is being streamed over that very", "start": 11.6, "duration": 4.16}, {"text": "internet.", "start": 15.76, "duration": 0.66}, {"text": "It\u2019s arranged as an ever-enlarging web of\ninterconnected devices.", "start": 16.42, "duration": 2.82}, {"text": "For your computer to get this video, the first\nconnection is to your local area network,", "start": 19.24, "duration": 4.41}, {"text": "or LAN, which might be every device in your\nhouse that\u2019s connected to your wifi router.", "start": 23.65, "duration": 4.469}, {"text": "This then connects to a Wide Area Network,\nor WAN, which is likely to be a router run", "start": 28.12, "duration": 4.16}, {"text": "by your Internet Service Provider, or ISP\n\u2013 companies like Comcast, AT&T or Verizon.", "start": 32.28, "duration": 5.64}, {"text": "At first, this will be a regional router,\nlike one for your neighborhood, and then that", "start": 37.92, "duration": 3.92}, {"text": "router connects to an even bigger WAN, maybe\none for your whole city or town.", "start": 41.84, "duration": 4.039}, {"text": "There might be a couple more hops, but ultimately\nyou\u2019ll connect to the backbone of the internet", "start": 45.88, "duration": 4.109}, {"text": "made up of gigantic routers with super high-bandwidth\nconnections running between them.", "start": 49.989, "duration": 3.951}, {"text": "To request this video file from youtube, a\npacket had to work its way up to the backbone,", "start": 53.95, "duration": 4.339}, {"text": "travel along that for a bit, and then work\nits way back down to a youtube server that", "start": 58.289, "duration": 3.601}, {"text": "had the file.", "start": 61.89, "duration": 1.169}, {"text": "That might be four hops up, two hops across\nthe backbone, and four hops down, for a total", "start": 63.059, "duration": 4.561}, {"text": "of ten hops.", "start": 67.62, "duration": 1.0}, {"text": "If you\u2019re running Windows, MacOS or Linux,\nyou can see the route data takes to different", "start": 68.62, "duration": 3.75}, {"text": "places on the internet by using the traceroute\nprogram on your computer.", "start": 72.37, "duration": 3.88}, {"text": "Instructions in the Doobly Doo.", "start": 76.25, "duration": 1.79}, {"text": "For us here at the Chad & Stacey Emigholz\nStudio in Indianapolis, the route to the DFTBA", "start": 78.04, "duration": 4.66}, {"text": "server in California goes through 11 stops.", "start": 82.7, "duration": 2.6}, {"text": "We start at 192.168.0.1 -- thats the IP address\nfor my computer on our LAN.", "start": 85.3, "duration": 5.06}, {"text": "Then there\u2019s the wifi router here at the\nstudio, then a series of regional routers,", "start": 90.36, "duration": 4.39}, {"text": "then we get onto the backbone, and then we\nstart working back down to the computer hosting", "start": 94.75, "duration": 4.34}, {"text": "\u201cDFTBA dot com\u201d, which has the IP address\n104.24.109.186.", "start": 99.09, "duration": 4.4}, {"text": "But how does a packet actually get there?", "start": 103.49, "duration": 4.04}, {"text": "What happens if a packet gets lost along the\nway?", "start": 107.53, "duration": 2.53}, {"text": "If I type \u201cDFTBA dot com\u201d into my web\nbrowser, how does it know the server\u2019s address?", "start": 110.06, "duration": 4.74}, {"text": "Those are our topics for today!", "start": 114.8, "duration": 1.9}, {"text": "INTRO", "start": 116.7, "duration": 9.14}, {"text": "As we discussed last episode, the internet\nis a huge distributed network that sends data", "start": 125.85, "duration": 3.99}, {"text": "around as little packets.", "start": 129.85, "duration": 1.65}, {"text": "If your data is big enough, like an email\nattachment, it might get broken up into many", "start": 131.5, "duration": 3.91}, {"text": "packets.", "start": 135.41, "duration": 1.0}, {"text": "For example, this video stream is arriving\nto your computer right now as a series of", "start": 136.41, "duration": 5.15}, {"text": "packets, and not one gigantic file.", "start": 141.56, "duration": 2.27}, {"text": "Internet packets have to conform to a standard\ncalled the Internet Protocol, or IP.", "start": 143.83, "duration": 3.97}, {"text": "It\u2019s a lot like sending physical mail through\nthe postal system \u2013 every letter needs a", "start": 147.8, "duration": 3.93}, {"text": "unique and legible address written on it,\nand there are limits to the size and weight", "start": 151.73, "duration": 3.72}, {"text": "of packages.", "start": 155.45, "duration": 1.14}, {"text": "Violate this, and your letter won\u2019t get\nthrough.", "start": 156.59, "duration": 2.65}, {"text": "IP packets are very similar.", "start": 159.24, "duration": 1.5}, {"text": "However, IP is a very low level protocol \u2013 there\nisn\u2019t much more than a destination address", "start": 160.74, "duration": 4.63}, {"text": "in a packet\u2019s header, which is the metadata\nthat\u2019s stored in front of the data payload.", "start": 165.37, "duration": 4.25}, {"text": "This means that a packet can show up at a\ncomputer, but the computer may not know which", "start": 169.62, "duration": 3.47}, {"text": "application to give the data to; Skype or\nCall of Duty.", "start": 173.09, "duration": 3.37}, {"text": "For this reason, more advanced protocols were\ndeveloped that sit on top of IP.", "start": 176.46, "duration": 4.08}, {"text": "One of the simplest and most common is the\nUser Datagram Protocol, or UDP.", "start": 180.54, "duration": 4.47}, {"text": "UDP has its own header, which sits inside\nthe data payload.", "start": 185.01, "duration": 3.51}, {"text": "Inside of the UDP header is some useful, extra\ninformation.", "start": 188.52, "duration": 3.52}, {"text": "One of them is a port number.", "start": 192.04, "duration": 1.8}, {"text": "Every program wanting to access the internet\nwill ask its host computer\u2019s Operating System", "start": 193.84, "duration": 3.95}, {"text": "to be given a unique port.", "start": 197.79, "duration": 1.55}, {"text": "Like Skype might ask for port number 3478.", "start": 199.34, "duration": 4.13}, {"text": "When a packet arrives to the computer, the\nOperating System will look inside the UDP", "start": 203.47, "duration": 4.16}, {"text": "header and read the port number.", "start": 207.63, "duration": 1.8}, {"text": "Then, if it sees, for example, 3478, it will\ngive the packet to Skype.", "start": 209.43, "duration": 4.72}, {"text": "So to review, IP gets the packet to the right\ncomputer, but UDP gets the packet to the right", "start": 214.15, "duration": 5.0}, {"text": "program running on that computer.", "start": 219.15, "duration": 2.12}, {"text": "UDP headers also include something called\na checksum, which allows the data to be verified", "start": 221.27, "duration": 4.14}, {"text": "for correctness.", "start": 225.41, "duration": 1.14}, {"text": "As the name suggests, it does this by checking\nthe sum of the data.", "start": 226.55, "duration": 3.34}, {"text": "Here\u2019s a simplified version of how this\nworks.", "start": 229.89, "duration": 2.47}, {"text": "Lets imagine the raw data in our UDP packet\nis 89 111 33 32 58 and 41.", "start": 232.36, "duration": 5.41}, {"text": "Before the packet is sent, the transmitting\ncomputer calculates the checksum by adding", "start": 237.77, "duration": 5.38}, {"text": "all the data together: 89 plus 111 plus 33\nand so on.", "start": 243.15, "duration": 4.59}, {"text": "In our example, this adds up to a checksum\nof 364.", "start": 247.74, "duration": 3.62}, {"text": "In UDP, the checksum value is stored in 16\nbits.", "start": 251.36, "duration": 3.46}, {"text": "If the sum exceeds the maximum possible value,\nthe upper-most bits overflow, and only the", "start": 254.82, "duration": 4.59}, {"text": "lower bits are used.", "start": 259.41, "duration": 1.0}, {"text": "Now, when the receiving computer gets this\npacket, it repeats the process, adding up", "start": 260.41, "duration": 3.71}, {"text": "all the data.", "start": 264.12, "duration": 1.0}, {"text": "89 plus 111 plus 33 and so on.", "start": 265.12, "duration": 3.22}, {"text": "If that sum is the same as the checksum sent\nin the header, all is well.", "start": 268.34, "duration": 3.84}, {"text": "But, if the numbers don\u2019t match, you know\nthat the data got corrupted at some point", "start": 272.18, "duration": 3.71}, {"text": "in transit, maybe because of a power fluctuation\nor faulty cable.", "start": 275.89, "duration": 3.51}, {"text": "Unfortunately, UDP doesn\u2019t offer any mechanisms\nto fix the data, or request a new copy \u2013 receiving", "start": 279.4, "duration": 5.44}, {"text": "programs are alerted to the corruption, but\ntypically just discard the packet.", "start": 284.84, "duration": 3.99}, {"text": "Also, UDP provides no mechanisms to know if\npackets are getting through \u2013 a sending", "start": 288.83, "duration": 4.01}, {"text": "computer shoots the UDP packet off, but has\nno confirmation it ever gets to its destination", "start": 292.84, "duration": 4.69}, {"text": "successfully.", "start": 297.53, "duration": 1.0}, {"text": "Both of these properties sound pretty catastrophic,\nbut some applications are ok with this, because", "start": 298.53, "duration": 4.62}, {"text": "UDP is also really simple and fast.", "start": 303.15, "duration": 2.47}, {"text": "Skype, for example, which uses UDP for video\nchat, can handle corrupt or missing packets.", "start": 305.62, "duration": 4.42}, {"text": "That\u2019s why sometimes if you\u2019re on a bad\ninternet connection,", "start": 310.04, "duration": 2.49}, {"text": "Skype gets all glitchy \u2013 only some of the\nUDP packets are making it to your computer.", "start": 312.53, "duration": 3.72}, {"text": "Skype does the best it can with the data it\ndoes receive correctly.", "start": 316.25, "duration": 1.0}, {"text": "But this approach doesn\u2019t work for many\nother types of data transmission.", "start": 317.25, "duration": 2.96}, {"text": "Like, it doesn\u2019t really work if you send\nan email, and it shows up with the middle", "start": 320.21, "duration": 3.48}, {"text": "missing.", "start": 323.69, "duration": 1.0}, {"text": "The whole message really needs to get there\ncorrectly!", "start": 324.69, "duration": 1.97}, {"text": "When it \u201cabsolutely, positively needs to\nget there\u201d, programs use the Transmission", "start": 326.66, "duration": 4.17}, {"text": "Control Protocol, or TCP, which like UDP,\nrides inside the data payload of IP packets.", "start": 330.83, "duration": 6.18}, {"text": "For this reason, people refer to this combination\nof protocols as TCP/IP.", "start": 337.01, "duration": 4.76}, {"text": "Like UDP, the TCP header contains a destination\nport and checksum.", "start": 341.77, "duration": 3.79}, {"text": "But, it also contains fancier features, and\nwe\u2019ll focus on the key ones.", "start": 345.56, "duration": 3.78}, {"text": "First off, TCP packets are given sequential\nnumbers.", "start": 349.34, "duration": 2.79}, {"text": "So packet 15 is followed by packet 16, which\nis followed by 17, and so on... for potentially", "start": 352.13, "duration": 4.61}, {"text": "millions of packets sent during that session.", "start": 356.74, "duration": 2.179}, {"text": "These sequence numbers allow a receiving computer\nto put the packets into the correct order,", "start": 358.919, "duration": 3.821}, {"text": "even if they arrive at different times across\nthe network.", "start": 362.74, "duration": 2.17}, {"text": "So if an email comes in all scrambled, the\nTCP implementation in your computer\u2019s operating", "start": 364.91, "duration": 4.76}, {"text": "system will piece it all together correctly.", "start": 369.67, "duration": 2.37}, {"text": "Second, TCP requires that once a computer\nhas correctly received a packet \u2013 and the", "start": 372.04, "duration": 4.04}, {"text": "data passes the checksum \u2013 that it send\nback an acknowledgement, or \u201cACK\u201d as the", "start": 376.08, "duration": 3.66}, {"text": "cool kids say, to the sending computer.", "start": 379.74, "duration": 1.79}, {"text": "Knowing the packet made it successfully, the\nsender can now transmit the next packet.", "start": 381.53, "duration": 4.43}, {"text": "But this time, let\u2019s say, it waits, and\ndoesn\u2019t get an acknowledgement packet back.", "start": 385.96, "duration": 3.94}, {"text": "Something must be wrong If enough time elapses,\nthe sender will go ahead and just retransmit", "start": 389.9, "duration": 4.2}, {"text": "the same packet.", "start": 394.1, "duration": 1.0}, {"text": "It\u2019s worth noting that the original packet\nmight have actually gotten there, but the", "start": 395.1, "duration": 3.539}, {"text": "acknowledgment is just really delayed.", "start": 398.639, "duration": 2.06}, {"text": "Or perhaps it was the acknowledgment that\nwas lost.", "start": 400.699, "duration": 2.011}, {"text": "Either way, it doesn\u2019t matter, because the\nreceiver has those sequence numbers, and if", "start": 402.71, "duration": 4.361}, {"text": "a duplicate packet arrives, it can be discarded.", "start": 407.071, "duration": 2.519}, {"text": "Also, TCP isn\u2019t limited to a back and forth\nconversation \u2013 it can send many packets,", "start": 409.59, "duration": 4.829}, {"text": "and have many outstanding ACKs, which increases\nbandwidth significantly, since you aren\u2019t", "start": 414.419, "duration": 4.311}, {"text": "wasting time waiting for acknowledgment packets\nto return.", "start": 418.73, "duration": 2.94}, {"text": "Interestingly, the success rate of ACKs, and\nalso the round trip time between sending and", "start": 421.67, "duration": 4.35}, {"text": "acknowledging, can be used to infer network\ncongestion.", "start": 426.02, "duration": 2.399}, {"text": "TCP uses this information to adjust how aggressively\nit sends packets \u2013 a mechanism for congestion", "start": 428.419, "duration": 5.911}, {"text": "control.", "start": 434.33, "duration": 0.51}, {"text": "So, basically, TCP can handle out-of-order\npacket delivery, dropped packets \u2013 including", "start": 434.84, "duration": 4.58}, {"text": "retransmission \u2013 and even throttle its transmission\nrate according to available bandwidth.", "start": 439.42, "duration": 5.02}, {"text": "Pretty awesome!", "start": 444.449, "duration": 1.0}, {"text": "You might wonder why anyone would use UDP\nwhen TCP has all these nifty features.", "start": 445.449, "duration": 4.541}, {"text": "The single biggest downside are all those\nacknowledgment packets \u2013 it doubles the", "start": 449.99, "duration": 3.76}, {"text": "number of messages on the network, and yet,\nyou're not transmitting any more data.", "start": 453.75, "duration": 4.31}, {"text": "That overhead, including associated delays,\nis sometimes not worth the improved robustness,", "start": 458.06, "duration": 4.97}, {"text": "especially for time-critical applications,\nlike Multiplayer First Person Shooters.", "start": 463.03, "duration": 4.69}, {"text": "And if it\u2019s you getting lag-fragged you\u2019ll\ndefinitely agree!", "start": 467.72, "duration": 2.94}, {"text": "When your computer wants to make a connection\nto a website, you need two things - an IP", "start": 470.66, "duration": 4.14}, {"text": "address and a port.", "start": 474.8, "duration": 1.0}, {"text": "Like port 80, at 172.217.7.238.", "start": 475.8, "duration": 4.38}, {"text": "This example is the IP address and port for\nthe Google web server.", "start": 480.18, "duration": 2.97}, {"text": "In fact, you can enter this into your browser\u2019s\naddress bar, like so, and you\u2019ll end up", "start": 483.15, "duration": 3.792}, {"text": "on the google homepage.", "start": 486.942, "duration": 1.0}, {"text": "This gets you to the right destination, but\nremembering that long string of digits would", "start": 487.942, "duration": 4.108}, {"text": "be really annoying.", "start": 492.05, "duration": 1.1}, {"text": "It\u2019s much easier to remember: google.com.", "start": 493.15, "duration": 2.69}, {"text": "So the internet has a special service that\nmaps these domain names to addresses.", "start": 495.84, "duration": 4.02}, {"text": "It\u2019s like the phone book for the internet.", "start": 499.86, "duration": 2.02}, {"text": "And it\u2019s called the Domain Name System,\nor DNS for short.", "start": 501.88, "duration": 3.23}, {"text": "You can probably guess how it works.", "start": 505.11, "duration": 1.559}, {"text": "When you type something like \u201cyoutube.com\u201d\ninto your web browser, it goes and asks a", "start": 506.669, "duration": 5.391}, {"text": "DNS server \u2013 usually one provided by your\nISP \u2013 to lookup the address.", "start": 512.06, "duration": 3.559}, {"text": "DNS consults its huge registry, and replies\nwith the address... if one exists.", "start": 515.619, "duration": 4.59}, {"text": "In fact, if you try mashing your keyboard,\nadding \u201c.com\u201d, and then hit enter in your", "start": 520.209, "duration": 4.11}, {"text": "browser, you\u2019ll likely be presented with\nan error that says DNS failed.", "start": 524.319, "duration": 3.691}, {"text": "That\u2019s because that site doesn\u2019t exist,\nso DNS couldn\u2019t give your browser an address.", "start": 528.01, "duration": 4.569}, {"text": "But, if DNS returns a valid address, which\nit should for \u201cyoutube.com\u201d, then your", "start": 532.579, "duration": 4.181}, {"text": "browser shoots off a request over TCP for\nthe website\u2019s data.", "start": 536.76, "duration": 3.689}, {"text": "There\u2019s over 300 million registered domain\nnames, so to make that DNS Lookup a little", "start": 540.449, "duration": 5.19}, {"text": "more manageable, it\u2019s not stored as one\ngigantically long list, but rather in a tree", "start": 545.639, "duration": 4.601}, {"text": "data structure.", "start": 550.24, "duration": 1.0}, {"text": "What are called Top Level Domains, or TLDs,\nare at the very top.", "start": 551.24, "duration": 4.219}, {"text": "These are huge categories like .com and .gov.", "start": 555.46, "duration": 2.52}, {"text": "Then, there are lower level domains that sit\nbelow that, called second level domains; Examples", "start": 557.98, "duration": 4.56}, {"text": "under .com include google.com and\ndftba.com.", "start": 562.54, "duration": 3.24}, {"text": "Then, there are even lower level domains,\ncalled subdomains, like images.google.com,", "start": 565.78, "duration": 4.42}, {"text": "store.dftba.com.", "start": 570.2, "duration": 2.44}, {"text": "And this tree is absolutely HUGE!", "start": 572.64, "duration": 2.44}, {"text": "Like I said, more than 300 million domain\nnames, and that's just second level domain", "start": 575.089, "duration": 4.072}, {"text": "names, not all the sub domains.", "start": 579.161, "duration": 1.889}, {"text": "For this reason, this data is distributed\nacross many DNS servers, which are authorities", "start": 581.05, "duration": 4.899}, {"text": "for different parts of the tree.", "start": 585.949, "duration": 1.391}, {"text": "Okay, I know you\u2019ve been waiting for it...", "start": 587.34, "duration": 2.0}, {"text": "We\u2019ve reached a new level of abstraction!", "start": 589.34, "duration": 8.26}, {"text": "Over the past two episodes, we\u2019ve worked\nup from electrical signals on wires, or radio", "start": 597.6, "duration": 4.39}, {"text": "signals transmitted through the air in the\ncase of wireless networks.", "start": 601.99, "duration": 3.48}, {"text": "This is called the Physical Layer.", "start": 605.47, "duration": 1.77}, {"text": "MAC addresses, collision detection, exponential\nbackoff and similar low level protocols that", "start": 607.24, "duration": 4.539}, {"text": "mediate access to the physical layer are part\nof the Data Link Layer.", "start": 611.779, "duration": 3.71}, {"text": "Above this is the Network Layer, which is\nwhere all the switching and routing technologies", "start": 615.489, "duration": 3.69}, {"text": "that we discussed operate.", "start": 619.179, "duration": 1.44}, {"text": "And today, we mostly covered the Transport\nlayer, protocols like UDP and TCP, which are", "start": 620.619, "duration": 5.071}, {"text": "responsible for point to point data transfer\nbetween computers, and also things like error", "start": 625.69, "duration": 4.119}, {"text": "detection and recovery when possible.", "start": 629.809, "duration": 2.15}, {"text": "We\u2019ve also grazed the Session Layer \u2013 where\nprotocols like TCP and UDP are used to open", "start": 631.959, "duration": 4.412}, {"text": "a connection, pass information back and forth,\nand then close the connection when finished", "start": 636.371, "duration": 4.398}, {"text": "\u2013 what\u2019s called a session.", "start": 640.769, "duration": 1.831}, {"text": "This is exactly what happens when you, for\nexample, do a DNS Lookup, or request a webpage.", "start": 642.6, "duration": 4.52}, {"text": "These are the bottom five layers of the Open\nSystem Interconnection (OSI) model, a conceptual", "start": 647.12, "duration": 4.9}, {"text": "framework for compartmentalizing all these\ndifferent network processes.", "start": 652.029, "duration": 3.87}, {"text": "Each level has different things to worry about\nand solve, and it would be impossible to build", "start": 655.899, "duration": 3.85}, {"text": "one huge networking implementation.", "start": 659.749, "duration": 2.28}, {"text": "As we\u2019ve talked about all series, abstraction\nallows computer scientists and engineers to", "start": 662.029, "duration": 4.06}, {"text": "be improving all these different levels of\nthe stack simultaneously, without being overwhelmed", "start": 666.089, "duration": 4.511}, {"text": "by the full complexity.", "start": 670.6, "duration": 1.409}, {"text": "And amazingly, we\u2019re not quite done yet\u2026", "start": 672.009, "duration": 2.151}, {"text": "The OSI model has two more layers, the Presentation\nLayer and the Application Layer, which include", "start": 674.16, "duration": 5.32}, {"text": "things like web browsers, Skype, HTML decoding,\nstreaming movies and more.", "start": 679.48, "duration": 4.32}, {"text": "Which we\u2019ll talk about next week.", "start": 683.8, "duration": 1.28}, {"text": "See you then.", "start": 685.2, "duration": 0.72}]