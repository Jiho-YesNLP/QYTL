[{"text": "This episode is brought to you by CuriosityStream.", "start": 3.14, "duration": 2.82}, {"text": "Hi, I\u2019m Carrie Anne and welcome to CrashCourse\nComputer Science!", "start": 5.96, "duration": 2.67}, {"text": "So far, for most of this series, we\u2019ve focused\non hardware -- the physical components of", "start": 8.63, "duration": 3.89}, {"text": "computing -- things like: electricity and\ncircuits, registers and RAM, ALUs and CPUs.", "start": 12.53, "duration": 5.05}, {"text": "But programming at the hardware level is cumbersome\nand inflexible, so programmers wanted a more", "start": 17.58, "duration": 3.81}, {"text": "versatile way to program computers - what\nyou might call a \u201csofter\u201d medium.", "start": 21.39, "duration": 3.459}, {"text": "That\u2019s right, we\u2019re going to talk about\nSoftware!", "start": 24.849, "duration": 2.591}, {"text": "INTRO", "start": 27.44, "duration": 9.2}, {"text": "In episode 8, we walked through a simple program\nfor the CPU we designed.", "start": 36.65, "duration": 3.58}, {"text": "The very first instruction to be executed,\nthe one at memory address 0, was 0010 1110.", "start": 40.23, "duration": 6.06}, {"text": "As we discussed, the first four bits of an\ninstruction is the operation code, or OPCODE", "start": 46.29, "duration": 4.51}, {"text": "for short.", "start": 50.8, "duration": 1.0}, {"text": "On our hypothetical CPU, 0010 indicated a\nLOAD_A instruction -- which moves a value", "start": 51.8, "duration": 5.41}, {"text": "from memory into Register A.", "start": 57.21, "duration": 1.96}, {"text": "The second set of four bits defines the memory\nlocation, in this case, 1110, which is 14", "start": 59.17, "duration": 5.66}, {"text": "in decimal.", "start": 64.83, "duration": 1.0}, {"text": "So what these eight numbers really mean is\n\u201cLOAD Address 14 into Register A\u201d.", "start": 65.83, "duration": 4.01}, {"text": "We\u2019re just using two different languages.", "start": 69.84, "duration": 2.02}, {"text": "You can think of it like English and Morse\nCode.", "start": 71.86, "duration": 2.24}, {"text": "\u201cHello\u201d and \u201c.... . .-.. .-.. ---\u201d mean\nthe same thing -- hello! -- they\u2019re just", "start": 74.1, "duration": 5.04}, {"text": "encoded differently.", "start": 79.14, "duration": 1.43}, {"text": "English and Morse Code also have different\nlevels of complexity.", "start": 80.57, "duration": 2.93}, {"text": "English has 26 different letters in its alphabet\nand way more possible sounds.", "start": 83.5, "duration": 4.58}, {"text": "Morse only has dots and dashes.", "start": 88.08, "duration": 1.63}, {"text": "But, they can convey the same information,\nand computer languages are similar.", "start": 89.71, "duration": 4.19}, {"text": "As we've seen, computer hardware can only\nhandle raw, binary instructions.", "start": 93.9, "duration": 3.67}, {"text": "This is the \u201clanguage\u201d computer processors\nnatively speak.", "start": 97.57, "duration": 3.26}, {"text": "In fact, it\u2019s the only language they\u2019re\nable to speak.", "start": 100.83, "duration": 2.46}, {"text": "It\u2019s called Machine Language or Machine\nCode.", "start": 103.29, "duration": 2.61}, {"text": "In the early days of computing, people had\nto write entire programs in machine code.", "start": 105.9, "duration": 3.94}, {"text": "More specifically, they\u2019d first write a\nhigh-level version of a program on paper,", "start": 109.85, "duration": 3.65}, {"text": "in English, for example...", "start": 113.51, "duration": 2.0}, {"text": "\u201cretrieve the next sale from memory, then\nadd this to the running total for the day,", "start": 115.51, "duration": 3.8}, {"text": "week and year, then calculate any tax to be\nadded\u201d", "start": 119.31, "duration": 2.73}, {"text": "...and so on.", "start": 122.04, "duration": 1.08}, {"text": "An informal, high-level description of a program\nlike this is called Pseudo-Code.", "start": 123.12, "duration": 3.56}, {"text": "Then, when the program was all figured out\non paper, they\u2019d painstakingly expand and", "start": 126.68, "duration": 4.049}, {"text": "translate it into binary machine code by hand,\nusing things like opcode tables.", "start": 130.729, "duration": 4.381}, {"text": "After the translation was complete, the program\ncould be fed into the computer and run.", "start": 135.11, "duration": 4.04}, {"text": "As you might imagine, people quickly got fed\nup with this process.", "start": 139.15, "duration": 2.55}, {"text": "So, by the late 1940s and into the 50s, programmers\nhad developed slightly higher-level languages", "start": 141.7, "duration": 5.119}, {"text": "that were more human-readable.", "start": 146.82, "duration": 1.72}, {"text": "Opcodes were given simple names, called mnemonics,\nwhich were followed by operands, to form instructions.", "start": 148.54, "duration": 5.18}, {"text": "So instead of having to write instructions\nas a bunch of 1\u2019s and 0\u2019s, programmers", "start": 153.72, "duration": 4.04}, {"text": "could write something like \u201cLOAD_A 14\u201d.", "start": 157.76, "duration": 2.48}, {"text": "We used this mnemonic in Episode 8 because\nit\u2019s so much easier to understand!", "start": 160.24, "duration": 3.6}, {"text": "Of course, a CPU has no idea what \u201cLOAD_A\n14\u201d is.", "start": 163.84, "duration": 3.04}, {"text": "It doesn\u2019t understand text-based language,\nonly binary.", "start": 166.88, "duration": 2.63}, {"text": "And so programmers came up with a clever trick.", "start": 169.51, "duration": 1.909}, {"text": "They created reusable helper programs, in\nbinary, that read in text-based instructions,", "start": 171.419, "duration": 4.911}, {"text": "and assemble them into the corresponding binary\ninstructions automatically.", "start": 176.33, "duration": 3.73}, {"text": "This program is called -- you guessed it -- an\nAssembler.", "start": 180.06, "duration": 2.849}, {"text": "It reads in a program written in an Assembly\nLanguage and converts it to native machine", "start": 182.909, "duration": 4.111}, {"text": "code.", "start": 187.02, "duration": 0.5}, {"text": "\u201cLOAD_A 14\u201d is one example of an assembly\ninstruction.", "start": 187.52, "duration": 2.98}, {"text": "Over time, Assemblers gained new features\nthat made programming even easier.", "start": 190.5, "duration": 4.34}, {"text": "One nifty feature is automatically figuring\nout JUMP addresses.", "start": 194.84, "duration": 3.26}, {"text": "This was an example program I used in episode\n8:Notice how our JUMP NEGATIVE instruction", "start": 198.11, "duration": 4.169}, {"text": "jumps to address 5, and our regular JUMP goes\nto address 2.", "start": 202.279, "duration": 3.421}, {"text": "The problem is, if we add more code to the\nbeginning of this program, all of the addresses", "start": 205.7, "duration": 3.759}, {"text": "would change.", "start": 209.459, "duration": 1.0}, {"text": "That\u2019s a huge pain if you ever want to update\nyour program!", "start": 210.459, "duration": 2.46}, {"text": "And so an assembler does away with raw jump\naddresses, and lets you insert little labels", "start": 212.919, "duration": 4.22}, {"text": "that can be jumped to.", "start": 217.139, "duration": 1.0}, {"text": "When this program is passed into the assembler,\nit does the work of figuring out all of the", "start": 218.139, "duration": 3.341}, {"text": "jump addresses.", "start": 221.48, "duration": 1.219}, {"text": "Now the programmer can focus more on programming\nand less on the underlying mechanics under", "start": 222.7, "duration": 3.62}, {"text": "the hood enabling more sophisticated things\nto be built by hiding unnecessary complexity.", "start": 226.32, "duration": 5.16}, {"text": "As we\u2019ve done many times in this series,\nwe\u2019re once again moving up another level", "start": 231.52, "duration": 3.759}, {"text": "of abstraction.", "start": 235.279, "duration": 1.22}, {"text": "A NEW LEVEL OF ABSTRACTION!", "start": 236.5, "duration": 5.88}, {"text": "However, even with nifty assembler features\nlike auto-linking JUMPs to labels, Assembly", "start": 242.38, "duration": 4.9}, {"text": "Languages are still a thin veneer over machine\ncode.", "start": 247.29, "duration": 2.479}, {"text": "In general, each assembly language instruction\nconverts directly to a corresponding machine", "start": 249.769, "duration": 4.431}, {"text": "instruction \u2013 a one-to-one mapping \u2013 so\nit\u2019s inherently tied to the underlying hardware.", "start": 254.2, "duration": 4.64}, {"text": "And the assembler still forces programmers\nto think about which registers and memory", "start": 258.84, "duration": 3.56}, {"text": "locations they will use.", "start": 262.4, "duration": 1.739}, {"text": "If you suddenly needed an extra value, you\nmight have to change a lot of code to fit", "start": 264.139, "duration": 3.671}, {"text": "it in.", "start": 267.81, "duration": 1.0}, {"text": "Let\u2019s go to the Thought Bubble.", "start": 268.81, "duration": 1.099}, {"text": "This problem did not escape Dr. Grace Hopper.", "start": 269.909, "duration": 2.451}, {"text": "As a US naval officer, she was one of the\nfirst programmers on the Harvard Mark 1 computer,", "start": 272.36, "duration": 4.7}, {"text": "which we talked about in Episode 2.", "start": 277.06, "duration": 1.74}, {"text": "This was a colossal, electro-mechanical beast completed in 1944 as part of the allied war effort.", "start": 278.8, "duration": 5.32}, {"text": "Programs were stored and fed into the computer\non punched paper tape.", "start": 284.16, "duration": 3.32}, {"text": "By the way, as you can see, they \u201cpatched\u201d\nsome bugs in this program by literally putting", "start": 287.48, "duration": 4.36}, {"text": "patches of paper over the holes on the punch\ntape.", "start": 291.84, "duration": 2.72}, {"text": "The Mark 1\u2019s instruction set was so primitive,\nthere weren\u2019t even JUMP instructions.", "start": 294.56, "duration": 4.31}, {"text": "To create code that repeated the same operation\nmultiple times, you\u2019d tape the two ends", "start": 298.87, "duration": 4.019}, {"text": "of the punched tape together, creating a physical\nloop.", "start": 302.889, "duration": 2.941}, {"text": "In other words, programming the Mark 1 was\nkind of a nightmare!", "start": 305.83, "duration": 3.08}, {"text": "After the war, Hopper continued to work at\nthe forefront of computing.", "start": 308.91, "duration": 3.259}, {"text": "To unleash the potential of computers, she\ndesigned a high-level programming language", "start": 312.169, "duration": 3.601}, {"text": "called \u201cArithmetic Language Version 0\u201d,\nor A-0 for short.", "start": 315.77, "duration": 3.81}, {"text": "Assembly languages have direct, one-to-one\nmapping to machine instructions.", "start": 319.58, "duration": 3.8}, {"text": "But, a single line of a high-level programming\nlanguage might result in dozens of instructions", "start": 323.389, "duration": 4.191}, {"text": "being executed by the CPU.", "start": 327.59, "duration": 1.829}, {"text": "To perform this complex translation, Hopper\nbuilt the first compiler in 1952.", "start": 329.419, "duration": 4.641}, {"text": "This is a specialized program that transforms\n\u201csource\u201d code written in a programming", "start": 334.06, "duration": 4.349}, {"text": "language into a low-level language, like assembly\nor the binary \u201cmachine code\u201d that the", "start": 338.409, "duration": 4.341}, {"text": "CPU can directly process.", "start": 342.75, "duration": 1.66}, {"text": "Thanks, Thought Bubble.", "start": 344.41, "duration": 1.31}, {"text": "So, despite the promise of easier programming,\nmany people were skeptical of Hopper\u2019s idea.", "start": 345.72, "duration": 4.71}, {"text": "She once said, \u201cI had a running compiler\nand nobody would touch it.", "start": 350.43, "duration": 3.57}, {"text": "\u2026 they carefully told me, computers could\nonly do arithmetic; they could not do programs.\u201d", "start": 354.0, "duration": 4.12}, {"text": "But the idea was a good one, and soon many\nefforts were underway to craft new programming", "start": 358.12, "duration": 4.96}, {"text": "languages -- today there are hundreds!", "start": 363.08, "duration": 1.89}, {"text": "Sadly, there are no surviving examples of\nA-0 code, so we\u2019ll use Python, a modern", "start": 364.97, "duration": 4.55}, {"text": "programming language, as an example.", "start": 369.52, "duration": 1.44}, {"text": "Let\u2019s say we want to add two numbers and\nsave that value.", "start": 370.96, "duration": 3.3}, {"text": "Remember, in assembly code, we had to fetch\nvalues from memory, deal with registers, and", "start": 374.26, "duration": 4.06}, {"text": "other low-level details.", "start": 378.32, "duration": 1.0}, {"text": "But this same program can be written in python\nlike so:", "start": 379.32, "duration": 2.899}, {"text": "Notice how there are no registers or memory\nlocations to deal with -- the compiler takes", "start": 382.219, "duration": 3.721}, {"text": "care of that stuff, abstracting away a lot\nof low-level and unnecessary complexity.", "start": 385.94, "duration": 4.03}, {"text": "The programmer just creates abstractions for\nneeded memory locations, known as variables,", "start": 389.97, "duration": 4.629}, {"text": "and gives them names.", "start": 394.599, "duration": 1.07}, {"text": "So now we can just take our two numbers, store\nthem in variables we give names to -- in this", "start": 395.669, "duration": 4.701}, {"text": "case, I picked a and b but those variables\ncould be anything - and then add those together,", "start": 400.37, "duration": 4.74}, {"text": "saving the result in c, another variable I\ncreated.", "start": 405.11, "duration": 2.66}, {"text": "It might be that the compiler assigns Register\nA under the hood to store the value in a,", "start": 407.77, "duration": 4.29}, {"text": "but I don\u2019t need to know about it!", "start": 412.06, "duration": 2.43}, {"text": "Out of sight, out of mind!", "start": 414.49, "duration": 1.139}, {"text": "It was an important historical milestone,\nbut A-0 and its later variants weren\u2019t widely used.", "start": 415.629, "duration": 5.391}, {"text": "FORTRAN, derived from \"Formula Translation\",\nwas released by IBM a few years later, in", "start": 421.12, "duration": 4.98}, {"text": "1957, and came to dominate early computer\nprogramming.", "start": 426.1, "duration": 2.8}, {"text": "John Backus, the FORTRAN project director,\nsaid: \"Much of my work has come from being", "start": 428.919, "duration": 4.03}, {"text": "lazy.", "start": 432.949, "duration": 1.0}, {"text": "I didn't like writing programs, and so ... I\nstarted work on a programming system to make", "start": 433.949, "duration": 3.811}, {"text": "it easier to write programs.\"", "start": 437.76, "duration": 1.659}, {"text": "You know, typical lazy person.", "start": 439.419, "duration": 1.611}, {"text": "They\u2019re always creating their own programming\nsystems.", "start": 441.03, "duration": 2.52}, {"text": "Anyway, on average, programs written in FORTRAN\nwere 20 times shorter than equivalent handwritten", "start": 443.55, "duration": 4.369}, {"text": "assembly code.", "start": 447.919, "duration": 1.0}, {"text": "Then the FORTRAN Compiler would translate\nand expand that into native machine code.", "start": 448.919, "duration": 4.03}, {"text": "The community was skeptical that the performance\nwould be as good as hand written code, but", "start": 452.949, "duration": 3.791}, {"text": "the fact that programmers could write more\ncode more quickly, made it an easy choice", "start": 456.74, "duration": 3.729}, {"text": "economically: trading a small increase in\ncomputation time for a significant decrease", "start": 460.469, "duration": 4.621}, {"text": "in programmer time.", "start": 465.09, "duration": 1.129}, {"text": "Of course, IBM was in the business of selling\ncomputers, and so initially, FORTRAN code", "start": 466.219, "duration": 4.04}, {"text": "could only be compiled and run on IBM computers.", "start": 470.259, "duration": 2.78}, {"text": "And most programing languages and compilers\nof the 1950s could only run on a single type", "start": 473.039, "duration": 4.13}, {"text": "of computer.", "start": 477.169, "duration": 1.0}, {"text": "So, if you upgraded your computer, you\u2019d\noften have to re-write all the code too!", "start": 478.169, "duration": 4.451}, {"text": "In response, computer experts from industry,\nacademia and government formed a consortium", "start": 482.62, "duration": 3.629}, {"text": "in 1959 -- the Committee on Data Systems Languages,\nadvised by our friend Grace Hopper -- to guide", "start": 486.249, "duration": 5.861}, {"text": "the development of a common programming language\nthat could be used across different machines.", "start": 492.11, "duration": 3.889}, {"text": "The result was the high-level, easy to use,\nCommon Business-Oriented Language, or COBOL", "start": 496.0, "duration": 4.46}, {"text": "for short.", "start": 500.46, "duration": 0.7}, {"text": "To deal with different underlying hardware,\neach computing architecture needed its own", "start": 501.16, "duration": 3.68}, {"text": "COBOL compiler.", "start": 504.96, "duration": 0.94}, {"text": "But critically, these compilers could all\naccept the same COBOL source code, no matter", "start": 505.9, "duration": 4.56}, {"text": "what computer it was run on.", "start": 510.48, "duration": 1.32}, {"text": "This notion is called write once, run anywhere.", "start": 511.8, "duration": 2.09}, {"text": "It\u2019s true of most programming languages\ntoday, a benefit of moving away from assembly", "start": 513.89, "duration": 4.07}, {"text": "and machine code, which is still CPU specific.", "start": 517.96, "duration": 2.24}, {"text": "The biggest impact of all this was reducing\ncomputing\u2019s barrier to entry.", "start": 520.2, "duration": 3.9}, {"text": "Before high level programming languages existed,\nit was a realm exclusive to computer experts", "start": 524.1, "duration": 4.68}, {"text": "and enthusiasts.", "start": 528.78, "duration": 1.0}, {"text": "And it was often their full time profession.", "start": 529.78, "duration": 2.04}, {"text": "But now, scientists, engineers, doctors, economists,\nteachers, and many others could incorporate", "start": 531.82, "duration": 5.02}, {"text": "computation into their work .", "start": 536.85, "duration": 1.45}, {"text": "Thanks to these languages, computing went\nfrom a cumbersome and esoteric discipline", "start": 538.3, "duration": 3.75}, {"text": "to a general purpose and accessible tool.", "start": 542.05, "duration": 2.08}, {"text": "At the same time, abstraction in programming\nallowed those computer experts \u2013 now \u201cprofessional", "start": 544.13, "duration": 4.86}, {"text": "programmers\u201d \u2013 to create increasingly\nsophisticated programs, which would have taken", "start": 548.99, "duration": 3.89}, {"text": "millions, tens of millions, or even more lines\nof assembly code.", "start": 552.88, "duration": 3.23}, {"text": "Now, this history didn\u2019t end in 1959.", "start": 556.11, "duration": 2.37}, {"text": "In fact, a golden era in programming language\ndesign jump started, evolving in lockstep", "start": 558.48, "duration": 4.46}, {"text": "with dramatic advances in computer hardware.", "start": 562.94, "duration": 2.29}, {"text": "In the 1960s, we had languages like ALGOL,\nLISP and BASIC.", "start": 565.23, "duration": 3.58}, {"text": "In the 70\u2019s: Pascal, C and Smalltalk were\nreleased.", "start": 568.81, "duration": 2.78}, {"text": "The 80s gave us C++, Objective-C, and Perl.", "start": 571.59, "duration": 2.69}, {"text": "And the 90\u2019s: python, ruby, and Java.", "start": 574.28, "duration": 2.37}, {"text": "And the new millennium has seen the rise of\nSwift, C#, and Go - not to be confused with", "start": 576.65, "duration": 4.11}, {"text": "Let it Go and Pokemon Go.", "start": 580.76, "duration": 1.89}, {"text": "Anyway, some of these might sound familiar\n-- many are still around today.", "start": 582.65, "duration": 3.29}, {"text": "It\u2019s extremely likely that the web browser\nyou\u2019re using right now was written in C++", "start": 585.94, "duration": 3.86}, {"text": "or Objective-C.", "start": 589.8, "duration": 1.0}, {"text": "That list I just gave is the tip of the iceberg.", "start": 590.8, "duration": 2.8}, {"text": "And languages with fancy, new features are\nproposed all the time.", "start": 593.6, "duration": 2.94}, {"text": "Each new language attempts to leverage new\nand clever abstractions to make some aspect", "start": 596.54, "duration": 3.5}, {"text": "of programming easier or more powerful, or\ntake advantage of emerging technologies and", "start": 600.05, "duration": 3.78}, {"text": "platforms, so that more people can do more\namazing things, more quickly.", "start": 603.83, "duration": 3.87}, {"text": "Many consider the holy grail of programming\nto be the use of \u201cplain ol\u2019 English\u201d,", "start": 607.7, "duration": 2.99}, {"text": "where you can literally just speak what you\nwant the computer to do, it figures it out,", "start": 610.69, "duration": 3.98}, {"text": "and executes it.", "start": 614.67, "duration": 1.0}, {"text": "This kind of intelligent system is science\nfiction\u2026 for now.", "start": 615.67, "duration": 2.86}, {"text": "And fans of 2001: A Space Odyssey may be okay\nwith that.", "start": 618.53, "duration": 3.46}, {"text": "Now that you know all about programming languages,\nwe\u2019re going to deep dive for the next couple", "start": 621.99, "duration": 3.38}, {"text": "of episodes, and we\u2019ll continue to build\nyour understanding of how programming languages,", "start": 625.37, "duration": 4.58}, {"text": "and the software they create, are used to\ndo cool and unbelievable things.", "start": 629.95, "duration": 3.64}, {"text": "See you next week.", "start": 633.59, "duration": 1.2}, {"text": "Hey guys, this week\u2019s episode was brought\nto you by CuriosityStream which is a streaming", "start": 634.79, "duration": 4.32}, {"text": "service full of documentaries and non\u00adfiction\ntitles from some really great filmmakers,", "start": 639.11, "duration": 4.88}, {"text": "including exclusive originals.", "start": 643.99, "duration": 1.67}, {"text": "I just watched a great series called \u201cDigits\u201d\nhosted by our friend Derek Muller.", "start": 645.66, "duration": 3.64}, {"text": "It\u2019s all about the Internet - from its origins,\nto the proliferation of the Internet of Things,", "start": 649.3, "duration": 4.599}, {"text": "to ethical, or white hat, hacking.", "start": 653.899, "duration": 2.091}, {"text": "And it even includes some special guest appearances\u2026\nlike that John Green guy you keep mentioning", "start": 655.99, "duration": 4.34}, {"text": "in the comments.", "start": 660.33, "duration": 1.09}, {"text": "And Curiosity Stream offers unlimited access\nstarting at $2.99 a month, and for you guys,", "start": 661.42, "duration": 5.67}, {"text": "the first two months are free if you sign\nup at curiositystream.com/crashcourse", "start": 667.09, "duration": 5.21}, {"text": "and use the promo code \"crash course\" during the sign-up process.", "start": 672.32, "duration": 3.58}]