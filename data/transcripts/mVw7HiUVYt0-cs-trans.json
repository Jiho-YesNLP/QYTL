[{"text": "hello everyone", "start": 6.16, "duration": 4.0}, {"text": "welcome back to this illustrious journey", "start": 7.919, "duration": 4.001}, {"text": "of computer organization", "start": 10.16, "duration": 4.88}, {"text": "and architecture so as promised earlier", "start": 11.92, "duration": 5.52}, {"text": "in this session we will solve numerical", "start": 15.04, "duration": 4.96}, {"text": "problems on associative mapping", "start": 17.44, "duration": 5.12}, {"text": "now for the sake of lucid understanding", "start": 20.0, "duration": 3.68}, {"text": "in today's session", "start": 22.56, "duration": 3.6}, {"text": "we are going to use similar example", "start": 23.68, "duration": 4.16}, {"text": "problems like we used", "start": 26.16, "duration": 4.0}, {"text": "in direct memory mapping and it's my", "start": 27.84, "duration": 3.92}, {"text": "recommendation to all of you", "start": 30.16, "duration": 3.6}, {"text": "to do a comparative study on the", "start": 31.76, "duration": 3.84}, {"text": "different outcomes of the same data", "start": 33.76, "duration": 2.56}, {"text": "provided", "start": 35.6, "duration": 3.68}, {"text": "only after this session so without any", "start": 36.32, "duration": 4.239}, {"text": "further ado", "start": 39.28, "duration": 3.76}, {"text": "let's get to learning consider this", "start": 40.559, "duration": 3.68}, {"text": "example number one", "start": 43.04, "duration": 3.28}, {"text": "here main memory size is given as four", "start": 44.239, "duration": 4.881}, {"text": "gigabytes cache size is one megabytes", "start": 46.32, "duration": 4.96}, {"text": "block size is four kilobytes and word", "start": 49.12, "duration": 3.68}, {"text": "size is one byte", "start": 51.28, "duration": 3.279}, {"text": "so first we need to find out the", "start": 52.8, "duration": 3.68}, {"text": "physical address bits plate", "start": 54.559, "duration": 4.721}, {"text": "in terms of associative mapping and", "start": 56.48, "duration": 3.52}, {"text": "thereafter", "start": 59.28, "duration": 2.72}, {"text": "we need to figure out the tag directory", "start": 60.0, "duration": 3.44}, {"text": "size as well", "start": 62.0, "duration": 3.68}, {"text": "now we already know when the word size", "start": 63.44, "duration": 3.84}, {"text": "is mentioned as one byte", "start": 65.68, "duration": 3.6}, {"text": "it clearly signifies that it's a byte", "start": 67.28, "duration": 3.44}, {"text": "addressable memory", "start": 69.28, "duration": 3.92}, {"text": "so let's try to solve it now the main", "start": 70.72, "duration": 5.12}, {"text": "memory size is given as 4 gigabytes and", "start": 73.2, "duration": 3.12}, {"text": "since", "start": 75.84, "duration": 3.2}, {"text": "it's a byte reducible memory we need to", "start": 76.32, "duration": 4.479}, {"text": "convert this entire unit", "start": 79.04, "duration": 4.719}, {"text": "in terms of bytes so 4 is nothing but 2", "start": 80.799, "duration": 3.841}, {"text": "square", "start": 83.759, "duration": 3.281}, {"text": "and gigabytes we already know it's 2 to", "start": 84.64, "duration": 4.64}, {"text": "the power 30 in terms of byte", "start": 87.04, "duration": 5.119}, {"text": "which gives us 2 to the power 2 plus 30", "start": 89.28, "duration": 4.64}, {"text": "that is 2 to the power 32", "start": 92.159, "duration": 3.92}, {"text": "in terms of by so the size of the main", "start": 93.92, "duration": 4.4}, {"text": "memory in terms of byte is 2 to the", "start": 96.079, "duration": 3.761}, {"text": "power 32", "start": 98.32, "duration": 3.68}, {"text": "therefore the number of physical address", "start": 99.84, "duration": 3.44}, {"text": "bits is going to be", "start": 102.0, "duration": 4.479}, {"text": "log 2 to the power 32 base 2 that is", "start": 103.28, "duration": 6.72}, {"text": "32 bits so 32 bits will be used for", "start": 106.479, "duration": 6.081}, {"text": "physical address now the block size is", "start": 110.0, "duration": 5.04}, {"text": "given as 4 kilobytes and 4 is 2 to the", "start": 112.56, "duration": 4.32}, {"text": "power 2 that is 2 square", "start": 115.04, "duration": 3.679}, {"text": "and kilobyte is nothing but 2 to the", "start": 116.88, "duration": 3.839}, {"text": "power 10 in terms of byte", "start": 118.719, "duration": 4.72}, {"text": "hence the block size in terms of byte is", "start": 120.719, "duration": 4.321}, {"text": "2 to the power 12.", "start": 123.439, "duration": 4.481}, {"text": "therefore the block offset will be log 2", "start": 125.04, "duration": 5.199}, {"text": "to the power 12 base 2 that is", "start": 127.92, "duration": 4.959}, {"text": "12 bits now in order to find out the", "start": 130.239, "duration": 4.801}, {"text": "number of blocks inside the main memory", "start": 132.879, "duration": 4.161}, {"text": "we need to divide the main memory size", "start": 135.04, "duration": 4.0}, {"text": "that is 2 to the power 32 in terms of", "start": 137.04, "duration": 2.8}, {"text": "byte", "start": 139.04, "duration": 3.04}, {"text": "by the block size that is 2 to the power", "start": 139.84, "duration": 3.92}, {"text": "12 which results in", "start": 142.08, "duration": 4.96}, {"text": "2 to the power 20 because 32 minus 12", "start": 143.76, "duration": 7.52}, {"text": "is 20. therefore log 2 to the power 20", "start": 147.04, "duration": 5.68}, {"text": "base 2 that means", "start": 151.28, "duration": 4.48}, {"text": "20 bits will be used for block number", "start": 152.72, "duration": 4.48}, {"text": "now since we are dealing with", "start": 155.76, "duration": 3.839}, {"text": "associative mapping we already know the", "start": 157.2, "duration": 4.48}, {"text": "block number bits are also", "start": 159.599, "duration": 5.041}, {"text": "the tag bits so the pa split is going to", "start": 161.68, "duration": 3.36}, {"text": "be", "start": 164.64, "duration": 2.64}, {"text": "32 bits for the physical address and", "start": 165.04, "duration": 4.479}, {"text": "from those 32 bits the least significant", "start": 167.28, "duration": 4.319}, {"text": "12 bits are going to be used as", "start": 169.519, "duration": 4.8}, {"text": "block offset and the remaining 20 bits", "start": 171.599, "duration": 5.121}, {"text": "are there for the tag bits", "start": 174.319, "duration": 4.721}, {"text": "so this is the answer to our first", "start": 176.72, "duration": 3.36}, {"text": "question", "start": 179.04, "duration": 3.44}, {"text": "now coming to the tag directory size we", "start": 180.08, "duration": 3.2}, {"text": "already know", "start": 182.48, "duration": 3.759}, {"text": "a tag directory has as many entries as", "start": 183.28, "duration": 5.36}, {"text": "there are lines inside the cache", "start": 186.239, "duration": 4.64}, {"text": "so let's find out how many lines are", "start": 188.64, "duration": 4.64}, {"text": "there inside the caches specified in the", "start": 190.879, "duration": 4.161}, {"text": "problem statement first", "start": 193.28, "duration": 3.679}, {"text": "now the cache size is given as 1", "start": 195.04, "duration": 3.6}, {"text": "megabytes which is", "start": 196.959, "duration": 4.721}, {"text": "1 multiplied by 2 to the power 20 that", "start": 198.64, "duration": 4.48}, {"text": "is 2 to the power 20", "start": 201.68, "duration": 4.32}, {"text": "in terms of byte therefore the cache", "start": 203.12, "duration": 5.28}, {"text": "size in terms of byte is 2 to the power", "start": 206.0, "duration": 3.36}, {"text": "20.", "start": 208.4, "duration": 2.8}, {"text": "now we already know the block or the", "start": 209.36, "duration": 4.0}, {"text": "line size is 2 to the power 12", "start": 211.2, "duration": 4.48}, {"text": "in terms of bytes therefore the number", "start": 213.36, "duration": 4.64}, {"text": "of lines inside the cache can be found", "start": 215.68, "duration": 4.32}, {"text": "out by dividing the cache size which is", "start": 218.0, "duration": 4.319}, {"text": "2 to the power 20 in terms of byte", "start": 220.0, "duration": 4.879}, {"text": "by the block or the line size which is 2", "start": 222.319, "duration": 3.761}, {"text": "to the power 12", "start": 224.879, "duration": 3.521}, {"text": "which results in 2 to the power 8", "start": 226.08, "duration": 3.04}, {"text": "because", "start": 228.4, "duration": 4.64}, {"text": "20 minus 12 is 8. therefore", "start": 229.12, "duration": 6.16}, {"text": "the tag directory will have 2 to the", "start": 233.04, "duration": 3.6}, {"text": "power 8 entries", "start": 235.28, "duration": 3.92}, {"text": "and with each entry 20 bits of tag", "start": 236.64, "duration": 4.879}, {"text": "information will be associated", "start": 239.2, "duration": 4.64}, {"text": "therefore the tag directory size is", "start": 241.519, "duration": 5.601}, {"text": "nothing but 5120 bits", "start": 243.84, "duration": 5.28}, {"text": "and that is the answer to our second", "start": 247.12, "duration": 3.039}, {"text": "question", "start": 249.12, "duration": 3.119}, {"text": "now consider this example number two", "start": 250.159, "duration": 4.321}, {"text": "here main memory size is given as 16", "start": 252.239, "duration": 3.28}, {"text": "gigabytes", "start": 254.48, "duration": 3.68}, {"text": "block size is 16 kilobytes and word size", "start": 255.519, "duration": 3.761}, {"text": "is one byte", "start": 258.16, "duration": 3.44}, {"text": "and we are again being asked about first", "start": 259.28, "duration": 4.479}, {"text": "the physical address bit split", "start": 261.6, "duration": 5.44}, {"text": "and the tag directory size now by saying", "start": 263.759, "duration": 5.681}, {"text": "word size equals to one byte we already", "start": 267.04, "duration": 4.32}, {"text": "know it's a bite addressable memory", "start": 269.44, "duration": 4.24}, {"text": "so let's try to solve it now the main", "start": 271.36, "duration": 4.72}, {"text": "memory size is given as 16 gigabytes", "start": 273.68, "duration": 4.88}, {"text": "and 16 is nothing but 2 to the power 4", "start": 276.08, "duration": 4.559}, {"text": "and gigabytes is 2 to the power 30 in", "start": 278.56, "duration": 3.04}, {"text": "terms of byte", "start": 280.639, "duration": 3.12}, {"text": "therefore the main memory size in terms", "start": 281.6, "duration": 4.96}, {"text": "of bytes is 2 to the power 34", "start": 283.759, "duration": 4.561}, {"text": "now we can easily figure out the number", "start": 286.56, "duration": 3.359}, {"text": "of physical address bits which is", "start": 288.32, "duration": 2.24}, {"text": "nothing but", "start": 289.919, "duration": 4.0}, {"text": "34 so 34 bits in this case will be used", "start": 290.56, "duration": 4.96}, {"text": "as physical address", "start": 293.919, "duration": 3.441}, {"text": "now the block size is given as 16", "start": 295.52, "duration": 4.8}, {"text": "kilobytes and 16 is 2 to the power 4 and", "start": 297.36, "duration": 5.119}, {"text": "kilobyte is 2 to the power 10", "start": 300.32, "duration": 4.4}, {"text": "therefore the block size in terms of", "start": 302.479, "duration": 5.041}, {"text": "byte is 2 to the power 14.", "start": 304.72, "duration": 7.199}, {"text": "hence the block offset will be 14 bits", "start": 307.52, "duration": 6.239}, {"text": "now the number of main memory blocks can", "start": 311.919, "duration": 4.081}, {"text": "be found out by dividing the main memory", "start": 313.759, "duration": 2.72}, {"text": "size", "start": 316.0, "duration": 3.6}, {"text": "by the block size that is 2 to the power", "start": 316.479, "duration": 4.16}, {"text": "20", "start": 319.6, "duration": 4.96}, {"text": "because 34 minus 14 is nothing but 20", "start": 320.639, "duration": 5.521}, {"text": "and since we are dealing with fully", "start": 324.56, "duration": 3.76}, {"text": "associative memory mapping therefore the", "start": 326.16, "duration": 3.44}, {"text": "number of tag bits", "start": 328.32, "duration": 5.04}, {"text": "is 20 bits basically the entire block", "start": 329.6, "duration": 5.84}, {"text": "number bits are being used as", "start": 333.36, "duration": 4.96}, {"text": "tags so this is the physical address bit", "start": 335.44, "duration": 3.759}, {"text": "split", "start": 338.32, "duration": 3.68}, {"text": "where from the 34 bits physical address", "start": 339.199, "duration": 4.961}, {"text": "14 least significant bits are being used", "start": 342.0, "duration": 2.8}, {"text": "for the block", "start": 344.16, "duration": 3.12}, {"text": "offset and the remaining 20 bits are", "start": 344.8, "duration": 3.92}, {"text": "used for the tags", "start": 347.28, "duration": 3.919}, {"text": "and this is the answer to our first", "start": 348.72, "duration": 3.6}, {"text": "question", "start": 351.199, "duration": 2.72}, {"text": "now coming to the second part of the", "start": 352.32, "duration": 3.84}, {"text": "question we need to find out the tag", "start": 353.919, "duration": 3.28}, {"text": "directory size", "start": 356.16, "duration": 3.36}, {"text": "but in the previous example we found it", "start": 357.199, "duration": 3.601}, {"text": "out because", "start": 359.52, "duration": 3.6}, {"text": "we came to know about how many lines are", "start": 360.8, "duration": 4.08}, {"text": "there in the cache from the cache", "start": 363.12, "duration": 4.48}, {"text": "size now in this problem statement the", "start": 364.88, "duration": 4.4}, {"text": "cache size is missing", "start": 367.6, "duration": 3.84}, {"text": "and there is no way for us to find out", "start": 369.28, "duration": 4.8}, {"text": "the number of lines inside the cache", "start": 371.44, "duration": 5.12}, {"text": "therefore in these circumstances the tag", "start": 374.08, "duration": 5.44}, {"text": "directory size can't really be found out", "start": 376.56, "duration": 5.44}, {"text": "so do remember this the tag directory", "start": 379.52, "duration": 4.32}, {"text": "size can't really be found out", "start": 382.0, "duration": 4.16}, {"text": "if we don't know how many lines are", "start": 383.84, "duration": 4.0}, {"text": "there inside the cachet", "start": 386.16, "duration": 4.24}, {"text": "also if we don't know how many bits are", "start": 387.84, "duration": 3.44}, {"text": "being used", "start": 390.4, "duration": 4.16}, {"text": "in order to store the tag information", "start": 391.28, "duration": 5.52}, {"text": "alright people that was all for this", "start": 394.56, "duration": 3.04}, {"text": "session", "start": 396.8, "duration": 3.04}, {"text": "i believe you understood that solving", "start": 397.6, "duration": 4.319}, {"text": "numerical problems on associative", "start": 399.84, "duration": 2.639}, {"text": "mapping", "start": 401.919, "duration": 3.041}, {"text": "are comparatively easier than direct", "start": 402.479, "duration": 3.28}, {"text": "mapping", "start": 404.96, "duration": 3.359}, {"text": "the only thing to remember is apart from", "start": 405.759, "duration": 4.641}, {"text": "the least significant offset bits", "start": 408.319, "duration": 5.121}, {"text": "the remaining bits are used as the tags", "start": 410.4, "duration": 6.079}, {"text": "in case of fully associative mapping so", "start": 413.44, "duration": 4.72}, {"text": "now you all be the judge", "start": 416.479, "duration": 3.921}, {"text": "and do a comparative study keeping the", "start": 418.16, "duration": 4.56}, {"text": "numerical problems of session 9", "start": 420.4, "duration": 4.72}, {"text": "direct memory mapping solved examples", "start": 422.72, "duration": 3.759}, {"text": "alongside", "start": 425.12, "duration": 4.24}, {"text": "also don't forget to share your findings", "start": 426.479, "duration": 4.72}, {"text": "in the comment section", "start": 429.36, "duration": 3.92}, {"text": "so i hope to see you in the next one", "start": 431.199, "duration": 4.681}, {"text": "thank you all for watching", "start": 433.28, "duration": 2.78}, {"text": "[Music]", "start": 435.88, "duration": 2.35}, {"text": "[Applause]", "start": 436.06, "duration": 12.379}, {"text": "[Music]", "start": 438.23, "duration": 10.209}]