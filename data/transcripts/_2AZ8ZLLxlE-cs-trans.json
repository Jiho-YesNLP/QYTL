[{"text": "hello everyone", "start": 6.24, "duration": 4.88}, {"text": "welcome back till now we have seen quite", "start": 8.08, "duration": 5.2}, {"text": "a few numerical problems on direct", "start": 11.12, "duration": 3.28}, {"text": "memory mapping", "start": 13.28, "duration": 3.36}, {"text": "starting from the basics to the advanced", "start": 14.4, "duration": 3.28}, {"text": "ones", "start": 16.64, "duration": 3.76}, {"text": "well to be really honest all of them are", "start": 17.68, "duration": 3.28}, {"text": "pretty much", "start": 20.4, "duration": 3.44}, {"text": "basic actually the clearer the concepts", "start": 20.96, "duration": 4.72}, {"text": "the easier they seem", "start": 23.84, "duration": 4.4}, {"text": "anyway today we will get to know about", "start": 25.68, "duration": 4.32}, {"text": "how direct memory mapping is", "start": 28.24, "duration": 5.04}, {"text": "implemented at hardware level and this", "start": 30.0, "duration": 4.88}, {"text": "session will conclude with the", "start": 33.28, "duration": 2.48}, {"text": "discussion", "start": 34.88, "duration": 3.04}, {"text": "involving the limitations of direct", "start": 35.76, "duration": 3.44}, {"text": "memory mapping", "start": 37.92, "duration": 4.4}, {"text": "so let's get to learning", "start": 39.2, "duration": 5.6}, {"text": "in the last numerical problem that we", "start": 42.32, "duration": 3.12}, {"text": "solved", "start": 44.8, "duration": 2.88}, {"text": "using the starting address of the array", "start": 45.44, "duration": 4.639}, {"text": "we figured out the line number where the", "start": 47.68, "duration": 4.48}, {"text": "corresponding block was going to be", "start": 50.079, "duration": 2.8}, {"text": "located", "start": 52.16, "duration": 3.44}, {"text": "inside the cache especially in the", "start": 52.879, "duration": 4.081}, {"text": "direct memory mapping", "start": 55.6, "duration": 3.759}, {"text": "with the generated physical address the", "start": 56.96, "duration": 4.399}, {"text": "processor can go directly to the", "start": 59.359, "duration": 4.401}, {"text": "corresponding line number of cache", "start": 61.359, "duration": 4.321}, {"text": "now we already know about the tag", "start": 63.76, "duration": 3.92}, {"text": "directory don't we", "start": 65.68, "duration": 4.4}, {"text": "it contains as many entries as the line", "start": 67.68, "duration": 4.32}, {"text": "numbers in the cache", "start": 70.08, "duration": 3.92}, {"text": "and the most important part of every", "start": 72.0, "duration": 4.08}, {"text": "entry is the tag bits", "start": 74.0, "duration": 4.96}, {"text": "now why am i using the term most not", "start": 76.08, "duration": 3.6}, {"text": "only", "start": 78.96, "duration": 2.88}, {"text": "because we have already seen that some", "start": 79.68, "duration": 3.04}, {"text": "of the times", "start": 81.84, "duration": 3.44}, {"text": "few extra bits are also stored in the", "start": 82.72, "duration": 3.68}, {"text": "tag directory", "start": 85.28, "duration": 3.839}, {"text": "which helps in efficient computation so", "start": 86.4, "duration": 3.679}, {"text": "in other words", "start": 89.119, "duration": 3.521}, {"text": "with each cache a line there are tag", "start": 90.079, "duration": 3.201}, {"text": "bits", "start": 92.64, "duration": 2.56}, {"text": "of course specified by the processor", "start": 93.28, "duration": 4.56}, {"text": "itself associated to it", "start": 95.2, "duration": 5.36}, {"text": "generally the generated pa bit stack", "start": 97.84, "duration": 3.52}, {"text": "portion", "start": 100.56, "duration": 3.839}, {"text": "is matched with the tag bits associated", "start": 101.36, "duration": 4.24}, {"text": "to the cache line", "start": 104.399, "duration": 4.0}, {"text": "in that particular instance if they're", "start": 105.6, "duration": 3.6}, {"text": "equal", "start": 108.399, "duration": 4.241}, {"text": "it's a hit if not it's a mess", "start": 109.2, "duration": 5.84}, {"text": "an illustration will help us understand", "start": 112.64, "duration": 4.32}, {"text": "the concept lucidly", "start": 115.04, "duration": 4.0}, {"text": "suppose this is the generated physical", "start": 116.96, "duration": 3.28}, {"text": "address bits", "start": 119.04, "duration": 4.399}, {"text": "it's got six bits the first two are the", "start": 120.24, "duration": 4.239}, {"text": "tag bits", "start": 123.439, "duration": 3.761}, {"text": "and these are the line number bits", "start": 124.479, "duration": 3.681}, {"text": "therefore", "start": 127.2, "duration": 4.399}, {"text": "the cache has two square that is", "start": 128.16, "duration": 7.6}, {"text": "four lines and the least significant", "start": 131.599, "duration": 7.36}, {"text": "two bits are block offset consider", "start": 135.76, "duration": 6.479}, {"text": "this as an arbitrary situation now the", "start": 138.959, "duration": 5.521}, {"text": "tag bits are associated with every cache", "start": 142.239, "duration": 3.201}, {"text": "line", "start": 144.48, "duration": 3.92}, {"text": "generally these are kept inside the tag", "start": 145.44, "duration": 5.84}, {"text": "directory but for the sake of simplicity", "start": 148.4, "duration": 6.16}, {"text": "let's assume they are placed here only", "start": 151.28, "duration": 5.36}, {"text": "so the memory block present inside the", "start": 154.56, "duration": 3.84}, {"text": "cache line has kept", "start": 156.64, "duration": 5.36}, {"text": "its stacked beds here now the pa split", "start": 158.4, "duration": 5.68}, {"text": "is specific to each organization", "start": 162.0, "duration": 4.64}, {"text": "and once the organization is realized", "start": 164.08, "duration": 5.439}, {"text": "it's followed as a law within the system", "start": 166.64, "duration": 5.599}, {"text": "so our goal is to compare the generated", "start": 169.519, "duration": 3.44}, {"text": "pas", "start": 172.239, "duration": 3.601}, {"text": "tag bits with the tags with the cache", "start": 172.959, "duration": 3.761}, {"text": "aligns", "start": 175.84, "duration": 3.679}, {"text": "in order to do so we need two different", "start": 176.72, "duration": 5.12}, {"text": "types of combinational circuits", "start": 179.519, "duration": 5.761}, {"text": "the comparator and the multiplexer", "start": 181.84, "duration": 6.24}, {"text": "the line number bits will work as select", "start": 185.28, "duration": 4.8}, {"text": "lines for the multiplexers", "start": 188.08, "duration": 4.32}, {"text": "and all the tag bits of the same bit", "start": 190.08, "duration": 4.64}, {"text": "place will be given to the corresponding", "start": 192.4, "duration": 3.44}, {"text": "multiplexers", "start": 194.72, "duration": 4.72}, {"text": "as input number of multiplexing needed", "start": 195.84, "duration": 5.84}, {"text": "will be determined based on the number", "start": 199.44, "duration": 3.76}, {"text": "of tag bits", "start": 201.68, "duration": 3.839}, {"text": "and the type of the multiplexer that is", "start": 203.2, "duration": 3.44}, {"text": "whether to use", "start": 205.519, "duration": 5.121}, {"text": "221 or 421 or any other type will be", "start": 206.64, "duration": 4.879}, {"text": "determined", "start": 210.64, "duration": 2.8}, {"text": "based on the number of lines in the", "start": 211.519, "duration": 3.121}, {"text": "cache", "start": 213.44, "duration": 3.6}, {"text": "now the output of the multiplexers is", "start": 214.64, "duration": 4.4}, {"text": "fed into the comparator", "start": 217.04, "duration": 4.559}, {"text": "which is again chosen based on the tag", "start": 219.04, "duration": 3.6}, {"text": "bits", "start": 221.599, "duration": 3.681}, {"text": "i mean if the tag bit failed is of one", "start": 222.64, "duration": 3.599}, {"text": "bit", "start": 225.28, "duration": 4.319}, {"text": "one bit comparator is needed if it's two", "start": 226.239, "duration": 6.08}, {"text": "we should opt for two bit comparator and", "start": 229.599, "duration": 3.84}, {"text": "so on", "start": 232.319, "duration": 3.92}, {"text": "for this specific scenario we require a", "start": 233.439, "duration": 4.401}, {"text": "two bit comparator", "start": 236.239, "duration": 5.28}, {"text": "and two 421 multiplexers", "start": 237.84, "duration": 6.88}, {"text": "working in parallel now why so", "start": 241.519, "duration": 6.161}, {"text": "because as two bits are specified for", "start": 244.72, "duration": 4.32}, {"text": "the tag field", "start": 247.68, "duration": 4.639}, {"text": "also each multiplexer can read only a", "start": 249.04, "duration": 4.8}, {"text": "single bit place", "start": 252.319, "duration": 4.801}, {"text": "therefore two multiplexers as there are", "start": 253.84, "duration": 5.2}, {"text": "four lines in the cache a", "start": 257.12, "duration": 5.04}, {"text": "which are addressed by this two bit line", "start": 259.04, "duration": 4.32}, {"text": "number failed", "start": 262.16, "duration": 3.12}, {"text": "hence the configuration of the", "start": 263.36, "duration": 3.44}, {"text": "multiplexer is", "start": 265.28, "duration": 4.72}, {"text": "four 2 1. now coming to the comparator", "start": 266.8, "duration": 4.16}, {"text": "it's basically", "start": 270.0, "duration": 4.32}, {"text": "xnor gate because the xnor gate produces", "start": 270.96, "duration": 6.4}, {"text": "1 as output when the inputs have", "start": 274.32, "duration": 7.2}, {"text": "same values and produces 0 otherwise", "start": 277.36, "duration": 6.24}, {"text": "unlike the comparator that we study in", "start": 281.52, "duration": 3.52}, {"text": "digital electronics", "start": 283.6, "duration": 4.48}, {"text": "in this we are only interested whether", "start": 285.04, "duration": 5.84}, {"text": "both the inputs are equal or not", "start": 288.08, "duration": 5.52}, {"text": "if they are the output of the comparator", "start": 290.88, "duration": 3.52}, {"text": "is 1", "start": 293.6, "duration": 4.319}, {"text": "indicating cache hit if not the output", "start": 294.4, "duration": 4.48}, {"text": "is 0", "start": 297.919, "duration": 4.401}, {"text": "which indicates miss", "start": 298.88, "duration": 6.56}, {"text": "so if there are n tag bits and l lines", "start": 302.32, "duration": 4.64}, {"text": "in the cache", "start": 305.44, "duration": 5.199}, {"text": "n l 2 1 multiplexers will be used which", "start": 306.96, "duration": 5.679}, {"text": "will work in parallel", "start": 310.639, "duration": 5.201}, {"text": "also a single n-bit comparator will be", "start": 312.639, "duration": 4.241}, {"text": "needed", "start": 315.84, "duration": 3.68}, {"text": "therefore time to find out whether it's", "start": 316.88, "duration": 3.68}, {"text": "a cache a hit", "start": 319.52, "duration": 4.16}, {"text": "or miss or in technical terms the hit", "start": 320.56, "duration": 4.24}, {"text": "latency", "start": 323.68, "duration": 4.32}, {"text": "is time taken by one multiplexer", "start": 324.8, "duration": 6.72}, {"text": "now y1 why not all n multiplexers", "start": 328.0, "duration": 6.72}, {"text": "because they are working simultaneously", "start": 331.52, "duration": 7.6}, {"text": "plus time taken by the n-bit comparator", "start": 334.72, "duration": 6.96}, {"text": "now in numerical problems usually the", "start": 339.12, "duration": 3.44}, {"text": "t-marks", "start": 341.68, "duration": 3.68}, {"text": "is neglected as the time taken by the", "start": 342.56, "duration": 4.16}, {"text": "n-bit comparator", "start": 345.36, "duration": 4.32}, {"text": "is very large compared to the time taken", "start": 346.72, "duration": 4.56}, {"text": "by the multiplexer", "start": 349.68, "duration": 3.92}, {"text": "in our later discussions i will show you", "start": 351.28, "duration": 3.52}, {"text": "that solving", "start": 353.6, "duration": 3.039}, {"text": "another interesting previous year", "start": 354.8, "duration": 3.04}, {"text": "question", "start": 356.639, "duration": 3.441}, {"text": "anyway let's solve this numerical", "start": 357.84, "duration": 3.84}, {"text": "problem at hand for now", "start": 360.08, "duration": 4.64}, {"text": "shall we so here along with the main", "start": 361.68, "duration": 5.04}, {"text": "memory and the cache size", "start": 364.72, "duration": 5.12}, {"text": "the comparator delay has been given and", "start": 366.72, "duration": 4.56}, {"text": "we are to find out", "start": 369.84, "duration": 4.72}, {"text": "the hit latency now the main memory size", "start": 371.28, "duration": 4.16}, {"text": "is given as", "start": 374.56, "duration": 4.56}, {"text": "2 gigabytes which is 2 to the power 31", "start": 375.44, "duration": 6.879}, {"text": "not 2 to the power 30 because 1 gigs is", "start": 379.12, "duration": 4.639}, {"text": "2 to the power 30", "start": 382.319, "duration": 4.641}, {"text": "and 2 is actually 2 to the power 1 which", "start": 383.759, "duration": 4.16}, {"text": "sums up to", "start": 386.96, "duration": 4.4}, {"text": "2 to the power 31 in terms of byte", "start": 387.919, "duration": 5.681}, {"text": "now the cache size is given as 1", "start": 391.36, "duration": 3.44}, {"text": "megabytes", "start": 393.6, "duration": 4.0}, {"text": "that is 2 to the power 20 in terms of", "start": 394.8, "duration": 3.6}, {"text": "byte", "start": 397.6, "duration": 4.24}, {"text": "also we all know that in direct mapping", "start": 398.4, "duration": 6.0}, {"text": "the ratio between the main memory and", "start": 401.84, "duration": 3.199}, {"text": "the cache", "start": 404.4, "duration": 4.239}, {"text": "size can generate the number of tag bits", "start": 405.039, "duration": 7.121}, {"text": "if log base 2 is applied to it", "start": 408.639, "duration": 7.12}, {"text": "so there are 11 tag bits because", "start": 412.16, "duration": 7.28}, {"text": "31 minus 20 is 11.", "start": 415.759, "duration": 7.041}, {"text": "now the comparative delay is given as 8", "start": 419.44, "duration": 7.12}, {"text": "n nanoseconds and here the n signifies", "start": 422.8, "duration": 6.32}, {"text": "the number of tag bits so the hit", "start": 426.56, "duration": 3.6}, {"text": "latency", "start": 429.12, "duration": 5.6}, {"text": "is 8 into 11 that is 88 nanoseconds", "start": 430.16, "duration": 6.56}, {"text": "neglecting the time taken by the", "start": 434.72, "duration": 3.52}, {"text": "multiplexer", "start": 436.72, "duration": 4.24}, {"text": "so this is how direct memory mapping is", "start": 438.24, "duration": 3.44}, {"text": "implemented", "start": 440.96, "duration": 3.679}, {"text": "at hardware level for this we need", "start": 441.68, "duration": 4.72}, {"text": "numerous multiplexers", "start": 444.639, "duration": 4.881}, {"text": "but only one comparator and the type of", "start": 446.4, "duration": 3.44}, {"text": "it", "start": 449.52, "duration": 2.799}, {"text": "is specified by the number of bits in", "start": 449.84, "duration": 3.919}, {"text": "the tag field", "start": 452.319, "duration": 2.961}, {"text": "pertaining to this hardware", "start": 453.759, "duration": 4.56}, {"text": "implementation this type of questions", "start": 455.28, "duration": 6.639}, {"text": "are generally asked in competitive exams", "start": 458.319, "duration": 6.481}, {"text": "now let's talk about the limitations of", "start": 461.919, "duration": 4.801}, {"text": "direct memory mapping", "start": 464.8, "duration": 4.64}, {"text": "we already know in direct mapping the", "start": 466.72, "duration": 4.72}, {"text": "physical address is divided as block", "start": 469.44, "duration": 2.879}, {"text": "number", "start": 471.44, "duration": 4.0}, {"text": "and block or line offset now if b", "start": 472.319, "duration": 5.28}, {"text": "bits are assigned for block number the", "start": 475.44, "duration": 3.52}, {"text": "main memory has", "start": 477.599, "duration": 4.561}, {"text": "2 to the power b blocks also", "start": 478.96, "duration": 5.519}, {"text": "having l bits for the line number which", "start": 482.16, "duration": 3.759}, {"text": "sometimes referred to as", "start": 484.479, "duration": 4.881}, {"text": "index number as well means there are 2", "start": 485.919, "duration": 4.241}, {"text": "to the power", "start": 489.36, "duration": 4.0}, {"text": "l cache lines inside the cache", "start": 490.16, "duration": 6.4}, {"text": "basically from the b bits the least", "start": 493.36, "duration": 4.0}, {"text": "significant", "start": 496.56, "duration": 3.68}, {"text": "l bits are nothing but the remainder if", "start": 497.36, "duration": 4.559}, {"text": "block number with value", "start": 500.24, "duration": 4.799}, {"text": "is divided by 2 to the power l", "start": 501.919, "duration": 6.321}, {"text": "so if x is the block number then x mod", "start": 505.039, "duration": 5.84}, {"text": "2 to the power l will produce the", "start": 508.24, "duration": 4.88}, {"text": "corresponding cache a line number", "start": 510.879, "duration": 5.441}, {"text": "for the block x for an instance", "start": 513.12, "duration": 5.919}, {"text": "suppose we have a cache with four lines", "start": 516.32, "duration": 3.68}, {"text": "and these are the", "start": 519.039, "duration": 4.081}, {"text": "block requests made by the processor in", "start": 520.0, "duration": 5.04}, {"text": "this specific order", "start": 523.12, "duration": 5.44}, {"text": "so block request 7 will be placed in", "start": 525.04, "duration": 6.88}, {"text": "7 mod 4 that is line number 3.", "start": 528.56, "duration": 7.279}, {"text": "similarly request 8 will be placed in 8", "start": 531.92, "duration": 6.96}, {"text": "mod 4 that is line number 0.", "start": 535.839, "duration": 7.361}, {"text": "6 mod 4 is 2 so 6 will be placed in line", "start": 538.88, "duration": 5.68}, {"text": "number 2", "start": 543.2, "duration": 3.68}, {"text": "now 10 will again be placed in line", "start": 544.56, "duration": 4.0}, {"text": "number two replacing", "start": 546.88, "duration": 5.28}, {"text": "six then again eleven will replace", "start": 548.56, "duration": 7.04}, {"text": "seven in line number three and fourteen", "start": 552.16, "duration": 5.84}, {"text": "will be placed in fourteen mod four", "start": 555.6, "duration": 5.12}, {"text": "that is line number two here we can", "start": 558.0, "duration": 3.279}, {"text": "observe", "start": 560.72, "duration": 3.44}, {"text": "that although the line number one was", "start": 561.279, "duration": 3.601}, {"text": "empty", "start": 564.16, "duration": 3.84}, {"text": "we had to withstand the cache misses", "start": 564.88, "duration": 6.32}, {"text": "due to the strict mapping property this", "start": 568.0, "duration": 6.24}, {"text": "is called conflict miss", "start": 571.2, "duration": 5.28}, {"text": "this will be more clear if the block", "start": 574.24, "duration": 3.039}, {"text": "requests", "start": 576.48, "duration": 3.52}, {"text": "are like these now for all these", "start": 577.279, "duration": 3.68}, {"text": "requests", "start": 580.0, "duration": 4.32}, {"text": "the same cache a line number two will be", "start": 580.959, "duration": 4.081}, {"text": "used", "start": 584.32, "duration": 4.079}, {"text": "even though all the the lines are empty", "start": 585.04, "duration": 7.12}, {"text": "and available so for direct mapping", "start": 588.399, "duration": 5.601}, {"text": "conflict mess is the biggest", "start": 592.16, "duration": 3.6}, {"text": "disadvantage", "start": 594.0, "duration": 4.399}, {"text": "so that was all about direct mapping i", "start": 595.76, "duration": 3.04}, {"text": "hope", "start": 598.399, "duration": 3.201}, {"text": "we learnt something new and interesting", "start": 598.8, "duration": 5.12}, {"text": "in the next session we will begin the", "start": 601.6, "duration": 4.799}, {"text": "next cache memory mapping technique", "start": 603.92, "duration": 4.72}, {"text": "so i hope to see you in the next one", "start": 606.399, "duration": 13.44}, {"text": "thank you all for watching", "start": 608.64, "duration": 11.199}, {"text": "[Music]", "start": 621.53, "duration": 2.23}, {"text": "you", "start": 621.68, "duration": 2.08}]