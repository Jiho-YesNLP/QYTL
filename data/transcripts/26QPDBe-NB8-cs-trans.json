[{"text": "This episode is supported by Hover.", "start": 3.42, "duration": 2.4}, {"text": "Hi, I'm Carrie Anne, and welcome to Crash\nCourse Computer Science!", "start": 6.0, "duration": 3.44}, {"text": "Computers in the 1940s and early 50s ran one\nprogram at a time.", "start": 9.44, "duration": 3.3}, {"text": "A programmer would write one at their desk,\nfor example, on punch cards.", "start": 12.74, "duration": 2.819}, {"text": "Then, they\u2019d carry it to a room containing\na room-sized computer, and hand it to a dedicated", "start": 15.559, "duration": 4.071}, {"text": "computer operator.", "start": 19.63, "duration": 1.0}, {"text": "That person would then feed the program into\nthe computer when it was next available.", "start": 20.63, "duration": 3.77}, {"text": "The computer would run it, spit out some output,\nand halt.", "start": 24.4, "duration": 2.74}, {"text": "This very manual process worked OK back when\ncomputers were slow, and running a program", "start": 27.14, "duration": 4.59}, {"text": "often took hours, days or even weeks.", "start": 31.73, "duration": 1.891}, {"text": "But, as we discussed last episode, computers\nbecame faster... and faster... and faster", "start": 33.621, "duration": 5.139}, {"text": "\u2013 exponentially so!", "start": 38.76, "duration": 1.22}, {"text": "Pretty soon, having humans run around and\ninserting programs into readers was taking", "start": 39.98, "duration": 3.64}, {"text": "longer than running the actual programs themselves.", "start": 43.62, "duration": 2.529}, {"text": "We needed a way for computers to operate themselves,\nand so, operating systems were born.", "start": 46.149, "duration": 4.551}, {"text": "INTRO", "start": 50.7, "duration": 9.14}, {"text": "Operating systems, or OS\u2019es for short, are\njust programs.", "start": 59.84, "duration": 3.3}, {"text": "But, special privileges on the hardware let\nthem run and manage other programs.", "start": 63.14, "duration": 3.94}, {"text": "They\u2019re typically the first one to start\nwhen a computer is turned on, and all subsequent", "start": 67.08, "duration": 3.78}, {"text": "programs are launched by the OS.", "start": 70.86, "duration": 1.71}, {"text": "They got their start in the 1950s, as computers\nbecame more widespread and more powerful.", "start": 72.57, "duration": 4.41}, {"text": "The very first OSes augmented the mundane,\nmanual task of loading programs by hand.", "start": 76.98, "duration": 4.78}, {"text": "Instead of being given one program at a time,\ncomputers could be given batches.", "start": 81.76, "duration": 3.93}, {"text": "When the computer was done with one, it would automatically and near-instantly start the next.", "start": 85.69, "duration": 4.31}, {"text": "There was no downtime while someone scurried\naround an office to find the next program", "start": 90.0, "duration": 3.52}, {"text": "to run.", "start": 93.52, "duration": 1.0}, {"text": "This was called batch processing.", "start": 94.53, "duration": 1.66}, {"text": "While computers got faster, they also got\ncheaper.", "start": 96.19, "duration": 2.24}, {"text": "So, they were popping up all over the world,\nespecially in universities and government", "start": 98.43, "duration": 3.9}, {"text": "offices.", "start": 102.33, "duration": 1.0}, {"text": "Soon, people started sharing software.", "start": 103.33, "duration": 2.01}, {"text": "But there was a problem\u2026", "start": 105.34, "duration": 1.49}, {"text": "In the era of one-off computers, like the\nHarvard Mark 1 or ENIAC, programmers only", "start": 106.83, "duration": 4.31}, {"text": "had to write code for that one single machine.", "start": 111.14, "duration": 2.72}, {"text": "The processor, punch card readers, and printers\nwere known and unchanging.", "start": 113.86, "duration": 4.29}, {"text": "But as computers became more widespread, their\nconfigurations were not always identical,", "start": 118.15, "duration": 4.11}, {"text": "like computers might have the same CPU, but\nnot the same printer.", "start": 122.26, "duration": 3.4}, {"text": "This was a huge pain for programmers.", "start": 125.66, "duration": 1.9}, {"text": "Not only did they have to worry about writing\ntheir program, but also how to interface with", "start": 127.56, "duration": 3.689}, {"text": "each and every model of printer, and all devices\nconnected to a computer, what are called peripherals.", "start": 131.249, "duration": 5.191}, {"text": "Interfacing with early peripherals was very\nlow level, requiring programmers to know intimate", "start": 136.44, "duration": 4.44}, {"text": "hardware details about each device.", "start": 140.88, "duration": 2.22}, {"text": "On top of that, programmers rarely had access to every model of a peripheral to test their code on.", "start": 143.1, "duration": 4.78}, {"text": "So, they had to write code as best they could,\noften just by reading manuals, and hope it", "start": 147.88, "duration": 4.18}, {"text": "worked when shared.", "start": 152.06, "duration": 1.0}, {"text": "Things weren\u2019t exactly plug-and-play back\nthen\u2026 more plug-and-pray.", "start": 153.069, "duration": 3.521}, {"text": "This was clearly terrible, so to make it easier\nfor programmers, Operating Systems stepped", "start": 156.59, "duration": 4.25}, {"text": "in as intermediaries between software programs\nand hardware peripherals.", "start": 160.84, "duration": 4.64}, {"text": "More specifically, they provided a software\nabstraction, through APIs, called device drivers.", "start": 165.48, "duration": 4.84}, {"text": "These allow programmers to talk to common\ninput and output hardware, or I/O for short,", "start": 170.32, "duration": 4.3}, {"text": "using standardized mechanisms.", "start": 174.629, "duration": 1.801}, {"text": "For example, programmers could call a function\nlike \u201cprint highscore\u201d, and the OS would", "start": 176.43, "duration": 3.699}, {"text": "do the heavy lifting to get it onto paper.", "start": 180.129, "duration": 2.22}, {"text": "By the end of the 1950s, computers had gotten\nso fast, they were often idle waiting for", "start": 182.349, "duration": 3.941}, {"text": "slow mechanical things, like printers and\npunch card readers.", "start": 186.29, "duration": 3.539}, {"text": "While programs were blocked on I/O, the expensive\nprocessor was just chillin\u2019... not like", "start": 189.829, "duration": 4.11}, {"text": "a villain\u2026 you know, just relaxing.", "start": 193.939, "duration": 1.54}, {"text": "In the late 50\u2019s, the University of Manchester,\nin the UK, started work on a supercomputer", "start": 195.479, "duration": 4.021}, {"text": "called Atlas, one of the first in the world.", "start": 199.5, "duration": 2.459}, {"text": "They knew it was going to be wicked fast,\nso they needed a way to make maximal use of", "start": 201.959, "duration": 3.821}, {"text": "the expensive machine.", "start": 205.78, "duration": 1.09}, {"text": "Their solution was a program called the Atlas\nSupervisor, finished in 1962.", "start": 206.87, "duration": 4.33}, {"text": "This operating system not only loaded programs\nautomatically, like earlier batch systems,", "start": 211.2, "duration": 4.17}, {"text": "but could also run several at the same time\non its single CPU.", "start": 215.37, "duration": 3.8}, {"text": "It did this through clever scheduling.", "start": 219.17, "duration": 1.399}, {"text": "Let\u2019s say we have a game program running\non Atlas, and we call the function \u201cprint", "start": 220.569, "duration": 4.191}, {"text": "highscore\u201d which instructs Atlas to print\nthe value of a variable named \u201chighscore\u201d", "start": 224.76, "duration": 3.78}, {"text": "onto paper to show our friends that we\u2019re\nthe ultimate champion of virtual tiddlywinks.", "start": 228.54, "duration": 4.069}, {"text": "That function call is going to take a while,\nthe equivalent of thousands of clock cycles,", "start": 232.609, "duration": 4.7}, {"text": "because mechanical printers are slow in comparison\nto electronic CPUs.", "start": 237.309, "duration": 4.091}, {"text": "So instead of waiting for the I/O to finish,\nAtlas instead puts our program to sleep, then", "start": 241.4, "duration": 4.58}, {"text": "selects and runs another program that\u2019s\nwaiting and ready to run.", "start": 245.98, "duration": 3.0}, {"text": "Eventually, the printer will report back to\nAtlas that it finished printing the value", "start": 248.98, "duration": 3.069}, {"text": "of \u201chighscore\u201d.", "start": 252.049, "duration": 1.241}, {"text": "Atlas then marks our program as ready to go,\nand at some point, it will be scheduled to", "start": 253.29, "duration": 3.64}, {"text": "run again on the CPU, and continue onto the\nnext line of code following the print statement.", "start": 256.93, "duration": 4.76}, {"text": "In this way, Atlas could have one program\nrunning calculations on the CPU, while another", "start": 261.69, "duration": 4.289}, {"text": "was printing out data, and yet another reading\nin data from a punch tape.", "start": 265.98, "duration": 3.78}, {"text": "Atlas\u2019 engineers doubled down on this idea,\nand outfitted their computer with 4 paper", "start": 269.76, "duration": 4.32}, {"text": "tape readers, 4 paper tape punches, and up\nto 8 magnetic tape drives.", "start": 274.1, "duration": 4.14}, {"text": "This allowed many programs to be in progress\nall at once, sharing time on a single CPU.", "start": 278.24, "duration": 4.97}, {"text": "This ability, enabled by the Operating System,\nis called multitasking.", "start": 283.21, "duration": 3.69}, {"text": "There\u2019s one big catch to having many programs running simultaneously on a single computer, though.", "start": 286.92, "duration": 4.82}, {"text": "Each one is going to need some memory, and\nwe can\u2019t lose that program\u2019s data when", "start": 291.74, "duration": 3.42}, {"text": "we switch to another program.", "start": 295.16, "duration": 1.599}, {"text": "The solution is to allocate each program its\nown block of memory.", "start": 296.759, "duration": 2.72}, {"text": "So, for example, let\u2019s say a computer has\n10,000 memory locations in total.", "start": 299.48, "duration": 4.52}, {"text": "Program A might get allocated memory addresses\n0 through 999, and Program B might get 1000", "start": 304.0, "duration": 6.7}, {"text": "through 1999, and so on.", "start": 310.71, "duration": 2.69}, {"text": "If a program asks for more memory, the operating\nsystem decides if it can grant that request,", "start": 313.4, "duration": 4.56}, {"text": "and if so, what memory block to allocate next.", "start": 317.96, "duration": 2.63}, {"text": "This flexibility is great, but introduces\na quirk.", "start": 320.59, "duration": 2.88}, {"text": "It means that Program A could end up being\nallocated non-sequential blocks of memory,", "start": 323.47, "duration": 4.259}, {"text": "in say addresses 0 through 999, and 2000 through 2999.", "start": 327.729, "duration": 5.571}, {"text": "And this is just a simple example - a real\nprogram might be allocated dozens of blocks", "start": 333.3, "duration": 4.049}, {"text": "scattered all over memory.", "start": 337.349, "duration": 1.301}, {"text": "As you might imagine, this would get really\nconfusing for programmers to keep track of.", "start": 338.65, "duration": 3.91}, {"text": "Maybe there\u2019s a long list of sales data\nin memory that a program has to total up at", "start": 342.56, "duration": 3.68}, {"text": "the end of the day, but this list is stored\nacross a bunch of different blocks of memory.", "start": 346.25, "duration": 3.79}, {"text": "To hide this complexity, Operating Systems\nvirtualize memory locations.", "start": 350.05, "duration": 4.83}, {"text": "With Virtual Memory, programs can assume their\nmemory always starts at address 0, keeping", "start": 354.88, "duration": 3.98}, {"text": "things simple and consistent.", "start": 358.86, "duration": 1.66}, {"text": "However, the actual, physical location in\ncomputer memory is hidden and abstracted by", "start": 360.52, "duration": 4.2}, {"text": "the operating system.", "start": 364.72, "duration": 1.52}, {"text": "Just a new level of abstraction.", "start": 366.24, "duration": 7.72}, {"text": "Let\u2019s take our example Program B, which\nhas been allocated a block of memory from", "start": 373.96, "duration": 3.66}, {"text": "address 1000 to 1999.", "start": 377.62, "duration": 3.46}, {"text": "As far as Program B can tell, this appears\nto be a block from 0 to 999.", "start": 381.08, "duration": 4.8}, {"text": "The OS and CPU handle the virtual-to-physical\nmemory remapping automatically.", "start": 385.88, "duration": 4.05}, {"text": "So, if Program B requests memory location\n42, it really ends up reading address 1042.", "start": 389.93, "duration": 6.32}, {"text": "This virtualization of memory addresses is\neven more useful for Program A, which in our", "start": 396.25, "duration": 4.069}, {"text": "example, has been allocated two blocks of\nmemory that are separated from one another.", "start": 400.319, "duration": 4.261}, {"text": "This too is invisible to Program A.", "start": 404.58, "duration": 2.17}, {"text": "As far as it can tell, it\u2019s been allocated\na continuous block of 2000 addresses.", "start": 406.75, "duration": 4.74}, {"text": "When Program A reads memory address 999, that\ndoes coincidentally map to physical memory", "start": 411.49, "duration": 5.549}, {"text": "address 999.", "start": 417.039, "duration": 1.97}, {"text": "But if Program A reads the very next value\nin memory, at address 1000, that gets mapped", "start": 419.009, "duration": 4.46}, {"text": "behind the scenes to physical memory address\n2000.", "start": 423.469, "duration": 2.85}, {"text": "This mechanism allows programs to have flexible\nmemory sizes, called dynamic memory allocation,", "start": 426.319, "duration": 5.261}, {"text": "that appear to be continuous to them.", "start": 431.58, "duration": 2.32}, {"text": "It simplifies everything and offers tremendous\nflexibility to the Operating System in running", "start": 433.9, "duration": 4.36}, {"text": "multiple programs simultaneously.", "start": 438.26, "duration": 1.84}, {"text": "Another upside of allocating each program\nits own memory, is that they\u2019re better isolated", "start": 440.1, "duration": 3.76}, {"text": "from one another.", "start": 443.87, "duration": 0.99}, {"text": "So, if a buggy program goes awry, and starts\nwriting gobbledygook, it can only trash its", "start": 444.87, "duration": 4.03}, {"text": "own memory, not that of other programs.", "start": 448.9, "duration": 2.76}, {"text": "This feature is called Memory Protection.", "start": 451.66, "duration": 2.18}, {"text": "This is also really useful in protecting against\nmalicious software, like viruses.", "start": 453.84, "duration": 4.09}, {"text": "For example, we generally don\u2019t want other\nprograms to have the ability to read or modify", "start": 457.93, "duration": 3.78}, {"text": "the memory of, let say, our email, with that\nkind of access, malware could send emails", "start": 461.71, "duration": 4.009}, {"text": "on your behalf and maybe steal personal information.", "start": 465.72, "duration": 2.8}, {"text": "Not good!", "start": 468.52, "duration": 0.78}, {"text": "Atlas had both virtual and protected memory.", "start": 469.3, "duration": 2.36}, {"text": "It was the first computer and OS to support\nthese features!", "start": 471.66, "duration": 2.9}, {"text": "By the 1970s, computers were sufficiently\nfast and cheap.", "start": 474.56, "duration": 3.52}, {"text": "Institutions like a university could buy a\ncomputer and let students use it.", "start": 478.08, "duration": 4.32}, {"text": "It was not only fast enough to run several\nprograms at once, but also give several users", "start": 482.409, "duration": 4.57}, {"text": "simultaneous, interactive access.", "start": 486.979, "duration": 2.5}, {"text": "This was done through a terminal, which is\na keyboard and screen that connects to a big", "start": 489.479, "duration": 4.071}, {"text": "computer, but doesn\u2019t contain any processing\npower itself.", "start": 493.55, "duration": 2.86}, {"text": "A refrigerator-sized computer might have 50\nterminals connected to it, allowing up to", "start": 496.41, "duration": 4.7}, {"text": "50 users.", "start": 501.11, "duration": 1.0}, {"text": "Now operating systems had to handle not just\nmultiple programs, but also multiple users.", "start": 502.11, "duration": 4.929}, {"text": "So that no one person could gobble up all\nof a computer's resources, operating systems", "start": 507.039, "duration": 3.85}, {"text": "were developed that offered time-sharing.", "start": 510.889, "duration": 1.77}, {"text": "With time-sharing each individual user was\nonly allowed to utilize a small fraction of", "start": 512.659, "duration": 4.611}, {"text": "the computer\u2019s processor, memory, and so\non.", "start": 517.27, "duration": 2.59}, {"text": "Because computers are so fast, even getting\njust 1/50th of its resources was enough for", "start": 519.86, "duration": 4.77}, {"text": "individuals to complete many tasks.", "start": 524.63, "duration": 1.12}, {"text": "The most influential of early time-sharing\nOperating Systems was Multics, or Multiplexed", "start": 525.75, "duration": 4.589}, {"text": "Information and Computing Service, released\nin 1969.", "start": 530.34, "duration": 3.74}, {"text": "Multics was the first major operating\nsystem designed to be secure from the outset.", "start": 534.08, "duration": 4.44}, {"text": "Developers didn\u2019t want mischievous users\naccessing data they shouldn't, like students", "start": 538.52, "duration": 4.12}, {"text": "attempting to access the final exam on their\nprofessor\u2019s account.", "start": 542.64, "duration": 3.1}, {"text": "Features like this meant Multics was really\ncomplicated for its time, using around 1 Megabit", "start": 545.74, "duration": 4.53}, {"text": "of memory, which was a lot back then!", "start": 550.27, "duration": 1.999}, {"text": "That might be half of a computer's memory,\njust to run the OS!", "start": 552.269, "duration": 3.571}, {"text": "Dennis Ritchie, one of the researchers working\non Multics, once said:", "start": 555.84, "duration": 3.09}, {"text": "\u201cOne of the obvious things that went wrong\nwith Multics as a commercial success was just", "start": 558.93, "duration": 4.27}, {"text": "that it was sort of over-engineered in a sense.", "start": 563.2, "duration": 2.009}, {"text": "There was just too much in it.\u201d", "start": 565.209, "duration": 1.581}, {"text": "T\nhis lead Dennis, and another Multics researcher,", "start": 566.79, "duration": 2.13}, {"text": "Ken Thompson, to strike out on their own and build a new, lean operating system\u2026 called Unix.", "start": 568.92, "duration": 4.72}, {"text": "They wanted to separate the OS into two parts:", "start": 573.64, "duration": 2.6}, {"text": "First was the core functionality of the OS,\nthings like memory management, multitasking,", "start": 576.24, "duration": 4.28}, {"text": "and dealing with I/O, which is called the\nkernel.", "start": 580.52, "duration": 2.81}, {"text": "The second part was a wide array of useful\ntools that came bundled with, but not part", "start": 583.33, "duration": 3.93}, {"text": "of the kernel, things like programs and libraries.", "start": 587.26, "duration": 2.52}, {"text": "Building a compact, lean kernel meant intentionally\nleaving some functionality out.", "start": 589.78, "duration": 3.68}, {"text": "Tom Van Vleck, another Multics developer,\nrecalled:", "start": 593.47, "duration": 2.37}, {"text": "\u201cI remarked to Dennis that easily half the\ncode I was writing in Multics was error recovery", "start": 595.84, "duration": 4.7}, {"text": "code.\"", "start": 600.54, "duration": 0.74}, {"text": "He said, \"We left all that stuff out of Unix.", "start": 601.28, "duration": 2.46}, {"text": "If there's an error, we have this routine\ncalled panic, and when it is called, the machine", "start": 603.74, "duration": 4.13}, {"text": "crashes, and you holler down the hall, 'Hey,\nreboot it.'\"\u201d", "start": 607.87, "duration": 3.149}, {"text": "You might have heard of kernel panics, This\nis where the term came from.", "start": 611.019, "duration": 3.121}, {"text": "It\u2019s literally when the kernel crashes,\nhas no recourse to recover, and so calls a", "start": 614.14, "duration": 4.319}, {"text": "function called \u201cpanic\u201d.", "start": 618.459, "duration": 1.481}, {"text": "Originally, all it did was print the word\n\u201cpanic\u201d and then enter", "start": 619.94, "duration": 3.01}, {"text": "an infinite loop.", "start": 622.95, "duration": 1.08}, {"text": "This simplicity meant that Unix could be run\non cheaper and more diverse hardware, making", "start": 624.03, "duration": 4.09}, {"text": "it popular inside Bell Labs, where Dennis\nand Ken worked.", "start": 628.12, "duration": 3.0}, {"text": "As more developers started using Unix to build\nand run their own programs, the number of", "start": 631.12, "duration": 3.7}, {"text": "contributed tools grew.", "start": 634.82, "duration": 1.5}, {"text": "Soon after its release in 1971, it gained\ncompilers for different programming languages", "start": 636.32, "duration": 4.68}, {"text": "and even a word processor, quickly making\nit one of the most popular OSes of the 1970s", "start": 641.0, "duration": 4.51}, {"text": "and 80s.", "start": 645.51, "duration": 1.019}, {"text": "At the same time, by the early 1980s, the\ncost of a basic computer had fallen to the", "start": 646.529, "duration": 4.151}, {"text": "point where individual people could afford\none, called a personal or home computer.", "start": 650.68, "duration": 4.339}, {"text": "These were much simpler than the big mainframes\nfound at universities, corporations, and governments.", "start": 655.019, "duration": 4.461}, {"text": "So, their operating systems had to be equally\nsimple.", "start": 659.48, "duration": 2.76}, {"text": "For example, Microsoft\u2019s Disk Operating\nSystem, or MS-DOS, was just 160 kilobytes,", "start": 662.24, "duration": 5.529}, {"text": "allowing it to fit, as the name suggests,\nonto a single disk.", "start": 667.769, "duration": 2.82}, {"text": "First released in 1981, it became the most\npopular OS for early home computers, even", "start": 670.589, "duration": 4.582}, {"text": "though it lacked multitasking and protected\nmemory.", "start": 675.171, "duration": 3.479}, {"text": "This meant that programs could, and would,\nregularly crash the system.", "start": 678.65, "duration": 3.59}, {"text": "While annoying, it was an acceptable tradeoff,\nas users could just turn their own computers", "start": 682.24, "duration": 4.159}, {"text": "off and on again!", "start": 686.4, "duration": 0.72}, {"text": "Even early versions of Windows, first released\nby Microsoft in 1985 and which dominated the", "start": 687.12, "duration": 4.94}, {"text": "OS scene throughout the 1990s, lacked strong\nmemory protection.", "start": 692.06, "duration": 3.58}, {"text": "When programs misbehaved, you could get the\nblue screen of death, a sign that a program", "start": 695.64, "duration": 4.439}, {"text": "had crashed so badly that it took down the\nwhole operating system.", "start": 700.08, "duration": 3.509}, {"text": "Luckily, newer versions of Windows have better protections and usually don't crash that often.", "start": 703.589, "duration": 4.731}, {"text": "Today, computers run modern operating systems,\nlike Mac OS X, Windows 10, Linux, iOS and", "start": 708.32, "duration": 4.78}, {"text": "Android.", "start": 713.1, "duration": 1.2}, {"text": "Even though the computers we own are most\noften used by just a single person, you! their", "start": 714.3, "duration": 4.44}, {"text": "OSes all have multitasking and virtual and\nprotected memory.", "start": 718.74, "duration": 3.48}, {"text": "So, they can run many programs at once: you\ncan watch YouTube in your web browser, edit", "start": 722.22, "duration": 4.049}, {"text": "a photo in Photoshop, play music in Spotify\nand sync Dropbox all at the same time.", "start": 726.269, "duration": 5.99}, {"text": "This wouldn\u2019t be possible without those\ndecades of research and development on Operating", "start": 732.259, "duration": 3.83}, {"text": "Systems, and of course the proper memory to\nstore those programs.", "start": 736.089, "duration": 3.501}, {"text": "Which we\u2019ll get to next week.", "start": 739.59, "duration": 1.61}, {"text": "I\u2019d like to thank Hover for sponsoring this\nepisode.", "start": 741.2, "duration": 2.88}, {"text": "Hover is a service that helps you buy and\nmanage domain names.", "start": 744.08, "duration": 3.08}, {"text": "Hover has over 400 domain extensions to end\nyour domain with - including .com and .net.", "start": 747.16, "duration": 4.98}, {"text": "You can also get unique domains that are more\nprofessional than a generic address.", "start": 752.149, "duration": 3.651}, {"text": "Here at Crash Course, we'd get the domain\nname \u201cmongols.fans\u201d but I think you know", "start": 755.8, "duration": 4.39}, {"text": "that already.", "start": 760.19, "duration": 0.81}, {"text": "Once you have your domain, you can set up\nyour custom email to forward to your existing", "start": 761.0, "duration": 3.76}, {"text": "email address -- including Outlook or Gmail\nor whatever you already use.", "start": 764.78, "duration": 3.9}, {"text": "With Hover, you can get a custom domain and\nemail address for 10% off.", "start": 768.68, "duration": 4.089}, {"text": "Go to Hover.com/crashcourse today to create\nyour custom domain and help support our show!", "start": 772.8, "duration": 5.18}]