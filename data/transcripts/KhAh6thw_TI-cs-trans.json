[{"text": "hello everyone", "start": 6.319, "duration": 5.121}, {"text": "and welcome back so far we have seen two", "start": 7.919, "duration": 5.84}, {"text": "of the cache memory mapping techniques", "start": 11.44, "duration": 5.28}, {"text": "direct and associative mapping today we", "start": 13.759, "duration": 4.641}, {"text": "are going to learn about the most", "start": 16.72, "duration": 2.399}, {"text": "popular", "start": 18.4, "duration": 3.12}, {"text": "and widely used cache memory mapping", "start": 19.119, "duration": 3.521}, {"text": "technique that is", "start": 21.52, "duration": 4.48}, {"text": "set associative mapping so before diving", "start": 22.64, "duration": 5.2}, {"text": "straight into the technicalities of this", "start": 26.0, "duration": 3.199}, {"text": "mapping policy", "start": 27.84, "duration": 3.599}, {"text": "we will first try to understand the", "start": 29.199, "duration": 3.36}, {"text": "emergence of it", "start": 31.439, "duration": 3.041}, {"text": "and eventually by the end of this", "start": 32.559, "duration": 3.68}, {"text": "session we will observe", "start": 34.48, "duration": 3.759}, {"text": "the reason behind its widespread", "start": 36.239, "duration": 3.521}, {"text": "acceptance with the help of an", "start": 38.239, "duration": 2.48}, {"text": "illustration", "start": 39.76, "duration": 3.119}, {"text": "it's my recommendation to all of you", "start": 40.719, "duration": 3.281}, {"text": "please go through the", "start": 42.879, "duration": 3.281}, {"text": "previous discussions on cache memory", "start": 44.0, "duration": 3.2}, {"text": "mapping techniques", "start": 46.16, "duration": 4.399}, {"text": "before continuing with this session so", "start": 47.2, "duration": 5.839}, {"text": "let's get to learning during our", "start": 50.559, "duration": 3.201}, {"text": "discussion", "start": 53.039, "duration": 2.721}, {"text": "on direct mapping in session number", "start": 53.76, "duration": 4.4}, {"text": "eight we came to know about its strict", "start": 55.76, "duration": 4.0}, {"text": "mapping policy", "start": 58.16, "duration": 3.919}, {"text": "that is looking at the physical address", "start": 59.76, "duration": 4.96}, {"text": "bits using the ps splits line number", "start": 62.079, "duration": 3.761}, {"text": "bits portion", "start": 64.72, "duration": 3.36}, {"text": "we could easily figure out to which", "start": 65.84, "duration": 4.4}, {"text": "cache a line the main memory block is", "start": 68.08, "duration": 4.24}, {"text": "supposed to be mapped onto", "start": 70.24, "duration": 4.879}, {"text": "then again in session number 13 we", "start": 72.32, "duration": 3.68}, {"text": "learned that", "start": 75.119, "duration": 4.161}, {"text": "it badly suffers from conflict mess", "start": 76.0, "duration": 5.6}, {"text": "on the other hand during presentation", "start": 79.28, "duration": 3.519}, {"text": "number 14", "start": 81.6, "duration": 3.76}, {"text": "we witnessed that associative mapping", "start": 82.799, "duration": 3.281}, {"text": "was too", "start": 85.36, "duration": 4.16}, {"text": "flexible because we could map any of the", "start": 86.08, "duration": 5.76}, {"text": "main memory block to any of the cache", "start": 89.52, "duration": 4.959}, {"text": "lines this solved the conflict miss", "start": 91.84, "duration": 4.16}, {"text": "problem definitely", "start": 94.479, "duration": 3.28}, {"text": "however due to the need of the", "start": 96.0, "duration": 4.4}, {"text": "comparators for every single cache align", "start": 97.759, "duration": 5.04}, {"text": "the cost of the implementation became", "start": 100.4, "duration": 3.679}, {"text": "too high", "start": 102.799, "duration": 4.161}, {"text": "in these circumstances the developers", "start": 104.079, "duration": 5.04}, {"text": "had to come up with a new caching memory", "start": 106.96, "duration": 3.36}, {"text": "mapping technique", "start": 109.119, "duration": 3.601}, {"text": "combining the advantages of strict", "start": 110.32, "duration": 3.759}, {"text": "direct memory mapping", "start": 112.72, "duration": 3.6}, {"text": "where easy retrieval of the main memory", "start": 114.079, "duration": 4.561}, {"text": "block from the cache was guaranteed", "start": 116.32, "duration": 5.119}, {"text": "and the flexible associative mapping", "start": 118.64, "duration": 5.04}, {"text": "which had strong durability against", "start": 121.439, "duration": 3.761}, {"text": "conflict misses", "start": 123.68, "duration": 4.48}, {"text": "and this is nothing but set associative", "start": 125.2, "duration": 3.919}, {"text": "mapping", "start": 128.16, "duration": 3.36}, {"text": "and in this concept the lines of the", "start": 129.119, "duration": 3.521}, {"text": "cache memory", "start": 131.52, "duration": 4.56}, {"text": "are subdivided into sets therefore", "start": 132.64, "duration": 5.76}, {"text": "any of the main memory block if it is", "start": 136.08, "duration": 4.239}, {"text": "mapped onto a cache line", "start": 138.4, "duration": 4.16}, {"text": "it gains the flexibility of being mapped", "start": 140.319, "duration": 3.681}, {"text": "on to any of the lines", "start": 142.56, "duration": 4.56}, {"text": "belonging to that specific set for an", "start": 144.0, "duration": 3.92}, {"text": "instance", "start": 147.12, "duration": 2.72}, {"text": "suppose the block number zero of the", "start": 147.92, "duration": 3.12}, {"text": "main memory is", "start": 149.84, "duration": 4.24}, {"text": "mapped to cache line number zero now as", "start": 151.04, "duration": 3.76}, {"text": "you can see", "start": 154.08, "duration": 3.12}, {"text": "the 0th line belongs to this particular", "start": 154.8, "duration": 3.36}, {"text": "set", "start": 157.2, "duration": 3.52}, {"text": "so the main memory block number 0 has", "start": 158.16, "duration": 3.439}, {"text": "more than one", "start": 160.72, "duration": 3.599}, {"text": "mapping option because apart from line", "start": 161.599, "duration": 3.681}, {"text": "number 0", "start": 164.319, "duration": 3.361}, {"text": "it can also be mapped onto either line", "start": 165.28, "duration": 3.52}, {"text": "number 1 or", "start": 167.68, "duration": 4.16}, {"text": "2. in other words main memory block", "start": 168.8, "duration": 4.0}, {"text": "number zero", "start": 171.84, "duration": 3.44}, {"text": "can be mapped onto any of the cache", "start": 172.8, "duration": 5.92}, {"text": "aligns belonging to this particular set", "start": 175.28, "duration": 6.0}, {"text": "so set associative mapping becomes", "start": 178.72, "duration": 3.439}, {"text": "flexible", "start": 181.28, "duration": 3.039}, {"text": "because the organization provides", "start": 182.159, "duration": 3.921}, {"text": "mapping options", "start": 184.319, "duration": 4.64}, {"text": "now coming to the cache sets the sets", "start": 186.08, "duration": 4.0}, {"text": "are numbered as", "start": 188.959, "duration": 4.721}, {"text": "set 0 set 1 and so on", "start": 190.08, "duration": 6.239}, {"text": "and based on how many lines are there in", "start": 193.68, "duration": 3.6}, {"text": "every set", "start": 196.319, "duration": 3.361}, {"text": "because all the sets are of equal size", "start": 197.28, "duration": 3.12}, {"text": "the way", "start": 199.68, "duration": 3.919}, {"text": "is specified that means if one set", "start": 200.4, "duration": 3.839}, {"text": "contains", "start": 203.599, "duration": 3.601}, {"text": "k number of lines we call it koa set", "start": 204.239, "duration": 4.64}, {"text": "associative cache", "start": 207.2, "duration": 4.319}, {"text": "now this concept is borrowed from direct", "start": 208.879, "duration": 3.121}, {"text": "mapping", "start": 211.519, "duration": 3.521}, {"text": "policy for set associative mapping", "start": 212.0, "duration": 3.68}, {"text": "technique", "start": 215.04, "duration": 3.199}, {"text": "the physical address bit split has a set", "start": 215.68, "duration": 3.68}, {"text": "number portion", "start": 218.239, "duration": 2.961}, {"text": "from which we can determine the", "start": 219.36, "duration": 3.28}, {"text": "particular set", "start": 221.2, "duration": 3.2}, {"text": "where the main memory block will be", "start": 222.64, "duration": 3.04}, {"text": "mapped onto", "start": 224.4, "duration": 4.399}, {"text": "so we need not search the entire cache a", "start": 225.68, "duration": 5.04}, {"text": "to find out the needed block", "start": 228.799, "duration": 3.921}, {"text": "rather we only have to look for the", "start": 230.72, "duration": 4.0}, {"text": "block in the set of lines where it is", "start": 232.72, "duration": 3.68}, {"text": "supposed to reside", "start": 234.72, "duration": 4.719}, {"text": "therefore the retrieval becomes easier", "start": 236.4, "duration": 5.44}, {"text": "also since all the sets are of equal", "start": 239.439, "duration": 4.481}, {"text": "size we only need k number of", "start": 241.84, "duration": 3.36}, {"text": "comparators for k", "start": 243.92, "duration": 3.84}, {"text": "way set associative mapping let me show", "start": 245.2, "duration": 3.759}, {"text": "you this with the help of an", "start": 247.76, "duration": 2.64}, {"text": "illustration", "start": 248.959, "duration": 3.761}, {"text": "now consider this example here a byte", "start": 250.4, "duration": 3.68}, {"text": "addressable main memory", "start": 252.72, "duration": 4.56}, {"text": "of size 128 byte is given the cache is", "start": 254.08, "duration": 4.8}, {"text": "of 32 byte size", "start": 257.28, "duration": 4.079}, {"text": "the block size is given as 4 byte and", "start": 258.88, "duration": 4.879}, {"text": "the cache is a two-way set associative", "start": 261.359, "duration": 3.201}, {"text": "cache", "start": 263.759, "duration": 2.801}, {"text": "so the physical address space that is", "start": 264.56, "duration": 3.44}, {"text": "the main memory is of", "start": 266.56, "duration": 4.72}, {"text": "128 bytes in other words is 2 to the", "start": 268.0, "duration": 4.0}, {"text": "power 7", "start": 271.28, "duration": 3.359}, {"text": "bytes therefore for physical address we", "start": 272.0, "duration": 4.32}, {"text": "will be needing 7 bits", "start": 274.639, "duration": 3.601}, {"text": "now why so because it's in byte", "start": 276.32, "duration": 3.12}, {"text": "addressable memory", "start": 278.24, "duration": 4.16}, {"text": "however luckily in this case all the", "start": 279.44, "duration": 5.039}, {"text": "units are given as bytes", "start": 282.4, "duration": 4.64}, {"text": "now the block size is given as 4 bytes", "start": 284.479, "duration": 4.641}, {"text": "which can also be written as 2 square", "start": 287.04, "duration": 2.96}, {"text": "bytes", "start": 289.12, "duration": 3.44}, {"text": "therefore for offset we will be needing", "start": 290.0, "duration": 3.759}, {"text": "2 bits", "start": 292.56, "duration": 3.6}, {"text": "now observe this closely it's a bit", "start": 293.759, "duration": 3.521}, {"text": "reducible memory", "start": 296.16, "duration": 4.72}, {"text": "right therefore one word is of one byte", "start": 297.28, "duration": 6.56}, {"text": "so by saying block size as four bytes we", "start": 300.88, "duration": 4.24}, {"text": "are actually meaning", "start": 303.84, "duration": 3.44}, {"text": "each of the memory block has four", "start": 305.12, "duration": 3.44}, {"text": "different words", "start": 307.28, "duration": 4.479}, {"text": "and every word is of one byte so it's", "start": 308.56, "duration": 4.56}, {"text": "pretty much clear to us", "start": 311.759, "duration": 3.041}, {"text": "in order to address four different", "start": 313.12, "duration": 4.079}, {"text": "memory words we will be needing two-bit", "start": 314.8, "duration": 3.6}, {"text": "places", "start": 317.199, "duration": 3.361}, {"text": "now let's figure out how many blocks are", "start": 318.4, "duration": 4.239}, {"text": "there inside the main memory", "start": 320.56, "duration": 4.479}, {"text": "in order to do so we need to divide the", "start": 322.639, "duration": 3.681}, {"text": "main memory size", "start": 325.039, "duration": 3.761}, {"text": "by the block size which is nothing but 2", "start": 326.32, "duration": 4.08}, {"text": "to the power 5 because 7", "start": 328.8, "duration": 4.399}, {"text": "minus 2 is nothing but 5 so 5 bits are", "start": 330.4, "duration": 5.12}, {"text": "going to be used for block numbers", "start": 333.199, "duration": 5.84}, {"text": "and using 5 bits we can have 0 to 31", "start": 335.52, "duration": 6.32}, {"text": "in total 32 that is 2 to the power 5", "start": 339.039, "duration": 4.961}, {"text": "blocks inside the main memory", "start": 341.84, "duration": 4.72}, {"text": "now the cache size is given as 32 bytes", "start": 344.0, "duration": 4.24}, {"text": "which can also be written as 2 to the", "start": 346.56, "duration": 2.4}, {"text": "power 5", "start": 348.24, "duration": 3.6}, {"text": "bytes now we also know the block and the", "start": 348.96, "duration": 4.4}, {"text": "line are equal in size", "start": 351.84, "duration": 3.68}, {"text": "therefore we can find out the number of", "start": 353.36, "duration": 3.2}, {"text": "cache lines", "start": 355.52, "duration": 3.679}, {"text": "by dividing the cache size by the block", "start": 356.56, "duration": 3.28}, {"text": "size", "start": 359.199, "duration": 3.201}, {"text": "which is nothing but 2 to the power 3", "start": 359.84, "duration": 3.199}, {"text": "because", "start": 362.4, "duration": 3.76}, {"text": "5 minus 2 is 3. therefore", "start": 363.039, "duration": 6.16}, {"text": "there are 0 to 7 that means 8 that is 2", "start": 366.16, "duration": 5.92}, {"text": "to the power 3 lines inside the cache", "start": 369.199, "duration": 4.56}, {"text": "now coming to the organization of the", "start": 372.08, "duration": 3.839}, {"text": "cache it's a two-way set associative", "start": 373.759, "duration": 2.961}, {"text": "cache", "start": 375.919, "duration": 3.28}, {"text": "that means every set is going to contain", "start": 376.72, "duration": 3.68}, {"text": "two lines", "start": 379.199, "duration": 3.601}, {"text": "now let's find out the number of sets", "start": 380.4, "duration": 4.16}, {"text": "now number of sets can be found", "start": 382.8, "duration": 4.0}, {"text": "out by dividing the number of cache", "start": 384.56, "duration": 4.56}, {"text": "lines by the set size", "start": 386.8, "duration": 4.239}, {"text": "now the set size is two lines that is 2", "start": 389.12, "duration": 3.359}, {"text": "to the power 1", "start": 391.039, "duration": 4.0}, {"text": "therefore 2 to the power 2 that is 2", "start": 392.479, "duration": 4.881}, {"text": "square because 3 minus 1 we already know", "start": 395.039, "duration": 3.28}, {"text": "is 2", "start": 397.36, "duration": 3.76}, {"text": "so 2 bits will be used for set numbers", "start": 398.319, "duration": 4.961}, {"text": "and we already know using 2 bits", "start": 401.12, "duration": 4.799}, {"text": "we can have 4 different sets starting", "start": 403.28, "duration": 3.6}, {"text": "from 0", "start": 405.919, "duration": 3.921}, {"text": "up until set number three therefore from", "start": 406.88, "duration": 3.36}, {"text": "seven", "start": 409.84, "duration": 3.359}, {"text": "bits physical address seven minus two", "start": 410.24, "duration": 5.04}, {"text": "plus two that is seven minus four that", "start": 413.199, "duration": 3.761}, {"text": "is three bits will be used for", "start": 415.28, "duration": 4.24}, {"text": "tags so this is the physical address", "start": 416.96, "duration": 5.359}, {"text": "split for this set associative cache", "start": 419.52, "duration": 5.2}, {"text": "now note it down in set associative", "start": 422.319, "duration": 4.32}, {"text": "mapping the physical address split", "start": 424.72, "duration": 4.72}, {"text": "has block or line offset portion set", "start": 426.639, "duration": 3.84}, {"text": "number filled", "start": 429.44, "duration": 3.84}, {"text": "and tag filled now let's observe the", "start": 430.479, "duration": 4.241}, {"text": "mapping procedure", "start": 433.28, "duration": 3.6}, {"text": "unlike direct mapping where the mapping", "start": 434.72, "duration": 4.72}, {"text": "takes place in terms of the cache aligns", "start": 436.88, "duration": 4.8}, {"text": "in set associative mapping the mapping", "start": 439.44, "duration": 4.479}, {"text": "is done with respect to the total number", "start": 441.68, "duration": 3.519}, {"text": "of sets", "start": 443.919, "duration": 3.521}, {"text": "that means in order to find out the", "start": 445.199, "duration": 4.0}, {"text": "appropriate set number", "start": 447.44, "duration": 4.24}, {"text": "for certain main memory block we need to", "start": 449.199, "duration": 4.0}, {"text": "divide the block number", "start": 451.68, "duration": 3.519}, {"text": "by the total number of sets inside the", "start": 453.199, "duration": 5.44}, {"text": "cache so the main memory block number 0", "start": 455.199, "duration": 6.961}, {"text": "will be mapped on to 0 mod 4 because due", "start": 458.639, "duration": 5.68}, {"text": "to two-way set associativity", "start": 462.16, "duration": 4.24}, {"text": "we figured out there are two square that", "start": 464.319, "duration": 4.081}, {"text": "means four different sets starting from", "start": 466.4, "duration": 3.12}, {"text": "the set number zero", "start": 468.4, "duration": 3.359}, {"text": "up until the set number three inside the", "start": 469.52, "duration": 3.2}, {"text": "cache", "start": 471.759, "duration": 4.16}, {"text": "so zero mod four is zero so the zeroth", "start": 472.72, "duration": 5.68}, {"text": "block will be mapped onto the zeroth set", "start": 475.919, "duration": 4.4}, {"text": "that gives two line options to the", "start": 478.4, "duration": 3.04}, {"text": "zeroth block", "start": 480.319, "duration": 3.681}, {"text": "that is line number zero and line number", "start": 481.44, "duration": 3.039}, {"text": "one", "start": 484.0, "duration": 2.479}, {"text": "now for the sake of this example let's", "start": 484.479, "duration": 4.241}, {"text": "assume the zeroth block is placed into", "start": 486.479, "duration": 3.761}, {"text": "the zeroth line", "start": 488.72, "duration": 2.96}, {"text": "now coming to the main memory block", "start": 490.24, "duration": 3.44}, {"text": "number 1 the same procedure will be", "start": 491.68, "duration": 2.799}, {"text": "followed", "start": 493.68, "duration": 2.639}, {"text": "that means we will divide the block", "start": 494.479, "duration": 3.84}, {"text": "number by the number of sets", "start": 496.319, "duration": 5.28}, {"text": "so 1 mod 4 gives us 1", "start": 498.319, "duration": 5.28}, {"text": "which again specifies that the main", "start": 501.599, "duration": 4.16}, {"text": "memory block number 1 will be mapped", "start": 503.599, "duration": 4.0}, {"text": "onto the cache lines belonging to the", "start": 505.759, "duration": 3.041}, {"text": "set number one", "start": 507.599, "duration": 3.201}, {"text": "that means the main memory block number", "start": 508.8, "duration": 4.32}, {"text": "one again has two different choices that", "start": 510.8, "duration": 4.159}, {"text": "is the line number two and line number", "start": 513.12, "duration": 2.479}, {"text": "three", "start": 514.959, "duration": 2.801}, {"text": "and let's assume this time the main", "start": 515.599, "duration": 4.24}, {"text": "memory block number one is placed into", "start": 517.76, "duration": 4.0}, {"text": "the cache line number three", "start": 519.839, "duration": 3.601}, {"text": "then again for the main memory block", "start": 521.76, "duration": 3.519}, {"text": "number two if we repeat the same", "start": 523.44, "duration": 4.24}, {"text": "procedure that means two mod four which", "start": 525.279, "duration": 3.041}, {"text": "gives us", "start": 527.68, "duration": 2.96}, {"text": "two specifying that the main memory", "start": 528.32, "duration": 4.32}, {"text": "block number two will be mapped onto any", "start": 530.64, "duration": 3.759}, {"text": "of the lines belonging to the set number", "start": 532.64, "duration": 2.48}, {"text": "two", "start": 534.399, "duration": 2.481}, {"text": "which gives the main memory block number", "start": 535.12, "duration": 3.6}, {"text": "two two different line choices that is", "start": 536.88, "duration": 2.72}, {"text": "line number four", "start": 538.72, "duration": 3.52}, {"text": "and five let's assume the block number", "start": 539.6, "duration": 5.12}, {"text": "two is placed into the line number five", "start": 542.24, "duration": 4.719}, {"text": "similarly in case of main memory block", "start": 544.72, "duration": 4.32}, {"text": "number three if we repeat the same", "start": 546.959, "duration": 3.44}, {"text": "procedure that means", "start": 549.04, "duration": 4.479}, {"text": "three mod four will result in three that", "start": 550.399, "duration": 5.12}, {"text": "means the main memory block number three", "start": 553.519, "duration": 3.76}, {"text": "can either be placed into the line", "start": 555.519, "duration": 3.44}, {"text": "number six or seven", "start": 557.279, "duration": 4.401}, {"text": "and let's just say it got placed in the", "start": 558.959, "duration": 4.401}, {"text": "line number six", "start": 561.68, "duration": 3.279}, {"text": "now the things will become a little bit", "start": 563.36, "duration": 3.039}, {"text": "more interesting", "start": 564.959, "duration": 3.281}, {"text": "let's observe what happens in case of", "start": 566.399, "duration": 3.681}, {"text": "main memory block number four", "start": 568.24, "duration": 3.76}, {"text": "so main memory block number four will be", "start": 570.08, "duration": 3.04}, {"text": "mapped onto four", "start": 572.0, "duration": 4.16}, {"text": "mod four that is set number zero now as", "start": 573.12, "duration": 3.92}, {"text": "you can see", "start": 576.16, "duration": 3.2}, {"text": "unlike direct memory mapping we do have", "start": 577.04, "duration": 4.16}, {"text": "a choice for the main memory block", "start": 579.36, "duration": 4.159}, {"text": "number four that is line number one", "start": 581.2, "duration": 3.92}, {"text": "and that's the beauty of the set", "start": 583.519, "duration": 3.76}, {"text": "associative mapping so the main memory", "start": 585.12, "duration": 3.44}, {"text": "block number four", "start": 587.279, "duration": 4.0}, {"text": "will be placed into the line number 1.", "start": 588.56, "duration": 4.399}, {"text": "now think about this situation", "start": 591.279, "duration": 3.921}, {"text": "in order to find out the block number 0", "start": 592.959, "duration": 3.601}, {"text": "or block number 4", "start": 595.2, "duration": 4.24}, {"text": "we need not search in the entire cache", "start": 596.56, "duration": 3.36}, {"text": "rather", "start": 599.44, "duration": 2.72}, {"text": "we only need to search inside the set", "start": 599.92, "duration": 3.359}, {"text": "number 0.", "start": 602.16, "duration": 2.96}, {"text": "so we will only need two different", "start": 603.279, "duration": 3.12}, {"text": "comparators of", "start": 605.12, "duration": 4.08}, {"text": "three bits so now do you understand why", "start": 606.399, "duration": 5.361}, {"text": "set associative mapping is so popular", "start": 609.2, "duration": 5.52}, {"text": "because it combines both the advantages", "start": 611.76, "duration": 3.36}, {"text": "of", "start": 614.72, "duration": 2.799}, {"text": "direct memory mapping and associative", "start": 615.12, "duration": 4.719}, {"text": "memory mapping", "start": 617.519, "duration": 4.801}, {"text": "so that was all for this session i hope", "start": 619.839, "duration": 4.801}, {"text": "the concept of set associative mapping", "start": 622.32, "duration": 3.759}, {"text": "is now clear to you", "start": 624.64, "duration": 3.52}, {"text": "in the following sessions we will", "start": 626.079, "duration": 4.161}, {"text": "observe various numerical example", "start": 628.16, "duration": 2.88}, {"text": "problems", "start": 630.24, "duration": 3.36}, {"text": "and exciting previous year questions on", "start": 631.04, "duration": 4.479}, {"text": "this memory mapping technique", "start": 633.6, "duration": 3.84}, {"text": "so i hope to see you in the next one", "start": 635.519, "duration": 12.32}, {"text": "thank you all for watching", "start": 637.44, "duration": 10.399}, {"text": "you", "start": 651.44, "duration": 2.079}]