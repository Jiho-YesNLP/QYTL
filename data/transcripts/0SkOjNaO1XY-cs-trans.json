[{"text": "hey everyone in this video i'm gonna", "start": 0.32, "duration": 3.84}, {"text": "give you an introduction to", "start": 2.72, "duration": 4.559}, {"text": "an overview of quick sorts and by the", "start": 4.16, "duration": 5.92}, {"text": "way i recently restarted my patreon page", "start": 7.279, "duration": 4.721}, {"text": "so i would really appreciate it if you", "start": 10.08, "duration": 3.599}, {"text": "could check it out i'm gonna put a link", "start": 12.0, "duration": 3.44}, {"text": "to it in the description below", "start": 13.679, "duration": 4.721}, {"text": "anyway let's get started so suppose", "start": 15.44, "duration": 5.04}, {"text": "you're given an array of integers", "start": 18.4, "duration": 4.799}, {"text": "for example this one and your task is to", "start": 20.48, "duration": 4.959}, {"text": "sort it in the ascending order", "start": 23.199, "duration": 4.961}, {"text": "just like that and one approach you can", "start": 25.439, "duration": 3.521}, {"text": "use for this", "start": 28.16, "duration": 3.84}, {"text": "is quick sort quick sort implements a", "start": 28.96, "duration": 4.48}, {"text": "recursive function", "start": 32.0, "duration": 3.6}, {"text": "which we're going to call qs that takes", "start": 33.44, "duration": 3.279}, {"text": "three arguments", "start": 35.6, "duration": 4.32}, {"text": "the given array l and r l and", "start": 36.719, "duration": 6.401}, {"text": "r will be two integers that are going to", "start": 39.92, "duration": 4.319}, {"text": "represent", "start": 43.12, "duration": 4.4}, {"text": "the indexes that will show the section", "start": 44.239, "duration": 5.441}, {"text": "of the array that we want to sort", "start": 47.52, "duration": 5.039}, {"text": "so for example if you're given this", "start": 49.68, "duration": 3.68}, {"text": "array", "start": 52.559, "duration": 4.081}, {"text": "and if l happens to be 4", "start": 53.36, "duration": 5.76}, {"text": "the index of this element right here and", "start": 56.64, "duration": 3.919}, {"text": "r happens to be", "start": 59.12, "duration": 5.039}, {"text": "6 the index of this element right here", "start": 60.559, "duration": 6.24}, {"text": "then after running this function with", "start": 64.159, "duration": 4.481}, {"text": "these particular arguments", "start": 66.799, "duration": 5.921}, {"text": "this array will be like this so", "start": 68.64, "duration": 6.56}, {"text": "the section of the array that's between", "start": 72.72, "duration": 3.84}, {"text": "l and r", "start": 75.2, "duration": 4.0}, {"text": "will be sorted just like that so if you", "start": 76.56, "duration": 3.919}, {"text": "want to sort the entire", "start": 79.2, "duration": 4.239}, {"text": "array using qs you just need to give the", "start": 80.479, "duration": 4.0}, {"text": "same array", "start": 83.439, "duration": 4.161}, {"text": "with l being 0 the index of the first", "start": 84.479, "duration": 3.841}, {"text": "element", "start": 87.6, "duration": 4.159}, {"text": "and r being 6 in this particular case", "start": 88.32, "duration": 6.479}, {"text": "the index of the last element and to", "start": 91.759, "duration": 6.641}, {"text": "implement this recursive function qs", "start": 94.799, "duration": 6.481}, {"text": "we'll first take care of the base case", "start": 98.4, "duration": 3.84}, {"text": "that's when", "start": 101.28, "duration": 4.08}, {"text": "l is greater than or equal to r", "start": 102.24, "duration": 7.44}, {"text": "if l is equal to r if they are pointing", "start": 105.36, "duration": 7.52}, {"text": "to the same element for example this one", "start": 109.68, "duration": 5.68}, {"text": "then that will mean that the section of", "start": 112.88, "duration": 3.12}, {"text": "the", "start": 115.36, "duration": 2.799}, {"text": "array that we want to sort has only one", "start": 116.0, "duration": 3.04}, {"text": "element", "start": 118.159, "duration": 2.801}, {"text": "that's already sorted so there's nothing", "start": 119.04, "duration": 3.679}, {"text": "to do and if", "start": 120.96, "duration": 5.119}, {"text": "l is greater than r", "start": 122.719, "duration": 6.481}, {"text": "it's sort of the same thing the section", "start": 126.079, "duration": 3.68}, {"text": "of the", "start": 129.2, "duration": 2.16}, {"text": "array that we want to sort has no", "start": 129.759, "duration": 4.321}, {"text": "elements so there's nothing to do", "start": 131.36, "duration": 4.64}, {"text": "and that means we can just return from", "start": 134.08, "duration": 3.12}, {"text": "this function", "start": 136.0, "duration": 3.12}, {"text": "okay so that's the base case but what", "start": 137.2, "duration": 4.0}, {"text": "about the recursive case", "start": 139.12, "duration": 4.24}, {"text": "for that let's take a look at this", "start": 141.2, "duration": 3.119}, {"text": "example here", "start": 143.36, "duration": 3.28}, {"text": "where we're given this particular array", "start": 144.319, "duration": 4.081}, {"text": "with l being 0", "start": 146.64, "duration": 4.879}, {"text": "and r being 6 or the index of the last", "start": 148.4, "duration": 4.72}, {"text": "element of this array", "start": 151.519, "duration": 4.961}, {"text": "in a recursive case we're going to do", "start": 153.12, "duration": 4.72}, {"text": "what's called", "start": 156.48, "duration": 3.6}, {"text": "partition i'm going to explain what it", "start": 157.84, "duration": 3.6}, {"text": "is in a second", "start": 160.08, "duration": 3.12}, {"text": "but for that we're going to use this", "start": 161.44, "duration": 3.519}, {"text": "function called partition", "start": 163.2, "duration": 5.039}, {"text": "that takes three arguments just like qs", "start": 164.959, "duration": 6.481}, {"text": "it's going to take r l and r", "start": 168.239, "duration": 5.441}, {"text": "and this is gonna do what's called", "start": 171.44, "duration": 3.04}, {"text": "partition", "start": 173.68, "duration": 3.36}, {"text": "for the array for the section between l", "start": 174.48, "duration": 3.679}, {"text": "and r", "start": 177.04, "duration": 3.919}, {"text": "so let me explain what it means exactly", "start": 178.159, "duration": 3.841}, {"text": "the first step", "start": 180.959, "duration": 3.761}, {"text": "for partitioning is to pick what's", "start": 182.0, "duration": 3.12}, {"text": "called", "start": 184.72, "duration": 2.799}, {"text": "a pivot i'm going to explain what it is", "start": 185.12, "duration": 3.199}, {"text": "in a second", "start": 187.519, "duration": 3.121}, {"text": "and there are different ways of choosing", "start": 188.319, "duration": 3.441}, {"text": "your pivot", "start": 190.64, "duration": 4.16}, {"text": "but one simple approach is to pick the", "start": 191.76, "duration": 3.6}, {"text": "last", "start": 194.8, "duration": 3.12}, {"text": "element as your pivot so that's this", "start": 195.36, "duration": 4.0}, {"text": "number right here in this particular", "start": 197.92, "duration": 2.64}, {"text": "case", "start": 199.36, "duration": 4.4}, {"text": "then the goal of this partition function", "start": 200.56, "duration": 6.64}, {"text": "is to divide this array into two", "start": 203.76, "duration": 6.16}, {"text": "groups the first group is going to be", "start": 207.2, "duration": 4.88}, {"text": "all the numbers that are less than the", "start": 209.92, "duration": 3.28}, {"text": "pivot", "start": 212.08, "duration": 3.76}, {"text": "so in this particular case that's these", "start": 213.2, "duration": 3.599}, {"text": "three numbers", "start": 215.84, "duration": 4.24}, {"text": "minus two minus one and zero", "start": 216.799, "duration": 6.0}, {"text": "and those numbers should come to the", "start": 220.08, "duration": 3.12}, {"text": "left", "start": 222.799, "duration": 3.681}, {"text": "of the pivot and the second group of", "start": 223.2, "duration": 5.92}, {"text": "the numbers that we're going to examine", "start": 226.48, "duration": 4.08}, {"text": "is going to be the numbers", "start": 229.12, "duration": 4.16}, {"text": "greater than the pivot so those are", "start": 230.56, "duration": 4.08}, {"text": "these three numbers", "start": 233.28, "duration": 5.599}, {"text": "3 2 and 4 in this particular case", "start": 234.64, "duration": 7.44}, {"text": "and these three numbers should come", "start": 238.879, "duration": 6.401}, {"text": "to the right of the pivots", "start": 242.08, "duration": 5.439}, {"text": "and obviously the pivot should come in", "start": 245.28, "duration": 3.28}, {"text": "between", "start": 247.519, "duration": 4.161}, {"text": "those two groups of numbers so in this", "start": 248.56, "duration": 4.48}, {"text": "particular case", "start": 251.68, "duration": 3.919}, {"text": "after running the partition function the", "start": 253.04, "duration": 3.12}, {"text": "array", "start": 255.599, "duration": 4.32}, {"text": "should look like this as you can see", "start": 256.16, "duration": 6.88}, {"text": "after running the partition function", "start": 259.919, "duration": 6.641}, {"text": "the pivot will come to the center of the", "start": 263.04, "duration": 5.28}, {"text": "array and", "start": 266.56, "duration": 4.56}, {"text": "all the numbers less than the pivot are", "start": 268.32, "duration": 3.76}, {"text": "to the left of it", "start": 271.12, "duration": 4.16}, {"text": "and all the numbers greater or equal", "start": 272.08, "duration": 6.48}, {"text": "to the pivot are to the right of it", "start": 275.28, "duration": 5.84}, {"text": "and we don't care about the ordering of", "start": 278.56, "duration": 5.199}, {"text": "the numbers within each group", "start": 281.12, "duration": 5.2}, {"text": "these numbers happen to be sorted but as", "start": 283.759, "duration": 5.121}, {"text": "you can see these numbers", "start": 286.32, "duration": 6.159}, {"text": "in this group are not sorted either way", "start": 288.88, "duration": 5.039}, {"text": "another thing to note here", "start": 292.479, "duration": 2.881}, {"text": "is that we're going to write this", "start": 293.919, "duration": 4.481}, {"text": "partition function so that it's going to", "start": 295.36, "duration": 5.76}, {"text": "do the partitioning and then it's going", "start": 298.4, "duration": 3.84}, {"text": "to return", "start": 301.12, "duration": 4.4}, {"text": "the new index of the pivot", "start": 302.24, "duration": 6.48}, {"text": "so in this particular case that's", "start": 305.52, "duration": 6.8}, {"text": "right here and so it's going to return", "start": 308.72, "duration": 7.44}, {"text": "3 or the index of the pivots", "start": 312.32, "duration": 6.4}, {"text": "and then we can store it in a new", "start": 316.16, "duration": 3.52}, {"text": "variable", "start": 318.72, "duration": 3.84}, {"text": "which we're going to call p here and i'm", "start": 319.68, "duration": 4.239}, {"text": "going to show you how to implement", "start": 322.56, "duration": 2.479}, {"text": "partition", "start": 323.919, "duration": 3.761}, {"text": "later but let's just here for now say", "start": 325.039, "duration": 5.041}, {"text": "that we already have this function", "start": 327.68, "duration": 6.32}, {"text": "so after partitioning the given section", "start": 330.08, "duration": 7.28}, {"text": "of the array we'll already know that the", "start": 334.0, "duration": 4.0}, {"text": "position", "start": 337.36, "duration": 4.48}, {"text": "of the pivot right here is correct", "start": 338.0, "duration": 6.4}, {"text": "so that means that this position isn't", "start": 341.84, "duration": 3.6}, {"text": "going to change", "start": 344.4, "duration": 3.68}, {"text": "after sorting this entire array so all", "start": 345.44, "duration": 3.84}, {"text": "we need to take", "start": 348.08, "duration": 4.88}, {"text": "care of after partitioning is this", "start": 349.28, "duration": 7.039}, {"text": "group of numbers and this group of", "start": 352.96, "duration": 4.239}, {"text": "numbers", "start": 356.319, "duration": 3.681}, {"text": "we need to sort this section and then", "start": 357.199, "duration": 4.241}, {"text": "this section", "start": 360.0, "duration": 4.16}, {"text": "and we can do that by calling qs on this", "start": 361.44, "duration": 3.44}, {"text": "section", "start": 364.16, "duration": 3.36}, {"text": "and then qs on this section we can do", "start": 364.88, "duration": 3.68}, {"text": "that", "start": 367.52, "duration": 5.36}, {"text": "with qs of r l and p minus 1.", "start": 368.56, "duration": 7.759}, {"text": "so here we're saying we're going to sort", "start": 372.88, "duration": 6.879}, {"text": "the section of the array between l", "start": 376.319, "duration": 8.0}, {"text": "which is right here and p minus 1", "start": 379.759, "duration": 7.44}, {"text": "which is right here and then we're going", "start": 384.319, "duration": 4.641}, {"text": "to do the same thing for the other", "start": 387.199, "duration": 3.201}, {"text": "section", "start": 388.96, "duration": 4.799}, {"text": "with q s of r p plus 1 and r", "start": 390.4, "duration": 5.76}, {"text": "so we're saying we're gonna sort the", "start": 393.759, "duration": 3.761}, {"text": "section over the array", "start": 396.16, "duration": 5.44}, {"text": "between p plus one and r", "start": 397.52, "duration": 6.16}, {"text": "and by repeating this process uh", "start": 401.6, "duration": 3.84}, {"text": "recursively we'll be able to", "start": 403.68, "duration": 4.16}, {"text": "sort the entire array now let's take a", "start": 405.44, "duration": 3.28}, {"text": "look at how", "start": 407.84, "duration": 3.759}, {"text": "partition might be implemented but", "start": 408.72, "duration": 4.72}, {"text": "before i show you some code", "start": 411.599, "duration": 4.241}, {"text": "i'm going to give you an overview of how", "start": 413.44, "duration": 3.759}, {"text": "it works", "start": 415.84, "duration": 4.799}, {"text": "and for that i'm going to use an example", "start": 417.199, "duration": 6.081}, {"text": "where we have an array of 11 elements", "start": 420.639, "duration": 4.0}, {"text": "just like this one", "start": 423.28, "duration": 3.759}, {"text": "and to explain it actually i'm going to", "start": 424.639, "duration": 4.0}, {"text": "jump into", "start": 427.039, "duration": 3.761}, {"text": "the middle of running this algorithm", "start": 428.639, "duration": 4.4}, {"text": "instead of at the beginning", "start": 430.8, "duration": 5.2}, {"text": "and i'm doing it that way because i", "start": 433.039, "duration": 3.761}, {"text": "think", "start": 436.0, "duration": 3.44}, {"text": "the middle part is easier to understand", "start": 436.8, "duration": 4.48}, {"text": "and then you know i'm going to explain", "start": 439.44, "duration": 4.319}, {"text": "the beginning part later anyway let's", "start": 441.28, "duration": 4.319}, {"text": "say here that we're trying to partition", "start": 443.759, "duration": 3.521}, {"text": "the entire array", "start": 445.599, "duration": 4.72}, {"text": "and our pivot is the last element", "start": 447.28, "duration": 6.88}, {"text": "10 right here and to run this algorithm", "start": 450.319, "duration": 7.201}, {"text": "we're going to use two indexes", "start": 454.16, "duration": 6.8}, {"text": "j and i", "start": 457.52, "duration": 6.88}, {"text": "j will keep track of the current number", "start": 460.96, "duration": 5.519}, {"text": "that we're examining and this is going", "start": 464.4, "duration": 4.16}, {"text": "to be part of a for loop", "start": 466.479, "duration": 4.72}, {"text": "that we're going to use so that for loop", "start": 468.56, "duration": 4.24}, {"text": "is going to say", "start": 471.199, "duration": 5.12}, {"text": "move j from the beginning of this array", "start": 472.8, "duration": 7.679}, {"text": "up to the number that's right before", "start": 476.319, "duration": 8.481}, {"text": "the pivots and currently we're examining", "start": 480.479, "duration": 7.44}, {"text": "this number let's say and in each", "start": 484.8, "duration": 4.88}, {"text": "iteration of the for loop", "start": 487.919, "duration": 3.361}, {"text": "we want to make sure that all the", "start": 489.68, "duration": 3.359}, {"text": "numbers we've seen so far", "start": 491.28, "duration": 4.72}, {"text": "are separated into two groups the first", "start": 493.039, "duration": 3.361}, {"text": "group", "start": 496.0, "duration": 2.96}, {"text": "is the numbers that are less than the", "start": 496.4, "duration": 3.84}, {"text": "pivot", "start": 498.96, "duration": 4.48}, {"text": "and the second group is the numbers that", "start": 500.24, "duration": 3.44}, {"text": "are", "start": 503.44, "duration": 3.759}, {"text": "greater than or equal to the pivot", "start": 503.68, "duration": 6.4}, {"text": "and we want to do it in the way that i", "start": 507.199, "duration": 4.56}, {"text": "this index right here", "start": 510.08, "duration": 5.439}, {"text": "will always point to the last", "start": 511.759, "duration": 7.441}, {"text": "number out of the numbers less than", "start": 515.519, "duration": 6.64}, {"text": "the pivots in other words there are two", "start": 519.2, "duration": 4.16}, {"text": "conditions", "start": 522.159, "duration": 4.481}, {"text": "that we want to always satisfy the first", "start": 523.36, "duration": 3.84}, {"text": "one", "start": 526.64, "duration": 2.96}, {"text": "is that all the numbers from the", "start": 527.2, "duration": 3.36}, {"text": "beginning", "start": 529.6, "duration": 4.16}, {"text": "up to i are less than the pivot", "start": 530.56, "duration": 4.8}, {"text": "and the second one is that all the", "start": 533.76, "duration": 4.079}, {"text": "numbers between i and j", "start": 535.36, "duration": 5.84}, {"text": "not including i are greater than or", "start": 537.839, "duration": 4.881}, {"text": "equal to the pivot", "start": 541.2, "duration": 3.52}, {"text": "and like i said earlier we're currently", "start": 542.72, "duration": 5.119}, {"text": "examining this number", "start": 544.72, "duration": 5.6}, {"text": "and those two conditions are already", "start": 547.839, "duration": 3.601}, {"text": "satisfied", "start": 550.32, "duration": 3.6}, {"text": "because 12 is already greater than the", "start": 551.44, "duration": 3.36}, {"text": "pivot", "start": 553.92, "duration": 2.8}, {"text": "so we can move to the next number by", "start": 554.8, "duration": 3.76}, {"text": "incrementing j", "start": 556.72, "duration": 5.84}, {"text": "by 1. and at this point uh", "start": 558.56, "duration": 6.16}, {"text": "one of those conditions is not satisfied", "start": 562.56, "duration": 3.12}, {"text": "anymore", "start": 564.72, "duration": 4.559}, {"text": "and uh we can fix that by doing this", "start": 565.68, "duration": 6.64}, {"text": "we're gonna increment i", "start": 569.279, "duration": 6.961}, {"text": "by one or move i over here and then swap", "start": 572.32, "duration": 7.28}, {"text": "the values at i and j", "start": 576.24, "duration": 6.719}, {"text": "just like that and that way", "start": 579.6, "duration": 6.08}, {"text": "those two conditions are satisfied again", "start": 582.959, "duration": 4.081}, {"text": "so all the numbers", "start": 585.68, "duration": 4.32}, {"text": "up to i are less than the pivot and all", "start": 587.04, "duration": 3.84}, {"text": "the numbers", "start": 590.0, "duration": 4.32}, {"text": "after that up to j are greater than or", "start": 590.88, "duration": 5.519}, {"text": "equal to the pivots", "start": 594.32, "duration": 6.24}, {"text": "so we can keep going move j over here", "start": 596.399, "duration": 7.361}, {"text": "and since this number 16 is already", "start": 600.56, "duration": 4.32}, {"text": "greater than", "start": 603.76, "duration": 4.24}, {"text": "the pivot there is nothing to do so", "start": 604.88, "duration": 6.959}, {"text": "let's move j over here", "start": 608.0, "duration": 6.88}, {"text": "and as you can see the number at j", "start": 611.839, "duration": 5.361}, {"text": "is less than the pivot so we'll need to", "start": 614.88, "duration": 3.76}, {"text": "do the same thing", "start": 617.2, "duration": 4.96}, {"text": "uh increment i by one or move", "start": 618.64, "duration": 7.28}, {"text": "i over here and then swap the values", "start": 622.16, "duration": 8.56}, {"text": "at i and j just like that", "start": 625.92, "duration": 4.8}, {"text": "okay and let's uh finish this up", "start": 631.04, "duration": 7.039}, {"text": "by moving j over here or by", "start": 634.079, "duration": 7.281}, {"text": "incrementing j by one and then", "start": 638.079, "duration": 6.561}, {"text": "uh doing the same thing increment i", "start": 641.36, "duration": 6.32}, {"text": "by 1 and then swap other values at i and", "start": 644.64, "duration": 5.199}, {"text": "j", "start": 647.68, "duration": 2.159}, {"text": "all right and as you can see at this", "start": 650.079, "duration": 3.041}, {"text": "point", "start": 652.0, "duration": 4.24}, {"text": "this array has been grouped", "start": 653.12, "duration": 6.0}, {"text": "into two groups of numbers the number is", "start": 656.24, "duration": 3.76}, {"text": "less than the pivot", "start": 659.12, "duration": 3.44}, {"text": "and the numbers are greater than the", "start": 660.0, "duration": 3.68}, {"text": "pivot", "start": 662.56, "duration": 3.12}, {"text": "but the last thing we need to do is we", "start": 663.68, "duration": 3.839}, {"text": "need to make sure that the pivot", "start": 665.68, "duration": 5.279}, {"text": "is between those two groups we can do", "start": 667.519, "duration": 4.481}, {"text": "that", "start": 670.959, "duration": 4.241}, {"text": "by swapping the pivots", "start": 672.0, "duration": 6.399}, {"text": "with the value at", "start": 675.2, "duration": 7.12}, {"text": "i plus 1 this value right here", "start": 678.399, "duration": 6.401}, {"text": "so let's swap those two values just like", "start": 682.32, "duration": 4.16}, {"text": "that", "start": 684.8, "duration": 4.159}, {"text": "and then we're done partitioning like i", "start": 686.48, "duration": 3.12}, {"text": "said from", "start": 688.959, "duration": 3.12}, {"text": "our partition function we're supposed to", "start": 689.6, "duration": 3.76}, {"text": "return the", "start": 692.079, "duration": 4.801}, {"text": "index of the pivot so we can just return", "start": 693.36, "duration": 6.24}, {"text": "i plus 1 because that's the index of the", "start": 696.88, "duration": 3.76}, {"text": "pivot", "start": 699.6, "duration": 3.919}, {"text": "okay so now that we hopefully understand", "start": 700.64, "duration": 5.199}, {"text": "how this partition algorithm works", "start": 703.519, "duration": 5.44}, {"text": "let's take a look at some suit code uh", "start": 705.839, "duration": 5.521}, {"text": "like i said earlier we're gonna call", "start": 708.959, "duration": 3.281}, {"text": "this function", "start": 711.36, "duration": 3.599}, {"text": "partition and it's gonna take three", "start": 712.24, "duration": 3.839}, {"text": "arguments", "start": 714.959, "duration": 4.161}, {"text": "the given array l and r", "start": 716.079, "duration": 5.041}, {"text": "and this function is going to apply", "start": 719.12, "duration": 3.2}, {"text": "partition", "start": 721.12, "duration": 4.0}, {"text": "to the section of the array between l", "start": 722.32, "duration": 3.04}, {"text": "and", "start": 725.12, "duration": 3.279}, {"text": "r let's say here as an example", "start": 725.36, "duration": 5.68}, {"text": "that we're given this particular array", "start": 728.399, "duration": 3.041}, {"text": "with", "start": 731.04, "duration": 3.76}, {"text": "l being the beginning of the array", "start": 731.44, "duration": 6.639}, {"text": "or zero and r uh being the", "start": 734.8, "duration": 5.68}, {"text": "end of the array or six in this", "start": 738.079, "duration": 3.841}, {"text": "particular case", "start": 740.48, "duration": 3.68}, {"text": "and the first step of this function is", "start": 741.92, "duration": 4.8}, {"text": "going to be define the pivot", "start": 744.16, "duration": 5.679}, {"text": "and that's going to be the value at r or", "start": 746.72, "duration": 4.239}, {"text": "the last element", "start": 749.839, "duration": 3.201}, {"text": "of the section of the array that we are", "start": 750.959, "duration": 3.601}, {"text": "trying to partition", "start": 753.04, "duration": 3.2}, {"text": "and that's going to be 0 in this", "start": 754.56, "duration": 3.44}, {"text": "particular case", "start": 756.24, "duration": 5.36}, {"text": "and then we're going to define i", "start": 758.0, "duration": 7.279}, {"text": "to be o minus 1. in this particular case", "start": 761.6, "duration": 7.44}, {"text": "i will be initialized to minus 1.", "start": 765.279, "duration": 7.521}, {"text": "and then we're going to run a for loop", "start": 769.04, "duration": 7.52}, {"text": "for j from l this element", "start": 772.8, "duration": 7.279}, {"text": "up to r minus 1 the last", "start": 776.56, "duration": 6.8}, {"text": "index before the pivot and in", "start": 780.079, "duration": 6.32}, {"text": "each iteration of this for loop we're", "start": 783.36, "duration": 3.919}, {"text": "going to check", "start": 786.399, "duration": 2.401}, {"text": "if the current number that we're", "start": 787.279, "duration": 3.281}, {"text": "examining or", "start": 788.8, "duration": 4.96}, {"text": "r of j is", "start": 790.56, "duration": 6.56}, {"text": "less than the pivots", "start": 793.76, "duration": 6.16}, {"text": "if that's the case for example the", "start": 797.12, "duration": 3.76}, {"text": "current number", "start": 799.92, "duration": 3.68}, {"text": "we're examining minus 2 is less than the", "start": 800.88, "duration": 4.8}, {"text": "pivot which is 0.", "start": 803.6, "duration": 4.239}, {"text": "if that's the case then we're going to", "start": 805.68, "duration": 3.36}, {"text": "increment", "start": 807.839, "duration": 4.401}, {"text": "i by 1", "start": 809.04, "duration": 6.56}, {"text": "and then we're going to swap", "start": 812.24, "duration": 6.48}, {"text": "r of i and r of j", "start": 815.6, "duration": 5.679}, {"text": "so those two numbers happen to be the", "start": 818.72, "duration": 4.72}, {"text": "same number in this particular case", "start": 821.279, "duration": 4.961}, {"text": "so we're swapping this number by itself", "start": 823.44, "duration": 3.44}, {"text": "and", "start": 826.24, "duration": 3.599}, {"text": "nothing happens but let's continue with", "start": 826.88, "duration": 4.639}, {"text": "this for loop", "start": 829.839, "duration": 6.081}, {"text": "so after that we'll move j over here", "start": 831.519, "duration": 6.961}, {"text": "and since uh the current number that", "start": 835.92, "duration": 3.44}, {"text": "we're examining", "start": 838.48, "duration": 5.2}, {"text": "3 is greater than or equal to pivot", "start": 839.36, "duration": 7.68}, {"text": "so nothing happens and so we move j", "start": 843.68, "duration": 6.959}, {"text": "over here and at that point", "start": 847.04, "duration": 6.0}, {"text": "this number is less than the pivot so", "start": 850.639, "duration": 3.44}, {"text": "we're going to move i", "start": 853.04, "duration": 3.359}, {"text": "over here and then we're going to swap", "start": 854.079, "duration": 3.76}, {"text": "the numbers at", "start": 856.399, "duration": 4.56}, {"text": "i and j and just like that we can keep", "start": 857.839, "duration": 3.68}, {"text": "going", "start": 860.959, "duration": 3.761}, {"text": "with this for loop until j", "start": 861.519, "duration": 6.56}, {"text": "is right here at that point", "start": 864.72, "duration": 5.52}, {"text": "our array is going to look like this uh", "start": 868.079, "duration": 3.521}, {"text": "j is going to be", "start": 870.24, "duration": 4.88}, {"text": "right here and i is going to be", "start": 871.6, "duration": 6.239}, {"text": "right here uh after that we want the", "start": 875.12, "duration": 3.12}, {"text": "people", "start": 877.839, "duration": 2.56}, {"text": "to be between those two groups of", "start": 878.24, "duration": 3.2}, {"text": "numbers", "start": 880.399, "duration": 4.161}, {"text": "and we can do that by swapping r of i", "start": 881.44, "duration": 3.92}, {"text": "plus 1", "start": 884.56, "duration": 3.92}, {"text": "this number right here 5 and", "start": 885.36, "duration": 6.24}, {"text": "our pivot r of r so", "start": 888.48, "duration": 6.4}, {"text": "that's this number and", "start": 891.6, "duration": 6.479}, {"text": "this number and once it's swapped", "start": 894.88, "duration": 6.56}, {"text": "0 will come here and 5 will come", "start": 898.079, "duration": 6.56}, {"text": "here we just need to return uh", "start": 901.44, "duration": 6.48}, {"text": "i plus 1 the index of the pivots", "start": 904.639, "duration": 6.481}, {"text": "okay so that's my suit code", "start": 907.92, "duration": 5.12}, {"text": "but you can check my actual", "start": 911.12, "duration": 4.079}, {"text": "implementation in python and java", "start": 913.04, "duration": 5.599}, {"text": "at this url too okay so that's the quick", "start": 915.199, "duration": 4.64}, {"text": "sort algorithm", "start": 918.639, "duration": 3.76}, {"text": "but what about the time complexity to", "start": 919.839, "duration": 3.761}, {"text": "understand this", "start": 922.399, "duration": 3.68}, {"text": "we'll need to consider the best case the", "start": 923.6, "duration": 3.28}, {"text": "worst case", "start": 926.079, "duration": 3.44}, {"text": "as well as the average case so let's", "start": 926.88, "duration": 3.519}, {"text": "start with the", "start": 929.519, "duration": 4.161}, {"text": "worst case that's when the given array", "start": 930.399, "duration": 6.8}, {"text": "is already sorted like this one or", "start": 933.68, "duration": 5.76}, {"text": "when we have a lot of duplicates in the", "start": 937.199, "duration": 3.041}, {"text": "given array", "start": 939.44, "duration": 3.28}, {"text": "like this one and actually the time", "start": 940.24, "duration": 3.279}, {"text": "complexity", "start": 942.72, "duration": 3.919}, {"text": "of these two cases will be the same so", "start": 943.519, "duration": 5.921}, {"text": "let's just consider a case where the", "start": 946.639, "duration": 5.681}, {"text": "given array is already sorted", "start": 949.44, "duration": 5.6}, {"text": "for this particular example uh to sort", "start": 952.32, "duration": 4.959}, {"text": "this array with the qs function that we", "start": 955.04, "duration": 3.359}, {"text": "saw earlier", "start": 957.279, "duration": 3.92}, {"text": "we would call it with the given array 0", "start": 958.399, "duration": 4.481}, {"text": "and 6.", "start": 961.199, "duration": 4.801}, {"text": "so 0 would be right here at the", "start": 962.88, "duration": 4.319}, {"text": "beginning of the array", "start": 966.0, "duration": 3.68}, {"text": "and 6 would be the index of the last", "start": 967.199, "duration": 3.44}, {"text": "element", "start": 969.68, "duration": 3.76}, {"text": "of the array and the pivot will be this", "start": 970.639, "duration": 4.081}, {"text": "one", "start": 973.44, "duration": 4.16}, {"text": "and after running the partition function", "start": 974.72, "duration": 4.88}, {"text": "for the entire array", "start": 977.6, "duration": 5.039}, {"text": "actually what's going to happen is", "start": 979.6, "duration": 5.28}, {"text": "the pivot will stay here and all the", "start": 982.639, "duration": 3.2}, {"text": "elements", "start": 984.88, "duration": 3.84}, {"text": "will stay where they are so nothing is", "start": 985.839, "duration": 5.041}, {"text": "going to happen to this array", "start": 988.72, "duration": 5.28}, {"text": "and after finishing a partition", "start": 990.88, "duration": 6.399}, {"text": "we'll need to call qs for the rest", "start": 994.0, "duration": 6.32}, {"text": "of the array other than the pivots", "start": 997.279, "duration": 6.081}, {"text": "we can do that with qs of", "start": 1000.32, "duration": 6.639}, {"text": "r and 0 and 5. and we end up", "start": 1003.36, "duration": 5.44}, {"text": "doing the same sort of thing over and", "start": 1006.959, "duration": 3.761}, {"text": "over again so we would call", "start": 1008.8, "duration": 4.24}, {"text": "qs of r and zero and four after that and", "start": 1010.72, "duration": 3.2}, {"text": "so on", "start": 1013.04, "duration": 4.0}, {"text": "until we get down to qs of r uh", "start": 1013.92, "duration": 6.24}, {"text": "zero and one so the pattern we see", "start": 1017.04, "duration": 6.32}, {"text": "here is that the number of elements", "start": 1020.16, "duration": 4.879}, {"text": "that we need to examine in the qs", "start": 1023.36, "duration": 4.079}, {"text": "function starts at let's say", "start": 1025.039, "duration": 4.4}, {"text": "n the number of elements in the entire", "start": 1027.439, "duration": 3.041}, {"text": "array", "start": 1029.439, "duration": 4.48}, {"text": "and then we get down to n minus 1", "start": 1030.48, "duration": 7.199}, {"text": "and so on n minus 2 up until", "start": 1033.919, "duration": 7.04}, {"text": "1. so as i said this is the number of", "start": 1037.679, "duration": 4.16}, {"text": "elements", "start": 1040.959, "duration": 2.641}, {"text": "that we need to examine in the qs", "start": 1041.839, "duration": 4.24}, {"text": "function each of these numbers", "start": 1043.6, "duration": 5.6}, {"text": "but it's also the number of iterations", "start": 1046.079, "duration": 4.48}, {"text": "that we need to go through", "start": 1049.2, "duration": 4.56}, {"text": "in our main for loop to be precise", "start": 1050.559, "duration": 5.841}, {"text": "you might say if we have n elements", "start": 1053.76, "duration": 4.64}, {"text": "given to the qs function", "start": 1056.4, "duration": 6.48}, {"text": "we'll need to go through n minus 1", "start": 1058.4, "duration": 7.519}, {"text": "for loops in our partition function but", "start": 1062.88, "duration": 3.84}, {"text": "it's roughly", "start": 1065.919, "duration": 3.681}, {"text": "n so if you want to add up the total", "start": 1066.72, "duration": 3.92}, {"text": "number of", "start": 1069.6, "duration": 3.439}, {"text": "for loop iterations that we need to go", "start": 1070.64, "duration": 5.12}, {"text": "through for this entire", "start": 1073.039, "duration": 4.961}, {"text": "execution of the function then we can", "start": 1075.76, "duration": 3.84}, {"text": "just add these numbers", "start": 1078.0, "duration": 4.64}, {"text": "up so we get", "start": 1079.6, "duration": 6.72}, {"text": "this one n times n plus 1 divided by 2", "start": 1082.64, "duration": 6.56}, {"text": "which is o of n squared and that's why", "start": 1086.32, "duration": 3.599}, {"text": "we get", "start": 1089.2, "duration": 3.04}, {"text": "o n squared as the time complexity of", "start": 1089.919, "duration": 4.64}, {"text": "the worst case scenario and what about", "start": 1092.24, "duration": 3.439}, {"text": "the best case", "start": 1094.559, "duration": 4.161}, {"text": "well the best case is", "start": 1095.679, "duration": 6.401}, {"text": "every time we chose our pivot it happens", "start": 1098.72, "duration": 3.839}, {"text": "to be", "start": 1102.08, "duration": 3.2}, {"text": "the best choice so it means it happens", "start": 1102.559, "duration": 3.281}, {"text": "to be", "start": 1105.28, "duration": 3.44}, {"text": "at the median or the closest number to", "start": 1105.84, "duration": 4.0}, {"text": "the median", "start": 1108.72, "duration": 3.6}, {"text": "of the given section of the given array", "start": 1109.84, "duration": 4.0}, {"text": "so as you can see in this particular", "start": 1112.32, "duration": 2.16}, {"text": "case", "start": 1113.84, "duration": 4.719}, {"text": "the number of integers less than", "start": 1114.48, "duration": 7.84}, {"text": "the pivot is equivalent to the number of", "start": 1118.559, "duration": 6.881}, {"text": "integers greater than the pivot in the", "start": 1122.32, "duration": 5.04}, {"text": "best case scenario like that", "start": 1125.44, "duration": 4.32}, {"text": "we would start with n elements that we", "start": 1127.36, "duration": 3.439}, {"text": "need to deal with", "start": 1129.76, "duration": 4.56}, {"text": "in our qs function and then", "start": 1130.799, "duration": 6.801}, {"text": "in the subsequent cause of qs we would", "start": 1134.32, "duration": 4.239}, {"text": "have to deal with", "start": 1137.6, "duration": 3.28}, {"text": "n over two elements in one of the calls", "start": 1138.559, "duration": 3.761}, {"text": "and n over two", "start": 1140.88, "duration": 3.039}, {"text": "in the other one uh it's going to be", "start": 1142.32, "duration": 3.52}, {"text": "slightly less than n over two", "start": 1143.919, "duration": 4.88}, {"text": "uh but it's going to be about n over two", "start": 1145.84, "duration": 3.839}, {"text": "and", "start": 1148.799, "duration": 4.0}, {"text": "in the subsequent cause after that uh we", "start": 1149.679, "duration": 4.721}, {"text": "would need to deal with n over", "start": 1152.799, "duration": 5.201}, {"text": "four elements and so on uh until we get", "start": 1154.4, "duration": 4.639}, {"text": "down to", "start": 1158.0, "duration": 4.16}, {"text": "uh single elements and what's", "start": 1159.039, "duration": 4.081}, {"text": "interesting here", "start": 1162.16, "duration": 4.0}, {"text": "is if you look at each level", "start": 1163.12, "duration": 6.48}, {"text": "if you look at the top level for example", "start": 1166.16, "duration": 6.08}, {"text": "you can see that we would go through", "start": 1169.6, "duration": 3.68}, {"text": "about", "start": 1172.24, "duration": 4.319}, {"text": "n for loops in our partition", "start": 1173.28, "duration": 6.56}, {"text": "function in this level", "start": 1176.559, "duration": 5.841}, {"text": "and if you look at the second level we", "start": 1179.84, "duration": 4.719}, {"text": "can do the same kind of analysis", "start": 1182.4, "duration": 6.48}, {"text": "for uh this call", "start": 1184.559, "duration": 7.12}, {"text": "in the partition function we would need", "start": 1188.88, "duration": 3.2}, {"text": "to", "start": 1191.679, "duration": 3.841}, {"text": "deal with n over 2 for loops and for", "start": 1192.08, "duration": 7.44}, {"text": "this one we need to deal with n over 2", "start": 1195.52, "duration": 8.88}, {"text": "for loops as well so the total number of", "start": 1199.52, "duration": 8.08}, {"text": "loops that we need to go through for the", "start": 1204.4, "duration": 4.0}, {"text": "second", "start": 1207.6, "duration": 4.16}, {"text": "level is going to be of n", "start": 1208.4, "duration": 7.44}, {"text": "as well or about n uh loops", "start": 1211.76, "duration": 6.72}, {"text": "it's going to be the same thing with", "start": 1215.84, "duration": 5.12}, {"text": "this level and", "start": 1218.48, "duration": 6.16}, {"text": "this level as well", "start": 1220.96, "duration": 6.24}, {"text": "and this kind of analysis will show you", "start": 1224.64, "duration": 3.12}, {"text": "that", "start": 1227.2, "duration": 3.68}, {"text": "uh executing everything on each level", "start": 1227.76, "duration": 6.64}, {"text": "will take off and in time and you might", "start": 1230.88, "duration": 6.4}, {"text": "say well how many levels do we have", "start": 1234.4, "duration": 6.159}, {"text": "in this recursion tree well", "start": 1237.28, "duration": 6.639}, {"text": "we can use the same kind of argument uh", "start": 1240.559, "duration": 7.36}, {"text": "as the one i used in my binary search", "start": 1243.919, "duration": 4.801}, {"text": "video", "start": 1247.919, "duration": 3.681}, {"text": "to show that the number of levels here", "start": 1248.72, "duration": 4.319}, {"text": "is going to be", "start": 1251.6, "duration": 4.72}, {"text": "about log n or log 2 of n", "start": 1253.039, "duration": 5.281}, {"text": "so basically what i'm saying here is", "start": 1256.32, "duration": 3.12}, {"text": "that we have", "start": 1258.32, "duration": 5.28}, {"text": "log n levels here and for each level", "start": 1259.44, "duration": 7.2}, {"text": "and the time complexity is of n so", "start": 1263.6, "duration": 5.36}, {"text": "to find the total time complexity for", "start": 1266.64, "duration": 3.68}, {"text": "the best case scenario", "start": 1268.96, "duration": 4.4}, {"text": "we can just multiply them together", "start": 1270.32, "duration": 6.4}, {"text": "and we get of n log n", "start": 1273.36, "duration": 5.52}, {"text": "so that's the time complexity for the", "start": 1276.72, "duration": 3.76}, {"text": "best case scenario", "start": 1278.88, "duration": 3.44}, {"text": "you might say what about the average", "start": 1280.48, "duration": 3.92}, {"text": "case well it's more", "start": 1282.32, "duration": 5.28}, {"text": "tricky to think about but given a few", "start": 1284.4, "duration": 4.48}, {"text": "assumptions", "start": 1287.6, "duration": 3.04}, {"text": "we can actually show that the time", "start": 1288.88, "duration": 3.84}, {"text": "complexity for the average case", "start": 1290.64, "duration": 5.12}, {"text": "is also of n log n", "start": 1292.72, "duration": 6.079}, {"text": "and by the way those few assumptions are", "start": 1295.76, "duration": 6.08}, {"text": "first that there are no duplicates so we", "start": 1298.799, "duration": 4.801}, {"text": "don't have a case like this", "start": 1301.84, "duration": 4.48}, {"text": "and second that the ordering of the", "start": 1303.6, "duration": 3.199}, {"text": "array", "start": 1306.32, "duration": 4.56}, {"text": "is random and i saw this proof", "start": 1306.799, "duration": 6.641}, {"text": "in a book i used as a reference to make", "start": 1310.88, "duration": 3.52}, {"text": "this video", "start": 1313.44, "duration": 2.56}, {"text": "so in case you're curious about the", "start": 1314.4, "duration": 4.159}, {"text": "proof i'll put a link to the book in the", "start": 1316.0, "duration": 4.32}, {"text": "description below as well", "start": 1318.559, "duration": 4.081}, {"text": "okay and before i go i wanted to mention", "start": 1320.32, "duration": 3.44}, {"text": "a few things", "start": 1322.64, "duration": 5.6}, {"text": "to note about the implementation details", "start": 1323.76, "duration": 8.24}, {"text": "the first one is how to choose the pivot", "start": 1328.24, "duration": 5.919}, {"text": "of course in our implementation we chose", "start": 1332.0, "duration": 4.0}, {"text": "the last element", "start": 1334.159, "duration": 4.88}, {"text": "but another method is to pick a random", "start": 1336.0, "duration": 7.039}, {"text": "element as your pivot or equivalently", "start": 1339.039, "duration": 7.281}, {"text": "you can before running our quicksort", "start": 1343.039, "duration": 4.241}, {"text": "function", "start": 1346.32, "duration": 3.92}, {"text": "you can reach shuffle the given array", "start": 1347.28, "duration": 3.84}, {"text": "randomly", "start": 1350.24, "duration": 2.96}, {"text": "and then pick the last element as the", "start": 1351.12, "duration": 3.439}, {"text": "pivot", "start": 1353.2, "duration": 3.359}, {"text": "and another method for choosing the", "start": 1354.559, "duration": 5.36}, {"text": "pivot is called median of three", "start": 1356.559, "duration": 5.841}, {"text": "the idea of this approach is instead of", "start": 1359.919, "duration": 3.361}, {"text": "picking one", "start": 1362.4, "duration": 4.399}, {"text": "element you would choose", "start": 1363.28, "duration": 6.639}, {"text": "three elements randomly", "start": 1366.799, "duration": 6.081}, {"text": "from the given section of the given", "start": 1369.919, "duration": 3.601}, {"text": "array", "start": 1372.88, "duration": 3.52}, {"text": "and then you would pick the median of", "start": 1373.52, "duration": 3.76}, {"text": "those", "start": 1376.4, "duration": 3.6}, {"text": "three numbers and that way you'll be", "start": 1377.28, "duration": 5.2}, {"text": "able to decrease the probability", "start": 1380.0, "duration": 5.84}, {"text": "that you would pick a bad pivot", "start": 1382.48, "duration": 5.92}, {"text": "for the given section of the given array", "start": 1385.84, "duration": 3.04}, {"text": "okay", "start": 1388.4, "duration": 3.759}, {"text": "and the second thing i wanted to discuss", "start": 1388.88, "duration": 6.72}, {"text": "is dealing with duplicates", "start": 1392.159, "duration": 5.681}, {"text": "because as we saw quicksort doesn't", "start": 1395.6, "duration": 3.28}, {"text": "perform well", "start": 1397.84, "duration": 2.8}, {"text": "when there are a lot of duplicates in", "start": 1398.88, "duration": 3.6}, {"text": "the given array", "start": 1400.64, "duration": 4.88}, {"text": "one way to deal with this is called", "start": 1402.48, "duration": 6.0}, {"text": "three-way quick sort in case you're", "start": 1405.52, "duration": 4.56}, {"text": "curious about it i'm gonna", "start": 1408.48, "duration": 4.16}, {"text": "put a link to a page that describes this", "start": 1410.08, "duration": 3.76}, {"text": "method", "start": 1412.64, "duration": 4.88}, {"text": "but the idea of this method is that", "start": 1413.84, "duration": 6.8}, {"text": "instead of dividing the given section of", "start": 1417.52, "duration": 4.159}, {"text": "the given array", "start": 1420.64, "duration": 4.08}, {"text": "into two groups we divide it into three", "start": 1421.679, "duration": 4.081}, {"text": "groups", "start": 1424.72, "duration": 2.88}, {"text": "the first group is going to be the", "start": 1425.76, "duration": 4.24}, {"text": "numbers less than the pivot", "start": 1427.6, "duration": 4.4}, {"text": "the second group is going to be the", "start": 1430.0, "duration": 4.08}, {"text": "numbers equal", "start": 1432.0, "duration": 4.24}, {"text": "to the pivot and the third group is", "start": 1434.08, "duration": 3.04}, {"text": "going to be", "start": 1436.24, "duration": 4.0}, {"text": "the numbers greater than the pivot", "start": 1437.12, "duration": 5.28}, {"text": "again in case you're curious about it", "start": 1440.24, "duration": 4.319}, {"text": "i'm going to put a link to a page", "start": 1442.4, "duration": 3.44}, {"text": "with more info about it in the", "start": 1444.559, "duration": 3.521}, {"text": "description below anyway", "start": 1445.84, "duration": 5.04}, {"text": "that's all i wanted to talk about in", "start": 1448.08, "duration": 3.68}, {"text": "this video", "start": 1450.88, "duration": 4.159}, {"text": "i hope you enjoyed this video and uh", "start": 1451.76, "duration": 4.799}, {"text": "thank you as always for watching my", "start": 1455.039, "duration": 5.601}, {"text": "videos i'll see you guys in the next one", "start": 1456.559, "duration": 4.081}]