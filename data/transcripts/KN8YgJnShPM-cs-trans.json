[{"text": "Hi, I'm Carrie Anne, and welcome to Crash\nCourse Computer Science!", "start": 3.12, "duration": 2.82}, {"text": "Last episode we talked about data storage,\nhow technologies like magnetic tape and hard", "start": 5.94, "duration": 4.16}, {"text": "disks can store millions, billions and trillions of bits of data, for long durations, even", "start": 10.11, "duration": 3.53}, {"text": "without power.", "start": 13.651, "duration": 1.0}, {"text": "Which is perfect for recording \u201cbig blobs\u201d\nof related data, what are more commonly called", "start": 14.651, "duration": 3.869}, {"text": "computer files.", "start": 18.52, "duration": 1.12}, {"text": "You\u2019ve no doubt encountered many types,\nlike text files, music files, photos and videos.", "start": 19.64, "duration": 4.67}, {"text": "Today, we\u2019re going to talk about how files\nwork, and how computers keep them all organized", "start": 24.31, "duration": 4.24}, {"text": "with File Systems.", "start": 28.55, "duration": 1.41}, {"text": "INTRO", "start": 29.96, "duration": 8.9}, {"text": "It\u2019s perfectly legal for a file to contain\narbitrary, unformatted data, but it\u2019s most", "start": 38.86, "duration": 4.32}, {"text": "useful and practical if the data inside the\nfile is organized somehow.", "start": 43.18, "duration": 3.89}, {"text": "This is called a file format.", "start": 47.07, "duration": 1.769}, {"text": "You can invent your own, and programmers do\nthat from time to time, but it\u2019s usually", "start": 48.839, "duration": 3.81}, {"text": "best and easiest to use an existing standard, like JPEG and MP3.", "start": 52.649, "duration": 3.62}, {"text": "Let\u2019s look at some simple file formats.", "start": 56.269, "duration": 2.47}, {"text": "The most straightforward are T-X-T files,\nwhich contain, surprise, text.", "start": 58.739, "duration": 5.741}, {"text": "Like all computer files, this is just a huge\nlist of numbers, stored as binary.", "start": 64.48, "duration": 3.88}, {"text": "If we look at the raw values of a T-X-T file\nin storage, it would look something like this:", "start": 68.36, "duration": 4.64}, {"text": "We can view this as decimal numbers instead of binary, but that still doesn\u2019t help us", "start": 73.0, "duration": 3.91}, {"text": "read the text.", "start": 76.91, "duration": 1.0}, {"text": "The key to interpreting this data is knowing\nthat T-X-T files use ASCII, a character encoding", "start": 77.91, "duration": 4.15}, {"text": "standard we discussed way back in Episode 4.", "start": 82.06, "duration": 2.49}, {"text": "So, in ASCII, our first value, 72, maps to\nthe capital letter H. And in this way, we", "start": 84.55, "duration": 5.43}, {"text": "decode the whole file.", "start": 89.98, "duration": 1.26}, {"text": "Let\u2019s look at a more complicated example:\na WAVE File \u2013 also called a WAV \u2013 which", "start": 91.24, "duration": 4.04}, {"text": "stores audio.", "start": 95.28, "duration": 1.0}, {"text": "Before we can correctly read the data, we\nneed to know some information, like the bit", "start": 96.28, "duration": 3.92}, {"text": "rate and whether it\u2019s a single track or\nstereo.", "start": 100.2, "duration": 2.49}, {"text": "Data, about data, is called meta data.", "start": 102.69, "duration": 2.68}, {"text": "This metadata is stored at the front of the\nfile, ahead of any actual data, in what\u2019s", "start": 105.37, "duration": 3.84}, {"text": "known as a Header.", "start": 109.21, "duration": 1.05}, {"text": "Here\u2019s what the first 44 bytes of a WAV\nfile looks like.", "start": 110.26, "duration": 3.41}, {"text": "Some parts are always the same, like where it spells out W-A-V-E.", "start": 113.67, "duration": 4.45}, {"text": "Other parts contain numbers that change depending\non the data contained within.", "start": 118.12, "duration": 3.36}, {"text": "The audio data comes right behind the metadata, and it\u2019s stored as a long list of numbers.", "start": 121.48, "duration": 4.68}, {"text": "These values represent the amplitude of sound captured many times per second, and if you", "start": 126.16, "duration": 4.38}, {"text": "want a primer on sound, check out our video all about it in Crash Course Physics.", "start": 130.549, "duration": 4.271}, {"text": "Link in the dobblydoo.", "start": 134.83, "duration": 1.28}, {"text": "As an example, let\u2019s look at a waveform\nof me saying: \"hello!\" Hello!", "start": 136.11, "duration": 3.7}, {"text": "Now that we\u2019ve captured some sound, let\u2019s\nzoom into a little snippet.", "start": 139.81, "duration": 3.25}, {"text": "A digital microphone, like the one in your\ncomputer or smartphone, samples the sound", "start": 143.06, "duration": 4.14}, {"text": "pressure thousands of times.", "start": 147.2, "duration": 1.58}, {"text": "Each sample can be represented as a number.", "start": 148.78, "duration": 2.42}, {"text": "Larger numbers mean higher sound pressure, what\u2019s called amplitude.", "start": 151.2, "duration": 3.409}, {"text": "And these numbers are exactly what gets stored in a WAVE file!", "start": 154.609, "duration": 3.031}, {"text": "Thousands of amplitudes for every single second of audio!", "start": 157.64, "duration": 2.54}, {"text": "When it\u2019s time to play this file, an audio\nprogram needs to actuate the computer's speakers", "start": 160.18, "duration": 4.559}, {"text": "such that the original waveform is emitted.", "start": 164.74, "duration": 2.38}, {"text": "\u201cHello!\u201d", "start": 167.12, "duration": 0.74}, {"text": "So, now that you\u2019re getting the hang of\nfile formats, let\u2019s talk about bitmaps or", "start": 167.86, "duration": 2.98}, {"text": "B-M-Ps, which store pictures.", "start": 170.84, "duration": 2.21}, {"text": "On a computer, PICtures are made up of little tiny square ELements called pixels.", "start": 173.05, "duration": 3.81}, {"text": "Each pixel is a combination of three colors:\nred, green and blue.", "start": 176.86, "duration": 3.62}, {"text": "These are called additive primary colors,\nand they can be mixed together to create any", "start": 180.48, "duration": 3.14}, {"text": "other color on our electronic displays.", "start": 183.62, "duration": 1.929}, {"text": "Now, just like WAV files, BMPs start with\nmetadata, including key values like image", "start": 185.549, "duration": 4.931}, {"text": "width, image height, and color depth.", "start": 190.48, "duration": 1.78}, {"text": "As an example, let\u2019s say the metadata specified an image 4 pixels wide, by 4 pixels tall,", "start": 192.26, "duration": 5.03}, {"text": "with a 24-bit color depth - that\u2019s 8-bits\nfor red, 8-bits for green, and 8-bits for blue.", "start": 197.29, "duration": 4.95}, {"text": "As a reminder, 8 bits is the same as one byte.", "start": 202.24, "duration": 2.8}, {"text": "The smallest number a byte can store is 0,\nand the largest is 255.", "start": 205.04, "duration": 3.82}, {"text": "Our image data is going to look something\nlike this:", "start": 208.86, "duration": 2.599}, {"text": "Let\u2019s look at the color of our first pixel.", "start": 211.459, "duration": 2.64}, {"text": "It has 255 for its red value, 255 for green\nand 255 for blue.", "start": 214.099, "duration": 5.42}, {"text": "This equates to full intensity red, full intensity green and full intensity blue.", "start": 219.519, "duration": 4.39}, {"text": "These colors blend together on your computer monitor to become white.", "start": 223.909, "duration": 2.901}, {"text": "So our first pixel is white!", "start": 226.81, "duration": 1.89}, {"text": "The next pixel has a Red-Green-Blue, or RGB value of 255, 255, 0.", "start": 228.7, "duration": 6.0}, {"text": "That\u2019s the color yellow!", "start": 234.7, "duration": 1.34}, {"text": "The pixel after that has a RGB value of 0,0,0\n- that\u2019s zero intensity everything, which is black.", "start": 236.04, "duration": 6.7}, {"text": "And the next one is yellow.", "start": 242.74, "duration": 1.7}, {"text": "Because the metadata specified this was a\n4 by 4 image, we know that we\u2019ve reached", "start": 244.45, "duration": 3.69}, {"text": "the end of our first row of pixels.", "start": 248.15, "duration": 2.04}, {"text": "So, we need to drop down a row.", "start": 250.19, "duration": 2.11}, {"text": "The next RGB value is 255,255,0 \u2013 yellow\nagain.", "start": 252.3, "duration": 4.679}, {"text": "Okay, let\u2019s go ahead and read all the pixels\nin our 4x4 image\u2026 tada!", "start": 256.979, "duration": 4.091}, {"text": "A very low resolution pac-man!", "start": 261.07, "duration": 1.73}, {"text": "Obviously this is a simple example of a small image, but we could just as easily store this", "start": 262.8, "duration": 4.79}, {"text": "image in a BMP.", "start": 267.59, "duration": 1.37}, {"text": "I want to emphasize again that it doesn\u2019t\nmatter if it\u2019s a text file, WAV, BMP, or", "start": 268.96, "duration": 3.92}, {"text": "fancier formats we don\u2019t have time to discuss, like ZIPs and PPTs.", "start": 272.88, "duration": 2.64}, {"text": "Under the hood, they\u2019re all the same: long\nlists of numbers, stored as binary, on a storage device.", "start": 275.52, "duration": 4.98}, {"text": "File formats are the key to reading and understanding\nthe data inside.", "start": 280.54, "duration": 3.38}, {"text": "Now that you understand files a little better,\nlet\u2019s move on to how computers go about", "start": 283.92, "duration": 3.23}, {"text": "storing them.", "start": 287.15, "duration": 1.07}, {"text": "Even though the underlying storage medium\nmight be a strip of tape, a drum, a disk,", "start": 288.22, "duration": 4.06}, {"text": "or integrated circuits... hardware and software abstractions let us think of storage as a", "start": 292.28, "duration": 4.099}, {"text": "long line of little buckets that store values.", "start": 296.379, "duration": 2.311}, {"text": "In the early days, when computers only performed one computation like calculating artillery", "start": 298.69, "duration": 4.37}, {"text": "range tables \u2013 the entire storage operated\nlike one big file.", "start": 303.06, "duration": 3.96}, {"text": "Data started at the beginning of storage,\nand then filled it up in order as output was", "start": 307.02, "duration": 4.3}, {"text": "produced, up to the storage capacity.", "start": 311.32, "duration": 1.689}, {"text": "However, as computational power and storage capacity improved, it became possible, and", "start": 313.009, "duration": 4.671}, {"text": "useful, to store more than one file at a time.", "start": 317.68, "duration": 2.82}, {"text": "The simplest option is to store files back-to-back.", "start": 320.5, "duration": 2.949}, {"text": "This can work... but how does the computer know where files begin and end?", "start": 323.449, "duration": 4.011}, {"text": "Storage devices have no notion of files \u2013 they\u2019re just a mechanism for storing lots of bits.", "start": 327.46, "duration": 4.52}, {"text": "So, for this to work, we need to have a special file that records where other ones are located.", "start": 331.99, "duration": 5.59}, {"text": "This goes by many names, but a good general term is Directory File.", "start": 337.58, "duration": 3.35}, {"text": "Most often, it\u2019s kept right at the front\nof storage, so we always know where to access it.", "start": 340.93, "duration": 4.93}, {"text": "Location zero!", "start": 345.86, "duration": 1.66}, {"text": "Inside the Directory File are the names of\nall the other files in storage.", "start": 347.52, "duration": 3.36}, {"text": "In our example, they each have a name, followed by a period, and end with what\u2019s called", "start": 350.88, "duration": 3.9}, {"text": "a File Extension, like \u201cBMP\u201d or \u201cWAV\u201d.", "start": 354.78, "duration": 3.19}, {"text": "Those further assist programs in identifying file types.", "start": 357.97, "duration": 3.449}, {"text": "The Directory File also stores metadata about these files, like when they were created and", "start": 361.419, "duration": 4.53}, {"text": "last modified, who the owner is, and if it\ncan be read, written or both.", "start": 365.949, "duration": 3.991}, {"text": "But most importantly, the directory file contains where these files begin in storage, and how", "start": 369.94, "duration": 4.28}, {"text": "long they are.", "start": 374.22, "duration": 1.0}, {"text": "If we want to add a file, remove a file, change a filename, or similar, we have to update", "start": 375.22, "duration": 4.419}, {"text": "the information in the Directory File.", "start": 379.639, "duration": 1.821}, {"text": "It\u2019s like the Table of Contents in a book,\nif you make a chapter shorter, or move it", "start": 381.46, "duration": 4.32}, {"text": "somewhere else, you have to update the table of contents, otherwise the page numbers won\u2019t match!", "start": 385.78, "duration": 4.7}, {"text": "The Directory File, and the maintenance of\nit, is an example of a very basic File System,", "start": 390.48, "duration": 4.74}, {"text": "the part of an Operating System that manages and keep track of stored files.", "start": 395.23, "duration": 4.33}, {"text": "This particular example is a called a Flat\nFile System, because they\u2019re all stored at one level.", "start": 399.56, "duration": 4.84}, {"text": "It\u2019s flat!", "start": 404.4, "duration": 0.9}, {"text": "Of course, packing files together, back-to-back, is a bit of a problem, because if we want", "start": 405.3, "duration": 3.33}, {"text": "to add some data to let\u2019s say \u201ctodo.txt\u201d,\nthere\u2019s no room to do it without overwriting", "start": 408.63, "duration": 4.439}, {"text": "part of \u201ccarrie.bmp\u201d.", "start": 413.069, "duration": 2.0}, {"text": "So modern File Systems do two things.", "start": 415.069, "duration": 2.16}, {"text": "First, they store files in blocks.", "start": 417.229, "duration": 2.111}, {"text": "This leaves a little extra space for changes,\ncalled slack space.", "start": 419.34, "duration": 3.359}, {"text": "It also means that all file data is aligned\nto a common size, which simplifies management.", "start": 422.699, "duration": 4.961}, {"text": "In a scheme like this, our Directory File\nneeds to keep track of what block each one", "start": 427.66, "duration": 3.81}, {"text": "is stored in.", "start": 431.47, "duration": 1.0}, {"text": "The second thing File Systems do, is allow\nfiles to be broken up into chunks and stored", "start": 432.47, "duration": 4.09}, {"text": "across many blocks.", "start": 436.56, "duration": 1.289}, {"text": "So let\u2019s say we open \u201ctodo.txt\u201d, and\nwe add a few more items then the file becomes", "start": 437.849, "duration": 4.16}, {"text": "too big to be saved in its one block.", "start": 442.009, "duration": 2.21}, {"text": "We don\u2019t want to overwrite the neighboring\none, so instead, the File System allocates", "start": 444.219, "duration": 3.801}, {"text": "an unused block, which can accommodate extra data.", "start": 448.02, "duration": 2.82}, {"text": "With a File System scheme like this, the Directory File needs to store not just one block per", "start": 450.84, "duration": 4.299}, {"text": "file, but rather a list of blocks per file.", "start": 455.139, "duration": 2.451}, {"text": "In this way, we can have files of variable\nsizes that can be easily expanded and shrunk,", "start": 457.59, "duration": 4.579}, {"text": "simply by allocating and deallocating blocks.", "start": 462.169, "duration": 2.541}, {"text": "If you watched our episode on Operating Systems,\nthis should sound a lot like Virtual Memory.", "start": 464.71, "duration": 4.57}, {"text": "Conceptually it\u2019s very similar!", "start": 469.28, "duration": 1.72}, {"text": "Now let\u2019s say we want to delete \u201ccarrie.bmp\u201d.", "start": 471.0, "duration": 2.449}, {"text": "To do that, we can simply remove the entry\nfrom the Directory File.", "start": 473.449, "duration": 3.131}, {"text": "This, in turn, causes one block to become\nfree.", "start": 476.58, "duration": 2.579}, {"text": "Note that we didn\u2019t actually erase the file\u2019s\ndata in storage, we just deleted the record of it.", "start": 479.16, "duration": 4.84}, {"text": "At some point, that block will be overwritten with new data, but until then, it just sits there.", "start": 484.0, "duration": 4.36}, {"text": "This is one way that computer forensic teams can \u201crecover\u201d data from computers even", "start": 488.36, "duration": 4.32}, {"text": "though people think it has been deleted. Crafty!", "start": 492.7, "duration": 2.72}, {"text": "Ok, let\u2019s say we add even more items to\nour todo list, which causes the File System", "start": 495.44, "duration": 4.56}, {"text": "to allocate yet another block to the file,\nin this case, recycling the block freed from", "start": 500.01, "duration": 4.67}, {"text": "carrie.bmp.", "start": 504.68, "duration": 1.13}, {"text": "Now our \u201ctodo.txt\u201d is stored across 3\nblocks, spaced apart, and also out of order.", "start": 505.81, "duration": 4.81}, {"text": "Files getting broken up across storage like\nthis is called fragmentation.", "start": 510.62, "duration": 3.44}, {"text": "It\u2019s the inevitable byproduct of files being\ncreated, deleted and modified.", "start": 514.07, "duration": 4.35}, {"text": "For many storage technologies, this is bad\nnews.", "start": 518.43, "duration": 3.0}, {"text": "On magnetic tape, reading todo.txt into memory would require seeking to block 1, then fast", "start": 521.43, "duration": 4.969}, {"text": "forwarding to block 5, and then rewinding\nto block 3 \u2013 that\u2019s a lot of back and forth!", "start": 526.4, "duration": 3.98}, {"text": "In real world File Systems, large files might\nbe stored across hundreds of blocks, and you", "start": 530.4, "duration": 4.42}, {"text": "don\u2019t want to have to wait five minutes\nfor your files to open.", "start": 534.82, "duration": 2.44}, {"text": "The answer is defragmentation!", "start": 537.26, "duration": 2.36}, {"text": "That might sound like technobabble, but the process is really simple, and once upon a", "start": 539.64, "duration": 3.949}, {"text": "time it was really fun to watch!", "start": 543.589, "duration": 2.24}, {"text": "The computer copies around data so that files have blocks located together in storage and", "start": 545.829, "duration": 4.611}, {"text": "in the right order.", "start": 550.44, "duration": 1.08}, {"text": "After we\u2019ve defragged, we can read our todo file, now located in blocks 1 through 3, in", "start": 551.52, "duration": 4.891}, {"text": "a single, quick read pass.", "start": 556.411, "duration": 1.469}, {"text": "So far, we\u2019ve only been talking about Flat\nFile Systems, where they\u2019re all stored in", "start": 557.88, "duration": 4.051}, {"text": "one directory.", "start": 561.931, "duration": 1.199}, {"text": "This worked ok when computers only had a little bit of storage, and you might only have a", "start": 563.13, "duration": 3.88}, {"text": "dozen or so files.", "start": 567.01, "duration": 1.31}, {"text": "But as storage capacity exploded, like we\ndiscussed last episode, so did the number", "start": 568.32, "duration": 4.87}, {"text": "of files on computers.", "start": 573.19, "duration": 1.17}, {"text": "Very quickly, it became impractical to store\nall files together at one level.", "start": 574.36, "duration": 4.34}, {"text": "Just like documents in the real world, it\u2019s\nhandy to store related files together in folders.", "start": 578.7, "duration": 4.06}, {"text": "Then we can put connected folders into folders, and so on.", "start": 582.76, "duration": 3.57}, {"text": "This is a Hierarchical File System, and its\nwhat your computer uses.There are a variety", "start": 586.33, "duration": 4.68}, {"text": "of ways to implement this, but let\u2019s stick\nwith the File System example we\u2019ve been", "start": 591.01, "duration": 3.24}, {"text": "using to convey the main idea.", "start": 594.25, "duration": 1.81}, {"text": "The biggest change is that our Directory File needs to be able to point not just to files,", "start": 596.06, "duration": 3.94}, {"text": "but also other directories.", "start": 600.0, "duration": 1.47}, {"text": "To keep track of what\u2019s a file and what\u2019s\na directory, we need some extra metadata.", "start": 601.47, "duration": 4.38}, {"text": "This Directory File is the top-most one, known as the Root Directory.", "start": 605.85, "duration": 4.099}, {"text": "All other files and folders lie beneath this\ndirectory along various file paths.", "start": 609.949, "duration": 4.681}, {"text": "We can see inside of our \u201cRoot\u201d Directory\nFile that we have 3 files and 2 subdirectories:", "start": 614.63, "duration": 5.1}, {"text": "music and photos.", "start": 619.73, "duration": 1.45}, {"text": "If we want to see what\u2019s stored in our music directory, we have to go to that block and", "start": 621.18, "duration": 3.95}, {"text": "read the Directory File located there; the\nformat is the same as our root directory.", "start": 625.13, "duration": 4.329}, {"text": "There\u2019s a lot of great songs in there!", "start": 629.459, "duration": 1.841}, {"text": "In addition to being able to create hierarchies of unlimited depth, this method also allows", "start": 631.3, "duration": 4.44}, {"text": "us to easily move around files.", "start": 635.74, "duration": 2.01}, {"text": "So, if we wanted to move \u201ctheme.wav\u201d from our root directory to the music directory,", "start": 637.75, "duration": 4.55}, {"text": "we don\u2019t have to re-arrange any blocks of\ndata.", "start": 642.3, "duration": 2.56}, {"text": "We can simply modify the two Directory Files, removing an entry from one and adding it to another.", "start": 644.86, "duration": 5.58}, {"text": "Importantly, the theme.wav file stays in block 5.", "start": 650.52, "duration": 2.89}, {"text": "So that\u2019s a quick overview of the key principles of File Systems.", "start": 653.41, "duration": 3.51}, {"text": "They provide yet another way to move up a\nnew level of abstraction.", "start": 656.92, "duration": 9.68}, {"text": "File systems allow us to hide the raw bits\nstored on magnetic tape, spinning disks and", "start": 666.6, "duration": 4.66}, {"text": "the like, and they let us think of data as\nneatly organized and easily accessible files.", "start": 671.26, "duration": 4.72}, {"text": "We even started talking about users, not programmers, manipulating data, like opening files and", "start": 675.98, "duration": 4.84}, {"text": "organizing them, foreshadowing where the series will be going in a few episodes.", "start": 680.82, "duration": 4.0}, {"text": "I\u2019ll see  you next week.", "start": 684.82, "duration": 1.32}]