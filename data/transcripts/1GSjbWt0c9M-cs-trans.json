[{"text": "Hi I\u2019m Carrie Anne, this is Crash Course\nComputer Science", "start": 3.04, "duration": 3.06}, {"text": "and today we\u2019re going to talk about how computers store and represent numerical data.", "start": 6.1, "duration": 4.44}, {"text": "Which means we\u2019ve got to talk about Math!", "start": 10.54, "duration": 1.7}, {"text": "But don\u2019t worry.", "start": 12.25, "duration": 1.01}, {"text": "Every single one of you already knows exactly\nwhat you need to know to follow along.", "start": 13.26, "duration": 3.42}, {"text": "So, last episode we talked about how transistors can be used to build logic gates, which can", "start": 16.68, "duration": 4.18}, {"text": "evaluate boolean statements.", "start": 20.86, "duration": 1.84}, {"text": "And in boolean algebra, there are only two,\nbinary values: true and false.", "start": 22.7, "duration": 3.32}, {"text": "But if we only have two values, how in the\nworld do we represent information beyond just", "start": 26.02, "duration": 3.77}, {"text": "these two values?", "start": 29.79, "duration": 1.09}, {"text": "That\u2019s where the Math comes in.", "start": 30.88, "duration": 1.9}, {"text": "INTRO", "start": 32.78, "duration": 8.9}, {"text": "So, as we mentioned last episode, a single\nbinary value can be used to represent a number.", "start": 41.68, "duration": 5.04}, {"text": "Instead of true and false, we can call these\ntwo states 1 and 0 which is actually incredibly useful.", "start": 46.72, "duration": 5.42}, {"text": "And if we want to represent larger things we just need to add more binary digits.", "start": 52.14, "duration": 3.84}, {"text": "This works exactly the same way as the decimal\nnumbers that we\u2019re all familiar with.", "start": 55.98, "duration": 3.21}, {"text": "With decimal numbers there are \"only\" 10 possible values a single digit can be; 0 through 9,", "start": 59.19, "duration": 5.25}, {"text": "and to get numbers larger than 9 we just start adding more digits to the front.", "start": 64.44, "duration": 3.17}, {"text": "We can do the same with binary.", "start": 67.61, "duration": 1.51}, {"text": "For example, let\u2019s take the number two hundred and sixty three.", "start": 69.12, "duration": 3.58}, {"text": "What does this number actually represent?", "start": 72.71, "duration": 2.17}, {"text": "Well, it means we\u2019ve got 2 one-hundreds, 6 tens, and 3 ones.", "start": 74.88, "duration": 4.04}, {"text": "If you add those all together, we\u2019ve got 263.", "start": 78.92, "duration": 2.59}, {"text": "Notice how each column has a different multiplier.", "start": 81.51, "duration": 2.87}, {"text": "In this case, it\u2019s 100, 10, and 1.", "start": 84.38, "duration": 3.14}, {"text": "Each multiplier is ten times larger than the\none to the right.", "start": 87.52, "duration": 2.82}, {"text": "That's because each column has ten possible digits to work with, 0 through 9, after which", "start": 90.34, "duration": 5.0}, {"text": "you have to carry one to the next column.", "start": 95.34, "duration": 2.0}, {"text": "For this reason, it\u2019s called base-ten notation, also called decimal since deci means ten.", "start": 97.34, "duration": 5.04}, {"text": "AND Binary works exactly the same way, it\u2019s just base-two.", "start": 102.38, "duration": 3.52}, {"text": "That\u2019s because there are only two possible\ndigits in binary \u2013 1 and 0.", "start": 105.9, "duration": 3.56}, {"text": "This means that each multiplier has to be two times larger than the column to its right.", "start": 109.46, "duration": 4.44}, {"text": "Instead of hundreds, tens, and ones, we now have fours, twos and ones.", "start": 113.9, "duration": 3.74}, {"text": "Take for example the binary number: 101.", "start": 117.64, "duration": 2.82}, {"text": "This means we have 1 four, 0 twos, and 1 one.", "start": 120.46, "duration": 3.56}, {"text": "Add those all together and we\u2019ve got the\nnumber 5 in base ten.", "start": 124.02, "duration": 3.099}, {"text": "But to represent larger numbers, binary needs a lot more digits.", "start": 127.119, "duration": 3.581}, {"text": "Take this number in binary 10110111.", "start": 130.7, "duration": 1.509}, {"text": "We can convert it to decimal in the same way.", "start": 132.209, "duration": 2.271}, {"text": "We have 1 x 128, 0 x 64, 1 x 32, 1 x 16, 0\nx 8, 1 x 4, 1 x 2, and 1 x 1.", "start": 134.48, "duration": 9.74}, {"text": "Which all adds up to 183.", "start": 144.22, "duration": 2.44}, {"text": "Math with binary numbers isn\u2019t hard either.", "start": 146.66, "duration": 2.4}, {"text": "Take for example decimal addition of 183 plus 19.", "start": 149.06, "duration": 3.54}, {"text": "First we add 3 + 9, that\u2019s 12, so we put\n2 as the sum and carry 1 to the ten\u2019s column.", "start": 152.6, "duration": 5.22}, {"text": "Now we add 8 plus 1 plus the 1 we carried,\nthats 10, so the sum is 0 carry 1.", "start": 157.82, "duration": 5.26}, {"text": "Finally we add 1 plus the 1 we carried, which equals 2.", "start": 163.08, "duration": 3.04}, {"text": "So the total sum is 202.", "start": 166.12, "duration": 2.18}, {"text": "Here\u2019s the same sum but in binary.", "start": 168.3, "duration": 2.26}, {"text": "Just as before, we start with the ones column.", "start": 170.58, "duration": 2.38}, {"text": "Adding 1+1 results in 2, even in binary.", "start": 172.96, "duration": 2.86}, {"text": "But, there is no symbol \"2\" so we use 10 and\nput 0 as our sum and carry the 1.", "start": 175.82, "duration": 5.06}, {"text": "Just like in our decimal example.", "start": 180.889, "duration": 1.38}, {"text": "1 plus 1, plus the 1 carried, equals 3 or\n11 in binary, so we put the sum as 1 and we", "start": 182.269, "duration": 5.751}, {"text": "carry 1 again, and so on.", "start": 188.02, "duration": 1.52}, {"text": "We end up with 11001010, which is the same as the number 202 in base ten.", "start": 189.54, "duration": 4.61}, {"text": "Each of these binary digits, 1 or 0, is called a \u201cbit\u201d.", "start": 194.15, "duration": 3.25}, {"text": "So in these last few examples, we were using 8-bit numbers with their lowest value of zero", "start": 197.4, "duration": 4.419}, {"text": "and highest value is 255, which requires all 8 bits to be set to 1.", "start": 201.82, "duration": 5.16}, {"text": "Thats 256 different values, or 2 to the 8th power.", "start": 206.98, "duration": 3.92}, {"text": "You might have heard of 8-bit computers, or 8-bit graphics or audio.", "start": 210.9, "duration": 3.4}, {"text": "These were computers that did most of their operations in chunks of 8 bits.", "start": 214.3, "duration": 3.74}, {"text": "But 256 different values isn\u2019t a lot to\nwork with, so it meant things like 8-bit games", "start": 218.04, "duration": 4.899}, {"text": "were limited to 256 different colors for their graphics.", "start": 222.94, "duration": 3.86}, {"text": "And 8-bits is such a common size in computing, it has a special word: a byte.", "start": 226.8, "duration": 4.98}, {"text": "A byte is 8 bits.", "start": 231.78, "duration": 1.359}, {"text": "If you\u2019ve got 10 bytes, it means you\u2019ve really got 80 bits.", "start": 233.139, "duration": 2.791}, {"text": "You\u2019ve heard of kilobytes, megabytes, gigabytes and so on.", "start": 235.93, "duration": 3.03}, {"text": "These prefixes denote different scales of\ndata.", "start": 238.96, "duration": 2.86}, {"text": "Just like one kilogram is a thousand grams, 1 kilobyte is a thousand bytes\u2026. or really", "start": 241.82, "duration": 4.76}, {"text": "8000 bits.", "start": 246.58, "duration": 1.359}, {"text": "Mega is a million bytes (MB), and giga is a billion bytes (GB).", "start": 247.94, "duration": 3.4}, {"text": "Today you might even have a hard drive that has 1 terabyte (TB) of storage.", "start": 251.34, "duration": 3.78}, {"text": "That's 8 trillion ones and zeros.", "start": 255.12, "duration": 2.359}, {"text": "But hold on!", "start": 257.479, "duration": 1.0}, {"text": "That\u2019s not always true.", "start": 258.48, "duration": 0.999}, {"text": "In binary, a kilobyte has two to the power of 10 bytes, or 1024.", "start": 259.48, "duration": 5.16}, {"text": "1000 is also right when talking about kilobytes,\nbut we should acknowledge it isn\u2019t the only", "start": 264.64, "duration": 3.99}, {"text": "correct definition.", "start": 268.63, "duration": 1.0}, {"text": "You\u2019ve probably also heard the term 32-bit\nor 64-bit computers \u2013 you\u2019re almost certainly", "start": 269.63, "duration": 4.87}, {"text": "using one right now.", "start": 274.5, "duration": 1.41}, {"text": "What this means is that they operate in chunks of 32 or 64 bits.", "start": 275.91, "duration": 3.42}, {"text": "That\u2019s a lot of bits!", "start": 279.33, "duration": 1.49}, {"text": "The largest number you can represent with\n32 bits is just under 4.3 billion.", "start": 280.82, "duration": 4.78}, {"text": "Which is thirty-two 1's in binary.", "start": 285.6, "duration": 2.26}, {"text": "This is why our Instagram photos are so smooth and pretty \u2013 they are composed of millions", "start": 287.86, "duration": 4.39}, {"text": "of colors, because computers today use 32-bit color graphics", "start": 292.25, "duration": 3.77}, {"text": "Of course, not everything is a positive number - like my bank account in college.", "start": 296.03, "duration": 4.23}, {"text": "So we need a way to represent positive and negative numbers.", "start": 300.26, "duration": 3.06}, {"text": "Most computers use the first bit for the sign: 1 for negative, 0 for positive numbers, and", "start": 303.32, "duration": 4.96}, {"text": "then use the remaining 31 bits for the number itself.", "start": 308.28, "duration": 3.0}, {"text": "That gives us a range of roughly plus or minus\ntwo billion.", "start": 311.28, "duration": 3.14}, {"text": "While this is a pretty big range of numbers,\nit\u2019s not enough for many tasks.", "start": 314.42, "duration": 3.54}, {"text": "There are 7 billion people on the earth, and the US national debt is almost 20 trillion dollars after all.", "start": 317.96, "duration": 5.4}, {"text": "This is why 64-bit numbers are useful.", "start": 323.36, "duration": 2.44}, {"text": "The largest value a 64-bit number can represent is around 9.2 quintillion!", "start": 325.8, "duration": 4.68}, {"text": "That\u2019s a lot of possible numbers and will hopefully stay above the US national debt for a while!", "start": 330.48, "duration": 4.06}, {"text": "Most importantly, as we\u2019ll discuss in a\nlater episode, computers must label locations", "start": 334.54, "duration": 4.3}, {"text": "in their memory, known as addresses, in order to store and retrieve values.", "start": 338.84, "duration": 4.26}, {"text": "As computer memory has grown to gigabytes and terabytes \u2013 that\u2019s trillions of bytes", "start": 343.11, "duration": 3.91}, {"text": "\u2013 it was necessary to have 64-bit memory addresses as well.", "start": 347.02, "duration": 3.39}, {"text": "In addition to negative and positive numbers, computers must deal with numbers that are", "start": 350.41, "duration": 3.491}, {"text": "not whole numbers, like 12.7 and 3.14, or\nmaybe even stardate: 43989.1.", "start": 353.901, "duration": 6.549}, {"text": "These are called \u201cfloating point\u201d numbers, because the decimal point can float around", "start": 360.45, "duration": 3.69}, {"text": "in the middle of number.", "start": 364.14, "duration": 1.24}, {"text": "Several methods have been developed to represent floating point numbers.", "start": 365.38, "duration": 3.0}, {"text": "The most common of which is the IEEE 754 standard.", "start": 368.38, "duration": 3.4}, {"text": "And you thought historians were the only people bad at naming things!", "start": 371.78, "duration": 2.9}, {"text": "In essence, this standard stores decimal values sort of like scientific notation.", "start": 374.69, "duration": 4.42}, {"text": "For example, 625.9 can be written as 0.6259 x 10^3.", "start": 379.11, "duration": 6.69}, {"text": "There are two important numbers here: the .6259 is called the significand.", "start": 385.8, "duration": 4.41}, {"text": "And 3 is the exponent.", "start": 390.21, "duration": 1.15}, {"text": "In a 32-bit floating point number, the first bit is used for the sign of the number -- positive", "start": 391.36, "duration": 4.39}, {"text": "or negative.", "start": 395.75, "duration": 1.0}, {"text": "The next 8 bits are used to store the exponent and the remaining 23 bits are used to store", "start": 396.75, "duration": 4.33}, {"text": "the significand.", "start": 401.08, "duration": 1.0}, {"text": "Ok, we\u2019ve talked a lot about numbers, but your name is probably composed of letters,", "start": 402.08, "duration": 4.42}, {"text": "so it\u2019s really useful for computers to also\nhave a way to represent text.", "start": 406.5, "duration": 3.47}, {"text": "However, rather than have a special form of storage for letters,", "start": 409.97, "duration": 3.33}, {"text": "computers simply use numbers to represent letters.", "start": 413.32, "duration": 2.8}, {"text": "The most straightforward approach might be to simply number the letters of the alphabet:", "start": 416.14, "duration": 3.28}, {"text": "A being 1, B being 2, C 3, and so on.", "start": 419.42, "duration": 3.14}, {"text": "In fact, Francis Bacon, the famous English writer, used five-bit sequences to encode", "start": 422.56, "duration": 4.51}, {"text": "all 26 letters of the English alphabet to\nsend secret messages back in the 1600s.", "start": 427.07, "duration": 4.81}, {"text": "And five bits can store 32 possible values\n\u2013 so that\u2019s enough for the 26 letters,", "start": 431.88, "duration": 4.79}, {"text": "but not enough for punctuation, digits, and\nupper and lower case letters.", "start": 436.67, "duration": 3.39}, {"text": "Enter ASCII, the American Standard Code for Information Interchange.", "start": 440.06, "duration": 3.8}, {"text": "Invented in 1963, ASCII was a 7-bit code,\nenough to store 128 different values.", "start": 444.02, "duration": 5.68}, {"text": "With this expanded range, it could encode capital letters, lowercase letters, digits", "start": 449.71, "duration": 3.84}, {"text": "0 through 9, and symbols like the @ sign and punctuation marks.", "start": 453.55, "duration": 3.53}, {"text": "For example, a lowercase \u2018a\u2019 is represented by the number 97, while a capital \u2018A\u2019 is 65.", "start": 457.08, "duration": 5.14}, {"text": "A colon is 58 and a closed parenthesis is 41.", "start": 462.34, "duration": 3.24}, {"text": "ASCII even had a selection of special command codes, such as a newline character to tell", "start": 465.59, "duration": 4.39}, {"text": "the computer where to wrap a line to the next row.", "start": 469.98, "duration": 2.48}, {"text": "In older computer systems, the line of text would literally continue off the edge of the", "start": 472.5, "duration": 3.96}, {"text": "screen if you didn\u2019t include a new line\ncharacter!", "start": 476.46, "duration": 2.65}, {"text": "Because ASCII was such an early standard, it became widely used, and critically, allowed", "start": 479.11, "duration": 3.81}, {"text": "different computers built by different companies\nto exchange data.", "start": 482.92, "duration": 3.59}, {"text": "This ability to universally exchange information\nis called \u201cinteroperability\u201d.", "start": 486.51, "duration": 4.07}, {"text": "However, it did have a major limitation: it\nwas really only designed for English.", "start": 490.58, "duration": 4.54}, {"text": "Fortunately, there are 8 bits in a byte, not 7, and it soon became popular to use codes", "start": 495.12, "duration": 4.32}, {"text": "128 through 255, previously unused, for \"national\" characters.", "start": 499.44, "duration": 5.82}, {"text": "In the US, those extra numbers were largely used to encode additional symbols, like mathematical", "start": 505.27, "duration": 4.76}, {"text": "notation, graphical elements, and common accented characters.", "start": 510.03, "duration": 3.72}, {"text": "On the other hand, while the Latin characters were used universally, Russian computers used", "start": 513.75, "duration": 4.039}, {"text": "the extra codes to encode Cyrillic characters, and Greek computers, Greek letters, and so on.", "start": 517.789, "duration": 4.491}, {"text": "And national character codes worked pretty well for most countries.", "start": 522.3, "duration": 2.979}, {"text": "The problem was, if you opened an email written in Latvian on a Turkish computer, the result", "start": 525.279, "duration": 4.081}, {"text": "was completely incomprehensible.", "start": 529.36, "duration": 2.349}, {"text": "And things totally broke with the rise of computing in Asia, as languages like Chinese and Japanese", "start": 531.709, "duration": 4.641}, {"text": "have thousands of characters.", "start": 536.35, "duration": 1.69}, {"text": "There was no way to encode all those characters in 8-bits!", "start": 538.04, "duration": 2.779}, {"text": "In response, each country invented multi-byte encoding schemes, all of which were mutually incompatible.", "start": 540.82, "duration": 5.78}, {"text": "The Japanese were so familiar with this encoding problem that they had a special name for it:", "start": 546.6, "duration": 4.56}, {"text": "\"mojibake\", which means \"scrambled text\".", "start": 551.16, "duration": 2.44}, {"text": "And so it was born \u2013 Unicode \u2013 one format\nto rule them all.", "start": 553.66, "duration": 3.44}, {"text": "Devised in 1992 to finally do away with all of the different international schemes", "start": 557.1, "duration": 4.32}, {"text": "it replaced them with one universal encoding\nscheme.", "start": 561.42, "duration": 2.56}, {"text": "The most common version of Unicode uses 16 bits with space for over a million codes -", "start": 563.98, "duration": 4.78}, {"text": "enough for every single character from every language ever used \u2013", "start": 568.84, "duration": 3.34}, {"text": "more than 120,000 of them in over 100 types of script", "start": 572.18, "duration": 4.08}, {"text": "plus space for mathematical symbols and even graphical characters like Emoji.", "start": 576.26, "duration": 3.74}, {"text": "And in the same way that ASCII defines a scheme for encoding letters as binary numbers,", "start": 580.0, "duration": 3.74}, {"text": "other file formats \u2013 like MP3s or GIFs \u2013 use", "start": 583.74, "duration": 2.599}, {"text": "binary numbers to encode sounds or colors of a pixel in our photos, movies, and music.", "start": 586.34, "duration": 4.54}, {"text": "Most importantly, under the hood it all comes down to long sequences of bits.", "start": 590.88, "duration": 4.58}, {"text": "Text messages, this YouTube video, every webpage on the internet, and even your computer\u2019s", "start": 595.46, "duration": 4.56}, {"text": "operating system, are nothing but long sequences of 1s and 0s.", "start": 600.02, "duration": 3.7}, {"text": "So next week, we\u2019ll start talking about how your computer starts manipulating those", "start": 603.73, "duration": 3.59}, {"text": "binary sequences, for our first true taste of computation.", "start": 607.329, "duration": 3.5}, {"text": "Thanks for watching. See you next week.", "start": 610.829, "duration": 2.951}]