[{"text": "hey everyone sorry about the delay but", "start": 0.16, "duration": 3.12}, {"text": "in this video", "start": 2.56, "duration": 2.48}, {"text": "i'm gonna give you a quick ish", "start": 3.28, "duration": 3.599}, {"text": "introduction to stacks", "start": 5.04, "duration": 5.04}, {"text": "queues and decks or double ended queues", "start": 6.879, "duration": 6.161}, {"text": "so let's get started first of all what's", "start": 10.08, "duration": 4.0}, {"text": "a stack", "start": 13.04, "duration": 3.12}, {"text": "well personally i like to think of a", "start": 14.08, "duration": 4.0}, {"text": "stack like a bunch of", "start": 16.16, "duration": 5.199}, {"text": "pancakes so just imagine for a second", "start": 18.08, "duration": 5.76}, {"text": "that these circles represent pancakes", "start": 21.359, "duration": 4.881}, {"text": "with different numbers written on them", "start": 23.84, "duration": 4.64}, {"text": "we could have any type of data here but", "start": 26.24, "duration": 3.439}, {"text": "we're using", "start": 28.48, "duration": 4.16}, {"text": "numbers or integers as an example here", "start": 29.679, "duration": 4.241}, {"text": "and one feature", "start": 32.64, "duration": 4.16}, {"text": "of pancakes the real world pancakes is", "start": 33.92, "duration": 4.799}, {"text": "that you can stack them on top of one", "start": 36.8, "duration": 3.36}, {"text": "another", "start": 38.719, "duration": 4.401}, {"text": "so just imagine that this line here", "start": 40.16, "duration": 3.84}, {"text": "represents", "start": 43.12, "duration": 3.599}, {"text": "a plate and once you have a plate you", "start": 44.0, "duration": 4.399}, {"text": "can have", "start": 46.719, "duration": 4.48}, {"text": "pancakes stacked on top of one another", "start": 48.399, "duration": 3.761}, {"text": "so you could have", "start": 51.199, "duration": 3.281}, {"text": "minus one at the bottom and then you can", "start": 52.16, "duration": 4.8}, {"text": "put three on top of it", "start": 54.48, "duration": 5.44}, {"text": "and then let's say this one nine this", "start": 56.96, "duration": 4.64}, {"text": "pancake right here", "start": 59.92, "duration": 4.959}, {"text": "and then at the top you can put this one", "start": 61.6, "duration": 5.28}, {"text": "and then you might say okay what if i", "start": 64.879, "duration": 3.121}, {"text": "wanna", "start": 66.88, "duration": 3.599}, {"text": "retrieve this pancake right here with", "start": 68.0, "duration": 4.64}, {"text": "the number three written on it", "start": 70.479, "duration": 4.32}, {"text": "then what you would need to do is you", "start": 72.64, "duration": 3.76}, {"text": "would need to", "start": 74.799, "duration": 4.561}, {"text": "take out this one first at the top and", "start": 76.4, "duration": 4.079}, {"text": "then", "start": 79.36, "duration": 4.88}, {"text": "this next one the nine pancake", "start": 80.479, "duration": 6.0}, {"text": "and then finally you can take out this", "start": 84.24, "duration": 3.28}, {"text": "one", "start": 86.479, "duration": 4.161}, {"text": "uh so that's how you know pancakes in a", "start": 87.52, "duration": 4.639}, {"text": "real world work", "start": 90.64, "duration": 4.159}, {"text": "and it's the same thing with the stack", "start": 92.159, "duration": 4.161}, {"text": "data structure", "start": 94.799, "duration": 4.881}, {"text": "so a stack is a collection of data", "start": 96.32, "duration": 5.439}, {"text": "in which you can only add a piece of", "start": 99.68, "duration": 3.92}, {"text": "data at the top", "start": 101.759, "duration": 5.281}, {"text": "of the structure or retrieve a piece of", "start": 103.6, "duration": 4.0}, {"text": "data", "start": 107.04, "duration": 3.84}, {"text": "from the top of the structure so", "start": 107.6, "duration": 6.64}, {"text": "you aren't really able to retrieve data", "start": 110.88, "duration": 6.0}, {"text": "from any position just like you could", "start": 114.24, "duration": 4.72}, {"text": "for example in array", "start": 116.88, "duration": 3.839}, {"text": "so another way to describe the same", "start": 118.96, "duration": 3.36}, {"text": "thing is that", "start": 120.719, "duration": 5.36}, {"text": "whatever piece of data you put in last", "start": 122.32, "duration": 7.439}, {"text": "will need to come out first", "start": 126.079, "duration": 6.641}, {"text": "so in the current structure of these", "start": 129.759, "duration": 4.961}, {"text": "three pieces of data", "start": 132.72, "duration": 4.48}, {"text": "the last piece of data that we put in is", "start": 134.72, "duration": 3.599}, {"text": "nine", "start": 137.2, "duration": 4.32}, {"text": "so that needs to come out first", "start": 138.319, "duration": 6.241}, {"text": "and that's sometimes referred to as last", "start": 141.52, "duration": 4.48}, {"text": "in first out", "start": 144.56, "duration": 4.399}, {"text": "okay so that's how a stack works but how", "start": 146.0, "duration": 3.44}, {"text": "can we", "start": 148.959, "duration": 2.881}, {"text": "implement it well one way to implement", "start": 149.44, "duration": 3.519}, {"text": "it is", "start": 151.84, "duration": 4.399}, {"text": "uh by using an array so", "start": 152.959, "duration": 6.881}, {"text": "we have an array of eight elements here", "start": 156.239, "duration": 5.761}, {"text": "and we're going to try to represent this", "start": 159.84, "duration": 3.6}, {"text": "stack right here", "start": 162.0, "duration": 3.2}, {"text": "to do that the first thing we'll need to", "start": 163.44, "duration": 4.079}, {"text": "do is we'll need to have", "start": 165.2, "duration": 5.36}, {"text": "a pointer or just an integer", "start": 167.519, "duration": 5.921}, {"text": "variable that's going to point to the", "start": 170.56, "duration": 3.36}, {"text": "last", "start": 173.44, "duration": 3.2}, {"text": "element that we put in in this data", "start": 173.92, "duration": 4.319}, {"text": "structure", "start": 176.64, "duration": 4.72}, {"text": "and let's say for now that the stack", "start": 178.239, "duration": 6.321}, {"text": "is empty then", "start": 181.36, "duration": 6.56}, {"text": "there is no last element 2.2 so we can", "start": 184.56, "duration": 5.36}, {"text": "initialize this variable", "start": 187.92, "duration": 6.16}, {"text": "to -1 or the index", "start": 189.92, "duration": 6.56}, {"text": "that would be here but that doesn't", "start": 194.08, "duration": 3.68}, {"text": "exist", "start": 196.48, "duration": 4.08}, {"text": "and this shows that this stack is empty", "start": 197.76, "duration": 3.68}, {"text": "and now", "start": 200.56, "duration": 3.2}, {"text": "what if we want to start putting in some", "start": 201.44, "duration": 3.6}, {"text": "pieces of data here", "start": 203.76, "duration": 4.72}, {"text": "for example -1 here then what we can do", "start": 205.04, "duration": 7.199}, {"text": "is move the pointer here", "start": 208.48, "duration": 5.759}, {"text": "again this is going to always point to", "start": 212.239, "duration": 4.161}, {"text": "the last element that we put in", "start": 214.239, "duration": 5.681}, {"text": "in this data structure and then", "start": 216.4, "duration": 7.44}, {"text": "put -1 here and what if we want to put", "start": 219.92, "duration": 4.399}, {"text": "in", "start": 223.84, "duration": 3.44}, {"text": "a 3 on top of -1 then we can move the", "start": 224.319, "duration": 4.081}, {"text": "pointer again", "start": 227.28, "duration": 3.2}, {"text": "again pointing to the last element that", "start": 228.4, "duration": 3.28}, {"text": "we put in", "start": 230.48, "duration": 3.759}, {"text": "and then put 3 here and then we can keep", "start": 231.68, "duration": 3.839}, {"text": "doing that", "start": 234.239, "duration": 4.64}, {"text": "if we want to put 9 here oh you can", "start": 235.519, "duration": 6.161}, {"text": "move uh the pointer here or increment", "start": 238.879, "duration": 3.681}, {"text": "pointer", "start": 241.68, "duration": 3.919}, {"text": "by one and then put nine", "start": 242.56, "duration": 6.239}, {"text": "here and what if you want to remove uh", "start": 245.599, "duration": 5.041}, {"text": "this number right here nine", "start": 248.799, "duration": 5.041}, {"text": "and to do that all you need to do is", "start": 250.64, "duration": 5.839}, {"text": "you need to move the pointer back by one", "start": 253.84, "duration": 4.56}, {"text": "or decrement this variable", "start": 256.479, "duration": 5.44}, {"text": "by one now you could do something", "start": 258.4, "duration": 5.359}, {"text": "with this number right here you know", "start": 261.919, "duration": 3.361}, {"text": "either erase it or change it to", "start": 263.759, "duration": 2.641}, {"text": "something else", "start": 265.28, "duration": 3.76}, {"text": "but it doesn't really matter because in", "start": 266.4, "duration": 3.84}, {"text": "this data structure", "start": 269.04, "duration": 3.28}, {"text": "we always know that the pointer always", "start": 270.24, "duration": 3.44}, {"text": "points to", "start": 272.32, "duration": 4.0}, {"text": "the number that's at the top of this", "start": 273.68, "duration": 4.48}, {"text": "structure", "start": 276.32, "duration": 5.12}, {"text": "so the numbers following this", "start": 278.16, "duration": 6.4}, {"text": "pointer are not relevant", "start": 281.44, "duration": 5.52}, {"text": "so we can keep going like this if you", "start": 284.56, "duration": 3.52}, {"text": "want to put in", "start": 286.96, "duration": 4.0}, {"text": "2 here you can move the pointer back", "start": 288.08, "duration": 3.6}, {"text": "here", "start": 290.96, "duration": 4.08}, {"text": "and then update this number right here", "start": 291.68, "duration": 3.68}, {"text": "with", "start": 295.04, "duration": 3.52}, {"text": "two and then if you want to put nine", "start": 295.36, "duration": 6.88}, {"text": "again here you can move the pointer by", "start": 298.56, "duration": 4.079}, {"text": "one", "start": 302.24, "duration": 3.519}, {"text": "and then put nine here", "start": 302.639, "duration": 5.521}, {"text": "and throughout this explanation we saw a", "start": 305.759, "duration": 5.041}, {"text": "few key operations here", "start": 308.16, "duration": 6.879}, {"text": "one is delete sometimes it's called pop", "start": 310.8, "duration": 7.44}, {"text": "that's deleting or removing a number", "start": 315.039, "duration": 6.401}, {"text": "from this data structure", "start": 318.24, "duration": 5.679}, {"text": "and another one is add and that's adding", "start": 321.44, "duration": 3.68}, {"text": "a number on top of", "start": 323.919, "duration": 3.681}, {"text": "this data structure and with this", "start": 325.12, "duration": 4.0}, {"text": "particular implementation", "start": 327.6, "duration": 4.72}, {"text": "you can implement both of them in one or", "start": 329.12, "duration": 3.6}, {"text": "in", "start": 332.32, "duration": 2.719}, {"text": "a constant amount of time and that's", "start": 332.72, "duration": 3.44}, {"text": "assuming", "start": 335.039, "duration": 3.361}, {"text": "that the number of elements that we put", "start": 336.16, "duration": 3.28}, {"text": "in in this", "start": 338.4, "duration": 4.32}, {"text": "data structure doesn't exceed the length", "start": 339.44, "duration": 6.319}, {"text": "of the array and if it does you will", "start": 342.72, "duration": 4.16}, {"text": "need to either", "start": 345.759, "duration": 4.561}, {"text": "zero an error or make a new array", "start": 346.88, "duration": 5.759}, {"text": "that's longer than the original array", "start": 350.32, "duration": 4.159}, {"text": "and transfer all the elements from the", "start": 352.639, "duration": 2.721}, {"text": "first array", "start": 354.479, "duration": 3.44}, {"text": "to the second array and that would take", "start": 355.36, "duration": 3.76}, {"text": "some extra time", "start": 357.919, "duration": 3.601}, {"text": "anyway that's it for a stack let's now", "start": 359.12, "duration": 4.24}, {"text": "take a look at a queue", "start": 361.52, "duration": 5.119}, {"text": "the analogy i use to understand a queue", "start": 363.36, "duration": 6.32}, {"text": "is a bunch of people lining up", "start": 366.639, "duration": 6.241}, {"text": "in a line or in a queue so", "start": 369.68, "duration": 5.84}, {"text": "let's say we have these people with some", "start": 372.88, "duration": 3.84}, {"text": "numbers assigned", "start": 375.52, "duration": 4.399}, {"text": "to them just for convenience and they", "start": 376.72, "duration": 3.919}, {"text": "want", "start": 379.919, "duration": 3.28}, {"text": "to line up to do something for example", "start": 380.639, "duration": 4.321}, {"text": "to see this octopus", "start": 383.199, "duration": 4.481}, {"text": "for whatever reason and this octopus is", "start": 384.96, "duration": 5.12}, {"text": "busy so they need to line up", "start": 387.68, "duration": 5.519}, {"text": "and with a cube", "start": 390.08, "duration": 5.119}, {"text": "i think you already know how it works", "start": 393.199, "duration": 3.361}, {"text": "but you can", "start": 395.199, "duration": 5.681}, {"text": "put people in the queue or in this line", "start": 396.56, "duration": 7.68}, {"text": "and when the octopus is free", "start": 400.88, "duration": 6.24}, {"text": "uh the person that's at the front of the", "start": 404.24, "duration": 5.04}, {"text": "queue you can see the octopus", "start": 407.12, "duration": 4.799}, {"text": "and then go away and then you can add", "start": 409.28, "duration": 4.96}, {"text": "more people in the queue", "start": 411.919, "duration": 4.641}, {"text": "or more numbers in the queue and then", "start": 414.24, "duration": 3.76}, {"text": "the person or the number", "start": 416.56, "duration": 4.96}, {"text": "that's in front of the queue you can see", "start": 418.0, "duration": 4.72}, {"text": "the octopus", "start": 421.52, "duration": 4.239}, {"text": "and then go away so that's the idea of", "start": 422.72, "duration": 5.36}, {"text": "the queue data structure and i think you", "start": 425.759, "duration": 3.201}, {"text": "can see that", "start": 428.08, "duration": 3.679}, {"text": "uh whatever number or whatever person", "start": 428.96, "duration": 4.48}, {"text": "that came in first", "start": 431.759, "duration": 4.88}, {"text": "will go out first too", "start": 433.44, "duration": 6.0}, {"text": "out of this data structure and that's", "start": 436.639, "duration": 3.761}, {"text": "sometimes referred", "start": 439.44, "duration": 4.479}, {"text": "as uh first in first out okay and how", "start": 440.4, "duration": 4.0}, {"text": "can we", "start": 443.919, "duration": 3.041}, {"text": "implement this data structure one way to", "start": 444.4, "duration": 3.76}, {"text": "implement it", "start": 446.96, "duration": 4.639}, {"text": "is with an array again and this time", "start": 448.16, "duration": 5.12}, {"text": "we're going to have", "start": 451.599, "duration": 4.961}, {"text": "two pointers the first one is going to", "start": 453.28, "duration": 4.319}, {"text": "point", "start": 456.56, "duration": 4.8}, {"text": "to whatever is at the front of the queue", "start": 457.599, "duration": 5.841}, {"text": "or in this particular example this", "start": 461.36, "duration": 4.0}, {"text": "number or this person right here", "start": 463.44, "duration": 4.96}, {"text": "and we're going to put this one right", "start": 465.36, "duration": 3.519}, {"text": "here", "start": 468.4, "duration": 3.68}, {"text": "at zero for now and the second pointer", "start": 468.879, "duration": 6.32}, {"text": "is going to point to the space", "start": 472.08, "duration": 6.239}, {"text": "that's right after the last person or", "start": 475.199, "duration": 4.56}, {"text": "the last number", "start": 478.319, "duration": 3.761}, {"text": "in the queue and for now i'm going to", "start": 479.759, "duration": 3.361}, {"text": "put this", "start": 482.08, "duration": 3.04}, {"text": "at the same position as the first", "start": 483.12, "duration": 4.16}, {"text": "pointer at zero", "start": 485.12, "duration": 5.68}, {"text": "and let's say that the queue is", "start": 487.28, "duration": 7.359}, {"text": "empty right now then we're gonna make", "start": 490.8, "duration": 7.119}, {"text": "these pointers uh be initialized", "start": 494.639, "duration": 7.361}, {"text": "to both zero right here and we're gonna", "start": 497.919, "duration": 6.241}, {"text": "implement this data structure so that", "start": 502.0, "duration": 3.84}, {"text": "whenever these two pointers", "start": 504.16, "duration": 5.039}, {"text": "point at the same thing this q", "start": 505.84, "duration": 6.559}, {"text": "is empty okay now let's think about how", "start": 509.199, "duration": 4.4}, {"text": "we can represent", "start": 512.399, "duration": 4.0}, {"text": "a line of people with this particular", "start": 513.599, "duration": 4.32}, {"text": "implementation", "start": 516.399, "duration": 4.721}, {"text": "so let's say that this person comes uh", "start": 517.919, "duration": 6.801}, {"text": "in the line first then we can put", "start": 521.12, "duration": 7.12}, {"text": "number one here and then move the second", "start": 524.72, "duration": 4.799}, {"text": "pointer", "start": 528.24, "duration": 4.159}, {"text": "right here and if there's another person", "start": 529.519, "duration": 3.361}, {"text": "uh", "start": 532.399, "duration": 3.281}, {"text": "right after that let's say 42 then we", "start": 532.88, "duration": 3.519}, {"text": "can put", "start": 535.68, "duration": 4.56}, {"text": "42 here and then move the pointer here", "start": 536.399, "duration": 6.241}, {"text": "again the first pointer will always be", "start": 540.24, "duration": 4.159}, {"text": "pointing", "start": 542.64, "duration": 5.199}, {"text": "at the first person in the queue or the", "start": 544.399, "duration": 5.041}, {"text": "front of the queue", "start": 547.839, "duration": 4.0}, {"text": "and the second pointer will always be", "start": 549.44, "duration": 3.519}, {"text": "pointing", "start": 551.839, "duration": 3.68}, {"text": "at the space right after the last person", "start": 552.959, "duration": 3.761}, {"text": "or the last number", "start": 555.519, "duration": 3.201}, {"text": "in the queue so let's keep going with", "start": 556.72, "duration": 3.119}, {"text": "this", "start": 558.72, "duration": 4.72}, {"text": "if 13 comes in a line", "start": 559.839, "duration": 6.481}, {"text": "we can put 13 here and then move the", "start": 563.44, "duration": 3.68}, {"text": "pointer", "start": 566.32, "duration": 3.6}, {"text": "move the second pointer right here and", "start": 567.12, "duration": 3.52}, {"text": "what if", "start": 569.92, "duration": 3.599}, {"text": "the octopus is free now and this person", "start": 570.64, "duration": 3.36}, {"text": "one", "start": 573.519, "duration": 3.601}, {"text": "sees the octopus and goes away", "start": 574.0, "duration": 6.64}, {"text": "then uh we can just move the first", "start": 577.12, "duration": 5.279}, {"text": "pointer", "start": 580.64, "duration": 4.08}, {"text": "over here and we don't really have to do", "start": 582.399, "duration": 3.44}, {"text": "anything", "start": 584.72, "duration": 3.679}, {"text": "with this number right here one because", "start": 585.839, "duration": 3.201}, {"text": "in this", "start": 588.399, "duration": 2.961}, {"text": "implementation we'll know that the q is", "start": 589.04, "duration": 4.08}, {"text": "only between", "start": 591.36, "duration": 5.28}, {"text": "these two pointers so we can just", "start": 593.12, "duration": 5.04}, {"text": "keep going like that and just to show", "start": 596.64, "duration": 3.28}, {"text": "you more examples", "start": 598.16, "duration": 6.0}, {"text": "if -4 comes after that we can put -4", "start": 599.92, "duration": 5.12}, {"text": "here", "start": 604.16, "duration": 2.96}, {"text": "and then move the second pointer over", "start": 605.04, "duration": 4.32}, {"text": "here if zero", "start": 607.12, "duration": 5.12}, {"text": "comes after that we can put zero here", "start": 609.36, "duration": 3.36}, {"text": "and", "start": 612.24, "duration": 2.8}, {"text": "move the second pointer over here or", "start": 612.72, "duration": 4.96}, {"text": "increment the second pointer by one", "start": 615.04, "duration": 5.2}, {"text": "and if 42 goes away we can move the", "start": 617.68, "duration": 3.52}, {"text": "first pointer", "start": 620.24, "duration": 3.92}, {"text": "over here let me just keep going like", "start": 621.2, "duration": 5.199}, {"text": "this", "start": 624.16, "duration": 2.239}, {"text": "and what if you have a situation like", "start": 631.76, "duration": 3.6}, {"text": "this now", "start": 634.0, "duration": 3.2}, {"text": "where you have three people in the queue", "start": 635.36, "duration": 3.84}, {"text": "0 1 and 42", "start": 637.2, "duration": 4.24}, {"text": "and you want to add another person minus", "start": 639.2, "duration": 3.36}, {"text": "4 here", "start": 641.44, "duration": 4.8}, {"text": "to do that we can put minus 4 here", "start": 642.56, "duration": 5.279}, {"text": "and then you would try to move the", "start": 646.24, "duration": 3.839}, {"text": "second pointer over here", "start": 647.839, "duration": 5.44}, {"text": "but that's out of bound to fix that", "start": 650.079, "duration": 6.641}, {"text": "you can just move this pointer back here", "start": 653.279, "duration": 5.12}, {"text": "at zero instead", "start": 656.72, "duration": 3.84}, {"text": "so you can actually visualize uh this", "start": 658.399, "duration": 4.961}, {"text": "array like a circular array", "start": 660.56, "duration": 5.2}, {"text": "where if you try to go out of bound you", "start": 663.36, "duration": 3.68}, {"text": "just go back to", "start": 665.76, "duration": 4.16}, {"text": "zero so let's just keep going like that", "start": 667.04, "duration": 3.76}, {"text": "uh", "start": 669.92, "duration": 3.44}, {"text": "if we want to put 13 after that you can", "start": 670.8, "duration": 4.24}, {"text": "put 13 here", "start": 673.36, "duration": 4.56}, {"text": "and then move the second pointer by one", "start": 675.04, "duration": 4.0}, {"text": "over here", "start": 677.92, "duration": 2.72}, {"text": "and it would work the same way for the", "start": 679.04, "duration": 3.2}, {"text": "first pointer too", "start": 680.64, "duration": 4.8}, {"text": "i've if the first pointer keeps going to", "start": 682.24, "duration": 4.32}, {"text": "the right", "start": 685.44, "duration": 5.2}, {"text": "and if it's about to go out of bound", "start": 686.56, "duration": 7.12}, {"text": "instead of having it go out of bound we", "start": 690.64, "duration": 4.56}, {"text": "can just bring it back to", "start": 693.68, "duration": 4.159}, {"text": "zero right here and another thing to", "start": 695.2, "duration": 4.079}, {"text": "note about this particular", "start": 697.839, "duration": 2.801}, {"text": "implementation", "start": 699.279, "duration": 4.721}, {"text": "is that you're only able to store almost", "start": 700.64, "duration": 6.48}, {"text": "n minus one elements in this data", "start": 704.0, "duration": 3.6}, {"text": "structure", "start": 707.12, "duration": 2.88}, {"text": "assuming that the length of the array is", "start": 707.6, "duration": 3.12}, {"text": "n", "start": 710.0, "duration": 2.959}, {"text": "to explain that let's consider this", "start": 710.72, "duration": 3.52}, {"text": "situation", "start": 712.959, "duration": 3.521}, {"text": "where we have the second pointer right", "start": 714.24, "duration": 3.52}, {"text": "here and we have", "start": 716.48, "duration": 5.039}, {"text": "some elements here here and", "start": 717.76, "duration": 7.44}, {"text": "here if you try to add one more element", "start": 721.519, "duration": 6.56}, {"text": "right here you would need to move the", "start": 725.2, "duration": 4.72}, {"text": "second pointer right here to the same", "start": 728.079, "duration": 2.481}, {"text": "position", "start": 729.92, "duration": 3.28}, {"text": "as the first pointer but we've already", "start": 730.56, "duration": 3.92}, {"text": "said that in this particular", "start": 733.2, "duration": 2.639}, {"text": "implementation", "start": 734.48, "duration": 4.0}, {"text": "uh if these two pointers point to the", "start": 735.839, "duration": 4.161}, {"text": "same thing", "start": 738.48, "duration": 4.08}, {"text": "this q is empty but clearly it's not", "start": 740.0, "duration": 3.519}, {"text": "empty", "start": 742.56, "duration": 3.76}, {"text": "and that's why we would need to stop", "start": 743.519, "duration": 3.44}, {"text": "here", "start": 746.32, "duration": 2.56}, {"text": "and that's why we're only able to store", "start": 746.959, "duration": 3.68}, {"text": "n minus 1 elements", "start": 748.88, "duration": 4.639}, {"text": "where the length of the array is n if", "start": 750.639, "duration": 3.921}, {"text": "you want to store", "start": 753.519, "duration": 3.44}, {"text": "more elements you will need to either", "start": 754.56, "duration": 3.68}, {"text": "throw an error", "start": 756.959, "duration": 3.361}, {"text": "or create a new array that's longer than", "start": 758.24, "duration": 3.2}, {"text": "the original array", "start": 760.32, "duration": 3.199}, {"text": "and then transfer all the elements to", "start": 761.44, "duration": 3.28}, {"text": "the new array", "start": 763.519, "duration": 4.481}, {"text": "anyway in this implementation we saw", "start": 764.72, "duration": 7.679}, {"text": "two key operations one is", "start": 768.0, "duration": 7.519}, {"text": "removing an element or a person or a", "start": 772.399, "duration": 3.841}, {"text": "piece of data", "start": 775.519, "duration": 4.0}, {"text": "from the cube and another one is adding", "start": 776.24, "duration": 5.36}, {"text": "a piece of data to the queue sometimes", "start": 779.519, "duration": 3.361}, {"text": "it's called", "start": 781.6, "duration": 4.479}, {"text": "dq and q", "start": 782.88, "duration": 5.36}, {"text": "and with this particular implementation", "start": 786.079, "duration": 3.44}, {"text": "assuming that", "start": 788.24, "duration": 3.839}, {"text": "the number of elements doesn't exceed n", "start": 789.519, "duration": 4.0}, {"text": "minus 1", "start": 792.079, "duration": 4.721}, {"text": "we can implement both of those things in", "start": 793.519, "duration": 6.641}, {"text": "o 1 or in constant time and that's it", "start": 796.8, "duration": 3.76}, {"text": "for", "start": 800.16, "duration": 3.679}, {"text": "a queue but let's quickly discuss", "start": 800.56, "duration": 6.64}, {"text": "another data structure and that's a", "start": 803.839, "duration": 6.881}, {"text": "deck or double ndq it's a more", "start": 807.2, "duration": 4.96}, {"text": "generalized", "start": 810.72, "duration": 3.6}, {"text": "version of the queue data structure that", "start": 812.16, "duration": 3.2}, {"text": "we saw", "start": 814.32, "duration": 4.24}, {"text": "and in this data structure deck you're", "start": 815.36, "duration": 4.32}, {"text": "able to", "start": 818.56, "duration": 4.56}, {"text": "put data and remove data from either end", "start": 819.68, "duration": 6.399}, {"text": "of this queue so you can remove this", "start": 823.12, "duration": 4.0}, {"text": "person right here", "start": 826.079, "duration": 3.76}, {"text": "or you can remove this person right here", "start": 827.12, "duration": 4.8}, {"text": "and you can add a person", "start": 829.839, "duration": 4.8}, {"text": "at the front of the queue or at the left", "start": 831.92, "duration": 4.0}, {"text": "side of the queue", "start": 834.639, "duration": 3.521}, {"text": "or add this piece of data at the right", "start": 835.92, "duration": 3.359}, {"text": "side of the queue", "start": 838.16, "duration": 3.44}, {"text": "and one way to implement this is similar", "start": 839.279, "duration": 3.36}, {"text": "to", "start": 841.6, "duration": 2.96}, {"text": "the implementation of the queue that we", "start": 842.639, "duration": 3.921}, {"text": "saw so you can use", "start": 844.56, "duration": 4.719}, {"text": "a circular array still and have the same", "start": 846.56, "duration": 4.079}, {"text": "kind of structure", "start": 849.279, "duration": 4.321}, {"text": "but in this new structure we're able to", "start": 850.639, "duration": 4.0}, {"text": "remove data", "start": 853.6, "duration": 4.64}, {"text": "from either end and add data", "start": 854.639, "duration": 7.841}, {"text": "to either n2 so you would basically have", "start": 858.24, "duration": 7.12}, {"text": "functions that are called something like", "start": 862.48, "duration": 3.76}, {"text": "add lift", "start": 865.36, "duration": 4.0}, {"text": "remove left add right and remove", "start": 866.24, "duration": 6.08}, {"text": "right sometimes they're called top left", "start": 869.36, "duration": 5.039}, {"text": "pop right or other names", "start": 872.32, "duration": 4.56}, {"text": "but you get the idea you should be able", "start": 874.399, "duration": 3.12}, {"text": "to", "start": 876.88, "duration": 4.079}, {"text": "implement all of those operations in one", "start": 877.519, "duration": 4.32}, {"text": "as well", "start": 880.959, "duration": 3.601}, {"text": "okay so that's my introduction to these", "start": 881.839, "duration": 4.321}, {"text": "three data structures", "start": 884.56, "duration": 3.92}, {"text": "but if you want to practice using these", "start": 886.16, "duration": 3.28}, {"text": "concepts", "start": 888.48, "duration": 3.76}, {"text": "one of the resources i recommend is one", "start": 889.44, "duration": 6.399}, {"text": "of my business affiliates algoexpert.io", "start": 892.24, "duration": 5.839}, {"text": "this is my referral link and this is my", "start": 895.839, "duration": 4.161}, {"text": "discount code cs dojo", "start": 898.079, "duration": 3.921}, {"text": "and there's actually an interesting", "start": 900.0, "duration": 4.079}, {"text": "problem that i found on this website", "start": 902.0, "duration": 3.519}, {"text": "for which you can use one of these", "start": 904.079, "duration": 3.76}, {"text": "concepts so i want to give you a quick", "start": 905.519, "duration": 4.481}, {"text": "introduction to that problem", "start": 907.839, "duration": 5.36}, {"text": "in this problem you're given a string", "start": 910.0, "duration": 6.48}, {"text": "of different types of brackets regular", "start": 913.199, "duration": 4.961}, {"text": "brackets square brackets and curly", "start": 916.48, "duration": 2.64}, {"text": "brackets", "start": 918.16, "duration": 2.799}, {"text": "and you want to write a function that", "start": 919.12, "duration": 3.68}, {"text": "takes a string like this", "start": 920.959, "duration": 4.721}, {"text": "and returns true if the brackets are", "start": 922.8, "duration": 3.76}, {"text": "balanced", "start": 925.68, "duration": 4.159}, {"text": "and false if they're not so what does it", "start": 926.56, "duration": 3.92}, {"text": "mean for", "start": 929.839, "duration": 3.521}, {"text": "these brackets to be balanced to explain", "start": 930.48, "duration": 4.4}, {"text": "that i think the best way to do that", "start": 933.36, "duration": 3.039}, {"text": "would be to give you a bunch of", "start": 934.88, "duration": 4.72}, {"text": "examples this one is", "start": 936.399, "duration": 5.12}, {"text": "balanced because there are square", "start": 939.6, "duration": 4.08}, {"text": "brackets inside and regular brackets", "start": 941.519, "duration": 5.281}, {"text": "outside this is not balanced", "start": 943.68, "duration": 6.24}, {"text": "obviously this is not balanced either", "start": 946.8, "duration": 5.12}, {"text": "because you're trying to close before", "start": 949.92, "duration": 3.76}, {"text": "you open", "start": 951.92, "duration": 5.2}, {"text": "this one's not balanced and this one", "start": 953.68, "duration": 6.48}, {"text": "is not balanced either because these two", "start": 957.12, "duration": 4.24}, {"text": "types of brackets are", "start": 960.16, "duration": 3.119}, {"text": "overlapping anyway you should be able to", "start": 961.36, "duration": 3.12}, {"text": "solve this problem", "start": 963.279, "duration": 4.24}, {"text": "in of and in time where n is the length", "start": 964.48, "duration": 4.08}, {"text": "of the string", "start": 967.519, "duration": 4.801}, {"text": "and of n in space as well anyway uh", "start": 968.56, "duration": 6.16}, {"text": "sorry about the delay again uh i'll try", "start": 972.32, "duration": 3.12}, {"text": "to be", "start": 974.72, "duration": 2.4}, {"text": "you know a little bit faster in my video", "start": 975.44, "duration": 3.759}, {"text": "production in the future", "start": 977.12, "duration": 4.0}, {"text": "but thank you so much for sticking with", "start": 979.199, "duration": 3.361}, {"text": "my video and", "start": 981.12, "duration": 4.719}, {"text": "you know my channel okay thank you as", "start": 982.56, "duration": 4.959}, {"text": "always for watching my videos", "start": 985.839, "duration": 5.201}, {"text": "and i'll see you guys in the next one", "start": 987.519, "duration": 3.521}]