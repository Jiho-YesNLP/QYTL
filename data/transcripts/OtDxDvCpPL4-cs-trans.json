[{"text": "This episode is brought to you by Curiosity\nStream.", "start": 3.33, "duration": 2.66}, {"text": "Hi, I'm Carrie Anne, and welcome to Crash\nCourse Computer Science!", "start": 5.99, "duration": 3.19}, {"text": "Last episode we talked about Files, bundles\nof data, stored on a computer, that are formatted", "start": 9.18, "duration": 4.52}, {"text": "and arranged to encode information, like text,\nsound or images.", "start": 13.71, "duration": 3.75}, {"text": "We even discussed some basic file formats,\nlike text, wave, and bitmap.", "start": 17.46, "duration": 3.43}, {"text": "While these formats are perfectly fine and\nstill used today, their simplicity also means", "start": 20.89, "duration": 4.049}, {"text": "they\u2019re not very efficient.", "start": 24.939, "duration": 1.191}, {"text": "Ideally, we want files to be as small as possible,\nso we can store lots of them without filling", "start": 26.13, "duration": 4.309}, {"text": "up our hard drives, and also transmit them\nmore quickly.", "start": 30.44, "duration": 3.16}, {"text": "Nothing is more frustrating than waiting for\nan email attachment to download. Ugh!", "start": 33.6, "duration": 3.3}, {"text": "The answer is compression, which literally\nsqueezes data into a smaller size.", "start": 37.0, "duration": 4.18}, {"text": "To do this, we have to encode data using fewer\nbits than the original representation.", "start": 41.18, "duration": 4.85}, {"text": "That might sound like magic, but it\u2019s actually\ncomputer science!", "start": 46.03, "duration": 3.41}, {"text": "INTRO", "start": 49.44, "duration": 8.84}, {"text": "Lets return to our old friend from last episode,\nMr. Pac-man!", "start": 58.28, "duration": 3.58}, {"text": "This image is 4 pixels by 4 pixels.", "start": 61.86, "duration": 2.28}, {"text": "As we discussed, image data is typically stored\nas a list of pixel values.", "start": 64.14, "duration": 4.03}, {"text": "To know where rows end, image files have metadata,\nwhich defines properties like dimensions.", "start": 68.17, "duration": 4.19}, {"text": "But, to keep it simple today, we\u2019re not\ngoing to worry about it.", "start": 72.36, "duration": 3.38}, {"text": "Each pixel\u2019s color is a combination of three\nadditive primary colors: red, green and blue.", "start": 75.75, "duration": 4.93}, {"text": "We store each of those values in one byte,\ngiving us a range of 0 to 255 for each color.", "start": 80.69, "duration": 5.8}, {"text": "If you mix full intensity red, green and blue\n- that\u2019s 255 for all three values - you", "start": 86.49, "duration": 4.51}, {"text": "get the color white.", "start": 91.0, "duration": 1.43}, {"text": "If you mix full intensity red and green, but\nno blue (it\u2019s 0), you get yellow.", "start": 92.43, "duration": 4.16}, {"text": "We have 16 pixels in our image, and each of\nthose needs 3 bytes of color data.", "start": 96.59, "duration": 4.52}, {"text": "That means this image\u2019s data will consume\n48 bytes of storage.", "start": 101.11, "duration": 3.23}, {"text": "But, we can compress the data and pack it\ninto a smaller number of bytes than 48!", "start": 104.34, "duration": 4.08}, {"text": "One way to compress data is to reduce repeated\nor redundant information.", "start": 108.42, "duration": 3.92}, {"text": "The most straightforward way to do this is\ncalled Run-Length Encoding.", "start": 112.35, "duration": 3.31}, {"text": "This takes advantage of the fact that there\nare often runs of identical values in files.", "start": 115.67, "duration": 3.86}, {"text": "For example, in our pac-man image, there are\n7 yellow pixels in a row.", "start": 119.53, "duration": 4.11}, {"text": "Instead of encoding redundant data: yellow\npixel, yellow pixel, yellow pixel, and so", "start": 123.64, "duration": 3.831}, {"text": "on, we can just say \u201cthere\u2019s 7 yellow\npixels in a row\u201d by inserting an extra byte", "start": 127.471, "duration": 4.589}, {"text": "that specifies the length of the run, like\nso:", "start": 132.06, "duration": 3.11}, {"text": "And then we can eliminate the redundant data\nbehind it.", "start": 135.17, "duration": 2.69}, {"text": "To ensure that computers don\u2019t get confused\nwith which bytes are run lengths and which", "start": 137.86, "duration": 3.33}, {"text": "bytes represent color, we have to be consistent\nin how we apply this scheme.", "start": 141.19, "duration": 3.97}, {"text": "So, we need to preface all pixels with their\nrun-length.", "start": 145.16, "duration": 2.92}, {"text": "In some cases, this actually adds data, but\non the whole, we\u2019ve dramatically reduced", "start": 148.08, "duration": 4.15}, {"text": "the number of bytes we need to encode this\nimage.", "start": 152.23, "duration": 2.339}, {"text": "We\u2019re now at 24 bytes, down from 48.", "start": 154.569, "duration": 2.571}, {"text": "That\u2019s 50% smaller!", "start": 157.14, "duration": 1.76}, {"text": "A huge saving!", "start": 158.9, "duration": 1.44}, {"text": "Also note that we haven\u2019t lost any data.", "start": 160.349, "duration": 1.901}, {"text": "We can easily expand this back to the original\nform without any degradation.", "start": 162.25, "duration": 3.6}, {"text": "A compression technique that has this characteristic\nis called lossless compression, because we", "start": 165.85, "duration": 4.22}, {"text": "don\u2019t lose anything.", "start": 170.07, "duration": 1.2}, {"text": "The decompressed data is identical to the\noriginal before compression, bit for bit.", "start": 171.27, "duration": 4.73}, {"text": "Let's take a look at another type of lossless\ncompression, where blocks of data are replaced", "start": 176.0, "duration": 4.22}, {"text": "by more compact representations.", "start": 180.22, "duration": 2.2}, {"text": "This is sort of like \u201cdon\u2019t forget to\nbe awesome\u201d being replaced by DFTBA.", "start": 182.42, "duration": 3.87}, {"text": "To do this, we need a dictionary that stores\nthe mapping from codes to data.", "start": 186.29, "duration": 3.78}, {"text": "Lets see how this works for our example.", "start": 190.07, "duration": 2.01}, {"text": "We can view our image as not just a string\nof individual pixels, but as little blocks", "start": 192.08, "duration": 3.86}, {"text": "of data.", "start": 195.94, "duration": 1.0}, {"text": "For simplicity, we\u2019re going to use pixel\npairs, which are 6 bytes long, but blocks", "start": 196.94, "duration": 3.67}, {"text": "can be any size.", "start": 200.61, "duration": 1.5}, {"text": "In our example, there are only four pairings:\nWhite-yellow, black-yellow, yellow-yellow", "start": 202.11, "duration": 4.27}, {"text": "and white-white.", "start": 206.38, "duration": 1.0}, {"text": "Those are the data blocks in our dictionary\nwe want to generate compact codes for.", "start": 207.38, "duration": 4.02}, {"text": "What\u2019s interesting, is that these blocks\noccur at different frequencies.", "start": 211.4, "duration": 3.46}, {"text": "There are 4 yellow-yellow pairs, 2 white-yellow pairs, and 1 each of black-yellow and white-white.", "start": 214.86, "duration": 4.65}, {"text": "Because yellow-yellow is the most common block,\nwe want that to be substituted for the most", "start": 219.51, "duration": 4.11}, {"text": "compact representation.", "start": 223.62, "duration": 1.69}, {"text": "On the other hand, black-yellow and white-white,\ncan be substituted for something longer because", "start": 225.31, "duration": 4.509}, {"text": "those blocks are infrequent.", "start": 229.819, "duration": 1.521}, {"text": "One method for generating efficient codes\nis building a Huffman Tree, invented by David", "start": 231.34, "duration": 4.08}, {"text": "Huffman while he was a student at MIT in the\n1950s.", "start": 235.42, "duration": 3.41}, {"text": "His algorithm goes like this.", "start": 238.83, "duration": 1.34}, {"text": "First, you layout all the possible blocks\nand their frequencies.", "start": 240.17, "duration": 3.149}, {"text": "At every round, you select the two with the\nlowest frequencies.", "start": 243.319, "duration": 2.601}, {"text": "Here, that\u2019s Black-Yellow and White-White,\neach with a frequency of 1.", "start": 245.92, "duration": 4.099}, {"text": "You combine these into a little tree... ...which\nhave a combined frequency of 2, so we record", "start": 250.019, "duration": 4.371}, {"text": "that.", "start": 254.39, "duration": 1.0}, {"text": "And now one step of the algorithm done.", "start": 255.39, "duration": 1.849}, {"text": "Now we repeat the process.", "start": 257.239, "duration": 1.53}, {"text": "This time we have three things to choose from.", "start": 258.769, "duration": 2.131}, {"text": "Just like before, we select the two with the\nlowest frequency, put them into a little tree,", "start": 260.9, "duration": 4.139}, {"text": "and record the new total frequency of all\nthe sub items.", "start": 265.039, "duration": 2.55}, {"text": "Ok, we\u2019re almost done.", "start": 267.589, "duration": 1.901}, {"text": "This time it\u2019s easy to select the two items\nwith the lowest frequency because there are", "start": 269.49, "duration": 3.519}, {"text": "only two things left to pick.", "start": 273.009, "duration": 1.641}, {"text": "We combine these into a tree, and now we\u2019re\ndone!", "start": 274.65, "duration": 2.519}, {"text": "Our tree looks like this, and it has a very\ncool property: it\u2019s arranged by frequency,", "start": 277.169, "duration": 4.65}, {"text": "with less common items lower down.", "start": 281.819, "duration": 1.541}, {"text": "So, now we have a tree, but you may be wondering\nhow this gets us to a dictionary.", "start": 283.36, "duration": 3.46}, {"text": "Well, we use our frequency-sorted tree to\ngenerate the codes we need by labeling each", "start": 286.82, "duration": 4.61}, {"text": "branch with a 0 or a 1, like so:", "start": 291.43, "duration": 2.56}, {"text": "With this, we can write out our code dictionary.", "start": 293.99, "duration": 2.78}, {"text": "Yellow-yellow is encoded as just a single\n0.", "start": 296.77, "duration": 2.44}, {"text": "White-yellow is encoded as 1 0 (\u201cone zero\u201d)", "start": 299.21, "duration": 1.87}, {"text": "Black-Yellow is 1 1 0", "start": 301.08, "duration": 1.36}, {"text": "and finally white-white is 1 1 1.", "start": 302.44, "duration": 2.119}, {"text": "The really cool thing about these codewords\nis that there\u2019s no way to have conflicting", "start": 304.559, "duration": 3.771}, {"text": "codes, because each path down the tree is\nunique.", "start": 308.33, "duration": 2.55}, {"text": "This means our codes are prefix-free, that\nis no code starts with another complete code.", "start": 310.88, "duration": 4.46}, {"text": "Now, let\u2019s return to our image data and\ncompress it!", "start": 315.34, "duration": 2.749}, {"text": "Our first pixel pair, white-yellow, is substituted\nfor the bits \u201c1 0\u201d.", "start": 318.089, "duration": 3.86}, {"text": "The next pair is black-yellow, which is substituted\nfor \u201c1 1 0\u201d.", "start": 321.949, "duration": 3.411}, {"text": "Next is yellow-yellow with the incredibly\ncompact substitution of just \u201c0\u201d.", "start": 325.36, "duration": 4.38}, {"text": "And this process repeats for the rest of the\nimage:", "start": 329.749, "duration": 2.371}, {"text": "So instead of 48 bytes of image data ...this\nprocess has encoded it into 14 bits -- NOT", "start": 332.12, "duration": 5.019}, {"text": "BYTES -- BITS!!", "start": 337.139, "duration": 1.0}, {"text": "That\u2019s less than 2 bytes of data!", "start": 338.139, "duration": 2.011}, {"text": "But, don\u2019t break out the champagne quite\nyet!", "start": 340.15, "duration": 2.37}, {"text": "This data is meaningless unless we also save\nour code dictionary.", "start": 342.52, "duration": 3.31}, {"text": "So, we\u2019ll need to append it to the front\nof the image data, like this.", "start": 345.83, "duration": 3.5}, {"text": "Now, including the dictionary, our image data\nis 30 bytes long.", "start": 349.33, "duration": 3.71}, {"text": "That\u2019s still a significant improvement over 48\nbytes.", "start": 353.04, "duration": 3.04}, {"text": "The two approaches we discussed, removing\nredundancies and using more compact representations,", "start": 356.089, "duration": 3.971}, {"text": "are often combined, and underlie almost all\nlossless compressed file formats, like GIF,", "start": 360.069, "duration": 5.231}, {"text": "PNG, PDF and ZIP files.", "start": 365.3, "duration": 1.869}, {"text": "Both run-length encoding and dictionary coders\nare lossless compression techniques.", "start": 367.169, "duration": 4.15}, {"text": "No information is lost; when you decompress,\nyou get the original file.", "start": 371.319, "duration": 3.57}, {"text": "That\u2019s really important for many types of\nfiles.", "start": 374.889, "duration": 2.191}, {"text": "Like, it\u2019d be very odd if I zipped up a\nword document to send to you, and when you", "start": 377.08, "duration": 3.809}, {"text": "decompressed it on your computer, the text\nwas different.", "start": 380.889, "duration": 2.48}, {"text": "But, there are other types of files where\nwe can get away with little changes, perhaps", "start": 383.369, "duration": 3.5}, {"text": "by removing unnecessary or less important\ninformation, especially information that human", "start": 386.869, "duration": 4.54}, {"text": "perception is not good at detecting.", "start": 391.409, "duration": 2.38}, {"text": "And this trick underlies most lossy compression\ntechniques.", "start": 393.789, "duration": 3.321}, {"text": "These tend to be pretty complicated, so we\u2019re\ngoing to attack this at a conceptual level.", "start": 397.11, "duration": 3.989}, {"text": "Let\u2019s take sound as an example.", "start": 401.099, "duration": 1.85}, {"text": "Your hearing is not perfect.", "start": 402.949, "duration": 1.581}, {"text": "We can hear some frequencies of sound better\nthan others.", "start": 404.53, "duration": 2.639}, {"text": "And there are some we can\u2019t hear at all,\nlike ultrasound.", "start": 407.169, "duration": 1.941}, {"text": "Unless you\u2019re a bat.", "start": 409.11, "duration": 1.739}, {"text": "Basically, if we make a recording of music,\nand there\u2019s data in the ultrasonic frequency", "start": 410.849, "duration": 3.59}, {"text": "range, we can discard it, because we know\nthat humans can\u2019t hear it.", "start": 414.439, "duration": 3.611}, {"text": "On the other hand, humans are very sensitive\nto frequencies in the vocal range, like people", "start": 418.05, "duration": 3.869}, {"text": "singing, so it\u2019s best to preserve quality\nthere as much as possible.", "start": 421.919, "duration": 3.49}, {"text": "Deep bass is somewhere in between.", "start": 425.409, "duration": 1.88}, {"text": "Humans can hear it, but we\u2019re less attuned\nto it.", "start": 427.289, "duration": 2.33}, {"text": "We mostly sense it.", "start": 429.619, "duration": 1.54}, {"text": "Lossy audio compressors takes advantage of\nthis, and encode different frequency bands", "start": 431.159, "duration": 3.72}, {"text": "at different precisions.", "start": 434.88, "duration": 1.66}, {"text": "Even if the result is rougher, it\u2019s likely\nthat users won\u2019t perceive the difference.", "start": 436.54, "duration": 3.92}, {"text": "Or at least it doesn\u2019t dramatically affect\nthe experience.", "start": 440.46, "duration": 2.64}, {"text": "And here comes the hate mail from the audiophiles!", "start": 443.1, "duration": 2.58}, {"text": "You encounter this type of audio compression\nall the time.", "start": 445.68, "duration": 2.41}, {"text": "It\u2019s one of the reasons you sound different\non a cellphone versus in person.", "start": 448.09, "duration": 4.03}, {"text": "The audio data is being compressed, allowing\nmore people to take calls at once.", "start": 452.12, "duration": 3.7}, {"text": "As the signal quality or bandwidth get worse,\ncompression algorithms remove more data, further", "start": 455.83, "duration": 4.85}, {"text": "reducing precision, which is why Skype calls\nsometimes sound like robots talking.", "start": 460.7, "duration": 4.13}, {"text": "Compared to an uncompressed audio format, like a WAV or FLAC (there we go, got the audiophiles back)", "start": 464.83, "duration": 4.97}, {"text": "compressed audio files, like MP3s,\nare often 10 times smaller.", "start": 469.82, "duration": 3.9}, {"text": "That\u2019s a huge saving!", "start": 473.72, "duration": 1.719}, {"text": "And it\u2019s why I\u2019ve got a killer music collection\non my retro iPod.", "start": 475.439, "duration": 2.68}, {"text": "Don\u2019t judge.", "start": 478.119, "duration": 1.0}, {"text": "This idea of discarding or reducing precision\nin a manner that aligns with human perception", "start": 479.119, "duration": 4.07}, {"text": "is called perceptual coding, and it relies\non models of human perception,", "start": 483.189, "duration": 4.021}, {"text": "which come from a field of study called Psychophysics.", "start": 487.21, "duration": 2.299}, {"text": "This same idea is the basis of lossy compressed\nimage formats, most famously JPEGs.", "start": 489.509, "duration": 5.28}, {"text": "Like hearing, the human visual system is imperfect.", "start": 494.789, "duration": 2.06}, {"text": "We\u2019re really good at detecting sharp contrasts,\nlike the edges of objects, but our perceptual", "start": 496.849, "duration": 4.86}, {"text": "system isn\u2019t so hot with subtle color variations.", "start": 501.709, "duration": 2.29}, {"text": "JPEG takes advantage of this by breaking images\nup into blocks of 8x8 pixels, then throwing", "start": 503.999, "duration": 4.771}, {"text": "away a lot of the high-frequency spatial data.", "start": 508.77, "duration": 2.28}, {"text": "For example, take this photo of our directors\ndog - Noodle.", "start": 511.05, "duration": 2.789}, {"text": "So cute!", "start": 513.839, "duration": 1.0}, {"text": "Let\u2019s look at patch of 8x8 pixels.", "start": 514.839, "duration": 2.601}, {"text": "Pretty much every pixel is different from\nits neighbor, making it hard to compress with", "start": 517.44, "duration": 3.62}, {"text": "loss-less techniques because there\u2019s just\na lot going on.", "start": 521.06, "duration": 2.72}, {"text": "Lots of little details.", "start": 523.78, "duration": 1.31}, {"text": "But human perception doesn\u2019t register all\nthose details.", "start": 525.09, "duration": 2.42}, {"text": "So, we can discard a lot of that detail, and\nreplace it with a simplified patch like this.", "start": 527.51, "duration": 4.5}, {"text": "This maintains the visual essence, but might\nonly use 10% of the data.", "start": 532.01, "duration": 3.48}, {"text": "We can do this for all the patches in the\nimage and get this result.", "start": 535.49, "duration": 3.15}, {"text": "You can still see it\u2019s a dog, but the image\nis rougher.", "start": 538.64, "duration": 2.39}, {"text": "So, that\u2019s an extreme example, going from\na slightly compressed JPEG to a highly compressed", "start": 541.03, "duration": 4.6}, {"text": "one, one-eighth the original file size.", "start": 545.63, "duration": 1.94}, {"text": "Often, you can get away with a quality somewhere\nin between, and perceptually, it\u2019s basically", "start": 547.57, "duration": 4.69}, {"text": "the same as the original.", "start": 552.26, "duration": 1.56}, {"text": "The one on the left is one-third the file\nsize of the one on the right.", "start": 553.82, "duration": 3.12}, {"text": "That\u2019s a big savings for essentially the\nsame thing.", "start": 556.94, "duration": 2.9}, {"text": "Can you tell the difference between the two?", "start": 559.84, "duration": 1.58}, {"text": "Probably not, but I should mention that video\ncompression plays a role in that too, since", "start": 561.42, "duration": 3.86}, {"text": "I\u2019m literally being compressed in a video\nright now.", "start": 565.28, "duration": 1.82}, {"text": "Videos are really just long sequences of images,\nso a lot of what I said about them applies", "start": 567.1, "duration": 3.92}, {"text": "here too.", "start": 571.03, "duration": 1.03}, {"text": "But videos can do some extra clever stuff,\nbecause between frames, a lot of pixels are", "start": 572.07, "duration": 4.2}, {"text": "going to be the same.", "start": 576.27, "duration": 1.31}, {"text": "Like this whole background behind me!", "start": 577.58, "duration": 1.87}, {"text": "This is called temporal redundancy.", "start": 579.45, "duration": 2.12}, {"text": "We don\u2019t need to re-transmit those pixels\nevery frame of the video.", "start": 581.57, "duration": 3.02}, {"text": "We can just copy patches of data forward.", "start": 584.59, "duration": 2.16}, {"text": "When there are small pixel differences, like\nthe readout on this frequency generator behind", "start": 586.75, "duration": 3.95}, {"text": "me, most video formats send data that encodes\njust the difference between patches, which", "start": 590.7, "duration": 4.52}, {"text": "is more efficient than re-transmitting all\nthe pixels afresh, again taking advantage", "start": 595.22, "duration": 4.38}, {"text": "of inter-frame similarity.", "start": 599.6, "duration": 1.57}, {"text": "The fanciest video compression formats go\none step further.", "start": 601.17, "duration": 3.2}, {"text": "They find patches that are similar between\nframes, and not only copy them forward, with", "start": 604.37, "duration": 3.941}, {"text": "or without differences, but also can apply\nsimple effects to them, like a shift or rotation.", "start": 608.311, "duration": 5.119}, {"text": "They can also lighten or darken a patch between\nframes.", "start": 613.43, "duration": 2.76}, {"text": "So, if I move my hand side to side like this\nthe video compressor will identify the similarity,", "start": 616.19, "duration": 5.28}, {"text": "capture my hand in one or more patches, then\njust move these patches around between frames.", "start": 621.47, "duration": 4.31}, {"text": "You\u2019re actually seeing my hand from the\npast\u2026 kinda freaky, but it uses a lot less data.", "start": 625.78, "duration": 4.46}, {"text": "MPEG-4 videos, a common standard, are often\n20 to 200 times smaller than the original,", "start": 630.24, "duration": 4.46}, {"text": "uncompressed file.", "start": 634.7, "duration": 1.26}, {"text": "However, encoding frames as translations and\nrotations of patches from previous frames", "start": 635.97, "duration": 4.45}, {"text": "can go horribly wrong when you compress too\nheavily, and there isn\u2019t enough space to", "start": 640.42, "duration": 3.47}, {"text": "update pixel data inside of the patches.", "start": 643.89, "duration": 2.55}, {"text": "The video player will forge ahead, applying\nthe right motions, even if the patch data", "start": 646.44, "duration": 4.03}, {"text": "is wrong.", "start": 650.47, "duration": 1.0}, {"text": "And this leads to some hilarious and trippy\neffects, which I\u2019m sure you\u2019ve seen.", "start": 651.47, "duration": 3.31}, {"text": "Overall, it\u2019s extremely useful to have compression techniques for all the types of data I discussed today.", "start": 654.78, "duration": 4.56}, {"text": "(I guess our imperfect vision and hearing\nare \u201cuseful,\u201d too.)", "start": 659.34, "duration": 2.46}, {"text": "And it\u2019s important to know about compression\nbecause it allows users to store pictures,", "start": 661.8, "duration": 3.55}, {"text": "music, and videos in efficient ways.", "start": 665.35, "duration": 2.05}, {"text": "Without it, streaming your favorite Carpool\nKaraoke videos on YouTube would be nearly", "start": 667.4, "duration": 4.44}, {"text": "impossible, due to bandwidth and the economics\nof transmitting that volume of data for free.", "start": 671.84, "duration": 5.29}, {"text": "And now when your Skype calls sound like they\u2019re\nbeing taken over by demons, you\u2019ll know", "start": 677.13, "duration": 3.52}, {"text": "what\u2019s really going on.", "start": 680.65, "duration": 1.25}, {"text": "I\u2019ll see you next week.", "start": 681.9, "duration": 1.52}, {"text": "Hey guys, this week\u2019s episode was brought\nto you by CuriosityStream which is a streaming", "start": 683.42, "duration": 3.82}, {"text": "service full of documentaries and non\u00adfiction\ntitles from some really great filmmakers,", "start": 687.25, "duration": 4.56}, {"text": "including exclusive originals.", "start": 691.81, "duration": 1.95}, {"text": "Now I normally give computer science recommendations since this is Crash Course Computer Science and all", "start": 693.76, "duration": 4.78}, {"text": "and Curiosity Stream has a ton of\ngreat ones.  But you absolutely have to check", "start": 698.54, "duration": 4.12}, {"text": "out \u201cMiniverse\u201d starring everyone\u2019s\nfavorite space-station-singing-Canadian astronaut,", "start": 702.66, "duration": 4.68}, {"text": "Chris Hadfield, as he takes a roadtrip across\nthe Solar System scaled down the the size", "start": 707.34, "duration": 4.52}, {"text": "of the United States.", "start": 711.86, "duration": 1.3}, {"text": "It\u2019s basically 50 minutes of Chris and his\npassengers geeking out about our amazing planetary", "start": 713.16, "duration": 4.64}, {"text": "neighbors and you don\u2019t want to miss it.", "start": 717.8, "duration": 2.52}, {"text": "So get unlimited access today, and your first two months are free if you sign up at curiositystream.com/crashcourse", "start": 720.32, "duration": 6.79}, {"text": "and use the promo code \"crashcourse\" during the sign up process.", "start": 727.12, "duration": 2.96}]