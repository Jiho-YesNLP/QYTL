[{"text": "The following content is\nprovided under a Creative", "start": 0.79, "duration": 2.4}, {"text": "Commons license.", "start": 3.19, "duration": 1.54}, {"text": "Your support will help\nMIT OpenCourseWare", "start": 4.73, "duration": 2.3}, {"text": "continue to offer high quality\neducational resources for free.", "start": 7.03, "duration": 4.36}, {"text": "To make a donation, or\nview additional materials", "start": 11.39, "duration": 2.6}, {"text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare", "start": 13.99, "duration": 3.89}, {"text": "at ocw.mit.edu", "start": 17.88, "duration": 13.399}, {"text": "PROFESSOR: All right, everyone.", "start": 31.279, "duration": 1.291}, {"text": "Good afternoon.", "start": 32.57, "duration": 0.68}, {"text": "Let's get started.", "start": 33.25, "duration": 2.0}, {"text": "So today's lecture will be on\ntesting, debugging, and then", "start": 35.25, "duration": 2.91}, {"text": "exceptions and assertions.", "start": 38.16, "duration": 2.16}, {"text": "So before we begin, let's start\nwith an analogy to sort of come", "start": 40.32, "duration": 3.78}, {"text": "back to real life for a second.", "start": 44.1, "duration": 2.01}, {"text": "So I've made soup before.", "start": 46.11, "duration": 2.4}, {"text": "Perhaps you've made soup before.", "start": 48.51, "duration": 2.16}, {"text": "Let's say you're making\nsoup in this big pot here.", "start": 50.67, "duration": 4.27}, {"text": "And it turns out that bugs\nkeep falling into your soup", "start": 54.94, "duration": 2.75}, {"text": "from the ceiling.", "start": 57.69, "duration": 0.88}, {"text": "All right.", "start": 58.57, "duration": 0.5}, {"text": "Quick question to the audience.", "start": 59.07, "duration": 3.06}, {"text": "What do you do if you\nencountered this issue?", "start": 62.13, "duration": 1.992}, {"text": "AUDIENCE: [INTERPOSING VOICES]", "start": 64.122, "duration": 3.208}, {"text": "PROFESSOR: All right.", "start": 67.33, "duration": 1.16}, {"text": "Hands up.", "start": 68.49, "duration": 0.59}, {"text": "One one at a time.", "start": 69.08, "duration": 1.416}, {"text": "Anyone have any idea?", "start": 70.496, "duration": 0.874}, {"text": "Yeah.", "start": 71.37, "duration": 0.315}, {"text": "AUDIENCE: Eat it.", "start": 71.685, "duration": 0.855}, {"text": "PROFESSOR: Eat it.", "start": 72.54, "duration": 0.75}, {"text": "You want to eat it Anyway OK.", "start": 73.29, "duration": 1.9}, {"text": "All right.", "start": 75.19, "duration": 0.5}, {"text": "We're going for an analogy\nhere with computer programming.", "start": 75.69, "duration": 2.449}, {"text": "I don't know what you'd do\nif you have a buggy program,", "start": 78.139, "duration": 2.291}, {"text": "I guess you just release\nit to the customer", "start": 80.43, "duration": 1.949}, {"text": "and they'd complain, but.", "start": 82.379, "duration": 1.041}, {"text": "OK.", "start": 83.42, "duration": 0.76}, {"text": "What else?", "start": 84.18, "duration": 0.61}, {"text": "Yeah.", "start": 84.79, "duration": 0.5}, {"text": "AUDIENCE: [INAUDIBLE]\nCover the soup?", "start": 85.29, "duration": 1.76}, {"text": "PROFESSOR: Cover the soup.", "start": 87.05, "duration": 0.85}, {"text": "That's a good suggestion.", "start": 87.9, "duration": 0.96}, {"text": "Yeah.", "start": 88.86, "duration": 0.56}, {"text": "So you can cover the\nsoup, so put a lid on it.", "start": 89.42, "duration": 3.7}, {"text": "Sometimes you'd have to\nopen up, take the lid off,", "start": 93.12, "duration": 2.815}, {"text": "right, to check to\nmake sure it's done.", "start": 95.935, "duration": 1.625}, {"text": "To taste it, add things.", "start": 97.56, "duration": 1.59}, {"text": "So bugs might fall\nin in between there.", "start": 99.15, "duration": 1.949}, {"text": "But covering the\nsoup is a good idea.", "start": 101.099, "duration": 1.541}, {"text": "What else.", "start": 102.64, "duration": 0.566}, {"text": "Yeah.", "start": 103.206, "duration": 0.499}, {"text": "AUDIENCE: Debug it.", "start": 103.705, "duration": 1.262}, {"text": "PROFESSOR: Debug it.", "start": 104.967, "duration": 0.833}, {"text": "I wish I had something\nfor that answer.", "start": 109.24, "duration": 1.67}, {"text": "All right.", "start": 110.91, "duration": 0.5}, {"text": "That's a good answer.", "start": 111.41, "duration": 0.874}, {"text": "Yeah.", "start": 112.284, "duration": 0.616}, {"text": "AUDIENCE: Take all the\nfood out of your house", "start": 112.9, "duration": 1.875}, {"text": "so there's no-- nothing\nfor the bugs to eat.", "start": 114.775, "duration": 1.879}, {"text": "PROFESSOR: So take all\nthe food out of your house", "start": 116.654, "duration": 2.041}, {"text": "so there's nothing\nfor the bugs to eat.", "start": 118.695, "duration": 2.595}, {"text": "That's sort of the\nequivalent of cleaning,", "start": 121.29, "duration": 3.24}, {"text": "like doing a mass cleaning\nof your entire house.", "start": 124.53, "duration": 3.116}, {"text": "That's a good,\nthat's a good one.", "start": 127.646, "duration": 1.374}, {"text": "That's sort of eliminating\nthe source of the bugs, right?", "start": 129.02, "duration": 3.79}, {"text": "What else?", "start": 132.81, "duration": 0.51}, {"text": "Yeah, John.", "start": 136.19, "duration": 0.57}, {"text": "AUDIENCE: Decide\nit's high protein", "start": 136.76, "duration": 1.416}, {"text": "and declare it a feature.", "start": 138.176, "duration": 1.494}, {"text": "PROFESSOR: Decide\nit's high protein", "start": 139.67, "duration": 1.86}, {"text": "and declare it a feature.", "start": 141.53, "duration": 1.8}, {"text": "That's probably what a lot\nof people would do, right?", "start": 143.33, "duration": 3.581}, {"text": "All right.", "start": 146.911, "duration": 0.499}, {"text": "Cool.", "start": 147.41, "duration": 0.63}, {"text": "So I wish computer debugging\nwas as fun as taking bugs out", "start": 148.04, "duration": 6.3}, {"text": "of your soup.", "start": 154.34, "duration": 0.6}, {"text": "So what did we decide?", "start": 154.94, "duration": 1.11}, {"text": "Well we could check\nthe soup for bugs.", "start": 156.05, "duration": 2.34}, {"text": "Keep the lid closed, that\nwas a good suggestion.", "start": 158.39, "duration": 2.22}, {"text": "And cleaning your kitchen,\nwhich someone suggested.", "start": 160.61, "duration": 2.474}, {"text": "The equivalent of\ncleaning their kitchen", "start": 163.084, "duration": 1.666}, {"text": "was to just throw\nout all the food.", "start": 164.75, "duration": 1.98}, {"text": "I would take a mop\nand clean the floor,", "start": 166.73, "duration": 1.84}, {"text": "but yeah, that works too.", "start": 168.57, "duration": 1.77}, {"text": "So we can draw some\nparallels for this analogy", "start": 170.34, "duration": 6.927}, {"text": "with computer programming.", "start": 177.267, "duration": 1.083}, {"text": "So checking the soup is really\nequivalent to testing, right?", "start": 178.35, "duration": 3.24}, {"text": "You have a soup you\nthink has bugs in it.", "start": 181.59, "duration": 3.39}, {"text": "Test it.", "start": 184.98, "duration": 0.72}, {"text": "Make sure there's no bugs.", "start": 185.7, "duration": 1.11}, {"text": "Continue on.", "start": 186.81, "duration": 0.93}, {"text": "Keeping the lid closed.", "start": 187.74, "duration": 1.92}, {"text": "It's sort of this idea\nof defensive programming.", "start": 189.66, "duration": 2.16}, {"text": "So make sure that bugs don't\nfall in in the first place.", "start": 191.82, "duration": 2.44}, {"text": "Sometimes you have\nto open the lid", "start": 194.26, "duration": 2.18}, {"text": "to make sure that the soup\nis tastes good or whatever.", "start": 196.44, "duration": 3.814}, {"text": "So that's equivalent to\ndefensive programming.", "start": 200.254, "duration": 1.916}, {"text": "So try not to have bugs\nin the first place,", "start": 202.17, "duration": 1.791}, {"text": "but they might show up anyway.", "start": 203.961, "duration": 2.023}, {"text": "Cleaning the kitchen is\neliminating the source", "start": 205.984, "duration": 1.916}, {"text": "of the bugs in the first place.", "start": 207.9, "duration": 1.291}, {"text": "This is actually really\nhard to do in programming.", "start": 209.191, "duration": 3.859}, {"text": "But you can still try to do it.", "start": 213.05, "duration": 2.73}, {"text": "OK.", "start": 215.78, "duration": 1.11}, {"text": "So let's talk a little\nbit about programming", "start": 216.89, "duration": 3.12}, {"text": "so far in 60001 600.", "start": 220.01, "duration": 3.03}, {"text": "So you expect, really,\nthat you write a program,", "start": 223.04, "duration": 3.31}, {"text": "you maybe do a little debugging,\nand you run the program", "start": 226.35, "duration": 3.02}, {"text": "and it's perfect.", "start": 229.37, "duration": 1.77}, {"text": "Right?", "start": 231.14, "duration": 0.78}, {"text": "You just nailed it.", "start": 231.92, "duration": 2.08}, {"text": "But in reality you write this\nreally complex piece of code", "start": 234.0, "duration": 2.78}, {"text": "and you go to run\nit and it crashes.", "start": 236.78, "duration": 4.69}, {"text": "Right?", "start": 241.47, "duration": 0.92}, {"text": "It's happened to me many times.", "start": 242.39, "duration": 1.83}, {"text": "It's happened to you many times.", "start": 244.22, "duration": 2.7}, {"text": "That's the reality.", "start": 246.92, "duration": 1.23}, {"text": "OK.", "start": 248.15, "duration": 1.5}, {"text": "So today's lecture will go\nover some tips and tricks", "start": 249.65, "duration": 2.93}, {"text": "and debugging and how you can\nhelp make your life easier", "start": 252.58, "duration": 3.25}, {"text": "when you're writing\nprograms so you don't end up", "start": 255.83, "duration": 2.685}, {"text": "like this little girl here.", "start": 258.515, "duration": 1.125}, {"text": "Disappointed beyond belief.", "start": 259.64, "duration": 1.56}, {"text": "All right.", "start": 261.2, "duration": 1.9}, {"text": "So at the heart of\nit all is really", "start": 263.1, "duration": 2.4}, {"text": "starting with a defensive\nprogramming attitude.", "start": 265.5, "duration": 2.81}, {"text": "OK.", "start": 268.31, "duration": 0.82}, {"text": "And this comes back to\nthe idea of decomposition", "start": 269.13, "duration": 2.73}, {"text": "and abstraction that we talked\nabout when we started-- when we", "start": 271.86, "duration": 3.54}, {"text": "did the lecture on functions.", "start": 275.4, "duration": 1.95}, {"text": "Right?", "start": 277.35, "duration": 0.63}, {"text": "So try to start out with two\nmodularize your code, right?", "start": 277.98, "duration": 3.27}, {"text": "If you write your code\nin different blocks,", "start": 281.25, "duration": 3.12}, {"text": "documenting each\ndifferent block,", "start": 284.37, "duration": 2.07}, {"text": "you're more likely to understand\nwhat's happening in your code", "start": 286.44, "duration": 2.94}, {"text": "later on and you'll be\nable to test it and debug", "start": 289.38, "duration": 2.61}, {"text": "it a lot easier.", "start": 291.99, "duration": 2.18}, {"text": "Speaking of testing\nand debugging,", "start": 294.17, "duration": 2.04}, {"text": "once you've written a\nprogram that's modular,", "start": 296.21, "duration": 4.86}, {"text": "you still have to test it.", "start": 301.07, "duration": 2.62}, {"text": "And the process of\ntesting is really just", "start": 303.69, "duration": 2.46}, {"text": "coming up with inputs.", "start": 306.15, "duration": 2.61}, {"text": "Figuring out what\noutputs you expect.", "start": 308.76, "duration": 3.12}, {"text": "And then running your program.", "start": 311.88, "duration": 1.48}, {"text": "Does the output that the program\ngive match what you expected?", "start": 313.36, "duration": 4.25}, {"text": "If it does, great, you're done.", "start": 317.61, "duration": 2.32}, {"text": "But if it doesn't, you have\nto go to this debugging step.", "start": 319.93, "duration": 3.02}, {"text": "And the debugging step\nis the hardest part.", "start": 322.95, "duration": 2.62}, {"text": "And it's really just figuring\nout why the program crashed,", "start": 325.57, "duration": 2.901}, {"text": "or why the program didn't\ngive you the answer that you", "start": 328.471, "duration": 2.249}, {"text": "expected it to give.", "start": 330.72, "duration": 3.14}, {"text": "So as I mentioned, the\nmost important thing", "start": 333.86, "duration": 2.34}, {"text": "is to do defensive\nprogramming and to that end,", "start": 336.2, "duration": 2.4}, {"text": "you want to set yourself up\nfor easy testing and debugging.", "start": 338.6, "duration": 3.6}, {"text": "Which really comes\ndown to making sure", "start": 342.2, "duration": 1.82}, {"text": "that the code you\nwrite is modular.", "start": 344.02, "duration": 2.83}, {"text": "So write as many\nfunctions as you can.", "start": 346.85, "duration": 2.48}, {"text": "Document what the functions do.", "start": 349.33, "duration": 1.62}, {"text": "Document their constraints.", "start": 350.95, "duration": 2.52}, {"text": "And it'll make your life a\nlittle bit easier later on", "start": 353.47, "duration": 2.61}, {"text": "when you have to debug it.", "start": 356.08, "duration": 3.384}, {"text": "When do you want\nto start testing?", "start": 359.464, "duration": 1.416}, {"text": "Well first you have to make\nsure your program runs.", "start": 360.88, "duration": 2.55}, {"text": "So eliminate syntax errors\nand static semantic errors", "start": 363.43, "duration": 2.43}, {"text": "which, by the way, Python\ncan easily catch for you.", "start": 365.86, "duration": 5.11}, {"text": "Once you've ensured that\na piece of code runs,", "start": 370.97, "duration": 2.26}, {"text": "then you want to come\nup with some test cases.", "start": 373.23, "duration": 2.75}, {"text": "So this is pairs\nof input and output", "start": 375.98, "duration": 2.03}, {"text": "for what you expect\nthe program to do.", "start": 378.01, "duration": 5.21}, {"text": "Once you have your test cases\nand a piece of code that runs,", "start": 383.22, "duration": 3.84}, {"text": "you can start doing tests.", "start": 387.06, "duration": 2.36}, {"text": "So there's three general classes\nof tests that you can do.", "start": 389.42, "duration": 3.25}, {"text": "The first is called\nunit testing.", "start": 392.67, "duration": 2.45}, {"text": "And if you've written functions,\nunit testings-- testing just", "start": 395.12, "duration": 2.79}, {"text": "makes sure that, for example,\neach function runs according", "start": 397.91, "duration": 3.3}, {"text": "to the specifications.", "start": 401.21, "duration": 2.47}, {"text": "So you do this multiple times.", "start": 403.68, "duration": 2.29}, {"text": "As you're testing each\nfunction, you might find a bug.", "start": 405.97, "duration": 3.53}, {"text": "At that point, you do\nregression testing.", "start": 409.5, "duration": 2.73}, {"text": "Come up with a test case\nthat found that bug.", "start": 412.23, "duration": 4.12}, {"text": "And run all of the different\npieces of your code again", "start": 416.35, "duration": 3.81}, {"text": "to make sure that\nwhen you fix the bug,", "start": 420.16, "duration": 2.13}, {"text": "you don't re-introduce new bugs\ninto pieces of the code that", "start": 422.29, "duration": 4.14}, {"text": "had already run.", "start": 426.43, "duration": 2.18}, {"text": "So you do this a bunch of times.", "start": 428.61, "duration": 1.52}, {"text": "You do a little bit\nof unit testing,", "start": 430.13, "duration": 1.5}, {"text": "a little bit of regression\ntesting, and keep doing that.", "start": 431.63, "duration": 2.25}, {"text": "At some point, you're ready\nto do integration testing.", "start": 433.88, "duration": 2.249}, {"text": "Which means, test your\nprogram as a whole.", "start": 436.129, "duration": 2.491}, {"text": "Does the overall program work?", "start": 438.62, "duration": 1.944}, {"text": "So this is the\npart where you take", "start": 440.564, "duration": 1.416}, {"text": "all of the individual\npieces, put them together.", "start": 441.98, "duration": 2.67}, {"text": "And integration testing\ntests to make sure", "start": 444.65, "duration": 2.31}, {"text": "that the interactions between\nall of the different pieces", "start": 446.96, "duration": 4.59}, {"text": "works as expected.", "start": 451.55, "duration": 2.19}, {"text": "If it does, great, you're done.", "start": 453.74, "duration": 1.39}, {"text": "But if it doesn't,\nthen you'll have", "start": 455.13, "duration": 0.95}, {"text": "to go back to unit testing, and\nregression testing, and so on.", "start": 456.08, "duration": 2.74}, {"text": "So it's really a\ncycle of testing.", "start": 458.82, "duration": 3.41}, {"text": "So what are some\ntesting approaches?", "start": 465.05, "duration": 2.83}, {"text": "The first, and this is probably\nmost common with programs", "start": 467.88, "duration": 2.809}, {"text": "that involve numbers,\nis figuring out", "start": 470.689, "duration": 1.541}, {"text": "some natural boundaries for\nthe numbers-- for the program,", "start": 472.23, "duration": 3.0}, {"text": "sorry.", "start": 475.23, "duration": 1.95}, {"text": "So for example, if I have\na function is_bigger,", "start": 477.18, "duration": 3.81}, {"text": "and it compares if\nx is bigger than y,", "start": 480.99, "duration": 3.39}, {"text": "then some natural boundary,\ngiven the specification,", "start": 484.38, "duration": 2.82}, {"text": "is if x is less than\ny, x is greater than y,", "start": 487.2, "duration": 2.61}, {"text": "x is equal to y.", "start": 489.81, "duration": 1.41}, {"text": "Maybe throw in less than\nor equal to or greater", "start": 491.22, "duration": 2.22}, {"text": "or equal to, and so on.", "start": 493.44, "duration": 1.99}, {"text": "So that's just sort of an\nintuition about the problem.", "start": 495.43, "duration": 4.42}, {"text": "It's possible you have some\nproblems for which there", "start": 499.85, "duration": 2.37}, {"text": "are no natural partitions.", "start": 502.22, "duration": 2.261}, {"text": "In which case, you might\ndo some random testing,", "start": 504.481, "duration": 1.999}, {"text": "and then the more\nrandom testing you", "start": 506.48, "duration": 1.65}, {"text": "do, the greater the likelihood\nthat your program is correct.", "start": 508.13, "duration": 3.79}, {"text": "But there's actually two more\nrigorous ways to do testing.", "start": 511.92, "duration": 4.254}, {"text": "And one is black box\ntesting and the other one", "start": 516.174, "duration": 1.916}, {"text": "is glass box testing.", "start": 518.09, "duration": 3.569}, {"text": "In black box testing,\nyou're assuming", "start": 521.659, "duration": 1.991}, {"text": "you have the specifications\nto a function.", "start": 523.65, "duration": 2.5}, {"text": "So that's the docstring.", "start": 526.15, "duration": 2.449}, {"text": "All you're looking at is\nthe docstring and coming", "start": 528.599, "duration": 2.041}, {"text": "up with some test\ncases based on that.", "start": 530.64, "duration": 2.46}, {"text": "In glass box testing,\nyou have the code", "start": 533.1, "duration": 2.43}, {"text": "itself and you're\ntrying to come up", "start": 535.53, "duration": 2.01}, {"text": "with some test cases that hit\nupon all of the possible paths", "start": 537.54, "duration": 3.78}, {"text": "through the code.", "start": 541.32, "duration": 2.721}, {"text": "All right.", "start": 544.041, "duration": 0.499}, {"text": "Let's look at an example\nfor black box testing.", "start": 544.54, "duration": 2.97}, {"text": "I'm finding the square root of\nx to some close enough value", "start": 547.51, "duration": 5.96}, {"text": "given by this epsilon.", "start": 553.47, "duration": 3.24}, {"text": "And the idea here,\nnotice I don't actually", "start": 556.71, "duration": 1.75}, {"text": "give you how this\nfunction's implemented.", "start": 558.46, "duration": 1.89}, {"text": "The idea is that you're\njust figuring out test cases", "start": 560.35, "duration": 2.67}, {"text": "based on the specification.", "start": 563.02, "duration": 3.74}, {"text": "And the great thing\nabout black box testing", "start": 566.76, "duration": 1.9}, {"text": "is that whoever implements\nthis function can implement it", "start": 568.66, "duration": 2.97}, {"text": "in whatever way they wish, they\ncan use approximation method,", "start": 571.63, "duration": 2.91}, {"text": "that can use bisection\nmethod, it doesn't matter.", "start": 574.54, "duration": 2.64}, {"text": "The test cases that you come\nup with for this function", "start": 577.18, "duration": 2.64}, {"text": "are going to be\nexactly the same.", "start": 579.82, "duration": 1.41}, {"text": "Right?", "start": 581.23, "duration": 0.5}, {"text": "No matter what the\nimplementation.", "start": 581.73, "duration": 3.83}, {"text": "So for this particular\nfunction, here's a sample set.", "start": 585.56, "duration": 4.93}, {"text": "We check the boundary,\nwe check perfect squares,", "start": 590.49, "duration": 2.54}, {"text": "we can check some number\nthat's less than 1,", "start": 593.03, "duration": 2.94}, {"text": "we can check maybe irrationals,\nand then you do extreme tests.", "start": 595.97, "duration": 4.07}, {"text": "So when either epsilon is\nreally large or epsilon", "start": 600.04, "duration": 3.69}, {"text": "is really small, or x is really\nlarge or x is really small,", "start": 603.73, "duration": 3.42}, {"text": "and all the possible\ncombinations of those.", "start": 607.15, "duration": 2.27}, {"text": "So the important thing\nabout black box testing", "start": 611.804, "duration": 1.916}, {"text": "is that you are doing you are\ncreating the test cases based", "start": 613.72, "duration": 4.14}, {"text": "on the specifications only.", "start": 617.86, "duration": 2.54}, {"text": "Glass box testing, you're\nusing the code itself", "start": 620.4, "duration": 3.03}, {"text": "to guide your test cases.", "start": 623.43, "duration": 4.13}, {"text": "So if you have a piece\nof code and you come up", "start": 627.56, "duration": 2.9}, {"text": "with a test case that goes\nthrough every single possible", "start": 630.46, "duration": 2.52}, {"text": "combination of input-- of\nevery single possible path", "start": 632.98, "duration": 5.97}, {"text": "through the code, then that test\nset is called path complete.", "start": 638.95, "duration": 4.75}, {"text": "The problem with this is\nwhen you encounter loops,", "start": 643.7, "duration": 2.49}, {"text": "for example.", "start": 646.19, "duration": 1.85}, {"text": "Every single possible\npath through a loop", "start": 648.04, "duration": 2.33}, {"text": "is maybe the code not going\nthrough the loop at all,", "start": 650.37, "duration": 2.324}, {"text": "going through once,\ngoing through twice,", "start": 652.694, "duration": 1.666}, {"text": "going through three times, four\ntimes, five times, and so on.", "start": 654.36, "duration": 2.74}, {"text": "Right?", "start": 657.1, "duration": 0.8}, {"text": "Which could be a\nvery, very big test.", "start": 657.9, "duration": 2.985}, {"text": "So instead there are\nactually some guidelines", "start": 660.885, "duration": 1.875}, {"text": "for when you're dealing with\nloops and things like that.", "start": 662.76, "duration": 2.5}, {"text": "So for branches, when you're\ndoing glass box testing,", "start": 665.26, "duration": 2.87}, {"text": "it's important-- you\nshould just exercise", "start": 668.13, "duration": 2.76}, {"text": "all of the parts\nof the conditional.", "start": 670.89, "duration": 1.63}, {"text": "So make sure you\nhave a test case that", "start": 672.52, "duration": 1.583}, {"text": "goes through each part\nof the conditional.", "start": 674.103, "duration": 2.697}, {"text": "For for loops, make sure\nyou have a test case where", "start": 676.8, "duration": 2.17}, {"text": "the loop is not entered at all,\nwhere the loop is entered one", "start": 678.97, "duration": 2.16}, {"text": "time, and when the loop is\nentered just some number more", "start": 681.13, "duration": 2.333}, {"text": "than once.", "start": 683.463, "duration": 2.537}, {"text": "For while loops,\nsimilar to for loops,", "start": 686.0, "duration": 2.07}, {"text": "except that make sure\nyou have test cases that", "start": 688.07, "duration": 1.92}, {"text": "cover all of the possible ways\nto break out of the while loop.", "start": 689.99, "duration": 2.994}, {"text": "So if the while loop condition\nbecomes false, or if maybe", "start": 692.984, "duration": 4.716}, {"text": "there's a break inside\nthe while loop, and so on.", "start": 697.7, "duration": 6.78}, {"text": "So in this example, we have\nthe absolute value of x.", "start": 704.48, "duration": 3.36}, {"text": "This is its specification and\nthis is the implementation", "start": 707.84, "duration": 2.46}, {"text": "that someone decided to\ndo for this function.", "start": 710.3, "duration": 4.28}, {"text": "So a path complete\ntest set means", "start": 717.89, "duration": 2.02}, {"text": "that you want to\nhave a test that", "start": 719.91, "duration": 2.484}, {"text": "goes through each one\nof these branches.", "start": 722.394, "duration": 1.666}, {"text": "So if x is less than\nminus 1, well, minus 2", "start": 724.06, "duration": 3.14}, {"text": "is less than minus 1.", "start": 727.2, "duration": 1.03}, {"text": "So that's good.", "start": 728.23, "duration": 1.46}, {"text": "And otherwise, which means pick\na number greater than minus 1.", "start": 729.69, "duration": 6.125}, {"text": "So 2.", "start": 735.815, "duration": 2.795}, {"text": "So 2 and minus 2\nare path complete.", "start": 738.61, "duration": 3.68}, {"text": "Yield path complete-- yields\na path complete test suite.", "start": 742.29, "duration": 4.56}, {"text": "But notice that while we've\nhit upon every possible path", "start": 746.85, "duration": 2.97}, {"text": "through this code, we've\nactually missed a test case.", "start": 749.82, "duration": 2.91}, {"text": "Minus 1.", "start": 752.73, "duration": 0.72}, {"text": "So this code incorrectly\nclassifies minus 1", "start": 753.45, "duration": 4.17}, {"text": "as returning minus\n1, which is wrong.", "start": 757.62, "duration": 4.71}, {"text": "So for glass box\ntesting, in addition to", "start": 762.33, "duration": 2.629}, {"text": "making sure you're going\nthrough all the possible paths", "start": 764.959, "duration": 2.291}, {"text": "through the code,\nyou also want to make", "start": 767.25, "duration": 1.83}, {"text": "sure you hit upon any\nboundary condition.", "start": 769.08, "duration": 3.07}, {"text": "So in this case, for\nbranches, minus 1", "start": 772.15, "duration": 2.44}, {"text": "is a boundary condition.", "start": 774.59, "duration": 2.92}, {"text": "So you've created a test suite,\nyou've tested your program,", "start": 777.51, "duration": 3.63}, {"text": "chances are you found a bug.", "start": 781.14, "duration": 2.81}, {"text": "What do you do now?", "start": 783.95, "duration": 2.4}, {"text": "All right.", "start": 786.35, "duration": 1.11}, {"text": "Quick sort of detour into\na little bit of history.", "start": 787.46, "duration": 4.14}, {"text": "The history of debugging.", "start": 791.6, "duration": 1.78}, {"text": "So 1947, this\ncomputer was built.", "start": 793.38, "duration": 5.38}, {"text": "And it was a computer that was\nvery impressive for its day.", "start": 798.76, "duration": 3.71}, {"text": "It could do things like\naddition in 0.1 seconds.", "start": 802.47, "duration": 4.53}, {"text": "Things like multiplication\nin 0.7 seconds.", "start": 807.0, "duration": 3.87}, {"text": "And take the log of\nsomething in five seconds.", "start": 810.87, "duration": 5.58}, {"text": "So faster than a\nhuman, possibly.", "start": 816.45, "duration": 2.4}, {"text": "But pretty slow for\ntoday's standards.", "start": 818.85, "duration": 3.96}, {"text": "And a group of\nengineers were working", "start": 822.81, "duration": 1.74}, {"text": "on running a\nprogram that found--", "start": 824.55, "duration": 3.2}, {"text": "that was supposed to find\nthe trigonometric function.", "start": 827.75, "duration": 4.3}, {"text": "And among them being this-- one\nof the first female scientists,", "start": 832.05, "duration": 3.73}, {"text": "Grace Hopper.", "start": 835.78, "duration": 1.922}, {"text": "And they found that\ntheir program was not", "start": 837.702, "duration": 1.708}, {"text": "working correctly.", "start": 839.41, "duration": 1.69}, {"text": "So they went through all of the\npanels and all of the relays", "start": 841.1, "duration": 5.24}, {"text": "in the computer, and\nthey isolated a program", "start": 846.34, "duration": 4.34}, {"text": "in panel F relay 70, where\nthey found this moth.", "start": 850.68, "duration": 5.15}, {"text": "Just sitting in there.", "start": 855.83, "duration": 1.71}, {"text": "I think it was dead,\nprobably electrocuted.", "start": 857.54, "duration": 1.89}, {"text": "But it was a moth that was\nimpeding the calculation.", "start": 859.43, "duration": 3.69}, {"text": "And I don't know if you can read\nthis, but this part right here.", "start": 863.12, "duration": 4.5}, {"text": "They made a note\nin their logbook", "start": 867.62, "duration": 1.62}, {"text": "that says, first actual\ncase of bug being found.", "start": 869.24, "duration": 3.52}, {"text": "Which I think is really cute.", "start": 872.76, "duration": 1.8}, {"text": "So they were literally doing\ndebugging in this computer.", "start": 874.56, "duration": 4.34}, {"text": "Right.", "start": 878.9, "duration": 1.451}, {"text": "All right.", "start": 880.351, "duration": 0.499}, {"text": "So you won't be doing\nthat sort of debugging.", "start": 880.85, "duration": 2.169}, {"text": "You'll be doing a virtual kind\nof debugging in your programs.", "start": 883.019, "duration": 2.541}, {"text": "Which, again, is not that fun.", "start": 885.56, "duration": 1.77}, {"text": "But you still have to do it.", "start": 887.33, "duration": 2.13}, {"text": "So debugging, as you might have\nnoticed so far in your problem", "start": 889.46, "duration": 3.12}, {"text": "sets, has a bit of a\nsteep learning curve.", "start": 892.58, "duration": 4.74}, {"text": "And obviously your goal is\nto have a bug free program,", "start": 897.32, "duration": 2.55}, {"text": "and in order to achieve that,\nyou have to do the debugging.", "start": 899.87, "duration": 4.22}, {"text": "There are some tools which\nsome of you have been using.", "start": 904.09, "duration": 3.33}, {"text": "There are some tools\nbuilt into Anaconda,", "start": 907.42, "duration": 2.1}, {"text": "or whatever ID you've been\nusing to do debugging.", "start": 909.52, "duration": 4.754}, {"text": "I know some of you have been\nusing the Python tutor, which", "start": 914.274, "duration": 2.416}, {"text": "is awesome.", "start": 916.69, "duration": 2.32}, {"text": "The print statement can also\nbe a good debugging tool.", "start": 919.01, "duration": 4.63}, {"text": "But over above\neverything else, it's", "start": 923.64, "duration": 2.97}, {"text": "really important to\njust be systematic", "start": 926.61, "duration": 1.71}, {"text": "as you're trying to\ndebug your program.", "start": 928.32, "duration": 2.967}, {"text": "I want to talk a little\nbit about print statements", "start": 931.287, "duration": 2.083}, {"text": "and how you can use them\nto debug, because I think--", "start": 933.37, "duration": 3.75}, {"text": "Python tutor, if you\ndon't have the internet,", "start": 937.12, "duration": 1.98}, {"text": "you might not be able to use it.", "start": 939.1, "duration": 2.38}, {"text": "If you don't know how\nto use the debugger,", "start": 941.48, "duration": 2.05}, {"text": "you don't need to learn.", "start": 943.53, "duration": 1.27}, {"text": "But print statements,\nyou'll always have them,", "start": 944.8, "duration": 1.59}, {"text": "and you can always put\nthem in your program.", "start": 946.39, "duration": 1.56}, {"text": "And they're really good\nways to test hypotheses.", "start": 947.95, "duration": 2.092}, {"text": "So good places to\nput print statements", "start": 952.57, "duration": 2.66}, {"text": "are inside functions.", "start": 955.23, "duration": 2.437}, {"text": "Inside loops, for example,\nwhat are the loop parameters,", "start": 957.667, "duration": 2.333}, {"text": "what are the loop values,\nwhat function-- what", "start": 960.0, "duration": 3.51}, {"text": "functions return what values.", "start": 963.51, "duration": 2.19}, {"text": "So you can make sure that\nvalues are being passed--", "start": 965.7, "duration": 3.78}, {"text": "the correct values\nare being passed", "start": 969.48, "duration": 1.56}, {"text": "between parts of your code.", "start": 971.04, "duration": 1.275}, {"text": "I will mention that you\ncan use the bisection", "start": 975.24, "duration": 1.89}, {"text": "method when you're debugging.", "start": 977.13, "duration": 2.77}, {"text": "Which is interesting.", "start": 979.9, "duration": 2.74}, {"text": "So if you take a\nprint statement,", "start": 982.64, "duration": 2.22}, {"text": "find approximately the\nhalfway point in your code.", "start": 984.86, "duration": 3.06}, {"text": "Print out what values you--\nprint out some relevant values.", "start": 987.92, "duration": 3.21}, {"text": "All of the possible--\nprint out some", "start": 991.13, "duration": 3.09}, {"text": "values at that\npoint in your code.", "start": 994.22, "duration": 2.4}, {"text": "If everything is\nas you expect it", "start": 999.13, "duration": 1.476}, {"text": "to be at that point in your\ncode, then you're good.", "start": 1000.606, "duration": 2.124}, {"text": "That means the code\nso far is bug free.", "start": 1002.73, "duration": 3.96}, {"text": "That means that-- however, that\nmeans that the code beyond it", "start": 1006.69, "duration": 4.02}, {"text": "has a bug, right?", "start": 1010.71, "duration": 1.56}, {"text": "So since you've put a print\nstatement halfway in your code", "start": 1012.27, "duration": 2.55}, {"text": "and you think that\ngave good results,", "start": 1014.82, "duration": 2.91}, {"text": "then put a print statement\n3/4 of the way in the code.", "start": 1017.73, "duration": 3.0}, {"text": "And see if the values are\nas you expect at that point.", "start": 1020.73, "duration": 2.401}, {"text": "And if they are, great.", "start": 1023.131, "duration": 0.958}, {"text": "Then put a print\nstatement further down.", "start": 1024.089, "duration": 4.14}, {"text": "So in this way you could\nuse the bisection method", "start": 1028.229, "duration": 2.041}, {"text": "to pinpoint a line, or a set\nof lines, or maybe a function", "start": 1030.27, "duration": 5.069}, {"text": "that that's giving\nyou the bad results.", "start": 1035.339, "duration": 2.621}, {"text": "So the general debugging steps\nis to study the program code.", "start": 1041.28, "duration": 5.901}, {"text": "Don't ask what is wrong,\nbecause that's actually", "start": 1047.181, "duration": 1.999}, {"text": "part of the testing.", "start": 1049.18, "duration": 1.08}, {"text": "So your test cases would have\nfigured out what's wrong.", "start": 1050.26, "duration": 2.385}, {"text": "The debugging process\nis figuring out", "start": 1055.23, "duration": 2.46}, {"text": "how the result took place.", "start": 1057.69, "duration": 3.27}, {"text": "And since programming is--\nprogramming and debugging", "start": 1060.96, "duration": 2.86}, {"text": "is, sort of, is a science, you\ncan use the scientific method", "start": 1063.82, "duration": 3.66}, {"text": "as well.", "start": 1067.48, "duration": 1.23}, {"text": "So look at all the data,\nthat's your test cases.", "start": 1068.71, "duration": 2.73}, {"text": "Figure out a hypothesis.", "start": 1071.44, "duration": 1.14}, {"text": "Maybe say, oh, maybe I'm\nindexing from 1 instead of 0", "start": 1072.58, "duration": 3.87}, {"text": "in lists, for example.", "start": 1076.45, "duration": 3.15}, {"text": "Come up with an experiment\nthat you can repeat.", "start": 1079.6, "duration": 1.97}, {"text": "And then pick a\nsimple test case then", "start": 1081.57, "duration": 1.541}, {"text": "you can test your\nhypothesis with.", "start": 1083.111, "duration": 1.729}, {"text": "So as you're debugging, you\nwill encounter error messages.", "start": 1087.87, "duration": 4.489}, {"text": "And these error\nmessages are actually", "start": 1092.359, "duration": 1.541}, {"text": "pretty easy to figure out.", "start": 1093.9, "duration": 3.06}, {"text": "And they're really easy\nto fix in your code.", "start": 1096.96, "duration": 2.25}, {"text": "So for example, accessing things\nbeyond the limits of the lists", "start": 1099.21, "duration": 3.3}, {"text": "give you index errors.", "start": 1102.51, "duration": 2.1}, {"text": "Trying to convert, in this\ncase, a list to an integer", "start": 1104.61, "duration": 2.86}, {"text": "gives you type errors.", "start": 1107.47, "duration": 1.88}, {"text": "Accessing variables that\nyou haven't created before", "start": 1109.35, "duration": 3.84}, {"text": "gives you name errors.", "start": 1113.19, "duration": 0.93}, {"text": "And so on and so on.", "start": 1114.12, "duration": 1.83}, {"text": "And syntax errors are\nthings, for things like,", "start": 1115.95, "duration": 2.37}, {"text": "if you forget a parentheses,\nor forget a colon,", "start": 1118.32, "duration": 2.73}, {"text": "or something like that.", "start": 1121.05, "duration": 3.21}, {"text": "So error messages are\nreally easy to spot.", "start": 1124.26, "duration": 2.61}, {"text": "The Python interpreter\nspits these out for you", "start": 1126.87, "duration": 3.3}, {"text": "and then you can\npinpoint the exact line.", "start": 1130.17, "duration": 2.1}, {"text": "Logic errors are\nactually the hard part.", "start": 1132.27, "duration": 2.6}, {"text": "And logic errors are\nthe ones that you will", "start": 1134.87, "duration": 3.25}, {"text": "be spending the most time on.", "start": 1138.12, "duration": 2.7}, {"text": "For which I would recommend\nalways trying to take a break.", "start": 1140.82, "duration": 3.18}, {"text": "Take a nap, go eat.", "start": 1144.0, "duration": 1.62}, {"text": "Something.", "start": 1145.62, "duration": 1.23}, {"text": "Sometimes you'd have\nto start all over, so", "start": 1146.85, "duration": 3.39}, {"text": "throughout the code\nyou have and just", "start": 1150.24, "duration": 1.602}, {"text": "sit down with a piece of\npaper, try to figure out how", "start": 1151.842, "duration": 2.208}, {"text": "you want to solve the problem.", "start": 1154.05, "duration": 2.04}, {"text": "And if you look up the term\nrubber ducky-- a lot of heads", "start": 1156.09, "duration": 5.09}, {"text": "went up on that one--\nrubber ducky debugging.", "start": 1161.18, "duration": 3.54}, {"text": "That is an actual\nterm in Wikipedia.", "start": 1164.72, "duration": 3.55}, {"text": "And it's when a programmer\nexplains their code", "start": 1168.27, "duration": 2.19}, {"text": "to a rubber ducky.", "start": 1170.46, "duration": 1.44}, {"text": "That's me on the left explaining\ncode to my rubber ducky.", "start": 1171.9, "duration": 2.58}, {"text": "You should always--\nyou should go buy one.", "start": 1174.48, "duration": 3.45}, {"text": "Or code to anyone else,\npreferably someone", "start": 1177.93, "duration": 2.67}, {"text": "who doesn't really\nunderstand anything.", "start": 1180.6, "duration": 2.609}, {"text": "Because that'll force you to\nexplain everything really,", "start": 1183.209, "duration": 2.291}, {"text": "really closely.", "start": 1185.5, "duration": 1.846}, {"text": "And as you're doing that,\nyou'll figure out your problem.", "start": 1187.346, "duration": 2.374}, {"text": "And I figured out my problem\nin both of these cases.", "start": 1189.72, "duration": 2.187}, {"text": "So just go back to the basics.", "start": 1194.64, "duration": 1.546}, {"text": "Quick summary of dos and don'ts\nof debugging and testing.", "start": 1200.03, "duration": 4.62}, {"text": "So don't write the\nentire program,", "start": 1204.65, "duration": 1.501}, {"text": "test the entire program, and\ndebug the entire program.", "start": 1206.151, "duration": 2.249}, {"text": "I know this is really\ntempting to do,", "start": 1208.4, "duration": 1.8}, {"text": "and I do it all the time.", "start": 1210.2, "duration": 2.28}, {"text": "But don't do it.", "start": 1212.48, "duration": 2.7}, {"text": "Because you're\ngoing to introduce", "start": 1215.18, "duration": 1.5}, {"text": "a lot of bugs and\nit's going to be", "start": 1216.68, "duration": 1.56}, {"text": "hard to isolate which bugs\nare affecting other ones.", "start": 1218.24, "duration": 4.12}, {"text": "And it'll lead to a lot\nmore stress than you need.", "start": 1222.36, "duration": 2.51}, {"text": "Instead do unit testing.", "start": 1224.87, "duration": 3.78}, {"text": "So write one function, test the\nfunction, debug the function,", "start": 1228.65, "duration": 3.505}, {"text": "make sure it works,\nwrite the other function,", "start": 1232.155, "duration": 1.875}, {"text": "and so on and so on.", "start": 1234.03, "duration": 1.1}, {"text": "Do a little regression\ntesting, a little more unit", "start": 1235.13, "duration": 2.1}, {"text": "testing, a little\nintegration testing,", "start": 1237.23, "duration": 2.76}, {"text": "and it's a lot more systematic\nway to write the program.", "start": 1239.99, "duration": 4.19}, {"text": "And it'll cut down on your\ndebugging time immensely.", "start": 1244.18, "duration": 3.886}, {"text": "If you're changing your\ncode, and inevitably you'll", "start": 1248.066, "duration": 2.124}, {"text": "be changing your code as\nyou're doing your problem sets,", "start": 1250.19, "duration": 3.18}, {"text": "remember to back up your code.", "start": 1253.37, "duration": 3.55}, {"text": "So if you have a version\nthat almost works,", "start": 1256.92, "duration": 1.88}, {"text": "don't just modify that\nand maybe save a copy.", "start": 1258.8, "duration": 2.42}, {"text": "[INAUDIBLE] you've got terabytes\nof memory on your computer,", "start": 1261.22, "duration": 3.19}, {"text": "it won't hurt to just\nmake a quick copy of it.", "start": 1264.41, "duration": 2.86}, {"text": "Document maybe what worked\nand what didn't in that copy.", "start": 1267.27, "duration": 3.98}, {"text": "And then make another copy, and\nthen you can modify your code.", "start": 1271.25, "duration": 7.05}, {"text": "So that's sort of a\nhigh level introduction", "start": 1284.36, "duration": 2.06}, {"text": "to testing and debugging.", "start": 1286.42, "duration": 2.41}, {"text": "The rest of the class will\nbe on the error messages,", "start": 1288.83, "duration": 4.02}, {"text": "or on errors that you\nwill get in your programs.", "start": 1292.85, "duration": 4.73}, {"text": "So when your functions--\nwhen you run functions,", "start": 1297.58, "duration": 4.16}, {"text": "or when you run your\nprogram, at some point,", "start": 1301.74, "duration": 2.62}, {"text": "the program execution\nis going to stop.", "start": 1304.36, "duration": 3.05}, {"text": "Maybe it encountered\nan error because", "start": 1307.41, "duration": 2.85}, {"text": "of some unexpected condition.", "start": 1310.26, "duration": 2.4}, {"text": "And when that happens\nyou get an exception.", "start": 1312.66, "duration": 2.2}, {"text": "So the error is\ncalled an exception.", "start": 1314.86, "duration": 1.59}, {"text": "And it's called an exception\nbecause it was an exception", "start": 1316.45, "duration": 2.333}, {"text": "to what was expected.", "start": 1318.783, "duration": 1.857}, {"text": "To what the program expected.", "start": 1320.64, "duration": 3.12}, {"text": "So all of these errors\nthat I've talked", "start": 1323.76, "duration": 1.68}, {"text": "about in the previous\nslides are actually", "start": 1325.44, "duration": 1.8}, {"text": "examples of exceptions.", "start": 1327.24, "duration": 1.66}, {"text": "And there are actually\nmany other types", "start": 1332.836, "duration": 1.624}, {"text": "of exceptions, which you'll\nsee as you go on in this course", "start": 1334.46, "duration": 3.96}, {"text": "and also in 60002.", "start": 1338.42, "duration": 4.87}, {"text": "So how do we deal\nwith these exceptions?", "start": 1343.29, "duration": 3.86}, {"text": "In Python, you can actually\nhave handlers for exceptions.", "start": 1347.15, "duration": 6.55}, {"text": "So if you know that a piece of\ncode might give you an error.", "start": 1353.7, "duration": 5.16}, {"text": "For example, here I'm dealing\nwith inputs from users.", "start": 1358.86, "duration": 6.01}, {"text": "And users are really\nunpredictable.", "start": 1364.87, "duration": 2.522}, {"text": "You tell them to\ngive you a number,", "start": 1367.392, "duration": 1.458}, {"text": "they might give you their name.", "start": 1368.85, "duration": 1.291}, {"text": "Nothing you can do about that.", "start": 1372.47, "duration": 1.29}, {"text": "Or is there?", "start": 1373.76, "duration": 0.78}, {"text": "Yes there is.", "start": 1374.54, "duration": 0.99}, {"text": "So in your program you can\nactually put any lines of code", "start": 1375.53, "duration": 6.26}, {"text": "that you think might\nbe problematic,", "start": 1381.79, "duration": 1.71}, {"text": "that might give you an error an\nexception, in this try block.", "start": 1383.5, "duration": 4.11}, {"text": "So you say try colon, and\nyou put in any lines of code", "start": 1387.61, "duration": 2.355}, {"text": "that you think might\ngive you an error.", "start": 1389.965, "duration": 1.625}, {"text": "If none of these lines of code\nactually produce an error,", "start": 1397.23, "duration": 4.2}, {"text": "then great.", "start": 1401.43, "duration": 1.53}, {"text": "Python doesn't do anything else.", "start": 1402.96, "duration": 1.56}, {"text": "It treats them as just\npart-- as just if they", "start": 1404.52, "duration": 2.7}, {"text": "were part of a regular program.", "start": 1407.22, "duration": 2.22}, {"text": "But if an error does\ncome up-- for example,", "start": 1409.44, "duration": 3.15}, {"text": "if someone doesn't\nput in a number", "start": 1412.59, "duration": 1.5}, {"text": "but puts their name\nin-- that's going", "start": 1414.09, "duration": 3.13}, {"text": "to raise an error,\nspecifically a value error.", "start": 1417.22, "duration": 4.17}, {"text": "And at that point,\nPython's going to say,", "start": 1421.39, "duration": 2.14}, {"text": "is there an accept statement?", "start": 1423.53, "duration": 4.35}, {"text": "And if so, this except statement\nis going to handle the error.", "start": 1427.88, "duration": 3.95}, {"text": "And it's going say,\nOK, an error came up,", "start": 1435.0, "duration": 1.86}, {"text": "but I know how to handle it.", "start": 1436.86, "duration": 1.98}, {"text": "I'm going to print out\nthis message to the user.", "start": 1438.84, "duration": 4.75}, {"text": "So if we look at code--\nthis is the same code", "start": 1443.59, "duration": 3.795}, {"text": "as in the slides-- and there's\nno try except block around it.", "start": 1447.385, "duration": 4.135}, {"text": "So if I run it and I\nsay, three and four,", "start": 1451.52, "duration": 3.57}, {"text": "it's going to run fine.", "start": 1455.09, "duration": 2.77}, {"text": "But if I run it and\nI say, [INAUDIBLE] a,", "start": 1457.86, "duration": 3.53}, {"text": "it's going to give\na value error.", "start": 1461.39, "duration": 1.402}, {"text": "Now if I run the same\npiece of code with", "start": 1466.21, "duration": 3.48}, {"text": "try-- with a try except block.", "start": 1469.69, "duration": 2.475}, {"text": "I run it, if I give it\nregular numbers, it's fine.", "start": 1475.38, "duration": 4.6}, {"text": "But if I'm being a cheeky\nuser, and I say three,", "start": 1479.98, "duration": 8.24}, {"text": "automatically this would\nhave raised the value error", "start": 1488.22, "duration": 3.69}, {"text": "in the previous\nversion of the program.", "start": 1491.91, "duration": 3.15}, {"text": "But in this version\nof the program,", "start": 1495.06, "duration": 1.95}, {"text": "the programmer\nhandled the exception", "start": 1497.01, "duration": 2.16}, {"text": "or caught the\nexception, and printed", "start": 1499.17, "duration": 2.22}, {"text": "out this nicer looking message.", "start": 1501.39, "duration": 2.73}, {"text": "So bug in user input is nicer\nthan this whole lot here.", "start": 1504.12, "duration": 5.97}, {"text": "A lot easier to read.", "start": 1514.59, "duration": 1.395}, {"text": "So any problematic\nlines of code,", "start": 1520.66, "duration": 2.55}, {"text": "you can put in a\ntry block, and then", "start": 1523.21, "duration": 1.56}, {"text": "handle whatever errors might\ncome up in this except block.", "start": 1524.77, "duration": 5.14}, {"text": "This except block is going to\ncatch any error that comes up.", "start": 1529.91, "duration": 4.55}, {"text": "And you can actually get\na little bit more specific", "start": 1534.46, "duration": 2.4}, {"text": "and catch specific\ntypes of errors.", "start": 1536.86, "duration": 3.7}, {"text": "In this case, I'm saying,\nif a value error comes up--", "start": 1540.56, "duration": 3.63}, {"text": "for example, if the user\ninputs a string instead", "start": 1544.19, "duration": 3.12}, {"text": "of an integer-- do this, which\nis going to print this message.", "start": 1547.31, "duration": 6.02}, {"text": "If the user inputs a\nnumber for B such that", "start": 1553.33, "duration": 5.26}, {"text": "we're doing a divided by b, so\nthat would give a 0 division", "start": 1558.59, "duration": 3.63}, {"text": "error.", "start": 1562.22, "duration": 1.08}, {"text": "In that case we're going to\ncatch this other error here,", "start": 1563.3, "duration": 3.1}, {"text": "the 0 division error,\nand we're going", "start": 1566.4, "duration": 1.97}, {"text": "to print this other\nmessage, can't divide by 0.", "start": 1568.37, "duration": 2.205}, {"text": "So each-- so you can think of\nthese different except blocks", "start": 1574.31, "duration": 3.81}, {"text": "as sort of if else\nif statements,", "start": 1578.12, "duration": 4.26}, {"text": "except for exceptions.", "start": 1582.38, "duration": 2.49}, {"text": "So we're going to try this.", "start": 1584.87, "duration": 1.62}, {"text": "But if there's a\nvalue error do this.", "start": 1586.49, "duration": 2.68}, {"text": "Otherwise, if there's a\ndivision error, do this.", "start": 1589.17, "duration": 2.45}, {"text": "And otherwise do this.", "start": 1591.62, "duration": 2.209}, {"text": "So this last except\nis actually going", "start": 1593.829, "duration": 1.541}, {"text": "to be for any other\nerror that comes up.", "start": 1595.37, "duration": 1.83}, {"text": "So if it's not a value error,\nnor a division error, then", "start": 1597.2, "duration": 3.21}, {"text": "we're going to print,\nsomething went very wrong.", "start": 1600.41, "duration": 2.44}, {"text": "I couldn't even try to\ncreate-- I couldn't even", "start": 1602.85, "duration": 2.24}, {"text": "try to make the program\ncome up with any other error", "start": 1605.09, "duration": 3.87}, {"text": "besides those two.", "start": 1608.96, "duration": 0.75}, {"text": "So a lot of the time you're just\ngoing to use try except blocks.", "start": 1615.67, "duration": 3.65}, {"text": "But there's other blocks that\nyou can add to exceptions.", "start": 1619.32, "duration": 2.8}, {"text": "And these are more\nrarely used, but I'll", "start": 1622.12, "duration": 2.09}, {"text": "talk about them anyway.", "start": 1624.21, "duration": 1.65}, {"text": "So you could have an else block.", "start": 1625.86, "duration": 2.13}, {"text": "And an else block is\ngoing to get executed", "start": 1630.68, "duration": 2.49}, {"text": "when the code in the\ntry block finished", "start": 1633.17, "duration": 2.97}, {"text": "without raising an error.", "start": 1636.14, "duration": 3.492}, {"text": "And you can also\nhave a finally block,", "start": 1639.632, "duration": 3.138}, {"text": "which is always executed.", "start": 1642.77, "duration": 3.03}, {"text": "If the code in the try block\nfinished without an error,", "start": 1645.8, "duration": 3.99}, {"text": "if you raised an\nexception, if you raised", "start": 1649.79, "duration": 2.07}, {"text": "a different kind of exception,\nif you went through the else,", "start": 1651.86, "duration": 3.42}, {"text": "in any of these cases,\nwhatever's in the finally block", "start": 1655.28, "duration": 3.27}, {"text": "is always going to get executed.", "start": 1658.55, "duration": 3.61}, {"text": "And it's usually used\nto clean up code.", "start": 1662.16, "duration": 5.674}, {"text": "Like if you want to print,\noh, the program finished,", "start": 1667.834, "duration": 2.166}, {"text": "or if you want to close a\nfile, or something like that.", "start": 1670.0, "duration": 3.761}, {"text": "So.", "start": 1673.761, "duration": 1.989}, {"text": "We've encountered errors.", "start": 1675.75, "duration": 1.5}, {"text": "We've caught them.", "start": 1677.25, "duration": 1.68}, {"text": "What else can we do with\nerrors-- with exceptions.", "start": 1678.93, "duration": 2.101}, {"text": "Three other things.", "start": 1684.259, "duration": 0.791}, {"text": "So one is if we've\ncaught an error,", "start": 1685.05, "duration": 5.35}, {"text": "we can just fail silently.", "start": 1690.4, "duration": 2.85}, {"text": "What this means is,\nyou've caught an error,", "start": 1693.25, "duration": 3.0}, {"text": "and you just substitute whatever\nerroneous value the user gave", "start": 1696.25, "duration": 4.72}, {"text": "you for some other value.", "start": 1700.97, "duration": 2.359}, {"text": "That's not actually\na very good idea.", "start": 1703.329, "duration": 1.541}, {"text": "That's a bad idea.", "start": 1704.87, "duration": 1.83}, {"text": "Because suddenly the user thinks\nthat they entered something,", "start": 1706.7, "duration": 3.09}, {"text": "and they think everything's\ngreat, your program accepts it,", "start": 1709.79, "duration": 2.9}, {"text": "but then they get\nsome weird value", "start": 1712.69, "duration": 1.48}, {"text": "as an output, which is far\nfrom what they expected.", "start": 1714.17, "duration": 2.91}, {"text": "So it's not really a\ngood idea to just replace", "start": 1717.08, "duration": 2.1}, {"text": "user's values with anything.", "start": 1719.18, "duration": 1.166}, {"text": "In the context-- so this is\nin the context of a function.", "start": 1723.93, "duration": 2.43}, {"text": "In the context of a function,\nwhat else can we do?", "start": 1726.36, "duration": 2.2}, {"text": "Well, if you have a\nfunction that fails,", "start": 1728.56, "duration": 6.25}, {"text": "for example, let's say\nyou're trying to do you're", "start": 1734.81, "duration": 4.56}, {"text": "trying to get the square\nroot of an even number.", "start": 1739.37, "duration": 4.41}, {"text": "And let's say the user\ngives you a-- sorry,", "start": 1743.78, "duration": 2.722}, {"text": "you're trying to find the square\nroot of a positive number.", "start": 1746.502, "duration": 2.458}, {"text": "And let's say the user\ngives you a negative number.", "start": 1748.96, "duration": 2.124}, {"text": "Well, if the user gives\nyou a negative number,", "start": 1754.49, "duration": 2.06}, {"text": "your function could return\nan error value, which", "start": 1756.55, "duration": 3.24}, {"text": "means, well if the number\ninputted is less than 0,", "start": 1759.79, "duration": 3.57}, {"text": "then return 0.", "start": 1763.36, "duration": 1.38}, {"text": "Or minus 1.", "start": 1764.74, "duration": 0.96}, {"text": "Or minus 100.", "start": 1765.7, "duration": 1.29}, {"text": "Just pick any value\nto return which", "start": 1766.99, "duration": 2.46}, {"text": "represents some error value.", "start": 1769.45, "duration": 2.69}, {"text": "This is actually not a good\nidea either, because later", "start": 1772.14, "duration": 2.807}, {"text": "on in your program, if\nyou're using this function,", "start": 1774.947, "duration": 2.083}, {"text": "now you have to do a check.", "start": 1777.03, "duration": 2.1}, {"text": "And the check is, well if\nthe return from this function", "start": 1779.13, "duration": 2.67}, {"text": "is minus 1 or\nminus 100, do this.", "start": 1781.8, "duration": 2.41}, {"text": "Otherwise, do this.", "start": 1784.21, "duration": 1.4}, {"text": "So you you're\ncomplicating your code", "start": 1785.61, "duration": 2.88}, {"text": "because now you always have to\nhave this check for this error", "start": 1788.49, "duration": 3.3}, {"text": "value.", "start": 1791.79, "duration": 1.59}, {"text": "Which makes the\ncode really messy.", "start": 1793.38, "duration": 3.21}, {"text": "The other thing we can do is we\ncan signal an error condition.", "start": 1796.59, "duration": 3.21}, {"text": "So this is how you create\ncontrol flow in your programs", "start": 1799.8, "duration": 7.68}, {"text": "with exceptions.", "start": 1807.48, "duration": 2.07}, {"text": "So in Python, signaling\nan error condition", "start": 1809.55, "duration": 2.07}, {"text": "means raising your\nown exception.", "start": 1811.62, "duration": 2.97}, {"text": "So so far we've just seen\nthe programs crashing,", "start": 1814.59, "duration": 4.39}, {"text": "which means they\nraise an exception", "start": 1818.98, "duration": 1.92}, {"text": "and then you deal with them.", "start": 1820.9, "duration": 1.85}, {"text": "But in this last case, you're\nraising your own exception.", "start": 1822.75, "duration": 3.49}, {"text": "As a way to use that exception\nlater on in the code.", "start": 1826.24, "duration": 5.39}, {"text": "So in Python, you raise\nyour own exception", "start": 1831.63, "duration": 1.75}, {"text": "using this raise keyword\nand then an exception.", "start": 1833.38, "duration": 3.03}, {"text": "And then some sort\nof description,", "start": 1836.41, "duration": 1.83}, {"text": "like \"user entered a negative\nnumber\" or something like that.", "start": 1838.24, "duration": 4.212}, {"text": "A lot of the time we're\ngoing to raise a value error.", "start": 1848.0, "duration": 4.48}, {"text": "So if the number is less than\n0, then raise a value error,", "start": 1852.48, "duration": 5.04}, {"text": "something is wrong.", "start": 1857.52, "duration": 2.516}, {"text": "The key word, the name\nof the error, and then", "start": 1860.036, "duration": 1.874}, {"text": "some sort of descriptive string.", "start": 1861.91, "duration": 1.45}, {"text": "So let's see an example of\nhow we raise an exception.", "start": 1868.07, "duration": 4.2}, {"text": "I have this function\nhere called get ratios.", "start": 1872.27, "duration": 3.11}, {"text": "It takes in two\nlists, L1 and L2.", "start": 1875.38, "duration": 3.24}, {"text": "And it's going to\ncreate a new list that's", "start": 1878.62, "duration": 2.43}, {"text": "going to contain the\nratio of each element", "start": 1881.05, "duration": 3.81}, {"text": "in L1 divided by\neach element in L2.", "start": 1884.86, "duration": 4.37}, {"text": "So I have a for loop here.", "start": 1889.23, "duration": 2.76}, {"text": "For index in range length L1.", "start": 1891.99, "duration": 2.49}, {"text": "So I'm going through every\nsingle element in L1.", "start": 1894.48, "duration": 3.36}, {"text": "I'm going to try here.", "start": 1897.84, "duration": 5.49}, {"text": "I'm going to try\nto do this line.", "start": 1903.33, "duration": 1.53}, {"text": "So I think that this line\nmight give me an error.", "start": 1904.86, "duration": 2.23}, {"text": "So I'm going to put\nit in a try block.", "start": 1907.09, "duration": 2.72}, {"text": "The error I think\nI'm going to get", "start": 1909.81, "duration": 2.5}, {"text": "is a 0 division error,\nbecause what happens", "start": 1912.31, "duration": 2.4}, {"text": "when an element and L2 is 0?", "start": 1914.71, "duration": 1.46}, {"text": "And when an element\nin L2 is 0 I'm", "start": 1920.03, "duration": 1.92}, {"text": "going to append this\nnot a number as a float.", "start": 1921.95, "duration": 4.68}, {"text": "So NAN, as a string, you\ncan convert it to a float,", "start": 1926.63, "duration": 3.68}, {"text": "and it stands for not a number.", "start": 1930.31, "duration": 1.45}, {"text": "So then I can continue\npopulating the list", "start": 1934.81, "duration": 3.48}, {"text": "with these not a numbers.", "start": 1938.29, "duration": 1.83}, {"text": "If an element and L2 is 0.", "start": 1940.12, "duration": 3.34}, {"text": "And otherwise, if there's\nno 0 division error,", "start": 1943.46, "duration": 3.67}, {"text": "but there's another\nkind of error,", "start": 1947.13, "duration": 2.05}, {"text": "then I'm going to\nraise my own error.", "start": 1949.18, "duration": 1.97}, {"text": "And say, for any\nother kind of error,", "start": 1951.15, "duration": 2.49}, {"text": "just raise a value error.", "start": 1953.64, "duration": 1.95}, {"text": "Which says, \"get ratios was\ncalled with a bad argument.\"", "start": 1955.59, "duration": 5.44}, {"text": "So here I'm sort of\nconsolidating all errors", "start": 1961.03, "duration": 1.92}, {"text": "into my one value error.", "start": 1962.95, "duration": 1.31}, {"text": "So later on in my program,\nI can catch this value error", "start": 1964.26, "duration": 3.58}, {"text": "and do something with it.", "start": 1967.84, "duration": 1.104}, {"text": "Here's another\nexample of exceptions.", "start": 1973.03, "duration": 3.55}, {"text": "So let's say we're were\ngiven a class list.", "start": 1976.58, "duration": 2.99}, {"text": "We have a list of lists.", "start": 1979.57, "duration": 3.41}, {"text": "Where we have the\nname of a student,", "start": 1982.98, "duration": 2.64}, {"text": "first name and last name, and\ntheir grades in the class.", "start": 1985.62, "duration": 3.06}, {"text": "So we currently\nhave two students.", "start": 1988.68, "duration": 3.24}, {"text": "And what I want to do\nis create a new list", "start": 1991.92, "duration": 2.4}, {"text": "which is the same things,\nthe same inputs here.", "start": 1994.32, "duration": 5.82}, {"text": "But I'm adding an extra--\nI'm appending an extra value", "start": 2000.14, "duration": 3.66}, {"text": "at the end of the list\nfor each student, which", "start": 2003.8, "duration": 2.79}, {"text": "is the average of\nall of their grades.", "start": 2006.59, "duration": 2.037}, {"text": "Or all of their-- yeah,\nall of their grades.", "start": 2008.627, "duration": 1.833}, {"text": "So let's look at the code.", "start": 2014.13, "duration": 1.195}, {"text": "This is the function that\ntakes the class list, which", "start": 2017.98, "duration": 4.1}, {"text": "is this whole list here.", "start": 2022.08, "duration": 1.324}, {"text": "I'm creating a new list\ninside it, initially empty.", "start": 2027.04, "duration": 6.19}, {"text": "And then I'm going for every\nelement in the class list.", "start": 2033.23, "duration": 4.59}, {"text": "I'm appending element\nat 0, which is going", "start": 2037.82, "duration": 3.42}, {"text": "to be this first list here.", "start": 2041.24, "duration": 1.71}, {"text": "So it's going to be the\nfirst name and the last name.", "start": 2042.95, "duration": 3.03}, {"text": "Element at 1, which\nis the grades.", "start": 2045.98, "duration": 4.659}, {"text": "And then the last thing I'm\nappending is a function call.", "start": 2050.639, "duration": 5.701}, {"text": "The function call being\ncalled with element 1, which", "start": 2056.34, "duration": 2.58}, {"text": "is all of the grades, and\nthis is my function call.", "start": 2058.92, "duration": 3.989}, {"text": "We're going to see three\ndifferent function calls.", "start": 2062.909, "duration": 3.141}, {"text": "This is the first one.", "start": 2066.05, "duration": 1.71}, {"text": "It simply takes the\nsum of the grades", "start": 2067.76, "duration": 1.779}, {"text": "and divides it by the\nlength of the grades.", "start": 2069.539, "duration": 1.791}, {"text": "If these students\nare responsible,", "start": 2075.719, "duration": 3.831}, {"text": "and they've taken all of the\ntests, then there's no problem.", "start": 2079.55, "duration": 4.798}, {"text": "Because length of grades\nis going to be something", "start": 2084.348, "duration": 2.041}, {"text": "greater than 0.", "start": 2086.389, "duration": 3.191}, {"text": "But what if we have a\nstudent in the class who", "start": 2089.58, "duration": 2.45}, {"text": "didn't show up for any tests?", "start": 2092.03, "duration": 1.273}, {"text": "Then we have no record\nof any of their tests.", "start": 2097.74, "duration": 2.82}, {"text": "No record of grades\nor anything like that.", "start": 2100.56, "duration": 3.6}, {"text": "So they're going to\nhave an empty list.", "start": 2104.16, "duration": 2.64}, {"text": "So if we run this function,\naverages, on their data,", "start": 2106.8, "duration": 4.049}, {"text": "we're actually going to get a\n0 division error, because we're", "start": 2110.849, "duration": 2.541}, {"text": "trying to divide by length of\ngrades, which is going to be 0.", "start": 2113.39, "duration": 3.84}, {"text": "So what can we do?", "start": 2121.17, "duration": 0.93}, {"text": "Two things, two options here.", "start": 2122.1, "duration": 2.88}, {"text": "One is we can just flag the\nerror and print the message.", "start": 2124.98, "duration": 4.81}, {"text": "So here there's a new average\nfunction, an improved one,", "start": 2129.79, "duration": 4.7}, {"text": "that's going to try to\ndo the exact same line", "start": 2134.49, "duration": 2.01}, {"text": "as the previous one.", "start": 2136.5, "duration": 2.84}, {"text": "And it's going to catch\nthe 0 division error.", "start": 2139.34, "duration": 3.58}, {"text": "And when it catches it, it's\ngoing to print this warning.", "start": 2145.62, "duration": 3.749}, {"text": "And when we run it, we're\ngoing to get, \"warning,", "start": 2149.369, "duration": 2.041}, {"text": "no grades data,\" which is fine.", "start": 2151.41, "duration": 3.421}, {"text": "And we're going to get this\n\"none\" here, for the grades.", "start": 2154.831, "duration": 9.159}, {"text": "So everyone else's grades\nwas calculated correctly,", "start": 2163.99, "duration": 2.58}, {"text": "and for this last\none, we got a none.", "start": 2166.57, "duration": 2.99}, {"text": "That's because, when we\nentered this except statement,", "start": 2169.56, "duration": 3.13}, {"text": "if this is a function, remember\nfunctions return something.", "start": 2172.69, "duration": 4.64}, {"text": "This function in this\nparticular except statement", "start": 2177.33, "duration": 3.18}, {"text": "didn't return anything.", "start": 2180.51, "duration": 0.97}, {"text": "So it returns a none.", "start": 2181.48, "duration": 1.96}, {"text": "So for the averages for\nthis particular function,", "start": 2183.44, "duration": 3.57}, {"text": "the average is going to be\na \"none\" for this person who", "start": 2187.01, "duration": 3.39}, {"text": "didn't have any grades\nassociated with them.", "start": 2190.4, "duration": 2.784}, {"text": "And yeah, so that's\nbasically what I said.", "start": 2197.45, "duration": 5.9}, {"text": "So that's our first option,\nis to just flag the error", "start": 2203.35, "duration": 2.46}, {"text": "and print a message.", "start": 2205.81, "duration": 1.5}, {"text": "The other option is to\nactually change the policy.", "start": 2207.31, "duration": 2.77}, {"text": "So this is where you replace the\ndata with some sort of default", "start": 2210.08, "duration": 4.31}, {"text": "value.", "start": 2214.39, "duration": 0.594}, {"text": "And if you do\nsomething like this,", "start": 2214.984, "duration": 1.416}, {"text": "then this should be documented\ninside the function.", "start": 2216.4, "duration": 1.98}, {"text": "So when you write the\ndocstring for the function,", "start": 2218.38, "duration": 2.041}, {"text": "you would say if the list is\nempty, then it'll will a 0.", "start": 2220.421, "duration": 14.939}, {"text": "So this is the exact\nsame thing as before.", "start": 2235.36, "duration": 2.13}, {"text": "We have a try and an except\nfor the 0 division error.", "start": 2237.49, "duration": 4.02}, {"text": "We also print a\nwarning, no grades data.", "start": 2241.51, "duration": 3.3}, {"text": "And then we return the 0.", "start": 2244.81, "duration": 1.13}, {"text": "So we still flag the error,\nand now instead of a \"none,\"", "start": 2248.8, "duration": 2.55}, {"text": "we get a 0, because we've\nreturned 0.0 here, as opposed", "start": 2251.35, "duration": 4.8}, {"text": "to just leaving it blank.", "start": 2256.15, "duration": 1.27}, {"text": "All right.", "start": 2263.41, "duration": 0.5}, {"text": "So those are exceptions.", "start": 2263.91, "duration": 2.75}, {"text": "Last thing we're going\nto talk about today", "start": 2266.66, "duration": 2.14}, {"text": "are these things\ncalled assertions.", "start": 2268.8, "duration": 3.99}, {"text": "And assertions are good example\nof defensive programming.", "start": 2272.79, "duration": 9.22}, {"text": "In that, you have\nassert statements", "start": 2282.01, "duration": 3.46}, {"text": "at the beginning of\nfunctions, typically.", "start": 2285.47, "duration": 3.06}, {"text": "Or at the end of functions.", "start": 2288.53, "duration": 2.79}, {"text": "And assert statements\nare used to make sure", "start": 2291.32, "duration": 2.7}, {"text": "that the assumptions\non computations", "start": 2294.02, "duration": 3.93}, {"text": "are exactly what the\nfunction expects them to be.", "start": 2297.95, "duration": 3.93}, {"text": "So if we have a\nfunction that says", "start": 2301.88, "duration": 2.1}, {"text": "it's supposed to take in\nan integer greater than 0,", "start": 2303.98, "duration": 3.6}, {"text": "then the assert\nstatement will assert", "start": 2307.58, "duration": 3.54}, {"text": "that the function takes in an\ninteger that's greater than 0.", "start": 2311.12, "duration": 4.64}, {"text": "Here's an example.", "start": 2315.76, "duration": 1.6}, {"text": "This is the same average\nfunction we've seen before.", "start": 2317.36, "duration": 4.39}, {"text": "Here, instead of\nusing exceptions,", "start": 2321.75, "duration": 1.68}, {"text": "we're going to use\nan assert statement.", "start": 2323.43, "duration": 2.76}, {"text": "And the assert statement we're\nputting right at the front.", "start": 2326.19, "duration": 3.45}, {"text": "At the beginning of\nthe function, sorry.", "start": 2329.64, "duration": 3.05}, {"text": "And the key word is assert.", "start": 2332.69, "duration": 1.325}, {"text": "The next part of the assert\nis what the function expects.", "start": 2336.82, "duration": 4.95}, {"text": "So we expect that the length\nof grades is not equal to 0.", "start": 2341.77, "duration": 4.2}, {"text": "So has to be greater than 0.", "start": 2345.97, "duration": 1.454}, {"text": "And then we have a\nstring here, which", "start": 2350.229, "duration": 1.541}, {"text": "represents what do you print out\nif the assertion does not hold.", "start": 2351.77, "duration": 5.55}, {"text": "So if you run the\nfunction, and you give it", "start": 2357.32, "duration": 3.67}, {"text": "a list that is empty,\nthis becomes false,", "start": 2360.99, "duration": 6.37}, {"text": "so the assert is\nfalse, and we're", "start": 2367.36, "duration": 2.46}, {"text": "going to print out an assertion\nerror, no grades data.", "start": 2369.82, "duration": 2.7}, {"text": "If the assert is false, the\nfunction does not continue.", "start": 2375.75, "duration": 3.3}, {"text": "It stops right there.", "start": 2379.05, "duration": 2.99}, {"text": "Why does it behave this way?", "start": 2382.04, "duration": 1.29}, {"text": "Well, assertions are\ngreat to make sure", "start": 2383.33, "duration": 4.24}, {"text": "that preconditions and\npost-conditions on functions", "start": 2387.57, "duration": 3.69}, {"text": "are exactly as you expect.", "start": 2391.26, "duration": 3.12}, {"text": "So as soon as an\nassert becomes false,", "start": 2394.38, "duration": 3.41}, {"text": "the function's going to\nimmediately terminate.", "start": 2397.79, "duration": 3.18}, {"text": "This is useful because\nit'll prevent the program", "start": 2400.97, "duration": 5.77}, {"text": "from propagating bad values.", "start": 2406.74, "duration": 2.74}, {"text": "So as soon as a precondition\nisn't true, for example,", "start": 2409.48, "duration": 2.9}, {"text": "as you enter a function,\nthen that means something", "start": 2412.38, "duration": 2.25}, {"text": "went wrong in your program.", "start": 2414.63, "duration": 1.91}, {"text": "And the program is going\nto stop right there.", "start": 2416.54, "duration": 2.56}, {"text": "So instead of\npropagating a bad value", "start": 2419.1, "duration": 2.13}, {"text": "throughout the\nprogram, and then you", "start": 2421.23, "duration": 1.5}, {"text": "getting an output that\nyou didn't expect,", "start": 2422.73, "duration": 1.98}, {"text": "and then you having to trace\nback to the function that", "start": 2424.71, "duration": 3.6}, {"text": "gave this bad value, you'll get\nthis bad value, you'll get this", "start": 2428.31, "duration": 3.84}, {"text": "assert being false\na lot earlier.", "start": 2432.15, "duration": 4.11}, {"text": "So it'll be a lot\neasier to figure out", "start": 2436.26, "duration": 2.94}, {"text": "where the bug came from.", "start": 2439.2, "duration": 1.632}, {"text": "And you won't have to\ntrace back so many steps.", "start": 2440.832, "duration": 1.958}, {"text": "So this is basically\nwhat I said,", "start": 2446.41, "duration": 1.68}, {"text": "you really want to spot the bugs\nas soon as they're introduced.", "start": 2448.09, "duration": 4.56}, {"text": "And exceptions are good\nif you want to raise them", "start": 2452.65, "duration": 4.17}, {"text": "when the user supplies\nbad data input,", "start": 2456.82, "duration": 1.98}, {"text": "but assertions are\nused to make sure", "start": 2458.8, "duration": 1.8}, {"text": "that the types and other-- the\ntypes of inputs to functions,", "start": 2460.6, "duration": 6.56}, {"text": "maybe other conditions\non inputs to functions,", "start": 2467.16, "duration": 3.64}, {"text": "are being held as the\nvalues are being passed in.", "start": 2470.8, "duration": 5.064}, {"text": "So the keyword\nhere is making sure", "start": 2475.864, "duration": 1.416}, {"text": "that the invariants on\ndata structures are meant.", "start": 2477.28, "duration": 4.42}, {"text": "And that's it.", "start": 2481.7, "duration": 1.14}, {"text": "Great.", "start": 2482.84, "duration": 0.87}, {"text": "Thanks.", "start": 2483.71, "duration": 1.55}]