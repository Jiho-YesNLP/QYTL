[{"text": "Hi, I'm Carrie Anne, and welcome to Crash\nCourse Computer Science!", "start": 3.12, "duration": 2.48}, {"text": "Last episode, we discussed a few example classic\nalgorithms, like sorting a list of numbers", "start": 5.61, "duration": 4.38}, {"text": "and finding the shortest path in a graph.", "start": 9.99, "duration": 1.9}, {"text": "What we didn\u2019t talk much about, is how the\ndata the algorithms ran on was stored in computer", "start": 11.89, "duration": 4.29}, {"text": "memory.", "start": 16.18, "duration": 0.64}, {"text": "You don\u2019t want your data to be like John\nGreen\u2019s college dorm room, with food, clothing", "start": 16.82, "duration": 3.12}, {"text": "and papers strewn everywhere.", "start": 19.95, "duration": 1.43}, {"text": "Instead, we want our data to be structured,\nso that it\u2019s organized, allowing things", "start": 21.38, "duration": 3.98}, {"text": "to be easily retrieved and read.", "start": 25.36, "duration": 1.72}, {"text": "For this, computer scientists use Data Structures!", "start": 27.08, "duration": 2.58}, {"text": "INTRO", "start": 29.8, "duration": 9.24}, {"text": "We already introduced one basic data structure\nlast episode, Arrays, also called lists or", "start": 39.04, "duration": 4.609}, {"text": "Vectors in some languages.", "start": 43.649, "duration": 1.691}, {"text": "These are a series of values stored in memory.", "start": 45.34, "duration": 1.86}, {"text": "So instead of just a single value being saved\ninto a variable, like \u2018j equals 5\u2019, we", "start": 47.21, "duration": 4.15}, {"text": "can define a whole series of numbers, and\nsave that into an array variable.", "start": 51.379, "duration": 3.961}, {"text": "To be able to find a particular value in this\narray, we have to specify an index.", "start": 55.34, "duration": 4.309}, {"text": "Almost all programing languages start arrays\nat index 0, and use a square bracket syntax", "start": 59.649, "duration": 4.381}, {"text": "to denote array access.", "start": 64.03, "duration": 1.289}, {"text": "So, for example, if we want to add the values\nin the first and third spots of our array", "start": 65.319, "duration": 4.761}, {"text": "\u2018j\u2019, and save that into a variable \u2018a\u2019,\nwe would write a line of code like this.", "start": 70.08, "duration": 4.289}, {"text": "How an array is stored in memory is pretty\nstraightforward.", "start": 74.369, "duration": 1.971}, {"text": "For simplicity, let\u2019s say that the compiler\nchose to store ours at memory location 1,000.", "start": 76.34, "duration": 5.24}, {"text": "The array contains 7 numbers, and these are stored one after another in memory, as seen here.", "start": 81.58, "duration": 4.88}, {"text": "So when we write \u201cj index of 0\u201d, the computer\ngoes to memory location 1,000, with an offset", "start": 86.58, "duration": 5.2}, {"text": "of 0, and we get the value 5.", "start": 91.789, "duration": 2.11}, {"text": "If we wanted to retrieve \u201cj index of 5\u201d,\nour program goes to memory location 1000,", "start": 93.899, "duration": 4.53}, {"text": "plus an offset of 5, which in this case, holds\na value of 4.", "start": 98.429, "duration": 3.69}, {"text": "It\u2019s easy to confuse the fifth number in\nthe array with the number at index 5.", "start": 102.119, "duration": 3.11}, {"text": "They are not the same.", "start": 105.229, "duration": 1.481}, {"text": "Remember, the number at index 5 is the 6th\nnumber in the array because the first number", "start": 106.71, "duration": 3.719}, {"text": "is at index 0.", "start": 110.429, "duration": 1.171}, {"text": "Arrays are extremely versatile data structures,\nused all the time, and so there are many functions", "start": 111.6, "duration": 4.26}, {"text": "that can handle them to do useful things.", "start": 115.86, "duration": 1.96}, {"text": "For example, pretty much every programming\nlanguage comes with a built-in sort function,", "start": 117.82, "duration": 3.669}, {"text": "where you just pass in your array, and it\ncomes back sorted.", "start": 121.489, "duration": 2.751}, {"text": "So there\u2019s no need to write that algorithm\nfrom scratch.", "start": 124.24, "duration": 2.58}, {"text": "Very closely related are Strings, which are\njust arrays of characters, like letters, numbers,", "start": 126.82, "duration": 4.56}, {"text": "punctuation and other written symbols.", "start": 131.38, "duration": 2.23}, {"text": "We talked about how computers store characters\nway back in Episode 4.", "start": 133.61, "duration": 3.29}, {"text": "Most often, to save a string into memory,\nyou just put it in quotes, like so.", "start": 136.9, "duration": 3.76}, {"text": "Although it doesn\u2019t look like an array,\nit is.", "start": 140.66, "duration": 2.35}, {"text": "Behind the scenes, the memory looks like this.", "start": 143.01, "duration": 1.839}, {"text": "Note that the string ends with a zero in memory.", "start": 144.849, "duration": 2.761}, {"text": "It\u2019s not the character zero, but the binary\nvalue 0.", "start": 147.61, "duration": 3.489}, {"text": "This is called the null character, and denotes\nthe end of the string in memory.", "start": 151.099, "duration": 3.86}, {"text": "This is important because if I call a function\nlike \u201cprint quote\u201d, which writes the string", "start": 154.959, "duration": 3.5}, {"text": "to the screen, it prints out each character\nin turn starting at the first memory location,", "start": 158.459, "duration": 4.0}, {"text": "but it needs to know when to stop!", "start": 162.459, "duration": 2.25}, {"text": "Otherwise, it would print out every single\nthing in memory as text.", "start": 164.709, "duration": 3.221}, {"text": "The zero tells string functions when to stop.", "start": 167.93, "duration": 3.04}, {"text": "Because computers work with text so often,\nthere are many functions that specifically", "start": 170.97, "duration": 3.2}, {"text": "handle strings.", "start": 174.17, "duration": 1.0}, {"text": "For example, many programming languages have\na string concatenation function, or \u201cstrcat\u201d,", "start": 175.17, "duration": 4.689}, {"text": "which takes in two strings, and copies the\nsecond one to the end of the first.", "start": 179.859, "duration": 3.531}, {"text": "We can use arrays for making one dimensional\nlists, but sometimes you want to manipulate", "start": 183.39, "duration": 3.92}, {"text": "data that is two dimensional, like a grid\nof numbers in a spreadsheet, or the pixels", "start": 187.31, "duration": 3.83}, {"text": "on your computer screen.", "start": 191.14, "duration": 1.209}, {"text": "For this, we need a Matrix.", "start": 192.349, "duration": 1.961}, {"text": "You can think of a Matrix as an array of arrays!", "start": 194.31, "duration": 2.7}, {"text": "So a 3 by 3 matrix is really 2 an array of\nsize 3, with each index storing an array of", "start": 197.01, "duration": 4.88}, {"text": "size 3.", "start": 201.89, "duration": 1.12}, {"text": "We can initialize a matrix like so.", "start": 203.01, "duration": 1.879}, {"text": "In memory, this is packed together in order\nlike this.", "start": 204.889, "duration": 2.661}, {"text": "To access a value, you need to specify two\nindexes, like \u201cJ index of 2, then index", "start": 207.55, "duration": 4.67}, {"text": "of 1\u201d - this tells the computer you\u2019re\nlooking for the item in subarray 2 at position 1.", "start": 212.24, "duration": 5.16}, {"text": "And this would give us the value 12.", "start": 217.4, "duration": 1.6}, {"text": "The cool thing about matrices is we\u2019re not\nlimited to 3 by 3 -- we can make them any", "start": 219.01, "duration": 3.97}, {"text": "size we want -- and we can also make them\nany number of dimensions we want.", "start": 222.99, "duration": 3.71}, {"text": "For example, we can create a five dimensional\nmatrix and access it like this.", "start": 226.7, "duration": 3.599}, {"text": "That\u2019s right, you now know how to access\na five dimensional matrix -- tell your friends!", "start": 230.299, "duration": 4.5}, {"text": "So far, we\u2019ve been storing individual numbers\nor letters into our arrays or matrices.", "start": 234.799, "duration": 4.431}, {"text": "But often it\u2019s useful to store a block of\nrelated variables together.", "start": 239.23, "duration": 3.06}, {"text": "Like, you might want to store a bank account\nnumber along with its balance.", "start": 242.29, "duration": 3.61}, {"text": "Groups of variables like these can be bundled\ntogether into a Struct.", "start": 245.9, "duration": 3.41}, {"text": "Now we can create variables that aren\u2019t\njust single numbers, but are compound data", "start": 249.31, "duration": 3.52}, {"text": "structures, able to store several pieces of\ndata at once.", "start": 252.83, "duration": 3.379}, {"text": "We can even make arrays of structs that we\ndefine, which are automatically bundled together", "start": 256.209, "duration": 3.93}, {"text": "in memory.", "start": 260.139, "duration": 1.0}, {"text": "If we access, for example, J index of 0, we\nget back the whole struct stored there, and", "start": 261.139, "duration": 4.611}, {"text": "we can pull the specific account number and\nbalance data we want.", "start": 265.75, "duration": 3.06}, {"text": "This array of structs, like any other array,\ngets created at a fixed size that can\u2019t", "start": 268.81, "duration": 3.69}, {"text": "be enlarged to add more items.", "start": 272.5, "duration": 1.76}, {"text": "Also, arrays must be stored in order in memory,\nmaking it hard to add a new item to the middle.", "start": 274.26, "duration": 4.6}, {"text": "But, the struct data structure can be used\nfor building more complicated data structures", "start": 278.87, "duration": 3.97}, {"text": "that avoid these restrictions.", "start": 282.84, "duration": 1.34}, {"text": "Let\u2019s take a look at this struct that\u2019s\ncalled a \u201cnode\u201d.", "start": 284.18, "duration": 2.38}, {"text": "It stores a variable, like a number, and also\na pointer.", "start": 286.56, "duration": 3.06}, {"text": "A pointer is a special variable that points,\nhence the name, to a location in memory.", "start": 289.62, "duration": 4.16}, {"text": "Using this struct, we can create a linked\nlist, which is a flexible data structure that", "start": 293.78, "duration": 4.18}, {"text": "can store many nodes.", "start": 297.98, "duration": 1.3}, {"text": "It does this by having each node point to\nthe next node in the list.", "start": 299.28, "duration": 3.38}, {"text": "Let\u2019s imagine we have three node structs\nsaved in memory, at locations 1000, 1002 and 1008.", "start": 302.66, "duration": 6.82}, {"text": "They might be spaced apart, because they were\ncreated at different times, and other data", "start": 309.5, "duration": 3.99}, {"text": "can sit between them.", "start": 313.49, "duration": 1.17}, {"text": "So, you see that the first node contains the\nvalue 7, and the location 1008 in its \u201cnext\u201d", "start": 314.66, "duration": 4.909}, {"text": "pointer.", "start": 319.569, "duration": 1.0}, {"text": "This means that the next node in the linked\nlist is located at memory location 1008.", "start": 320.569, "duration": 3.761}, {"text": "Looking down the linked list, to the next\nnode, we see it stores the value 112 and points", "start": 324.33, "duration": 4.32}, {"text": "to another node at location 1002.", "start": 328.65, "duration": 2.54}, {"text": "If we follow that, we find a node that contains\nthe value 14 and points back to the first", "start": 331.19, "duration": 4.94}, {"text": "node at location 1000.", "start": 336.13, "duration": 1.45}, {"text": "So this linked list happened to be circular,\nbut it could also have been terminated by", "start": 337.58, "duration": 4.0}, {"text": "using a next pointer value of 0 -- the null\nvalue -- which would indicate we\u2019ve reached", "start": 341.58, "duration": 4.38}, {"text": "the end of the list.", "start": 345.96, "duration": 1.04}, {"text": "When programmers use linked lists, they rarely\nlook at the memory values stored in the next", "start": 347.0, "duration": 3.56}, {"text": "pointers.", "start": 350.56, "duration": 1.0}, {"text": "Instead, they can use an abstraction of a\nlinked list, that looks like this, which is", "start": 351.56, "duration": 3.49}, {"text": "much easier to conceptualize.", "start": 355.05, "duration": 1.8}, {"text": "Unlike an array, whose size has to be pre-defined,\nlinked lists can be dynamically extended or", "start": 356.85, "duration": 4.34}, {"text": "shortened.", "start": 361.19, "duration": 1.0}, {"text": "For example, we can allocate a new node in\nmemory, and insert it into this list, just", "start": 362.19, "duration": 3.909}, {"text": "by changing the next pointers.", "start": 366.099, "duration": 1.711}, {"text": "Linked Lists can also easily be re-ordered,\ntrimmed, split, reversed, and so on.", "start": 367.81, "duration": 4.24}, {"text": "Which is pretty nifty!", "start": 372.05, "duration": 1.26}, {"text": "And pretty useful for algorithms like sorting,\nwhich we talked about last week.", "start": 373.31, "duration": 3.34}, {"text": "Owing to this flexibility, many more-complex data structures are built on top of linked lists", "start": 376.65, "duration": 4.71}, {"text": "The most famous and universal are queues and\nstacks.", "start": 381.36, "duration": 2.54}, {"text": "A queue \u2013 like the line at your post office\n\u2013 goes in order of arrival.", "start": 383.9, "duration": 3.34}, {"text": "The person who has been waiting the longest,\ngets served first.", "start": 387.24, "duration": 2.76}, {"text": "No matter how frustrating it is that all you\nwant to do is buy stamps and the person in", "start": 390.0, "duration": 3.77}, {"text": "front of you seems to be mailing 23 packages.", "start": 393.77, "duration": 2.58}, {"text": "But, regardless, this behavior is called First-In\nFirst-Out, or FIFO.", "start": 396.35, "duration": 3.64}, {"text": "That\u2019s the first part.", "start": 399.99, "duration": 1.48}, {"text": "Not the 23 packages thing.", "start": 401.47, "duration": 1.43}, {"text": "Imagine we have a pointer, named \u201cpost office\nqueue\u201d, that points to the first node in", "start": 402.9, "duration": 3.94}, {"text": "our linked list.", "start": 406.84, "duration": 1.0}, {"text": "Once we\u2019re done serving Hank, we can read\nHank\u2019s next pointer, and update our \u201cpost", "start": 407.84, "duration": 4.15}, {"text": "office queue\u201d pointer to the next person\nin the line.", "start": 411.99, "duration": 2.73}, {"text": "We\u2019ve successfully dequeued Hank -- he\u2019s\ngone, done, finished.", "start": 414.72, "duration": 3.349}, {"text": "If we want to enqueue someone, that is, add\nthem to the line, we have to traverse down", "start": 418.069, "duration": 4.07}, {"text": "the linked list until we hit the end, and\nthen change that next pointer to point to", "start": 422.139, "duration": 3.65}, {"text": "the new person.", "start": 425.789, "duration": 1.0}, {"text": "With just a small change, we can use linked\nlists as stacks, which are LIFO\u2026", "start": 426.789, "duration": 3.861}, {"text": "Last-In First-Out.", "start": 430.65, "duration": 1.329}, {"text": "You can think of this like a stack of pancakes...\nas you make them, you add them to the top", "start": 431.979, "duration": 3.44}, {"text": "of stack.", "start": 435.419, "duration": 1.0}, {"text": "And when you want to eat one, you take them\nfrom the top of the stack.", "start": 436.42, "duration": 2.76}, {"text": "Delicious!", "start": 439.18, "duration": 1.08}, {"text": "Instead of enqueueing and dequeuing, data\nis pushed onto the stack and popped from the stacks.", "start": 440.26, "duration": 4.92}, {"text": "Yep, those are the official terms!", "start": 445.24, "duration": 2.18}, {"text": "If we update our node struct to contain not\njust one, but two pointers, we can build trees,", "start": 447.42, "duration": 5.04}, {"text": "another data structure that\u2019s used in many\nalgorithms.", "start": 452.46, "duration": 2.34}, {"text": "Again, programmers rarely look at the values\nof these pointers, and instead conceptualize", "start": 454.8, "duration": 4.1}, {"text": "trees like this:\nThe top most node is called the root.", "start": 458.92, "duration": 3.119}, {"text": "And any nodes that hang from other nodes are\ncalled children nodes.", "start": 462.039, "duration": 3.41}, {"text": "As you might expect, nodes above children\nare called parent nodes.", "start": 465.449, "duration": 3.31}, {"text": "Does this example imply that Thomas Jefferson\nis the parent of Aaron Burr?", "start": 468.759, "duration": 3.231}, {"text": "I\u2019ll leave that to your fanfiction to decide.", "start": 471.99, "duration": 2.51}, {"text": "And finally, any nodes that have no children -- where the tree ends -- are called Leaf Nodes.", "start": 474.5, "duration": 4.26}, {"text": "In our example, nodes can have up to two children,\nand for that reason, this particular data", "start": 478.78, "duration": 4.5}, {"text": "structure is called a binary tree.", "start": 483.28, "duration": 1.66}, {"text": "But you could just as easily have trees with\nthree, four or any number of children by modifying", "start": 484.94, "duration": 4.16}, {"text": "the data structure accordingly.", "start": 489.1, "duration": 1.8}, {"text": "You can even have tree nodes that use linked\nlists to store all the nodes they point to.", "start": 490.9, "duration": 4.16}, {"text": "An important property of trees \u2013 both in\nreal life and in data structures \u2013 is that", "start": 495.06, "duration": 3.55}, {"text": "there\u2019s a one-way path from roots to leaves.", "start": 498.61, "duration": 1.8}, {"text": "It\u2019d be weird if roots connected to leaves,\nthat connected to roots.", "start": 500.41, "duration": 3.289}, {"text": "For data that links arbitrarily, that include\nthings like loops, we can use a graph data", "start": 503.699, "duration": 4.761}, {"text": "structure instead.", "start": 508.46, "duration": 1.0}, {"text": "Remember our graph from last episode of cities\nconnected by roads?", "start": 509.46, "duration": 3.09}, {"text": "This can be stored as nodes with many pointers,\nvery much like a tree, but there is no notion", "start": 512.55, "duration": 4.41}, {"text": "of roots and leaves, and children and parents\u2026", "start": 516.96, "duration": 1.94}, {"text": "Anything can point to anything!", "start": 518.9, "duration": 1.58}, {"text": "So that\u2019s a whirlwind overview of pretty\nmuch all of the fundamental data structures", "start": 520.49, "duration": 3.49}, {"text": "used in computer science.", "start": 523.98, "duration": 1.54}, {"text": "On top of these basic building blocks, programmers\nhave built all sorts of clever variants, with", "start": 525.52, "duration": 3.79}, {"text": "slightly different properties -- data structures\nlike red-black trees and heaps, which we don\u2019t", "start": 529.31, "duration": 4.52}, {"text": "have time to cover.", "start": 533.83, "duration": 1.1}, {"text": "These different data structures have properties\nthat are useful for particular computations.", "start": 534.93, "duration": 4.12}, {"text": "The right choice of data structure can make\nyour job a lot easier, so it pays off to think", "start": 539.05, "duration": 3.94}, {"text": "about how you want to structure your data\nbefore you jump in.", "start": 542.99, "duration": 2.71}, {"text": "Fortunately, most programming languages come with libraries packed full of ready-made data structures.", "start": 545.7, "duration": 4.7}, {"text": "For example, C++ has its Standard Template\nLibrary, and Java has the Java Class Library.", "start": 550.4, "duration": 5.22}, {"text": "These mean programmers don\u2019t have to waste\ntime implementing things from scratch, and", "start": 555.62, "duration": 4.2}, {"text": "can instead wield the power of data structures\nto do more interesting things, once again", "start": 559.84, "duration": 4.82}, {"text": "allowing us to operate at a new level of abstraction!", "start": 564.66, "duration": 3.24}, {"text": "I\u2019ll see you next week.", "start": 567.9, "duration": 1.02}]