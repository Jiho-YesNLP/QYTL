[{"text": "Hi, I'm Carrie Anne and welcome to Crash Course Computer Science.", "start": 2.78, "duration": 3.1}, {"text": "Over the last few episodes,", "start": 5.94, "duration": 1.48}, {"text": "We've talked a lot about the mechanics of how computers work.", "start": 7.6, "duration": 2.66}, {"text": "How they use complex circuits to save and retrieve values from memory,", "start": 10.4, "duration": 3.16}, {"text": "and perform operations on those values,", "start": 13.56, "duration": 1.8}, {"text": "like adding two numbers together.", "start": 15.36, "duration": 1.44}, {"text": "We've even briefly talked about sequences of operations,", "start": 17.1, "duration": 2.7}, {"text": "which is a computer program.", "start": 19.8, "duration": 1.38}, {"text": "What we haven't talked about", "start": 21.18, "duration": 1.432}, {"text": "is how a program gets into a computer.", "start": 22.612, "duration": 1.908}, {"text": "You might remember in episode 7 and 8 ,", "start": 24.64, "duration": 1.34}, {"text": "when we stepped through some simple example programs for the CPU that we had created.", "start": 25.98, "duration": 4.42}, {"text": "For simplicity, we just waved our hands", "start": 30.58, "duration": 2.52}, {"text": "and said that the program was already magically in memory.", "start": 33.1, "duration": 1.909}, {"text": "But in reality, programs have to be loaded into a computer's memory.", "start": 35.04, "duration": 3.84}, {"text": "It's not magic. It's computer science.", "start": 38.88, "duration": 1.72}, {"text": "[Theme Music]", "start": 40.7, "duration": 8.7}, {"text": "The need to programme machines existed way before the development of computers.", "start": 49.54, "duration": 3.9}, {"text": "The most famous example of this was in textile manufacturing.", "start": 53.44, "duration": 3.14}, {"text": "if you just wanted to weave a big red tablecloth,", "start": 56.78, "duration": 1.98}, {"text": "you could simply feed red thread into a loom and let it run.", "start": 58.94, "duration": 2.76}, {"text": "But what about if you wanted the cloth to have a pattern like stripes or plaid?", "start": 61.71, "duration": 3.269}, {"text": "Workers would have to periodically reconfigure the loom as dictated by the pattern,", "start": 65.4, "duration": 4.18}, {"text": "but this was labor intensive which made patterned fabrics expensive.", "start": 69.58, "duration": 3.14}, {"text": "In response, Joseph Marie Jacquard developed a programmable textile loom,", "start": 72.88, "duration": 4.04}, {"text": "which he first demonstrated in 1801.", "start": 76.92, "duration": 1.84}, {"text": "The pattern for each row of the cloth was defined by a punched card.", "start": 78.76, "duration": 3.14}, {"text": "The presence or absence of a hole in the card determined", "start": 81.9, "duration": 2.579}, {"text": "if a specific threat was held high or low in the loom.", "start": 84.479, "duration": 2.07}, {"text": "Such that the cross thread called the weft passed above or below the thread.", "start": 86.74, "duration": 3.59}, {"text": "To vary the pattern across rows these punch cards were arranged in long chains,", "start": 90.48, "duration": 3.56}, {"text": "forming a sequence of commands for the loom.", "start": 94.08, "duration": 2.18}, {"text": "Sound familiar?", "start": 96.26, "duration": 0.8}, {"text": "Many consider Jacquard's loom to be one of the earliest forms of programming.", "start": 97.16, "duration": 3.24}, {"text": "Punched cards, turned out to be a cheap , reliable,", "start": 100.4, "duration": 2.68}, {"text": "fairly human readable way to store data.", "start": 103.27, "duration": 2.0}, {"text": "Nearly a century later,", "start": 105.429, "duration": 1.15}, {"text": "punch cards were use to help tabulate the 1890 newest census", "start": 106.579, "duration": 2.901}, {"text": "which we talked about in episode 1.", "start": 109.48, "duration": 1.549}, {"text": "Each card held an individual person's data.", "start": 111.12, "duration": 3.14}, {"text": "Things like race,", "start": 114.26, "duration": 0.66}, {"text": "marital status,", "start": 114.92, "duration": 0.78}, {"text": "number of children,", "start": 115.74, "duration": 0.76}, {"text": "country of birth, and so on.", "start": 116.5, "duration": 1.12}, {"text": "For each demographic question,", "start": 117.68, "duration": 2.24}, {"text": "a census worker would punch out a hole of the appropriate position.", "start": 119.92, "duration": 2.42}, {"text": "When a card was fed into the tabulating machine,", "start": 122.34, "duration": 2.42}, {"text": "a hole would cause the running total for that specific answer to be increased by one.", "start": 124.9, "duration": 4.12}, {"text": "In this way you could feed the", "start": 129.02, "duration": 1.12}, {"text": "entire county's worth of people", "start": 130.14, "duration": 1.98}, {"text": "and at the end you'd have running totals for all of the questions that you asked.", "start": 132.12, "duration": 3.14}, {"text": "It is important to note here that early tabulating machines", "start": 135.26, "duration": 2.8}, {"text": "were not truly computers as they can only do one thing-tabulate.", "start": 138.14, "duration": 3.9}, {"text": "Their operation was fixed and not programmable.", "start": 142.06, "duration": 2.3}, {"text": "Punished cards stored data, but not a program.", "start": 144.36, "duration": 2.42}, {"text": "Over the next 60 years, these business machines grew in capability,", "start": 146.78, "duration": 3.86}, {"text": "adding features to subtract, multiply, divide,", "start": 150.64, "duration": 2.5}, {"text": "and even make simple decisions about when to perform certain operations.", "start": 153.14, "duration": 3.44}, {"text": "To trigger these functions appropriately,", "start": 156.7, "duration": 1.8}, {"text": "so that different calculations could be performed,", "start": 158.5, "duration": 1.8}, {"text": "a programmer accessed a control panel.", "start": 160.3, "duration": 2.54}, {"text": "This panel was full of little sockets, into which a programmer would plug cables", "start": 162.84, "duration": 2.46}, {"text": "to pass values and signals between different parts of the machine.", "start": 165.3, "duration": 5.0}, {"text": "For this reason they were also called plug boards.", "start": 170.3, "duration": 2.6}, {"text": "Unfortunately, this meant having to rewire the machine each time a different program needed to be run.", "start": 172.9, "duration": 4.5}, {"text": "And so by the 1920s, these plug boards were made swappable.", "start": 177.4, "duration": 3.9}, {"text": "This not only made programming a lot more comfortable,", "start": 181.3, "duration": 2.7}, {"text": "but also allowed for different programs to be plugged into a machine.", "start": 184.0, "duration": 3.4}, {"text": "For example, one board might be wired to calculate sales tax, while another helps with payroll.", "start": 187.4, "duration": 4.6}, {"text": "But plug boards were fiendishly complicated to program.", "start": 192.0, "duration": 3.0}, {"text": "This tangle of wires is a program for calculating a profit loss summary,", "start": 195.0, "duration": 3.8}, {"text": "using an IBM 402 accounting machine, which were popular in the 1940s.", "start": 198.8, "duration": 4.2}, {"text": "And this style of plug board programming wasn't unique to electromechanical computers.", "start": 203.0, "duration": 3.569}, {"text": "The world's first General-Purpose electronic computer,", "start": 206.569, "duration": 3.931}, {"text": "the Eniac, completed in 1946, used a ton of them.", "start": 210.5, "duration": 3.4}, {"text": "Even after a program had been completely figured out on paper,", "start": 213.9, "duration": 2.7}, {"text": "physically wiring up the Eniac and getting the program to run could take upwards of three weeks.", "start": 216.6, "duration": 5.37}, {"text": "Given the enormous cost of these early computers, weeks of downtime simply to switch programs", "start": 222.13, "duration": 5.07}, {"text": "was unacceptable and the new, faster, more flexible way to programme machines was badly needed.", "start": 227.2, "duration": 4.7}, {"text": "Fortunately by the late 1940s and into the 50s, electronic memory was becoming feasible.", "start": 231.9, "duration": 5.2}, {"text": "As costs fell, memory size grew.", "start": 237.1, "duration": 1.43}, {"text": "Instead of storing a program as a physical plug board of wires, it became possible to store a program entirely in a computer's memory.", "start": 238.75, "duration": 6.109}, {"text": "Where it could be easily changed by programmers and quickly accessed by the CPU.", "start": 245.109, "duration": 4.391}, {"text": "These computers were called stored-program computers.", "start": 249.5, "duration": 2.4}, {"text": "With enough computer memory, you could store not only the program you wanted to run,", "start": 251.9, "duration": 4.059}, {"text": "but also any data your program would need.", "start": 255.959, "duration": 1.941}, {"text": "Including new values it created along the way,", "start": 257.9, "duration": 2.4}, {"text": "Unifying the progrmming data into a single shared memory is called the von Neumann architecture.", "start": 260.3, "duration": 5.4}, {"text": "Named after John von Neumann, a prominent mathematician and physicist,", "start": 265.7, "duration": 3.4}, {"text": "who worked on the Manhattan project and several early electronic computers.", "start": 269.1, "duration": 4.0}, {"text": "And once said, \"I'm thinking about something much more important than bombs, I'm thinking about computers\".", "start": 273.1, "duration": 5.2}, {"text": "The hallmarks of a von Neumann computer are a processing unit containing an arithmetic logic unit,", "start": 278.3, "duration": 5.2}, {"text": "data registers, an instruction register, and an instruction address register.", "start": 283.599, "duration": 4.16}, {"text": "And finally, a memory to store both data and instructions.", "start": 287.76, "duration": 3.64}, {"text": "Hopefully, this sounds familiar, because we actually built a von Neumann computer in episode 7.", "start": 291.4, "duration": 4.0}, {"text": "The very first von Neumann architecture stored program computer", "start": 295.4, "duration": 4.1}, {"text": "was constructed in 1948 by the University of Manchester, nicknamed \"Baby\".", "start": 299.5, "duration": 4.5}, {"text": "And even the computer you are watching this video right now uses the same architecture.", "start": 304.0, "duration": 4.5}, {"text": "Now electronic computer memory is great and all,", "start": 308.5, "duration": 1.98}, {"text": "but you still have to load the programming data in to the computer before it can run.", "start": 310.48, "duration": 3.42}, {"text": "And for this reason, punch cards were used.", "start": 314.0, "duration": 2.2}, {"text": "Let's get to the Thought Bubble.", "start": 316.2, "duration": 1.5}, {"text": "Well into the 1980s, almost all computers had a punch card reader.", "start": 317.7, "duration": 3.0}, {"text": "Which could suck in a single punch card at a time and write the contents of the card into the computer's memory.", "start": 320.7, "duration": 5.6}, {"text": "If you loaded in a stack of punch cards, the reader would load them all into memory sequentially, as a big block.", "start": 326.3, "duration": 4.919}, {"text": "Once the programming data were in memory, the computer would be told to execute it.", "start": 331.32, "duration": 3.68}, {"text": "Of course, even simple computer programs might have hundreds of", "start": 335.0, "duration": 3.16}, {"text": "instructions, which meant that programs were stored as stacks of punch cards.", "start": 338.16, "duration": 3.47}, {"text": "So if you ever have the misfortune of accidentally dropping your program on the floor,", "start": 341.63, "duration": 3.77}, {"text": "it could take you hours, days, or even weeks to put the code back in the right order.", "start": 345.4, "duration": 3.6}, {"text": "A common trick was to draw a diagonal line on the side of the card stack called striping,", "start": 349.0, "duration": 4.3}, {"text": "so you'd have at least some clue how to get it back into the right order.", "start": 353.3, "duration": 3.24}, {"text": "The largest program ever punched into punch cards was the US Air Force's sage air defense system, completed in", "start": 357.06, "duration": 6.05}, {"text": "1955. At its peak, the product is said to have employed", "start": 363.2, "duration": 3.39}, {"text": "20% of the world's programmers. Its main control program was stored on a whopping", "start": 366.8, "duration": 5.0}, {"text": "62,500 punch cards, which is equivalent to roughly 5 megabytes of data.", "start": 371.8, "duration": 4.69}, {"text": "Pretty underwhelming by today's standards.", "start": 376.83, "duration": 3.27}, {"text": "And punch cards weren't only useful for getting data into computers, but also getting data out of them.", "start": 380.1, "duration": 4.9}, {"text": "At the end of a program, results could be written out of computer memory and onto punch cards by, well, punching cards.", "start": 385.0, "duration": 6.0}, {"text": "Then this data could be analyzed by humans or loaded into a second program for additional computation.", "start": 391.0, "duration": 5.499}, {"text": "Thanks, Thought Bubble.", "start": 396.75, "duration": 1.25}, {"text": "A close cousin to punch cards was punched paper tape,", "start": 398.0, "duration": 2.35}, {"text": "which is basically the same idea, but continuously instead of being on individual cards.", "start": 400.35, "duration": 4.25}, {"text": "And of course, we haven't talked about hard drives, CD-Roms, DVDs, USB thumb drives, and other similar goodies.", "start": 404.6, "duration": 6.089}, {"text": "We'll get to those more advanced types of data storage in a future episode.", "start": 410.79, "duration": 3.41}, {"text": "Finally, in addition to plug boards and punch paper,", "start": 414.27, "duration": 2.73}, {"text": "there was another common way to program and control computers pre-1980: panel programming.", "start": 417.0, "duration": 3.33}, {"text": "Rather than having to physically plug in cables to activate certain functions, this could also be done with huge panels full of switches", "start": 420.33, "duration": 7.159}, {"text": "and buttons. And there were indicator lights to display the status of various functions and values in memory.", "start": 427.49, "duration": 5.21}, {"text": "Computers of the 50s and 60s often featured huge control consoles that look like this.", "start": 432.84, "duration": 4.56}, {"text": "Although it was rare to input a whole program using just switches, it was possible.", "start": 437.4, "duration": 3.8}, {"text": "And early home computers made for the hobbyist market used switches extensively, because most home users couldn't afford expensive", "start": 441.2, "duration": 6.3}, {"text": "peripherals like punch card readers. The first commercially successful home computer was the Altair 8800, which sold in two versions:", "start": 447.63, "duration": 7.27}, {"text": "preassembled and as a kit. The kit, which was popular with amateur computing enthusiasts, sold for the then unprecedented low price of around", "start": 455.1, "duration": 7.16}, {"text": "$400 in 1975 or about $2,000 in 2017.", "start": 462.4, "duration": 4.9}, {"text": "To program 8800 you'd literally toggle the switches on the front panel to enter the binary Op codes for the instruction you wanted.", "start": 467.3, "duration": 6.27}, {"text": "Then you press the deposit button to write that value into memory.", "start": 473.64, "duration": 3.529}, {"text": "Then in the next location in memory, you toggle the switches again for your next instruction, deposit it and so on.", "start": 477.3, "duration": 6.6}, {"text": "When you had finally entered your whole program into memory, you would toggle the switches, move back", "start": 483.9, "duration": 4.16}, {"text": "to memory address zero, press the run button, and watch the little lights blink. That was home computing in 1975, wow.", "start": 488.06, "duration": 6.96}, {"text": "Whether it was plug board switches or punched paper", "start": 495.02, "duration": 2.339}, {"text": "Programming these early computers was the realm of experts. Either professionals who did this for a living, or technology enthusiasts.", "start": 497.79, "duration": 5.72}, {"text": "You needed intimate knowledge of the underlying hardware,", "start": 503.82, "duration": 2.779}, {"text": "So things like processor Op codes and register wits to write programs.", "start": 506.94, "duration": 3.66}, {"text": "This meant programming was hard and tedious. And even professional engineers and scientists struggle to take full advantage of what computing could offer.", "start": 510.74, "duration": 6.929}, {"text": "What was needed was a simpler way to tell computers what to do; a simpler way to write programs.", "start": 517.89, "duration": 5.21}, {"text": "And that brings us to programming languages which we'll talk about next episode. See you next week.", "start": 523.11, "duration": 5.79}, {"text": "Crash Course Computer Science is produced in association with PBS Digital Studios.", "start": 529.35, "duration": 3.95}, {"text": "At their channel you can check out a playlist of shows like Braincraft,", "start": 533.81, "duration": 2.97}, {"text": "Coma Niddy and PBS Infinite Series. This episode was filmed at the Chad and Stacey Emigholz studio in Indianapolis, Indiana", "start": 536.96, "duration": 6.63}, {"text": "And it was made with the help of all these nice people and our wonderful graphics team is Thought Cafe.", "start": 543.6, "duration": 4.76}, {"text": "Thanks for the Random Access Memories, I''ll see you next time.", "start": 548.46, "duration": 2.809}]