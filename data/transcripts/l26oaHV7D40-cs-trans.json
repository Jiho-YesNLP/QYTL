[{"text": "Hi, I\u2019m Carrie Anne, and welcome to CrashCourse\nComputer Science!", "start": 3.06, "duration": 2.84}, {"text": "Last episode we discussed how writing programs\nin native machine code, and having to contend", "start": 5.91, "duration": 3.99}, {"text": "with so many low level details, was a huge\nimpediment to writing complex programs.", "start": 9.9, "duration": 4.71}, {"text": "To abstract away many of these low-level details,\nProgramming Languages were developed that", "start": 14.61, "duration": 3.76}, {"text": "let programmers concentrate on solving a problem\nwith computation, and less on nitty gritty", "start": 18.37, "duration": 4.59}, {"text": "hardware details.", "start": 22.96, "duration": 1.0}, {"text": "So today, we\u2019re going to continue that discussion,\nand introduce some fundamental building blocks", "start": 23.96, "duration": 4.77}, {"text": "that almost all programming languages provide.", "start": 28.73, "duration": 2.13}, {"text": "INTRO", "start": 30.86, "duration": 9.3}, {"text": "Just like spoken languages, programming languages\nhave statements.", "start": 40.16, "duration": 3.37}, {"text": "These are individual complete thoughts, like\n\u201cI want tea\u201d or \u201cit is raining\u201d.", "start": 43.53, "duration": 3.689}, {"text": "By using different words, we can change the\nmeaning; for example, \u201cI want tea\u201d to", "start": 47.219, "duration": 3.901}, {"text": "\u201cI want unicorns\u201d.", "start": 51.12, "duration": 1.0}, {"text": "But we can\u2019t change \u201cI want tea\u201d to\n\u201cI want raining\u201d - that doesn\u2019t make", "start": 52.12, "duration": 2.771}, {"text": "grammatical sense.", "start": 54.891, "duration": 1.0}, {"text": "The set of rules that govern the structure\nand composition of statements in a language", "start": 55.891, "duration": 3.168}, {"text": "is called syntax.", "start": 59.06, "duration": 1.3}, {"text": "The English language has syntax, and so do\nall programming languages.", "start": 60.46, "duration": 2.98}, {"text": "\u201cA equals 5\u201d is a programming language\nstatement.", "start": 63.449, "duration": 2.611}, {"text": "In this case, the statement says a variable\nnamed A has the number 5 stored in it.", "start": 66.06, "duration": 3.94}, {"text": "This is called an assignment statement because\nwe're assigning a value to a variable.", "start": 70.0, "duration": 3.969}, {"text": "To express more complex things, we need a\nseries of statements, like \u201cA is 5, B is", "start": 73.969, "duration": 4.5}, {"text": "ten, C equals A plus B\u201d", "start": 78.469, "duration": 1.89}, {"text": "This program tells the computer to set variable\n\u2018A\u2019 equal to 5, variable \u2018B\u2019 to 10,", "start": 80.359, "duration": 5.11}, {"text": "and finally to add \u2018A\u2019 and \u2018B\u2019 together,\nand put that result, which is 15, into -- you", "start": 85.469, "duration": 4.25}, {"text": "guessed it -- variable C.", "start": 89.719, "duration": 1.521}, {"text": "Note that we can call variables whatever we\nwant.", "start": 91.24, "duration": 1.85}, {"text": "Instead of A, B and C, it could be apples,\npears, and fruits.", "start": 93.09, "duration": 3.12}, {"text": "The computer doesn\u2019t care, as long as variables\nare uniquely named.", "start": 96.21, "duration": 3.1}, {"text": "But it\u2019s probably best practice to name\nthem things that make sense in case someone", "start": 99.31, "duration": 3.32}, {"text": "else is trying to understand your code.", "start": 102.63, "duration": 1.669}, {"text": "A program, which is a list of instructions,\nis a bit like a recipe: boil water, add noodles,", "start": 104.299, "duration": 4.89}, {"text": "wait 10 minutes, drain and enjoy.", "start": 109.189, "duration": 1.751}, {"text": "In the same way, the program starts at the\nfirst statement and runs down one at a time", "start": 110.94, "duration": 4.13}, {"text": "until it hits the end.", "start": 115.07, "duration": 1.189}, {"text": "So far, we\u2019ve added two numbers together.", "start": 116.259, "duration": 1.831}, {"text": "Boring.", "start": 118.09, "duration": 1.0}, {"text": "Let\u2019s make a video game instead!", "start": 119.09, "duration": 1.519}, {"text": "Of course, it\u2019s way too early to think about\ncoding an entire game, so instead, we\u2019ll", "start": 120.609, "duration": 4.33}, {"text": "use our example to write little snippets of\ncode that cover some programming fundamentals.", "start": 124.939, "duration": 4.001}, {"text": "Imagine we\u2019re building an old-school arcade\ngame where Grace Hopper has to capture bugs", "start": 128.94, "duration": 3.45}, {"text": "before they get into the Harvard Mark 1 and\ncrash the computer!", "start": 132.39, "duration": 3.23}, {"text": "On every level, the number of bugs increases.", "start": 135.62, "duration": 2.4}, {"text": "Grace has to catch them before they wear out\nany relays in the machine.", "start": 138.02, "duration": 3.26}, {"text": "Fortunately, she has a few extra relays for\nrepairs.", "start": 141.28, "duration": 3.13}, {"text": "To get started, we\u2019ll need to keep track\nof a bunch of values that are important for", "start": 144.41, "duration": 3.54}, {"text": "gameplay, like what level the player is on,\nthe score, the number of bugs remaining, as", "start": 147.95, "duration": 4.26}, {"text": "well as the number of spare relays in Grace\u2019s\ninventory.", "start": 152.21, "duration": 2.09}, {"text": "So, we must \u201cinitialize\u201d our variables,\nthat is, set their initial value: \u201clevel", "start": 154.3, "duration": 4.94}, {"text": "equals 1, score equals 0, bugs equals 5, spare relays equals 4, and player name equals \u201cAndre\u201d.", "start": 159.24, "duration": 5.91}, {"text": "To create an interactive game, we need to\ncontrol the flow of the program beyond just", "start": 165.15, "duration": 3.51}, {"text": "running from top to bottom.", "start": 168.66, "duration": 1.55}, {"text": "To do this, we use Control Flow Statements.", "start": 170.21, "duration": 2.58}, {"text": "There are several types, but If Statements\nare the most common.", "start": 172.79, "duration": 3.05}, {"text": "You can think of them as \u201cIf X is true,\nthen do Y\u201d.", "start": 175.84, "duration": 3.27}, {"text": "An English language example is: \u201cIf I am\ntired, then get tea\u201d", "start": 179.11, "duration": 3.45}, {"text": "So if \u201cI am tired\u201d is a true statement,\nthen I will go get tea", "start": 182.56, "duration": 4.11}, {"text": "If \u201cI am tired\u201d is false, then I will\nnot go get tea.", "start": 186.67, "duration": 2.93}, {"text": "An IF statement is like a fork in the road.", "start": 189.6, "duration": 1.93}, {"text": "Which path you take is conditional on whether\nthe expression is true or false -- so these", "start": 191.53, "duration": 4.26}, {"text": "expressions are called Conditional Statements.", "start": 195.79, "duration": 2.21}, {"text": "In most programming languages, an if statement\nlooks something like \u2026. \u201cIf, expression,", "start": 198.0, "duration": 3.92}, {"text": "then, some code, then end the if statement\u201d.", "start": 201.92, "duration": 2.65}, {"text": "For example, if \u201clevel\u201d is 1, then we\nset the score to zero, because the player", "start": 204.57, "duration": 3.691}, {"text": "is just starting.", "start": 208.261, "duration": 1.159}, {"text": "We also set the number of bugs to 1, to keep\nit easy for now.", "start": 209.42, "duration": 2.98}, {"text": "Notice the lines of code that are conditional\non the if-statement are nested between the", "start": 212.4, "duration": 3.44}, {"text": "IF and END IF.", "start": 215.84, "duration": 1.2}, {"text": "Of course, we can change the conditional expression\nto whatever we want to test, like \u201cis score", "start": 217.04, "duration": 3.901}, {"text": "greater than 10\u201d 5 or \u201cis bugs less than 1\u201d.", "start": 220.941, "duration": 2.619}, {"text": "And If-Statements can be combined with an ELSE statement, which acts as a catch-all if the", "start": 223.56, "duration": 3.34}, {"text": "expression is false.", "start": 226.91, "duration": 0.99}, {"text": "If the level is not 1, the code inside the\nELSE block will be executed instead, and the", "start": 227.91, "duration": 3.46}, {"text": "number of bugs that Grace has to battle is\nset to 3 times the level number.", "start": 231.37, "duration": 3.78}, {"text": "So on level 2, it would be six bugs, and on\nlevel 3 there\u2019s 9, and so on.", "start": 235.15, "duration": 4.37}, {"text": "Score isn\u2019t modified in the ELSE block,\nso Grace gets to keep any points earned.", "start": 239.52, "duration": 3.74}, {"text": "Here are some examples of if-then-else statements\nfrom some popular programming languages -- you", "start": 243.26, "duration": 4.03}, {"text": "can see the syntax varies a little, but the\nunderlying structure is roughly the same.", "start": 247.29, "duration": 3.72}, {"text": "If-statements are executed once, a conditional\npath is chosen, and the program moves on.", "start": 251.01, "duration": 4.45}, {"text": "To repeat some statements many times, we need\nto create a conditional loop.", "start": 255.46, "duration": 3.8}, {"text": "One way is a while statement, also called\na while loop.", "start": 259.26, "duration": 3.08}, {"text": "As you might have guessed, this loops a piece\nof code \u201cwhile\u201d a condition is true.", "start": 262.34, "duration": 3.6}, {"text": "Regardless of the programming language, they\nlook something like this:", "start": 265.94, "duration": 2.72}, {"text": "In our game, let\u2019s say at certain points,\na friendly colleague restocks Grace with relays!", "start": 268.66, "duration": 4.27}, {"text": "Hooray!", "start": 272.93, "duration": 0.73}, {"text": "To animate him replenishing our stock back\nup to a maximum of 4, we can use a while loop.", "start": 273.66, "duration": 4.0}, {"text": "Let\u2019s walk through this code.", "start": 277.66, "duration": 1.46}, {"text": "First we\u2019ll assume that Grace only has 1\ntube left when her colleague enters.", "start": 279.12, "duration": 4.38}, {"text": "When we enter the while loop, the first thing\nthe computer does is test its conditional\u2026is", "start": 283.5, "duration": 4.45}, {"text": "relays less than 4?", "start": 287.95, "duration": 1.66}, {"text": "Well, relays is currently 1, so yes.", "start": 289.61, "duration": 2.55}, {"text": "Now we enter the loop!", "start": 292.16, "duration": 1.08}, {"text": "Then, we hit the line of code: \u201crelays equals\nrelays plus 1\u201d.", "start": 293.24, "duration": 3.28}, {"text": "This is a bit confusing because the variable\nis using itself in an assignment statement,", "start": 296.52, "duration": 4.06}, {"text": "so let's unpack it.", "start": 300.58, "duration": 1.02}, {"text": "You always start by figuring out the right\nside of the equals sign first, so what does", "start": 301.6, "duration": 4.28}, {"text": "\u201crelays plus 1\u201d come out to be?", "start": 305.88, "duration": 1.5}, {"text": "Well, relays is currently the value 1, so\n1 plus 1 equals 2.", "start": 307.38, "duration": 4.2}, {"text": "Then, this result gets saved back into the\nvariable relays, writing over the old value,", "start": 311.58, "duration": 4.58}, {"text": "so now relays stores the value 2.", "start": 316.16, "duration": 1.61}, {"text": "We\u2019ve hit the end of the while loop, which\njumps the program back up.", "start": 317.77, "duration": 3.48}, {"text": "Just as before, we test the conditional to\nsee if we\u2019re going to enter the loop.", "start": 321.25, "duration": 3.45}, {"text": "Is relays less than 4?", "start": 324.7, "duration": 1.31}, {"text": "Well, yes, relays now equals 2, so we enter\nthe loop again!", "start": 326.01, "duration": 3.39}, {"text": "2 plus 1 equals 3.", "start": 329.4, "duration": 1.31}, {"text": "So 3 is saved into relays.", "start": 330.71, "duration": 1.95}, {"text": "Loop again.", "start": 332.66, "duration": 0.84}, {"text": "Is 3 less than 4?", "start": 333.66, "duration": 1.0}, {"text": "Yes it is!", "start": 334.66, "duration": 0.78}, {"text": "Into the loop again.", "start": 335.44, "duration": 0.94}, {"text": "3 plus 1 equals 4.", "start": 336.46, "duration": 1.58}, {"text": "So we save 4 into relays.", "start": 338.04, "duration": 1.73}, {"text": "Loop again.", "start": 339.77, "duration": 0.85}, {"text": "Is 4 less than 4?....", "start": 340.62, "duration": 1.3}, {"text": "No!", "start": 341.92, "duration": 0.7}, {"text": "So the condition is now false, and thus we\nexit the loop and move on to any remaining", "start": 342.62, "duration": 3.84}, {"text": "code.", "start": 346.46, "duration": 0.76}, {"text": "That\u2019s how a while loop works!", "start": 347.22, "duration": 1.24}, {"text": "There\u2019s also the common For Loop.", "start": 348.47, "duration": 1.61}, {"text": "Instead of being a condition-controlled loop\nthat can repeat forever until the condition", "start": 350.08, "duration": 3.59}, {"text": "is false, a FOR loop is count-controlled;\nit repeats a specific number of times.", "start": 353.67, "duration": 4.82}, {"text": "They look something like this:", "start": 358.49, "duration": 1.46}, {"text": "Now, let\u2019s put in some real values.", "start": 359.95, "duration": 2.04}, {"text": "This example loops 10 times, because we\u2019ve\nspecified that variable \u2018i\u2019 starts at", "start": 361.99, "duration": 3.86}, {"text": "the value 1 and goes up to 10.", "start": 365.85, "duration": 2.01}, {"text": "The unique thing about a FOR loop is that\neach time it hits NEXT, it adds one to \u2018i\u2019.", "start": 367.86, "duration": 4.1}, {"text": "When \u2018i\u2019 equals 10, the computer knows\nit\u2019s been looped 10 times, and the loop", "start": 371.96, "duration": 4.0}, {"text": "exits.", "start": 375.96, "duration": 0.56}, {"text": "We can set the number to whatever we want\n-- 10, 42, or a billion -- it\u2019s up to us.", "start": 376.52, "duration": 4.08}, {"text": "Let\u2019s say we want to give the player a bonus\nat the end of each level for the number of", "start": 380.6, "duration": 3.44}, {"text": "vacuum relays they have left over.", "start": 384.04, "duration": 1.85}, {"text": "As the game gets harder, it takes more skill\nto have unused relays, so we want the bonus", "start": 385.89, "duration": 4.15}, {"text": "to go up exponentially based on the level.", "start": 390.04, "duration": 2.34}, {"text": "We need to write a piece of code that calculates exponents - that is, multiplying a number", "start": 392.38, "duration": 4.08}, {"text": "by itself a specific number of times.", "start": 396.46, "duration": 2.03}, {"text": "A loop is perfect for this!", "start": 398.49, "duration": 1.81}, {"text": "First lets initialize a new variable called\n\u201cbonus\u201d and set it to 1.", "start": 400.3, "duration": 3.42}, {"text": "Then, we create a FOR loop starting at 1,\nand looping up to the level number.", "start": 403.72, "duration": 4.52}, {"text": "Inside that loop, we multiply bonus times\nthe number of relays, and save that new value", "start": 408.24, "duration": 4.46}, {"text": "back into bonus.", "start": 412.71, "duration": 1.15}, {"text": "For example, let\u2019s say relays equals 2,\nand level equals 3.", "start": 413.87, "duration": 3.79}, {"text": "So the FOR loop will loop three times, which\nmeans bonus is going to get multiplied by", "start": 417.66, "duration": 4.24}, {"text": "relays... by relays... by relays.", "start": 421.9, "duration": 1.47}, {"text": "Or in this case, times 2, times 2, times 2,\nwhich is a bonus of 8!", "start": 423.37, "duration": 3.86}, {"text": "That\u2019s 2 to the 3rd power!", "start": 427.23, "duration": 1.67}, {"text": "This exponent code is useful, and we might\nwant to use it in other parts of our code.", "start": 428.9, "duration": 3.78}, {"text": "It\u2019d be annoying to copy and paste this\neverywhere, and have to update the variable", "start": 432.68, "duration": 3.17}, {"text": "names each time.", "start": 435.85, "duration": 1.08}, {"text": "Also, if we found a bug, we\u2019d have to hunt\naround and update every place we used it.", "start": 436.93, "duration": 4.39}, {"text": "It also makes code more confusing to look at.", "start": 441.32, "duration": 2.46}, {"text": "Less is more!", "start": 443.78, "duration": 0.94}, {"text": "What we want is a way to package up our exponent\ncode so we can use it, get the result, and", "start": 444.8, "duration": 4.0}, {"text": "not have to see all the internal complexity.", "start": 448.81, "duration": 1.99}, {"text": "We\u2019re once again moving up a new level of\nabstraction!", "start": 450.81, "duration": 9.24}, {"text": "To compartmentalize and hide complexity, programming\nlanguages can package pieces of code into", "start": 460.05, "duration": 4.1}, {"text": "named functions, also called methods or subroutines\nin different programming languages.", "start": 464.15, "duration": 5.03}, {"text": "These functions can then be used by any other\npart of that program just by calling its name.", "start": 469.18, "duration": 4.0}, {"text": "Let\u2019s turn our exponent code into a function!", "start": 473.18, "duration": 2.65}, {"text": "First, we should name it.", "start": 475.83, "duration": 1.59}, {"text": "We can call it anything we want, like HappyUnicorn,\nbut since our code calculates exponents, let\u2019s", "start": 477.42, "duration": 5.13}, {"text": "call it exponent.", "start": 482.55, "duration": 1.06}, {"text": "Also, instead of using specific variable names,\nlike \u201crelays\u201d and \u201clevels\u201d, we specify", "start": 483.61, "duration": 4.27}, {"text": "generic variable names, like Base and Exp,\nwhose initial values are going to be \u201cpassed\u201d", "start": 487.88, "duration": 4.74}, {"text": "into our function from some other part of\nthe program.", "start": 492.62, "duration": 2.76}, {"text": "The rest of our code is the same as before,\nnow tucked into our function and with new", "start": 495.38, "duration": 4.37}, {"text": "variable names.", "start": 499.75, "duration": 1.0}, {"text": "Finally, we need to send the result of our\nexponent code back to the part of the program", "start": 500.75, "duration": 3.461}, {"text": "that requested it.", "start": 504.211, "duration": 1.049}, {"text": "For this, we use a RETURN statement, and specify\nthat the value in \u2018result\u2019 be returned.", "start": 505.26, "duration": 4.53}, {"text": "So our full function code looks like this:", "start": 509.79, "duration": 2.229}, {"text": "Now we can use this function anywhere in our\nprogram, simply by calling its name and passing", "start": 512.019, "duration": 4.14}, {"text": "in two numbers.", "start": 516.159, "duration": 1.0}, {"text": "For example, if we want to calculate 2 to\nthe 44th power, we can just call \u201cexponent", "start": 517.159, "duration": 4.521}, {"text": "2 comma 44.\u201d", "start": 521.68, "duration": 1.529}, {"text": "and like 18 trillion comes back.", "start": 523.209, "duration": 2.281}, {"text": "Behind the scenes, 2 and 44 get saved into\nvariables Base and Exp inside the function,", "start": 525.49, "duration": 5.46}, {"text": "it does all its loops as necessary, and then\nthe function returns with the result.", "start": 530.95, "duration": 3.86}, {"text": "Let\u2019s use our newly minted function to calculate\na score bonus.", "start": 534.81, "duration": 3.329}, {"text": "First, we initialize bonus to 0.", "start": 538.139, "duration": 2.541}, {"text": "Then we check if the player has any remaining\nrelays with an if-statement.", "start": 540.68, "duration": 3.519}, {"text": "If they do, we call our exponent function,\npassing in relays and level, which calculates", "start": 544.199, "duration": 4.351}, {"text": "relays to the power of level, and returns\nthe result, which we save into bonus.", "start": 548.55, "duration": 4.25}, {"text": "This bonus calculating code might be useful later, so let\u2019s wrap it up as a function too!", "start": 552.8, "duration": 4.44}, {"text": "Yes, a function that calls a function!", "start": 557.32, "duration": 2.26}, {"text": "And then, wait for it\u2026. we can use this\nfunction in an even more complex function.", "start": 559.589, "duration": 5.06}, {"text": "Let\u2019s write one that gets called everytime\nthe player finishes a level.", "start": 564.649, "duration": 3.3}, {"text": "We\u2019ll call it \u201clevelFinished\u201d - it needs\nto know the number of relays left, what level", "start": 567.949, "duration": 4.32}, {"text": "it was, and the current score; those values\nhave to get passed in.", "start": 572.269, "duration": 3.711}, {"text": "Inside our function, we\u2019ll calculate the\nbonus, using our calcBonus function, and add", "start": 575.98, "duration": 4.789}, {"text": "that to the running score.", "start": 580.769, "duration": 1.521}, {"text": "Also, if the current score is higher than\nthe game\u2019s high score, we save the new high", "start": 582.29, "duration": 4.0}, {"text": "score and the players name.", "start": 586.29, "duration": 1.92}, {"text": "Finally, we return the current score.", "start": 588.21, "duration": 2.04}, {"text": "Now we\u2019re getting pretty fancy.", "start": 590.25, "duration": 1.569}, {"text": "Functions are calling functions are calling\nfunctions!", "start": 591.819, "duration": 2.611}, {"text": "When we call a single line of code, like this\nthe complexity is hidden.", "start": 594.43, "duration": 3.48}, {"text": "We don\u2019t see all the internal loops and\nvariables, we just see the result come back", "start": 597.91, "duration": 3.729}, {"text": "as if by magic\u2026. a total score of 53.", "start": 601.639, "duration": 2.63}, {"text": "But it\u2019s not magic, it\u2019s the power of\nabstraction!", "start": 604.269, "duration": 2.99}, {"text": "If you understand this example, then you understand the power of functions, and the entire essence", "start": 607.26, "duration": 4.5}, {"text": "of modern programming.", "start": 611.76, "duration": 1.28}, {"text": "It\u2019s not feasible to write, for example,\na web browser as one gigantically long list", "start": 613.04, "duration": 4.53}, {"text": "of statements.", "start": 617.57, "duration": 1.079}, {"text": "It would be millions of lines long and impossible\nto comprehend!", "start": 618.649, "duration": 2.74}, {"text": "So instead, software consists of thousands\nof smaller functions, each responsible for", "start": 621.389, "duration": 4.331}, {"text": "different features.", "start": 625.72, "duration": 1.399}, {"text": "In modern programming, it\u2019s uncommon to\nsee functions longer than around 100 lines", "start": 627.119, "duration": 3.351}, {"text": "of code, because by then, there\u2019s probably\nsomething that should be pulled out and made", "start": 630.47, "duration": 3.77}, {"text": "into its own function.", "start": 634.24, "duration": 1.31}, {"text": "Modularizing programs into functions not only\nallows a single programmer to write an entire", "start": 635.55, "duration": 3.909}, {"text": "app, but also allows teams of people to work\nefficiently on even bigger programs.", "start": 639.46, "duration": 4.7}, {"text": "Different programmers can work on different\nfunctions, and if everyone makes sure their", "start": 644.16, "duration": 3.44}, {"text": "code works correctly, then when everything\nis put together, the whole program should", "start": 647.6, "duration": 3.52}, {"text": "work too!", "start": 651.12, "duration": 0.72}, {"text": "And in the real world, programmers aren\u2019t\nwasting time writing things like exponents.", "start": 651.84, "duration": 4.52}, {"text": "Modern programming languages come with huge\nbundles of pre-written functions, called Libraries.", "start": 656.36, "duration": 4.98}, {"text": "These are written by expert coders, made efficient\nand rigorously tested, and then given to everyone.", "start": 661.34, "duration": 5.42}, {"text": "There are libraries for almost everything,\nincluding networking, graphics, and sound", "start": 666.76, "duration": 3.499}, {"text": "-- topics we\u2019ll discuss in future episodes.", "start": 670.26, "duration": 2.44}, {"text": "But before we get to those, we need to talk\nabout Algorithms.", "start": 672.7, "duration": 3.34}, {"text": "Intrigued?", "start": 676.04, "duration": 1.14}, {"text": "You should be.", "start": 677.18, "duration": 1.0}, {"text": "I\u2019ll see you next week.", "start": 678.24, "duration": 1.0}]