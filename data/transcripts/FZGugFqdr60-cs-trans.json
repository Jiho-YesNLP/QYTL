[{"text": "Hi, I\u2019m Carrie Anne, this is Crash Course Computer Science, and today, we\u2019re talking about processors.", "start": 3.16, "duration": 4.38}, {"text": "Just a warning though - this\nis probably the most complicated episode in the series.", "start": 7.54, "duration": 3.94}, {"text": "So once you get this, you\u2019re golden.", "start": 11.54, "duration": 1.4}, {"text": "We\u2019ve already made a Arithmetic and Logic\nUnit, which takes in binary numbers and performs", "start": 12.94, "duration": 4.0}, {"text": "calculations, and we\u2019ve made two types of\ncomputer memory: Registers -- small, linear", "start": 16.949, "duration": 4.401}, {"text": "chunks of memory, useful for storing a single value -- and then we scaled up, and made some", "start": 21.35, "duration": 4.649}, {"text": "RAM, a larger bank of memory that can store a lot of numbers located at different addresses.", "start": 25.999, "duration": 4.261}, {"text": "Now it\u2019s time to put it all together and\nbuild ourselves the heart of any computer,", "start": 30.26, "duration": 3.92}, {"text": "but without any of the emotional baggage that comes with human hearts.", "start": 34.18, "duration": 2.83}, {"text": "For computers, this is the Central Processing Unit, most commonly called the CPU.", "start": 37.01, "duration": 4.93}, {"text": "INTRO", "start": 42.06, "duration": 9.1}, {"text": "A CPU\u2019s job is to execute programs.", "start": 51.16, "duration": 2.5}, {"text": "Programs, like Microsoft Office, Safari, or your beloved copy of Half Life: 2, are made", "start": 53.66, "duration": 4.14}, {"text": "up of a series of individual operations, called instructions, because they \u201cinstruct\u201d", "start": 57.8, "duration": 4.77}, {"text": "the computer what to do.", "start": 62.57, "duration": 1.0}, {"text": "If these are mathematical instructions, like\nadd or subtract, the CPU will configure its", "start": 63.57, "duration": 4.049}, {"text": "ALU to do the mathematical operation.", "start": 67.619, "duration": 2.42}, {"text": "Or it might be a memory instruction, in which case the CPU will talk with memory", "start": 70.04, "duration": 4.08}, {"text": "to read and write values.", "start": 74.12, "duration": 1.38}, {"text": "There are a lot of parts in a CPU, so we\u2019re going to lay it out piece by piece, building", "start": 75.5, "duration": 3.78}, {"text": "up as we go.", "start": 79.28, "duration": 1.0}, {"text": "We\u2019ll focus on functional blocks, rather\nthan showing every single wire.", "start": 80.28, "duration": 3.67}, {"text": "When we do connect two components with a line, this is an abstraction for all of the necessary wires.", "start": 83.95, "duration": 4.09}, {"text": "This high level view is called the microarchitecture.", "start": 88.14, "duration": 2.64}, {"text": "OK, first, we\u2019re going to need some memory.", "start": 90.78, "duration": 1.92}, {"text": "Lets drop in the RAM module we created last episode.", "start": 92.7, "duration": 3.08}, {"text": "To keep things simple, we\u2019ll assume it only has 16 memory locations, each containing 8 bits.", "start": 95.78, "duration": 4.82}, {"text": "Let\u2019s also give our processor four, 8-bit\nmemory registers, labeled A, B, C and D which", "start": 100.74, "duration": 4.58}, {"text": "will be used to temporarily store and manipulate values.", "start": 105.32, "duration": 2.74}, {"text": "We already know that data can be stored in memory as binary values", "start": 108.06, "duration": 3.1}, {"text": "and programs can be stored in memory too.", "start": 111.16, "duration": 1.76}, {"text": "We can assign an ID to each instruction supported by our CPU.", "start": 112.92, "duration": 3.64}, {"text": "In our hypothetical example, we use the first\nfour bits to store the \u201coperation code\u201d,", "start": 116.569, "duration": 4.23}, {"text": "or opcode for short.", "start": 120.799, "duration": 1.941}, {"text": "The final four bits specify where the data for that operation should come from -", "start": 122.74, "duration": 3.48}, {"text": "this could be registers or an address in memory.", "start": 126.22, "duration": 2.08}, {"text": "We also need two more registers to complete our CPU.", "start": 128.3, "duration": 3.17}, {"text": "First, we need a register to keep track of where we are in a program.", "start": 131.47, "duration": 3.19}, {"text": "For this, we use an instruction address register, which as the name suggests, stores the memory", "start": 134.67, "duration": 4.77}, {"text": "address of the current instruction.", "start": 139.44, "duration": 1.46}, {"text": "And then we need the other register to store the current instruction, which we\u2019ll call the instruction register.", "start": 140.9, "duration": 5.42}, {"text": "When we first boot up our computer, all of\nour registers start at 0.", "start": 146.38, "duration": 3.76}, {"text": "As an example, we\u2019ve initialized our RAM with a simple computer program that we\u2019ll to through today.", "start": 150.14, "duration": 5.06}, {"text": "The first phase of a CPU\u2019s operation is\ncalled the fetch phase.", "start": 155.2, "duration": 3.6}, {"text": "This is where we retrieve our first instruction.", "start": 158.8, "duration": 2.32}, {"text": "First, we wire our Instruction Address Register to our RAM module.", "start": 161.13, "duration": 3.51}, {"text": "The register\u2019s value is 0, so the RAM returns whatever value is stored in address 0.", "start": 164.64, "duration": 4.57}, {"text": "In this case, 0010 1110.", "start": 169.21, "duration": 3.75}, {"text": "Then this value is copied into our instruction register.", "start": 172.96, "duration": 2.29}, {"text": "Now that we\u2019ve fetched an instruction from\nmemory, we need to figure out what that instruction is", "start": 175.25, "duration": 3.89}, {"text": "so we can execute it.", "start": 179.14, "duration": 1.62}, {"text": "That is run it.", "start": 180.78, "duration": 0.96}, {"text": "Not kill it.", "start": 181.8, "duration": 0.84}, {"text": "This is called the decode phase.", "start": 182.64, "duration": 1.94}, {"text": "In this case the opcode, which is the first four bits, is: 0010.", "start": 184.62, "duration": 4.25}, {"text": "This opcode corresponds to the \u201cLOAD A\u201d instruction, which loads a value from RAM", "start": 188.87, "duration": 4.31}, {"text": "into Register A.", "start": 193.19, "duration": 1.04}, {"text": "The RAM address is the last four bits of our instruction which are 1110, or 14 in decimal.", "start": 194.23, "duration": 5.63}, {"text": "Next, instructions are decoded and interpreted by a Control Unit.", "start": 199.86, "duration": 3.5}, {"text": "Like everything else we\u2019ve built, it too is made out of logic gates.", "start": 203.37, "duration": 2.93}, {"text": "For example, to recognize a LOAD A instruction, we need a circuit that checks if the opcode", "start": 206.31, "duration": 4.79}, {"text": "matches 0010 which we can do with a handful of logic gates.", "start": 211.1, "duration": 4.32}, {"text": "Now that we know what instruction we\u2019re dealing with, we can go ahead and perform", "start": 215.42, "duration": 2.87}, {"text": "that instruction which is the beginning of the execute phase!", "start": 218.29, "duration": 3.03}, {"text": "Using the output of our LOAD_A checking circuit, we can turn on the RAM\u2019s read enable line", "start": 221.32, "duration": 4.4}, {"text": "and send in address 14.", "start": 225.73, "duration": 1.57}, {"text": "The RAM retrieves the value at that address, which is 00000011, or 3 in decimal.", "start": 227.3, "duration": 6.18}, {"text": "Now, because this is a LOAD_A instruction,\nwe want that value to only be saved into Register A", "start": 233.48, "duration": 4.64}, {"text": "and not any of the other registers.", "start": 238.12, "duration": 1.66}, {"text": "So if we connect the RAM\u2019s data wires to our four data registers, we can use our LOAD_A", "start": 239.78, "duration": 4.5}, {"text": "check circuit to enable the write enable only for Register A.", "start": 244.28, "duration": 3.32}, {"text": "And there you have it -- we\u2019ve successfully loaded the value at RAM address 14 into Register A.", "start": 247.6, "duration": 4.4}, {"text": "We\u2019ve completed the instruction, so we\ncan turn all of our wires off, and we\u2019\u2019re", "start": 252.0, "duration": 4.56}, {"text": "ready to fetch the next instruction in memory.", "start": 256.56, "duration": 2.22}, {"text": "To do this, we increment the Instruction Address Register by 1 which completes the execute phase.", "start": 258.78, "duration": 5.12}, {"text": "LOAD_A is just one of several possible instructions that our CPU can execute.", "start": 263.92, "duration": 4.7}, {"text": "Different instructions are decoded by different logic circuits, which configure the CPU\u2019s", "start": 268.62, "duration": 3.94}, {"text": "components to perform that action.", "start": 272.56, "duration": 1.68}, {"text": "Looking at all those individual decode circuits is too much detail, so since we looked at one example,", "start": 274.24, "duration": 4.7}, {"text": "we\u2019re going to go head and package them all up as a single Control Unit to keep things simple.", "start": 278.94, "duration": 4.34}, {"text": "That\u2019s right a new level of abstraction.", "start": 283.38, "duration": 8.08}, {"text": "The Control Unit is comparable to the conductor of an orchestra, directing all of the different", "start": 291.47, "duration": 4.22}, {"text": "parts of the CPU.", "start": 295.69, "duration": 1.37}, {"text": "Having completed one full fetch/decode/execute cycle, we\u2019re ready to start all over again,", "start": 297.06, "duration": 4.97}, {"text": "beginning with the fetch phase.", "start": 302.03, "duration": 1.75}, {"text": "The Instruction Address Register now has the value 1 in it, so the RAM gives us the value", "start": 303.78, "duration": 4.13}, {"text": "stored at address 1, which is 0001 1111.", "start": 307.91, "duration": 4.37}, {"text": "On to the decode phase!", "start": 312.28, "duration": 1.68}, {"text": "0001 is the \u201cLOAD B\u201d instruction, which\nmoves a value from RAM into Register B.", "start": 313.96, "duration": 6.121}, {"text": "The memory location this time is 1111, which is 15 in decimal.", "start": 320.081, "duration": 4.439}, {"text": "Now to the execute phase!", "start": 324.52, "duration": 1.58}, {"text": "The Control Unit configures the RAM to read address 15 and configures Register B to receive the data.", "start": 326.1, "duration": 5.74}, {"text": "Bingo, we just saved the value 00001110, or the number 14 in decimal, into Register B.", "start": 331.88, "duration": 6.91}, {"text": "Last thing to do is increment our instruction address register by 1, and we\u2019re done with another cycle.", "start": 338.79, "duration": 4.99}, {"text": "Our next instruction is a bit different.", "start": 343.8, "duration": 1.88}, {"text": "Let\u2019s fetch it.", "start": 345.69, "duration": 1.01}, {"text": "1000 01 00.", "start": 346.7, "duration": 2.68}, {"text": "That opcode 1000 is an ADD instruction.", "start": 349.38, "duration": 3.72}, {"text": "Instead of an 4-bit RAM address, this instruction uses two sets of 2 bits.", "start": 353.1, "duration": 4.24}, {"text": "Remember that 2 bits can encode 4 values, so 2 bits is enough to select any one of our 4 registers.", "start": 357.34, "duration": 5.38}, {"text": "The first set of 2 bits is 01, which in this case corresponds to Register B, and 00, which is Register A.", "start": 362.76, "duration": 6.36}, {"text": "So \u201c1000 01 00\u201d is the instruction for adding the value in Register B into the value in register A.", "start": 369.12, "duration": 8.48}, {"text": "So to execute this instruction, we need to integrate the ALU we made in Episode 5 into our CPU.", "start": 377.6, "duration": 5.6}, {"text": "The Control Unit is responsible for selecting the right registers to pass in as inputs,", "start": 383.22, "duration": 4.18}, {"text": "and configuring the ALU to perform the right operation.", "start": 387.4, "duration": 2.76}, {"text": "For this ADD instruction, the Control Unit\nenables Register B and feeds its value into", "start": 390.16, "duration": 4.62}, {"text": "the first input of the ALU.", "start": 394.78, "duration": 1.81}, {"text": "It also enables Register A and feeds it into the second ALU input.", "start": 396.59, "duration": 4.17}, {"text": "As we already discussed, the ALU itself can\nperform several different operations, so the", "start": 400.76, "duration": 4.42}, {"text": "Control Unit must configure it to perform\nan ADD operation by passing in the ADD opcode.", "start": 405.18, "duration": 5.239}, {"text": "Finally, the output should be saved into Register A. But it can\u2019t be written directly", "start": 410.42, "duration": 4.1}, {"text": "because the new value would ripple back into the ALU and then keep adding to itself.", "start": 414.52, "duration": 4.2}, {"text": "So the Control Unit uses an internal register\nto temporarily save the output, turn off the", "start": 418.8, "duration": 5.08}, {"text": "ALU, and then write the value into the proper destination register.", "start": 423.88, "duration": 3.87}, {"text": "In this case, our inputs were 3 and 14, and\nso the sum is 17, or 00010001 in binary,", "start": 427.75, "duration": 8.34}, {"text": "which is now sitting in Register A. As before, the last thing to do is increment our instruction", "start": 436.09, "duration": 4.49}, {"text": "address by 1, and another cycle is complete.", "start": 440.58, "duration": 2.74}, {"text": "Okay, so let\u2019s fetch one last instruction: 01001101.", "start": 443.38, "duration": 5.76}, {"text": "When we decode it we see that 0100 is a STORE_A instruction, with a RAM address of 13.", "start": 449.16, "duration": 5.88}, {"text": "As usual, we pass the address to the RAM module, but instead of read-enabling the memory, we write-enable it.", "start": 455.04, "duration": 5.64}, {"text": "At the same time, we read-enable Register A. This allows us to use the data line to", "start": 460.74, "duration": 4.8}, {"text": "pass in the value stored in register A.", "start": 465.54, "duration": 2.17}, {"text": "Congrats, we just ran our first computer program!", "start": 467.71, "duration": 3.19}, {"text": "It loaded two values from memory, added them together, and then saved that sum back into memory.", "start": 470.9, "duration": 4.74}, {"text": "Of course, by me talking you through the individual steps, I was manually transitioning the CPU", "start": 475.64, "duration": 4.74}, {"text": "through its fetch, decode and execute phases.", "start": 480.38, "duration": 3.16}, {"text": "But there isn\u2019t a mini Carrie Anne inside of every computer.", "start": 483.54, "duration": 2.82}, {"text": "So the responsibility of keeping the CPU ticking along falls to a component called the clock.", "start": 486.36, "duration": 4.25}, {"text": "As it\u2019s name suggests, the clock triggers an electrical signal at a precise and regular interval.", "start": 490.61, "duration": 4.81}, {"text": "Its signal is used by the Control Unit to advance the internal operation of the CPU,", "start": 495.42, "duration": 4.24}, {"text": "keeping everything in lock-step - like the dude on a Roman galley drumming rhythmically", "start": 499.67, "duration": 3.73}, {"text": "at the front, keeping all the rowers synchronized... or a metronome.", "start": 503.419, "duration": 4.03}, {"text": "Of course you can\u2019t go too fast, because even electricity takes some time to travel", "start": 507.449, "duration": 3.651}, {"text": "down wires and for the signal to settle.", "start": 511.1, "duration": 2.22}, {"text": "The speed at which a CPU can carry out each step of the fetch-decode-execute cycle is called its Clock Speed.", "start": 513.32, "duration": 6.38}, {"text": "This speed is measured in Hertz - a unit of frequency.", "start": 519.74, "duration": 3.06}, {"text": "One Hertz means one cycle per second.", "start": 522.8, "duration": 2.36}, {"text": "Given that it took me about 6 minutes to talk you through 4 instructions -- LOAD, LOAD,", "start": 525.16, "duration": 4.02}, {"text": "ADD and STORE -- that means I have an effective clock speed of roughly .03 Hertz.", "start": 529.18, "duration": 4.72}, {"text": "Admittedly, I\u2019m not a great computer but even someone handy with math", "start": 533.9, "duration": 3.8}, {"text": "might only be able to do one calculation in their head every second or 1 Hertz.", "start": 537.7, "duration": 3.94}, {"text": "The very first, single-chip CPU was the Intel\n4004, a 4-bit CPU released in 1971.", "start": 541.76, "duration": 6.88}, {"text": "It\u2019s microarchitecture is actually pretty similar to our example CPU.", "start": 548.64, "duration": 4.16}, {"text": "Despite being the first processor of its kind,\nit had a mind-blowing clock speed of 740 Kilohertz", "start": 552.8, "duration": 5.8}, {"text": "-- that\u2019s 740 thousand cycles per second.", "start": 558.6, "duration": 3.83}, {"text": "You might think that\u2019s fast, but it\u2019s nothing compared to the processors that we use today.", "start": 562.43, "duration": 3.97}, {"text": "One megahertz is one million clock cycles per second, and the computer or even phone", "start": 566.48, "duration": 4.38}, {"text": "that you are watching this video on right now is no doubt a few gigahertz -- that's", "start": 570.87, "duration": 3.81}, {"text": "BILLIONs of CPU cycles every\u2026 single... second.", "start": 574.68, "duration": 3.78}, {"text": "Also, you may have heard of people overclocking their computers.", "start": 578.52, "duration": 3.18}, {"text": "This is when you modify the clock to speed up the tempo of the CPU -- like when the drummer", "start": 581.7, "duration": 4.1}, {"text": "speeds up when the Roman Galley needs to ram another ship.", "start": 585.8, "duration": 2.84}, {"text": "Chip makers often design CPUs with enough tolerance to handle a little bit of overclocking,", "start": 588.64, "duration": 4.3}, {"text": "but too much can either overheat the CPU, or produce gobbledygook as the signals fall behind the clock.", "start": 592.94, "duration": 5.14}, {"text": "And although you don\u2019t hear very much about underclocking, it\u2019s actually super useful.", "start": 598.1, "duration": 3.9}, {"text": "Sometimes it\u2019s not necessary to run the processor at full speed...", "start": 602.0, "duration": 2.98}, {"text": "maybe the user has stepped away, or just not running a particularly demanding program.", "start": 604.98, "duration": 3.96}, {"text": "By slowing the CPU down, you can save a lot of power, which is important for computers", "start": 608.94, "duration": 4.25}, {"text": "that run on batteries, like laptops and smartphones.", "start": 613.19, "duration": 2.55}, {"text": "To meet these needs, many modern processors can increase or decrease their clock speed", "start": 615.74, "duration": 4.21}, {"text": "based on demand, which is called dynamic frequency scaling.", "start": 619.95, "duration": 3.079}, {"text": "So, with the addition of a clock, our CPU\nis complete.", "start": 623.029, "duration": 3.181}, {"text": "We can now put a box around it, and make it its own component.", "start": 626.21, "duration": 2.689}, {"text": "Yup.", "start": 628.9, "duration": 0.7}, {"text": "A new level of abstraction!", "start": 629.6, "duration": 7.44}, {"text": "RAM, as I showed you last episode, lies outside the CPU as its own component, and they communicate", "start": 637.04, "duration": 5.44}, {"text": "with each other using address, data and enable wires.", "start": 642.48, "duration": 2.9}, {"text": "Although the CPU we designed today is a simplified example, many of the basic mechanics we discussed", "start": 645.38, "duration": 4.72}, {"text": "are still found in modern processors.", "start": 650.1, "duration": 2.38}, {"text": "Next episode, we\u2019re going to beef up our CPU, extending it with more instructions as", "start": 652.48, "duration": 4.44}, {"text": "we take our first baby steps into software.", "start": 656.92, "duration": 2.26}, {"text": "I\u2019ll see you next week.", "start": 659.2, "duration": 1.16}]