[{"text": "hello everyone and welcome back", "start": 6.16, "duration": 5.359}, {"text": "in this session we are going to look", "start": 9.76, "duration": 4.08}, {"text": "into multiprocessor systems and in", "start": 11.519, "duration": 4.24}, {"text": "multiprocessor system there is a problem", "start": 13.84, "duration": 4.0}, {"text": "associated with it that is known as", "start": 15.759, "duration": 4.241}, {"text": "cache coherence problem and as a", "start": 17.84, "duration": 4.72}, {"text": "solution to this problem we propose", "start": 20.0, "duration": 5.439}, {"text": "cache coherency protocols so in today's", "start": 22.56, "duration": 4.879}, {"text": "session we are first going to state the", "start": 25.439, "duration": 4.561}, {"text": "cache coherence problem and then we will", "start": 27.439, "duration": 4.561}, {"text": "look into the solution that is cache", "start": 30.0, "duration": 4.32}, {"text": "coherency protocols so without any", "start": 32.0, "duration": 5.6}, {"text": "further ado let's get to learning", "start": 34.32, "duration": 5.44}, {"text": "now i hope you all remember the basic", "start": 37.6, "duration": 4.16}, {"text": "structure of a dual core processor which", "start": 39.76, "duration": 4.4}, {"text": "we observed in the session where we were", "start": 41.76, "duration": 4.959}, {"text": "introduced to the cache memory now we", "start": 44.16, "duration": 4.559}, {"text": "all know that a processor is connected", "start": 46.719, "duration": 3.84}, {"text": "to the main memory with the help of a", "start": 48.719, "duration": 3.121}, {"text": "system bus", "start": 50.559, "duration": 3.921}, {"text": "so with respect to these scores if you", "start": 51.84, "duration": 5.92}, {"text": "observe closely the l1 and l2 caches for", "start": 54.48, "duration": 5.04}, {"text": "each of the cores are their private", "start": 57.76, "duration": 5.119}, {"text": "storages whereas the l3 cache and the", "start": 59.52, "duration": 6.16}, {"text": "main memory are the shared storages", "start": 62.879, "duration": 5.441}, {"text": "so basically in a multi-processor system", "start": 65.68, "duration": 4.88}, {"text": "every core has its own independent", "start": 68.32, "duration": 4.88}, {"text": "memory storage also there are some", "start": 70.56, "duration": 5.12}, {"text": "memory storages which are shared among", "start": 73.2, "duration": 3.68}, {"text": "all of them", "start": 75.68, "duration": 3.68}, {"text": "now let's dig a little bit deeper shall", "start": 76.88, "duration": 5.2}, {"text": "we consider this organization where we", "start": 79.36, "duration": 5.28}, {"text": "have four different processors namely p1", "start": 82.08, "duration": 6.24}, {"text": "p2 b3 and p4 and all these processors", "start": 84.64, "duration": 6.24}, {"text": "they have their own private caches", "start": 88.32, "duration": 4.32}, {"text": "now for the sake of simplification we", "start": 90.88, "duration": 3.76}, {"text": "are considering all of the processors", "start": 92.64, "duration": 4.64}, {"text": "have only one single private cache now", "start": 94.64, "duration": 4.56}, {"text": "as the shared storage we are considering", "start": 97.28, "duration": 3.839}, {"text": "the main memory which is connected with", "start": 99.2, "duration": 3.76}, {"text": "this organization with the help of the", "start": 101.119, "duration": 3.121}, {"text": "system bus", "start": 102.96, "duration": 3.36}, {"text": "additionally all the different private", "start": 104.24, "duration": 3.919}, {"text": "caches they are interconnected with the", "start": 106.32, "duration": 3.759}, {"text": "help of the internal bus", "start": 108.159, "duration": 4.401}, {"text": "now suppose inside the main memory we", "start": 110.079, "duration": 5.201}, {"text": "have a program code which has a global", "start": 112.56, "duration": 4.159}, {"text": "variable a", "start": 115.28, "duration": 4.159}, {"text": "and that has been initialized to 7. now", "start": 116.719, "duration": 5.04}, {"text": "consider a situation where this entire", "start": 119.439, "duration": 5.28}, {"text": "organization will work as an misd that", "start": 121.759, "duration": 5.04}, {"text": "is multiple instruction stream and", "start": 124.719, "duration": 4.721}, {"text": "single data stream organization", "start": 126.799, "duration": 4.401}, {"text": "that means all these different", "start": 129.44, "duration": 4.64}, {"text": "processors will operate on the same data", "start": 131.2, "duration": 4.08}, {"text": "that is a", "start": 134.08, "duration": 3.2}, {"text": "now suppose the processor p1 wants to", "start": 135.28, "duration": 4.8}, {"text": "perform the operation a plus one that", "start": 137.28, "duration": 4.959}, {"text": "means it wants to increment the value of", "start": 140.08, "duration": 3.68}, {"text": "a by one", "start": 142.239, "duration": 4.0}, {"text": "now in order to do so it will first go", "start": 143.76, "duration": 4.8}, {"text": "ahead and look for the value of a inside", "start": 146.239, "duration": 4.881}, {"text": "its own private cache a however since it", "start": 148.56, "duration": 4.959}, {"text": "is the very first access to a it will", "start": 151.12, "duration": 5.52}, {"text": "result in a compulsory miss meaning p1", "start": 153.519, "duration": 5.121}, {"text": "doesn't have the value of a inside its", "start": 156.64, "duration": 4.16}, {"text": "own private cache yet", "start": 158.64, "duration": 4.4}, {"text": "therefore it will go to the next level", "start": 160.8, "duration": 3.92}, {"text": "of the memory hierarchy that is the main", "start": 163.04, "duration": 4.24}, {"text": "memory and bring the value of a from", "start": 164.72, "duration": 6.4}, {"text": "there inside its own private cache", "start": 167.28, "duration": 6.64}, {"text": "now once we have the value of a inside p", "start": 171.12, "duration": 5.119}, {"text": "one's own private cache a now p one can", "start": 173.92, "duration": 4.08}, {"text": "go ahead and perform the operation it", "start": 176.239, "duration": 4.161}, {"text": "wanted to perform that means now p one", "start": 178.0, "duration": 4.64}, {"text": "will increment the value of a by one", "start": 180.4, "duration": 4.4}, {"text": "making a as 8.", "start": 182.64, "duration": 4.239}, {"text": "now suppose p2 wants to perform the", "start": 184.8, "duration": 4.799}, {"text": "operation a plus 2 that means it wants", "start": 186.879, "duration": 5.36}, {"text": "to increment the value of a by 2.", "start": 189.599, "duration": 5.121}, {"text": "however since p2 doesn't have the value", "start": 192.239, "duration": 4.961}, {"text": "of a present inside its own private", "start": 194.72, "duration": 5.519}, {"text": "cache yet therefore it will go ahead and", "start": 197.2, "duration": 5.039}, {"text": "bring the value of a from the main", "start": 200.239, "duration": 5.681}, {"text": "memory into its own private cache", "start": 202.239, "duration": 6.0}, {"text": "now once we have the value of a present", "start": 205.92, "duration": 5.36}, {"text": "inside p2's own private cache p2 can now", "start": 208.239, "duration": 4.881}, {"text": "go ahead and perform the operation it", "start": 211.28, "duration": 4.239}, {"text": "wanted to perform that means now it can", "start": 213.12, "duration": 5.119}, {"text": "increment the value of a by 2 making a", "start": 215.519, "duration": 5.841}, {"text": "as 9. similarly suppose p3 wants to", "start": 218.239, "duration": 6.241}, {"text": "decrement the value of a by 1 therefore", "start": 221.36, "duration": 5.28}, {"text": "it will go ahead and look for the value", "start": 224.48, "duration": 4.16}, {"text": "inside the main memory and bring the", "start": 226.64, "duration": 4.239}, {"text": "value of a from there into its own", "start": 228.64, "duration": 4.799}, {"text": "private cache a and once it has the", "start": 230.879, "duration": 5.041}, {"text": "value of a inside its own private cache", "start": 233.439, "duration": 5.121}, {"text": "now it can decrement the value of a by 1", "start": 235.92, "duration": 5.84}, {"text": "making it 6. and finally suppose p4", "start": 238.56, "duration": 5.679}, {"text": "wants to decrement the value of a by 2", "start": 241.76, "duration": 4.399}, {"text": "it will follow the same drill that means", "start": 244.239, "duration": 3.761}, {"text": "it will bring the value of a from the", "start": 246.159, "duration": 4.8}, {"text": "main memory inside its own private cache", "start": 248.0, "duration": 5.76}, {"text": "and once it has done so it can now go", "start": 250.959, "duration": 6.321}, {"text": "ahead and update the value of a as 5.", "start": 253.76, "duration": 6.08}, {"text": "now if you observe carefully the same", "start": 257.28, "duration": 5.12}, {"text": "variable a has different values in", "start": 259.84, "duration": 4.48}, {"text": "different private caches", "start": 262.4, "duration": 4.4}, {"text": "now this is inconsistency and this", "start": 264.32, "duration": 4.56}, {"text": "particular inconsistent view is referred", "start": 266.8, "duration": 4.88}, {"text": "to as cache coherence problem so", "start": 268.88, "duration": 5.759}, {"text": "basically what is cache coherence", "start": 271.68, "duration": 5.04}, {"text": "it is the uniformity of shared resource", "start": 274.639, "duration": 4.481}, {"text": "data that ends up stored in multiple", "start": 276.72, "duration": 4.96}, {"text": "local caches that means we need to", "start": 279.12, "duration": 4.639}, {"text": "maintain the uniformity and that is", "start": 281.68, "duration": 4.72}, {"text": "exactly cacic coherence now coming to", "start": 283.759, "duration": 4.88}, {"text": "cache coherence problem it is the", "start": 286.4, "duration": 4.079}, {"text": "challenge of keeping multiple local", "start": 288.639, "duration": 4.481}, {"text": "caches synchronized when one of the", "start": 290.479, "duration": 5.041}, {"text": "processors updates its local copy of", "start": 293.12, "duration": 4.88}, {"text": "data which is shared among multiple", "start": 295.52, "duration": 3.52}, {"text": "caches", "start": 298.0, "duration": 3.68}, {"text": "that basically means if we have a shared", "start": 299.04, "duration": 4.32}, {"text": "value in multiple different private", "start": 301.68, "duration": 4.56}, {"text": "caches they need to be synchronized and", "start": 303.36, "duration": 4.559}, {"text": "the challenge is to keep them", "start": 306.24, "duration": 3.92}, {"text": "synchronized and that is basically cache", "start": 307.919, "duration": 4.641}, {"text": "equivalence problem now as a solution to", "start": 310.16, "duration": 4.319}, {"text": "this cache coherence problem we are", "start": 312.56, "duration": 3.84}, {"text": "going to propose some cache coherency", "start": 314.479, "duration": 3.761}, {"text": "protocols that is we will be setting", "start": 316.4, "duration": 3.84}, {"text": "some ground rules so that we can achieve", "start": 318.24, "duration": 4.72}, {"text": "coherency among all the private caches", "start": 320.24, "duration": 4.239}, {"text": "now before getting directly to the", "start": 322.96, "duration": 3.36}, {"text": "protocols let's talk about some", "start": 324.479, "duration": 4.16}, {"text": "associated terminologies now since we", "start": 326.32, "duration": 4.319}, {"text": "are dealing with the caches we already", "start": 328.639, "duration": 4.481}, {"text": "know every cache is logically subdivided", "start": 330.639, "duration": 4.321}, {"text": "into lines or blocks", "start": 333.12, "duration": 4.32}, {"text": "now in order to ensure the coherency we", "start": 334.96, "duration": 4.4}, {"text": "maintain some information within the", "start": 337.44, "duration": 3.92}, {"text": "cache controller and what is the", "start": 339.36, "duration": 4.48}, {"text": "information that we maintain for every", "start": 341.36, "duration": 5.6}, {"text": "cache block we specify some states", "start": 343.84, "duration": 5.44}, {"text": "now one of the states is modified so", "start": 346.96, "duration": 4.32}, {"text": "when we specify that a particular line", "start": 349.28, "duration": 4.72}, {"text": "is in modified state it means that the", "start": 351.28, "duration": 5.44}, {"text": "particular line contains data modified", "start": 354.0, "duration": 4.88}, {"text": "by its own processor and thus is", "start": 356.72, "duration": 4.56}, {"text": "inconsistent with the main memory now", "start": 358.88, "duration": 4.319}, {"text": "coming to the next state that is shared", "start": 361.28, "duration": 4.0}, {"text": "state so when we specify that a", "start": 363.199, "duration": 4.241}, {"text": "particular line is in shared state it", "start": 365.28, "duration": 4.8}, {"text": "means that the line contains unmodified", "start": 367.44, "duration": 5.28}, {"text": "data and thus can appear in at least one", "start": 370.08, "duration": 4.559}, {"text": "of the cpu's caches", "start": 372.72, "duration": 4.0}, {"text": "always remember a memory block can", "start": 374.639, "duration": 5.12}, {"text": "appear in multiple cpu caches only if it", "start": 376.72, "duration": 5.68}, {"text": "is in shared state now the next state is", "start": 379.759, "duration": 5.44}, {"text": "invalid it means that the lines data has", "start": 382.4, "duration": 4.96}, {"text": "been invalidated because some other", "start": 385.199, "duration": 4.801}, {"text": "processor wrote to their cache updating", "start": 387.36, "duration": 4.64}, {"text": "the value which was also shared by this", "start": 390.0, "duration": 4.639}, {"text": "particular line so basically when for", "start": 392.0, "duration": 4.8}, {"text": "the very first time we fed some data", "start": 394.639, "duration": 4.4}, {"text": "from the main memory to our own private", "start": 396.8, "duration": 4.56}, {"text": "cache the state of that particular cache", "start": 399.039, "duration": 4.561}, {"text": "a line is set to shared", "start": 401.36, "duration": 4.88}, {"text": "now if our processor decides to update", "start": 403.6, "duration": 4.8}, {"text": "that particular line's content in that", "start": 406.24, "duration": 4.32}, {"text": "case the state of that particular line", "start": 408.4, "duration": 5.12}, {"text": "will be promoted from shared to modified", "start": 410.56, "duration": 5.039}, {"text": "however if some other processor which", "start": 413.52, "duration": 4.64}, {"text": "was operating on the same data modifies", "start": 415.599, "duration": 5.04}, {"text": "their content prior to our processor in", "start": 418.16, "duration": 4.159}, {"text": "that case in order to ensure the", "start": 420.639, "duration": 4.081}, {"text": "coherency the state of that particular", "start": 422.319, "duration": 4.801}, {"text": "line inside our own cache will be", "start": 424.72, "duration": 5.52}, {"text": "demoted from shared to invalid now apart", "start": 427.12, "duration": 5.28}, {"text": "from these three we can specify some", "start": 430.24, "duration": 4.48}, {"text": "other states for a particular cache line", "start": 432.4, "duration": 4.0}, {"text": "namely exclusive", "start": 434.72, "duration": 3.36}, {"text": "owned and forward", "start": 436.4, "duration": 3.76}, {"text": "now the state exclusive means that the", "start": 438.08, "duration": 3.76}, {"text": "cache line is present only in the", "start": 440.16, "duration": 3.84}, {"text": "current cache and it matches the main", "start": 441.84, "duration": 4.72}, {"text": "memory that means it may be changed to", "start": 444.0, "duration": 4.96}, {"text": "shared state at any time in response to", "start": 446.56, "duration": 5.039}, {"text": "a read request from any other processors", "start": 448.96, "duration": 4.799}, {"text": "now if the state of a particular cache", "start": 451.599, "duration": 4.88}, {"text": "line is specified as owned it means that", "start": 453.759, "duration": 4.72}, {"text": "the cache is the sole owner of that", "start": 456.479, "duration": 4.16}, {"text": "content and will be responsible for", "start": 458.479, "duration": 4.641}, {"text": "satisfying the read requests by all the", "start": 460.639, "duration": 3.84}, {"text": "other processors", "start": 463.12, "duration": 3.6}, {"text": "now coming to the forward state it is a", "start": 464.479, "duration": 5.041}, {"text": "specialized form of the shared state", "start": 466.72, "duration": 4.879}, {"text": "for an instance if a memory block is", "start": 469.52, "duration": 4.48}, {"text": "shared by multiple caches and one of", "start": 471.599, "duration": 4.481}, {"text": "them is in the forward state in that", "start": 474.0, "duration": 4.24}, {"text": "case if the memory block somehow gets", "start": 476.08, "duration": 5.2}, {"text": "updated the cache with the forward state", "start": 478.24, "duration": 4.88}, {"text": "will be responsible for forwarding the", "start": 481.28, "duration": 4.4}, {"text": "updation to all the other caches", "start": 483.12, "duration": 4.16}, {"text": "so these are the states which can be", "start": 485.68, "duration": 3.76}, {"text": "specified for a particular cache line", "start": 487.28, "duration": 4.08}, {"text": "depending upon the protocol that we are", "start": 489.44, "duration": 3.759}, {"text": "following now let's get into the", "start": 491.36, "duration": 4.559}, {"text": "different cache coherency protocols", "start": 493.199, "duration": 5.041}, {"text": "now to be really honest as a solution to", "start": 495.919, "duration": 4.641}, {"text": "the cache coherence problem there exists", "start": 498.24, "duration": 4.799}, {"text": "software-based cache equivalent schemes", "start": 500.56, "duration": 4.88}, {"text": "which rely solely on the compiler and", "start": 503.039, "duration": 4.081}, {"text": "the operating system", "start": 505.44, "duration": 3.759}, {"text": "basically compiler based coherence", "start": 507.12, "duration": 4.479}, {"text": "mechanisms perform analyzes on the codes", "start": 509.199, "duration": 4.801}, {"text": "to determine which data items may become", "start": 511.599, "duration": 5.201}, {"text": "unsafe for caching the operating system", "start": 514.0, "duration": 4.719}, {"text": "then prevents those data items from", "start": 516.8, "duration": 4.32}, {"text": "being cached during runtime", "start": 518.719, "duration": 4.401}, {"text": "nonetheless these are called cache", "start": 521.12, "duration": 5.04}, {"text": "coherence schemes not protocols the", "start": 523.12, "duration": 5.04}, {"text": "hardware based solutions are generally", "start": 526.16, "duration": 5.04}, {"text": "referred to as cache coherency protocols", "start": 528.16, "duration": 5.52}, {"text": "and since we are in the coa course we", "start": 531.2, "duration": 4.48}, {"text": "will mainly focus on the hardware-based", "start": 533.68, "duration": 3.12}, {"text": "solutions", "start": 535.68, "duration": 2.96}, {"text": "additionally the cache coherence", "start": 536.8, "duration": 3.84}, {"text": "protocols demonstrate improves", "start": 538.64, "duration": 3.92}, {"text": "performance over the cache coherence", "start": 540.64, "duration": 2.879}, {"text": "schemes", "start": 542.56, "duration": 2.64}, {"text": "now there are two types of cache", "start": 543.519, "duration": 3.921}, {"text": "coherency protocols the first one is", "start": 545.2, "duration": 4.8}, {"text": "called snooping or burst based protocol", "start": 547.44, "duration": 4.64}, {"text": "now as the name suggests here cache", "start": 550.0, "duration": 4.16}, {"text": "management is done by snooping on the", "start": 552.08, "duration": 5.36}, {"text": "bus at all times that means whenever any", "start": 554.16, "duration": 5.6}, {"text": "processor generates a broadcast request", "start": 557.44, "duration": 4.079}, {"text": "over the shared bus", "start": 559.76, "duration": 3.92}, {"text": "all the other cache controllers will", "start": 561.519, "duration": 4.401}, {"text": "snoop on the bus and accordingly manage", "start": 563.68, "duration": 5.04}, {"text": "their own caches now primarily there are", "start": 565.92, "duration": 4.56}, {"text": "two approaches of snooping based", "start": 568.72, "duration": 4.32}, {"text": "protocol the first one is called write", "start": 570.48, "duration": 5.039}, {"text": "update and the second one is called", "start": 573.04, "duration": 5.12}, {"text": "write invalidate now in write update", "start": 575.519, "duration": 4.961}, {"text": "approach if certain cache a line gets", "start": 578.16, "duration": 5.2}, {"text": "promoted from shared to modified state", "start": 580.48, "duration": 5.52}, {"text": "in that scenario all the other caches", "start": 583.36, "duration": 4.96}, {"text": "which were sharing the same content will", "start": 586.0, "duration": 5.44}, {"text": "be updated parallelly whereas in case of", "start": 588.32, "duration": 5.6}, {"text": "write invalidate in such scenario all", "start": 591.44, "duration": 4.64}, {"text": "the other caches sharing the content", "start": 593.92, "duration": 5.039}, {"text": "will invalidate their own copies", "start": 596.08, "duration": 4.96}, {"text": "now during our session of overview of", "start": 598.959, "duration": 4.801}, {"text": "cache design we came across different", "start": 601.04, "duration": 5.12}, {"text": "right strategies so each of these two", "start": 603.76, "duration": 4.639}, {"text": "approaches can be further subdivided", "start": 606.16, "duration": 4.64}, {"text": "into two more categories based on the", "start": 608.399, "duration": 5.201}, {"text": "right strategy they implement that means", "start": 610.8, "duration": 4.64}, {"text": "the right update can be implemented", "start": 613.6, "duration": 4.0}, {"text": "either using the right through strategy", "start": 615.44, "duration": 4.959}, {"text": "or the write back strategy and the same", "start": 617.6, "duration": 5.6}, {"text": "can be said for writing validate as well", "start": 620.399, "duration": 5.041}, {"text": "so to sum it up there are four", "start": 623.2, "duration": 4.0}, {"text": "approaches of the snooping based", "start": 625.44, "duration": 2.88}, {"text": "protocol", "start": 627.2, "duration": 2.96}, {"text": "write update right through", "start": 628.32, "duration": 4.639}, {"text": "write update right back write invalidate", "start": 630.16, "duration": 5.44}, {"text": "right through and write invalidate right", "start": 632.959, "duration": 3.44}, {"text": "back", "start": 635.6, "duration": 2.64}, {"text": "now the next type of cache coherency", "start": 636.399, "duration": 4.081}, {"text": "protocol is called directory based", "start": 638.24, "duration": 3.36}, {"text": "protocol", "start": 640.48, "duration": 3.12}, {"text": "here a centralized directory is", "start": 641.6, "duration": 4.08}, {"text": "maintained to keep track of the data", "start": 643.6, "duration": 4.32}, {"text": "items along with that for every", "start": 645.68, "duration": 4.32}, {"text": "processor private directories are also", "start": 647.92, "duration": 4.24}, {"text": "maintained which help in achieving", "start": 650.0, "duration": 3.36}, {"text": "coherency", "start": 652.16, "duration": 3.359}, {"text": "the main difference between the snooping", "start": 653.36, "duration": 4.8}, {"text": "and the directory based protocol is in", "start": 655.519, "duration": 5.041}, {"text": "snooping or snoop based protocol", "start": 658.16, "duration": 5.28}, {"text": "broadcast messages are used and the", "start": 660.56, "duration": 5.12}, {"text": "caches are connected through the bus", "start": 663.44, "duration": 5.04}, {"text": "whereas in directory based protocol the", "start": 665.68, "duration": 4.96}, {"text": "nodes are connected using a scalable", "start": 668.48, "duration": 4.16}, {"text": "interconnection network implementing", "start": 670.64, "duration": 3.92}, {"text": "point-to-point communication", "start": 672.64, "duration": 3.68}, {"text": "so these are the basic underlying", "start": 674.56, "duration": 4.399}, {"text": "concepts of these two protocols do", "start": 676.32, "duration": 4.88}, {"text": "always remember that the cache coherency", "start": 678.959, "duration": 4.081}, {"text": "protocols are the hardware based", "start": 681.2, "duration": 3.92}, {"text": "solution to the cache equivalence", "start": 683.04, "duration": 3.52}, {"text": "problem", "start": 685.12, "duration": 3.36}, {"text": "all right people that will be all for", "start": 686.56, "duration": 4.64}, {"text": "this session i hope the concept of cache", "start": 688.48, "duration": 5.28}, {"text": "coherence problem and the basic ideology", "start": 691.2, "duration": 4.72}, {"text": "behind cache coherency protocols are", "start": 693.76, "duration": 4.56}, {"text": "clear to you now in the upcoming session", "start": 695.92, "duration": 4.32}, {"text": "we will be discussing about snooping", "start": 698.32, "duration": 4.72}, {"text": "based protocol in greater details so i", "start": 700.24, "duration": 4.56}, {"text": "hope to see you in the next one thank", "start": 703.04, "duration": 3.81}, {"text": "you all for watching", "start": 704.8, "duration": 2.23}, {"text": "[Music]", "start": 706.85, "duration": 2.35}, {"text": "[Applause]", "start": 707.03, "duration": 10.33}, {"text": "[Music]", "start": 709.2, "duration": 10.24}, {"text": "you", "start": 717.36, "duration": 2.08}]