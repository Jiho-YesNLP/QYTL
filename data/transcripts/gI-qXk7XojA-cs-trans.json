[{"text": "Hi, I\u2019m Carrie Anne and welcome to Crash\nCourse Computer Science!", "start": 3.08, "duration": 3.16}, {"text": "Today we start our journey up the ladder of\nabstraction, where we leave behind the simplicity", "start": 6.25, "duration": 4.67}, {"text": "of being able to see every switch and gear,\nbut gain the ability to assemble increasingly", "start": 10.92, "duration": 4.42}, {"text": "complex systems.", "start": 15.34, "duration": 1.24}, {"text": "INTRO", "start": 16.58, "duration": 8.78}, {"text": "Last episode, we talked about how computers\nevolved from electromechanical devices, that", "start": 25.64, "duration": 4.42}, {"text": "often had decimal representations of numbers\n\u2013 like those represented by teeth on a gear", "start": 30.06, "duration": 5.01}, {"text": "\u2013 to electronic computers with transistors\nthat can turn the flow of electricity on or off.", "start": 35.07, "duration": 4.31}, {"text": "And fortunately, even with just two states\nof electricity, we can represent important information.", "start": 39.44, "duration": 4.66}, {"text": "We call this representation Binary -- which\nliterally means \u201cof two states\u201d, in the", "start": 44.18, "duration": 4.04}, {"text": "same way a bicycle has two wheels or a biped\nhas two legs.", "start": 48.22, "duration": 4.03}, {"text": "You might think two states isn\u2019t a lot to\nwork with, and you\u2019d be right!", "start": 52.25, "duration": 3.42}, {"text": "But, it\u2019s exactly what you need for representing\nthe values \u201ctrue\u201d and \u201cfalse\u201d.", "start": 55.67, "duration": 3.67}, {"text": "In computers, an \u201con\u201d state, when electricity\nis flowing, represents true.", "start": 59.34, "duration": 4.4}, {"text": "The off state, no electricity flowing, represents\nfalse.", "start": 63.74, "duration": 2.979}, {"text": "We can also write binary as 1\u2019s and 0\u2019s\ninstead of true\u2019s and false\u2019s \u2013 they", "start": 66.72, "duration": 3.829}, {"text": "are just different expressions of the same\nsignal \u2013 but we\u2019ll talk more about that in the next episode.", "start": 70.549, "duration": 4.631}, {"text": "Now it is actually possible to use transistors\nfor more than just turning electrical current", "start": 75.34, "duration": 3.96}, {"text": "on and off, and to allow for different levels\nof current.", "start": 79.3, "duration": 3.04}, {"text": "Some early electronic computers were ternary, that's three states, and even quinary, using 5 states.", "start": 82.34, "duration": 4.96}, {"text": "The problem is, the more intermediate states\nthere are, the harder it is to keep them all", "start": 87.34, "duration": 3.98}, {"text": "seperate -- if your smartphone battery starts\nrunning low or there\u2019s electrical noise", "start": 91.32, "duration": 4.02}, {"text": "because someone's running a microwave nearby,\nthe signals can get mixed up... and this problem", "start": 95.359, "duration": 4.521}, {"text": "only gets worse with transistors changing\nstates millions of times per second!", "start": 99.88, "duration": 4.009}, {"text": "So, placing two signals as far apart as possible\n- using just \u2018on and off\u2019 - gives us the", "start": 103.889, "duration": 4.61}, {"text": "most distinct signal to minimize these issues.", "start": 108.5, "duration": 2.5}, {"text": "Another reason computers use binary is that\nan entire branch of mathematics already existed", "start": 111.0, "duration": 4.78}, {"text": "that dealt exclusively with true and false\nvalues.", "start": 115.78, "duration": 2.449}, {"text": "And it had figured out all of the necessary\nrules and operations for manipulating them.", "start": 118.229, "duration": 3.731}, {"text": "It's called Boolean Algebra!", "start": 121.96, "duration": 1.62}, {"text": "George Boole, from which Boolean Algebra later got its name, was a self-taught English mathematician in the 1800s.", "start": 123.6, "duration": 5.92}, {"text": "He was interested in representing logical\nstatements that went \u201cunder, over, and beyond\u201d", "start": 129.66, "duration": 4.38}, {"text": "Aristotle\u2019s approach to logic, which was,\nunsurprisingly, grounded in philosophy.", "start": 134.04, "duration": 4.0}, {"text": "Boole\u2019s approach allowed truth to be systematically\nand formally proven, through logic equations", "start": 138.04, "duration": 4.66}, {"text": "which he introduced in his first book, \u201cThe\nMathematical Analysis of Logic\u201d in 1847.", "start": 142.7, "duration": 4.86}, {"text": "In \u201cregular\u201d algebra -- the type you probably\nlearned in high school -- the values of variables", "start": 147.56, "duration": 4.2}, {"text": "are numbers, and operations on those numbers\nare things like addition and multiplication.", "start": 151.769, "duration": 4.761}, {"text": "But in Boolean Algebra, the values of variables are true and false, and the operations are logical.", "start": 156.53, "duration": 5.29}, {"text": "There are three fundamental operations\nin Boolean Algebra: a NOT, an AND, and an OR operation.", "start": 161.82, "duration": 5.94}, {"text": "And these operations turn out to be really\nuseful so we\u2019re going to look at them individually.", "start": 167.78, "duration": 3.62}, {"text": "A NOT takes a single boolean value, either\ntrue or false, and negates it.", "start": 171.4, "duration": 4.4}, {"text": "It flips true to false, and false to true.", "start": 175.86, "duration": 2.2}, {"text": "We can write out a little logic table that\nshows the original value under Input, and", "start": 178.06, "duration": 3.82}, {"text": "the outcome after applying the operation under\nOutput.", "start": 181.89, "duration": 2.9}, {"text": "Now here\u2019s the cool part -- we can easily\nbuild boolean logic out of transistors.", "start": 184.79, "duration": 4.179}, {"text": "As we discussed last episode, transistors\nare really just little electrically controlled switches.", "start": 188.969, "duration": 4.631}, {"text": "They have three wires: two electrodes and\none control wire.", "start": 193.64, "duration": 3.18}, {"text": "When you apply electricity to the control\nwire, it lets current flow through from one", "start": 196.82, "duration": 4.479}, {"text": "electrode, through the transistor, to the\nother electrode.", "start": 201.3, "duration": 3.169}, {"text": "This is a lot like a spigot on a pipe -- open\nthe tap, water flows, close the tap, water shuts off.", "start": 204.469, "duration": 5.131}, {"text": "You can think of the control wire as an input, and the wire coming from the bottom electrode as the output.", "start": 209.64, "duration": 5.22}, {"text": "So with a single transistor, we have one input\nand one output.", "start": 214.86, "duration": 3.48}, {"text": "If we turn the input on, the output is also\non because the current can flow through it.", "start": 218.359, "duration": 4.291}, {"text": "If we turn the input off, the output is also\noff and the current can no longer pass through.", "start": 222.65, "duration": 4.349}, {"text": "Or in boolean terms, when the input is true,\nthe output is true.", "start": 226.999, "duration": 3.411}, {"text": "And when the input is false, the output is\nalso false.", "start": 230.41, "duration": 2.82}, {"text": "Which again we can show on a logic table.", "start": 233.23, "duration": 2.099}, {"text": "This isn\u2019t a very exciting circuit though\nbecause its not doing anything -- the input", "start": 235.329, "duration": 3.58}, {"text": "and output are the same.", "start": 238.909, "duration": 1.271}, {"text": "But, we can modify this circuit just a little\nbit to create a NOT.", "start": 240.18, "duration": 3.5}, {"text": "Instead of having the output wire at the end\nof the transistor, we can move it before.", "start": 243.68, "duration": 3.88}, {"text": "If we turn the input on, the transistor allows\ncurrent to pass through it to the \u201cground\u201d,", "start": 247.56, "duration": 3.62}, {"text": "and the output wire won\u2019t receive that current\n- so it will be off.", "start": 251.18, "duration": 2.85}, {"text": "In our water metaphor grounding would be like\nif all the water in your house was flowing", "start": 254.03, "duration": 3.9}, {"text": "out of a huge hose so there wasn\u2019t any water\npressure left for your shower.", "start": 257.93, "duration": 3.35}, {"text": "So in this case if the input is on, output\nis off.", "start": 261.28, "duration": 3.04}, {"text": "When we turn off the transistor, though, current\nis prevented from flowing down it to the", "start": 264.32, "duration": 3.98}, {"text": "ground, so instead, current flows through\nthe output wire.", "start": 268.3, "duration": 3.2}, {"text": "So the input will be off and the output will\nbe on.", "start": 271.5, "duration": 2.7}, {"text": "And this matches our logic table for NOT,\nso congrats, we just built a circuit that computes NOT!", "start": 274.2, "duration": 4.62}, {"text": "We call them NOT gates - we call them gates because they\u2019re controlling the path of our current.", "start": 278.86, "duration": 4.78}, {"text": "The AND Boolean operation takes two inputs,\nbut still has a single output.", "start": 283.64, "duration": 4.58}, {"text": "In this case the output is only true if both\ninputs are true.", "start": 288.22, "duration": 3.22}, {"text": "Think about it like telling the truth.", "start": 291.449, "duration": 1.551}, {"text": "You\u2019re only being completely honest if you\ndon\u2019t lie even a little.", "start": 293.0, "duration": 3.009}, {"text": "For example, let\u2019s take the statement, \u201cMy\nname is Carrie Anne AND I\u2019m wearing a blue dress\".", "start": 296.009, "duration": 5.211}, {"text": "Both of those facts are true, so the whole\nstatement is true.", "start": 301.28, "duration": 2.36}, {"text": "But if I said, \u201cMy name is Carrie Anne AND\nI\u2019m wearing pants\u201d that would be false,", "start": 303.64, "duration": 4.42}, {"text": "because I\u2019m not wearing pants.", "start": 308.069, "duration": 1.63}, {"text": "Or trousers.", "start": 309.699, "duration": 1.231}, {"text": "If you\u2019re in England.", "start": 310.93, "duration": 1.019}, {"text": "The Carrie Anne part is true, but a true AND\na false, is still false.", "start": 311.949, "duration": 3.97}, {"text": "If I were to reverse that statement it would\nstill obviously be false, and if I were to", "start": 315.919, "duration": 3.87}, {"text": "tell you two complete lies that is also false,\nand again we can write all of these combinations", "start": 319.789, "duration": 4.741}, {"text": "out in a table.", "start": 324.53, "duration": 1.02}, {"text": "To build an AND gate, we need two transistors\nconnected together so we have our two inputs", "start": 325.55, "duration": 5.03}, {"text": "and one output.", "start": 330.58, "duration": 1.2}, {"text": "If we turn on just transistor A, current\nwon\u2019t flow because the current is stopped by transistor B.", "start": 331.78, "duration": 4.92}, {"text": "Alternatively, if transistor\nB is on, but the transistor A is off,", "start": 336.7, "duration": 3.38}, {"text": "the same thing, the current can\u2019t get through.", "start": 340.16, "duration": 1.62}, {"text": "Only if transistor A AND transistor B are\non does the output wire have current.", "start": 341.84, "duration": 4.9}, {"text": "The last boolean operation is OR -- where\nonly one input has to be true for the output to be true.", "start": 346.74, "duration": 5.12}, {"text": "For example, my name is Margaret Hamilton OR I\u2019m wearing a blue dress.", "start": 351.96, "duration": 3.84}, {"text": "This is a true statement because although\nI\u2019m not Margaret Hamilton unfortunately,", "start": 355.8, "duration": 3.76}, {"text": "I am wearing a blue dress, so the overall\nstatement is true.", "start": 359.56, "duration": 3.38}, {"text": "An OR statement is also true if both facts are true.", "start": 362.94, "duration": 3.36}, {"text": "The only time an OR statement is false is\nif both inputs are false.", "start": 366.32, "duration": 3.33}, {"text": "Building an OR gate from transistors needs a few extra wires.", "start": 369.65, "duration": 3.21}, {"text": "Instead of having two transistors in series\n-- one after the other -- we have them in parallel.", "start": 372.86, "duration": 4.66}, {"text": "We run wires from the current source to\nboth transistors.", "start": 377.56, "duration": 2.9}, {"text": "We use this little arc to note that the\nwires jump over one another and aren\u2019t connected,", "start": 380.479, "duration": 4.461}, {"text": "even though they look like they cross.", "start": 384.94, "duration": 1.34}, {"text": "If both transistors are turned off, the\ncurrent is prevented from flowing to the output,", "start": 386.28, "duration": 4.629}, {"text": "so the output is also off.", "start": 390.909, "duration": 1.371}, {"text": "Now, if we turn on just Transistor A, current\ncan flow to the output.", "start": 392.28, "duration": 4.129}, {"text": "Same thing if transistor A is off, but Transistor B in on.", "start": 396.409, "duration": 3.471}, {"text": "Basically if A OR B is on, the output is also on.", "start": 399.88, "duration": 4.02}, {"text": "Also, if both transistors are on, the output is still on.", "start": 403.9, "duration": 3.76}, {"text": "Ok, now that we\u2019ve got NOT, AND, and OR\ngates, and we can leave behind the constituent", "start": 407.66, "duration": 4.469}, {"text": "transistors and move up a layer of abstraction.", "start": 412.129, "duration": 2.151}, {"text": "The standard engineers use for these gates are a triangle with a dot for a NOT,", "start": 414.28, "duration": 4.12}, {"text": "a D for the AND, and a spaceship for the OR.", "start": 418.4, "duration": 2.8}, {"text": "Those aren\u2019t the official names, but that's howI like to think of them.", "start": 421.2, "duration": 2.44}, {"text": "Representing them and thinking about them\nthis way allows us to build even bigger components", "start": 423.64, "duration": 3.88}, {"text": "while keeping the overall complexity relatively\nthe same - just remember that that mess of", "start": 427.53, "duration": 4.41}, {"text": "transistors and wires is still there.", "start": 431.949, "duration": 1.961}, {"text": "For example, another useful boolean operation in computation is called an Exclusive OR - or XOR for short.", "start": 433.91, "duration": 6.47}, {"text": "XOR is like a regular OR, but with one difference:\nif both inputs are true, the XOR is false.", "start": 440.5, "duration": 6.25}, {"text": "The only time an XOR is true is when one input\nis true and the other input is false.", "start": 446.75, "duration": 4.35}, {"text": "It\u2019s like when you go out to dinner and\nyour meal comes with a side salad OR a soup", "start": 451.1, "duration": 3.909}, {"text": "\u2013 sadly, you can\u2019t have both!", "start": 455.009, "duration": 1.701}, {"text": "And building this from transistors is pretty\nconfusing, but we can show how an XOR is created", "start": 456.71, "duration": 4.31}, {"text": "from our three basic boolean gates.", "start": 461.02, "duration": 2.02}, {"text": "We know we have two inputs again -- A and B -- and one output.", "start": 463.04, "duration": 3.2}, {"text": "Let\u2019s start with an OR gate, since the\nlogic table looks almost identical to an OR.", "start": 466.24, "duration": 4.46}, {"text": "There\u2019s only one problem - when A and\nB are true, the logic is different from OR,", "start": 470.7, "duration": 4.5}, {"text": "and we need to output \u201cfalse\u201d.", "start": 475.21, "duration": 1.609}, {"text": "To do this we need to add some additional gates.", "start": 476.819, "duration": 2.181}, {"text": "If we add an AND gate, and the input is\ntrue and true, the output will be true.", "start": 479.0, "duration": 4.43}, {"text": "This isn\u2019t what we want.", "start": 483.43, "duration": 1.0}, {"text": "But if we add a NOT immediately after this will flip it to false.", "start": 484.43, "duration": 3.51}, {"text": "Okay, now if we add a final AND gate and send\nit that value along with the output of our", "start": 488.06, "duration": 5.419}, {"text": "original OR gate, the AND will take in \u201cfalse\u201d\nand \u201ctrue\u201d, and since AND needs both values", "start": 493.479, "duration": 5.571}, {"text": "to be true, its output is false.", "start": 499.05, "duration": 2.01}, {"text": "That\u2019s the first row of our logic table.", "start": 501.06, "duration": 1.759}, {"text": "If we work through the remaining input\ncombinations, we can see this boolean logic", "start": 502.819, "duration": 3.671}, {"text": "circuit does implement an Exclusive OR.", "start": 506.49, "duration": 2.38}, {"text": "And XOR turns out to be a very useful component, and we\u2019ll get to it in another episode,", "start": 508.87, "duration": 4.22}, {"text": "so useful in fact engineers gave it its own\nsymbol too -- an OR gate with a smile :)", "start": 513.09, "duration": 5.15}, {"text": "But most importantly, we can now put XOR into our metaphorical toolbox and not have to worry", "start": 518.24, "duration": 4.09}, {"text": "about the individual logic gates that make\nit up, or the transistors that make up those gates,", "start": 522.33, "duration": 4.17}, {"text": "or how electrons are flowing through\na semiconductor.", "start": 526.5, "duration": 2.7}, {"text": "Moving up another layer of abstraction.", "start": 529.2, "duration": 2.1}, {"text": "When computer engineers are designing processors,\nthey rarely work at the transistor level,", "start": 531.31, "duration": 3.73}, {"text": "and instead work with much larger blocks,\nlike logic gates, and even larger components", "start": 535.04, "duration": 4.06}, {"text": "made up of logic gates, which we\u2019ll discuss\nin future episodes.", "start": 539.1, "duration": 3.24}, {"text": "And even if you are a professional computer\nprogrammer, it\u2019s not often that you think", "start": 542.34, "duration": 3.471}, {"text": "about how the logic that you are programming is actually implemented in the physical world", "start": 545.811, "duration": 3.899}, {"text": "by these teeny tiny components.", "start": 549.71, "duration": 2.01}, {"text": "We\u2019ve also moved from thinking about raw\nelectrical signals to our first representation", "start": 551.72, "duration": 4.06}, {"text": "of data - true and false - and we\u2019ve even\ngotten a little taste of computation.", "start": 555.78, "duration": 4.49}, {"text": "With just the logic gates in this episode,\nwe could build a machine that evaluates complex logic statements,", "start": 560.27, "duration": 5.05}, {"text": "like if \u201cName is John Green AND after 5pm OR is Weekend", "start": 565.32, "duration": 4.16}, {"text": "AND near Pizza Hut\u201d, then \u201cJohn will want pizza\u201d equals true.", "start": 569.48, "duration": 3.62}, {"text": "And with that, I'm starving, I'll see you next week.", "start": 573.12, "duration": 2.96}]