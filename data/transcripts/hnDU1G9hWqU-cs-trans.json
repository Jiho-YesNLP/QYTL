[{"text": "[MUSIC PLAYING]", "start": 0.0, "duration": 3.992}, {"text": "DAVID MALAN: This is CS50\nand this is lecture 6.", "start": 50.49, "duration": 3.33}, {"text": "And you'll recall that last week\nwe introduced web programming", "start": 53.82, "duration": 2.67}, {"text": "by way of HTML and CSS, or\nat least the building blocks", "start": 56.49, "duration": 2.384}, {"text": "because we don't actually have\nthe ability to program yet.", "start": 58.874, "duration": 2.416}, {"text": "It's just markup, HTML and\nCSS with stylization thereof.", "start": 61.29, "duration": 3.61}, {"text": "But we introduced this metaphor last\nweek of a protocol called TCP/IP.", "start": 64.9, "duration": 3.59}, {"text": "And we related it to,\nof course, an envelope.", "start": 68.49, "duration": 2.29}, {"text": "And on this envelope,\nvirtually, on the front", "start": 70.78, "duration": 1.97}, {"text": "was at least two pieces of information.", "start": 72.75, "duration": 2.04}, {"text": "And if anyone remembers\nwhat were those two", "start": 74.79, "duration": 2.25}, {"text": "pieces of information in the to field?", "start": 77.04, "duration": 2.46}, {"text": "Someone else who we\ndidn't hear from recently?", "start": 79.5, "duration": 2.51}, {"text": "Yeah?", "start": 82.01, "duration": 0.5}, {"text": "AUDIENCE: An IP address.", "start": 82.51, "duration": 0.89}, {"text": "DAVID MALAN: Yeah.", "start": 83.4, "duration": 0.19}, {"text": "An IP address, a numeric address that\nuniquely identifies your computer", "start": 83.59, "duration": 3.14}, {"text": "and someone else's computer.", "start": 86.73, "duration": 1.234}, {"text": "And one other thing, if you remember.", "start": 87.964, "duration": 1.541}, {"text": "Oh, come on.", "start": 92.12, "duration": 0.5}, {"text": "It was like two minutes ago.", "start": 92.62, "duration": 1.24}, {"text": "OK.", "start": 93.86, "duration": 0.24}, {"text": "Yeah.", "start": 94.1, "duration": 0.43}, {"text": "AUDIENCE: A port number.", "start": 94.53, "duration": 0.86}, {"text": "DAVID MALAN: A port number.", "start": 95.39, "duration": 1.125}, {"text": "So another number, shorter number,\nthat's just a number like 80 or 443", "start": 96.515, "duration": 3.905}, {"text": "referring to HTTP or\nHTTPS, or other numbers,", "start": 100.42, "duration": 3.67}, {"text": "like 25 for email and the like.", "start": 104.09, "duration": 1.8}, {"text": "And so together these unique addresses\nallow you to send information", "start": 105.89, "duration": 3.2}, {"text": "to not only a specific\ncomputer, but a specific service", "start": 109.09, "duration": 2.85}, {"text": "running on that computer.", "start": 111.94, "duration": 1.92}, {"text": "And in order to actually request\ninformation from that server,", "start": 113.86, "duration": 3.72}, {"text": "there's this other protocol called\nHTTP, Hypertext Transfer Protocol.", "start": 117.58, "duration": 3.9}, {"text": "This is what's inside of the envelope.", "start": 121.48, "duration": 2.12}, {"text": "So when the server opens\nit up, metaphorically,", "start": 123.6, "duration": 2.53}, {"text": "looks inside, this is the command that\nthat server reads in order to decide", "start": 126.13, "duration": 4.379}, {"text": "what it should actually respond with.", "start": 130.509, "duration": 1.671}, {"text": "And so this request here\nis telling the server--", "start": 132.18, "duration": 3.08}, {"text": "otherwise known as www.example.com\nin this particular example--", "start": 135.26, "duration": 4.07}, {"text": "to send back what exactly\nin its own envelope to me", "start": 139.33, "duration": 4.23}, {"text": "and my laptop if I were to request this?", "start": 143.56, "duration": 4.43}, {"text": "AUDIENCE: A specific web page.", "start": 147.99, "duration": 1.656}, {"text": "DAVID MALAN: A specific web page.", "start": 149.646, "duration": 1.374}, {"text": "And someone else, which web\npage specifically, presumably?", "start": 151.02, "duration": 2.439}, {"text": "AUDIENCE: Index.", "start": 153.459, "duration": 0.666}, {"text": "DAVID MALAN: Yeah, so index.html,\nwhich we said last week", "start": 154.125, "duration": 2.575}, {"text": "just tends to be the default file\nname on a server for a web page", "start": 156.7, "duration": 3.902}, {"text": "that's just selected by default. And\nit doesn't have to be called this,", "start": 160.602, "duration": 2.958}, {"text": "but it's a human convention.", "start": 163.56, "duration": 1.26}, {"text": "And the rest of this is just a verb\nsaying, literally, get me that file.", "start": 164.82, "duration": 3.25}, {"text": "This is just telling the\nserver what version of HTTP", "start": 168.07, "duration": 2.33}, {"text": "I speak so that humans can improve\nit and upgrade it over time.", "start": 170.4, "duration": 4.2}, {"text": "But this would tell the\nserver to return index.html.", "start": 174.6, "duration": 3.06}, {"text": "Meanwhile, we saw more\nsophisticated get queries", "start": 177.66, "duration": 2.82}, {"text": "when we started talking about\nGoogle, and any website that", "start": 180.48, "duration": 3.48}, {"text": "has not just a front end, like\nHTML and CSS, but also a back end.", "start": 183.96, "duration": 3.87}, {"text": "And a back end is where the\nlogic is, where the server is,", "start": 187.83, "duration": 2.49}, {"text": "and the interesting work, ultimately.", "start": 190.32, "duration": 2.53}, {"text": "And so this slash search\nindicates some kind", "start": 192.85, "duration": 2.93}, {"text": "of software running on Google\nservers as of last week", "start": 195.78, "duration": 3.04}, {"text": "that's simply responds to requests.", "start": 198.82, "duration": 1.64}, {"text": "And what did question mark q equals cats\ndo or represent in that demonstration?", "start": 200.46, "duration": 7.28}, {"text": "AUDIENCE: User input.", "start": 207.74, "duration": 0.98}, {"text": "DAVID MALAN: Yeah, user input.", "start": 208.72, "duration": 1.06}, {"text": "So the question mark just says, that's\nit for the file name or the URL.", "start": 209.78, "duration": 3.01}, {"text": "Here comes the user's input.", "start": 212.79, "duration": 1.71}, {"text": "Q is just literally the\nHTTP parameter or input", "start": 214.5, "duration": 3.861}, {"text": "that Larry and Sergey,\nfounders of Google,", "start": 218.361, "duration": 1.749}, {"text": "20 years ago decided would represent\nthe user's input, q for query.", "start": 220.11, "duration": 4.23}, {"text": "Equal just means that query that\nthe human typed in was cats.", "start": 224.34, "duration": 2.891}, {"text": "But the human doesn't\neven have to type this in.", "start": 227.231, "duration": 1.999}, {"text": "Once you understand HTTP, if you\nreally wanted to be kind of a nerd,", "start": 229.23, "duration": 4.02}, {"text": "you could go to\nwww.google.com/search?q=cats and it", "start": 233.25, "duration": 5.137}, {"text": "would induce the search for you\nbecause at the end of the day,", "start": 238.387, "duration": 2.583}, {"text": "that's all the browser is doing.", "start": 240.97, "duration": 1.754}, {"text": "When you have these web forms that\nyou now have the ability to create,", "start": 242.724, "duration": 2.916}, {"text": "it's just automating the process\nof generating these HTTP messages.", "start": 245.64, "duration": 4.17}, {"text": "Now, the server hopefully responds with\na message you never, ever actually see,", "start": 249.81, "duration": 4.01}, {"text": "HTTP 200, which literally means OK.", "start": 253.82, "duration": 3.19}, {"text": "Of course, many of us have seen numbers\nother than 200 appear, like what?", "start": 257.01, "duration": 5.19}, {"text": "404, which means?", "start": 262.2, "duration": 2.25}, {"text": "File not found.", "start": 264.45, "duration": 0.96}, {"text": "Now, why the humans\ndecided years ago to tell", "start": 265.41, "duration": 3.57}, {"text": "other humans what that\nnumeric code is, I mean,", "start": 268.98, "duration": 2.46}, {"text": "that is an uninteresting detail.", "start": 271.44, "duration": 1.56}, {"text": "But the world, for whatever reason,\nhas revealed in many web sites 404.", "start": 273.0, "duration": 3.66}, {"text": "But it just means the same thing.", "start": 276.66, "duration": 1.41}, {"text": "Everything is not OK.", "start": 278.07, "duration": 1.38}, {"text": "A file was not found.", "start": 279.45, "duration": 1.165}, {"text": "You might see something else like this.", "start": 280.615, "duration": 1.625}, {"text": "We saw this with Harvard,\nin fact, curiously,", "start": 282.24, "duration": 2.49}, {"text": "that Harvard had moved permanently.", "start": 284.73, "duration": 2.05}, {"text": "Now, Harvard was responding to\ncertain queries with HTTP 301s", "start": 286.78, "duration": 5.0}, {"text": "in order to achieve\nwhat feature or effect?", "start": 291.78, "duration": 3.83}, {"text": "Why?", "start": 295.61, "duration": 0.5}, {"text": "Yeah.", "start": 296.11, "duration": 0.562}, {"text": "AUDIENCE: Redirections.", "start": 296.672, "duration": 0.958}, {"text": "DAVID MALAN: Redirections.", "start": 297.63, "duration": 0.77}, {"text": "So this is kind of a low-level\nway of describing it.", "start": 298.4, "duration": 2.29}, {"text": "But 301, even though it\nsays moved permanently,", "start": 300.69, "duration": 2.46}, {"text": "that's a more technical\nhint to the browser saying,", "start": 303.15, "duration": 2.18}, {"text": "Harvard moved not to whatever\nURL you just came from,", "start": 305.33, "duration": 3.09}, {"text": "but to this URL specifically.", "start": 308.42, "duration": 2.02}, {"text": "And now Harvard was probably, if you\nrecall, redirecting me from what URL?", "start": 310.44, "duration": 3.56}, {"text": "If I wasn't already at that\nURL, where might I have been?", "start": 314.0, "duration": 5.01}, {"text": "Maybe dot com, if they actually own\nmultiple domains and were redirecting.", "start": 319.01, "duration": 3.44}, {"text": "That could work.", "start": 322.45, "duration": 0.96}, {"text": "What else?", "start": 323.41, "duration": 0.52}, {"text": "Yeah.", "start": 323.93, "duration": 1.14}, {"text": "AUDIENCE: Just HTTP.", "start": 325.07, "duration": 0.95}, {"text": "DAVID MALAN: Yeah.", "start": 326.02, "duration": 0.75}, {"text": "Maybe I just typed in HTTP, and\nHarvard, in the interest of security,", "start": 326.77, "duration": 3.48}, {"text": "wants to force my browser to\nrequest this page again via HTTPS.", "start": 330.25, "duration": 6.36}, {"text": "Sometimes a website might prepend\nthe www if you haven't typed it in,", "start": 336.61, "duration": 3.88}, {"text": "or you can be redirected most anywhere.", "start": 340.49, "duration": 2.15}, {"text": "In fact, if you go to CS50's own\nwebsite by just typing CS50.harvard.edu,", "start": 342.64, "duration": 4.38}, {"text": "watch the URL.", "start": 347.02, "duration": 0.87}, {"text": "You'll be redirected to a more specific\npage, depending on the time of year.", "start": 347.89, "duration": 4.1}, {"text": "So we use these tricks, as well.", "start": 351.99, "duration": 1.81}, {"text": "404 not found might look\nlike this, but inside deeper", "start": 353.8, "duration": 2.925}, {"text": "of that metaphorical envelope is\nthe actual contents of the web page.", "start": 356.725, "duration": 3.905}, {"text": "So you get back not\nonly these HTTP headers,", "start": 360.63, "duration": 2.56}, {"text": "as they're called, in the top\nof the response, so to speak,", "start": 363.19, "duration": 2.97}, {"text": "but you also get back HTML, yet\nanother language we looked at,", "start": 366.16, "duration": 4.59}, {"text": "this one actually a language,\nbut not a programming language.", "start": 370.75, "duration": 2.73}, {"text": "These tags tell the browser\nexactly what to do and to render.", "start": 373.48, "duration": 3.96}, {"text": "We introduced this style tag, though.", "start": 377.44, "duration": 2.04}, {"text": "What did that allow us to\ndo that HTML alone did not?", "start": 379.48, "duration": 2.7}, {"text": "Yeah.", "start": 387.77, "duration": 1.26}, {"text": "Use CSS to beautify the\nsite and just make it nicer.", "start": 389.03, "duration": 2.59}, {"text": "HTML, for the most\npart, is about structure", "start": 391.62, "duration": 2.42}, {"text": "and about tagging the contents\nof your web page in a way", "start": 394.04, "duration": 3.36}, {"text": "that the browser finds helpful.", "start": 397.4, "duration": 1.53}, {"text": "But CSS is really for the user's\nbenefit, at the end of the day,", "start": 398.93, "duration": 2.88}, {"text": "and his or her eyes,\nbecause it really lets", "start": 401.81, "duration": 1.83}, {"text": "you control font size and\npositioning and lower-level stuff", "start": 403.64, "duration": 2.474}, {"text": "that you might have started tinkering\nwith with the most recent problem set.", "start": 406.114, "duration": 3.166}, {"text": "Now, we'd proposed that\nyou probably shouldn't just", "start": 409.28, "duration": 2.31}, {"text": "start typing CSS inside\nof your HTML page", "start": 411.59, "duration": 3.371}, {"text": "because it's just a little harder\nto maintain as your examples get", "start": 414.961, "duration": 2.749}, {"text": "more sophisticated.", "start": 417.71, "duration": 1.02}, {"text": "So you might factor it out.", "start": 418.73, "duration": 1.26}, {"text": "And odds are you did\nthis for the problem", "start": 419.99, "duration": 1.708}, {"text": "set because when making a home\npage, if you have the same CSS", "start": 421.698, "duration": 2.732}, {"text": "styles across multiple files, it would\nbe pretty silly and inefficient to copy", "start": 424.43, "duration": 4.02}, {"text": "and paste them again and again when\nyou can factor them out like this.", "start": 428.45, "duration": 3.28}, {"text": "Lastly, we looked at\nJavaScript, last time,", "start": 431.73, "duration": 2.36}, {"text": "another programming language\nthat's super similar", "start": 434.09, "duration": 2.37}, {"text": "to see, at least at first glance.", "start": 436.46, "duration": 1.794}, {"text": "But it actually gets rid\nof a lot of the lower level", "start": 438.254, "duration": 2.166}, {"text": "headaches like pointers and\nmemory addresses and that", "start": 440.42, "duration": 2.57}, {"text": "that we've struggled\nwith in recent weeks.", "start": 442.99, "duration": 1.75}, {"text": "But most important was how we used it.", "start": 444.74, "duration": 2.49}, {"text": "So you can consider a web page like\nthis as once it's loaded by your browser", "start": 447.23, "duration": 4.23}, {"text": "as just being a tree structure.", "start": 451.46, "duration": 1.427}, {"text": "Thinking back a couple of weeks to\nour discussion of data structures", "start": 452.887, "duration": 2.833}, {"text": "and each of these nodes in the tree we\nsaw in JavaScript can be manipulated.", "start": 455.72, "duration": 4.86}, {"text": "And via that very simple\nprinciple, writing", "start": 460.58, "duration": 2.46}, {"text": "code that modifies this existing\ntree in the browser's memory,", "start": 463.04, "duration": 4.95}, {"text": "means you can make much more dynamic\nthings like Gmail and Facebook", "start": 467.99, "duration": 3.39}, {"text": "and any number of websites\nthat are constantly changing.", "start": 471.38, "duration": 2.5}, {"text": "You did not do this yet\nfor the problems set.", "start": 473.88, "duration": 1.874}, {"text": "You made static web pages just\nby hard coding HTML and CSS.", "start": 475.754, "duration": 3.576}, {"text": "But starting next week, once we have,\nthanks to this week, the vocabulary", "start": 479.33, "duration": 3.09}, {"text": "of Python will you start\nto make things more dynamic", "start": 482.42, "duration": 2.49}, {"text": "and then even bring back\ninto play JavaScript,", "start": 484.91, "duration": 2.76}, {"text": "bringing all of these\nvarious threads together.", "start": 487.67, "duration": 3.482}, {"text": "And to include the JavaScript, recall,\nwe used either a script tag at the top", "start": 491.152, "duration": 3.208}, {"text": "or refactored it out to a file.", "start": 494.36, "duration": 1.65}, {"text": "Or in some cases, it's\nnecessary or beneficial", "start": 496.01, "duration": 2.61}, {"text": "to move it down to the bottom of\nthe file or factor it out like that,", "start": 498.62, "duration": 3.93}, {"text": "but more on that down the road.", "start": 502.55, "duration": 2.13}, {"text": "So any questions on last week or\non HTTP, HTML, CSS, or TCP/IP?", "start": 504.68, "duration": 7.92}, {"text": "No?", "start": 512.6, "duration": 0.73}, {"text": "Anything at all?", "start": 513.33, "duration": 2.2}, {"text": "Oh, yeah?", "start": 515.53, "duration": 0.616}, {"text": "AUDIENCE: So in what case\nwould you put the script", "start": 516.146, "duration": 2.083}, {"text": "tag up at the top [INAUDIBLE]", "start": 518.229, "duration": 2.996}, {"text": "DAVID MALAN: Good question.", "start": 521.225, "duration": 1.125}, {"text": "So in what cases would you put\nthe script tag up at the top", "start": 522.35, "duration": 2.458}, {"text": "versus at the bottom?", "start": 524.808, "duration": 1.162}, {"text": "If the code you're writing\nin JavaScript manipulates", "start": 525.97, "duration": 3.12}, {"text": "the DOM, the tree that I had on\nthe screen just a moment ago,", "start": 529.09, "duration": 3.42}, {"text": "the catch is that that tree needs\nto exist when your code is executed.", "start": 532.51, "duration": 4.35}, {"text": "So if you, for instance, have JavaScript\ncode up here in the head of your page,", "start": 536.86, "duration": 4.47}, {"text": "but the nodes in the\ntree, the tags that you", "start": 541.33, "duration": 3.24}, {"text": "want to manipulate in changing\nthings to red to green to blue", "start": 544.57, "duration": 2.79}, {"text": "like we did last week, or making things\nblank, are down here in the page,", "start": 547.36, "duration": 3.66}, {"text": "you can't write your code up here\nand have it change things in the page", "start": 551.02, "duration": 3.57}, {"text": "down here because it's\nhappening out of order.", "start": 554.59, "duration": 2.19}, {"text": "So similar in spirit to C where things\nhave to happen in the right order,", "start": 556.78, "duration": 3.33}, {"text": "if you want to change\nsomething down here,", "start": 560.11, "duration": 2.01}, {"text": "your code needs to at\nleast be down here,", "start": 562.12, "duration": 3.36}, {"text": "or you need to use some\nfancier techniques to say,", "start": 565.48, "duration": 2.95}, {"text": "I'm going to write my code up\nhere but wait a few seconds", "start": 568.43, "duration": 2.69}, {"text": "before executing it until\nthe whole webpage is loaded.", "start": 571.12, "duration": 3.004}, {"text": "So for most of the examples we\nlooked at, this was not an issue.", "start": 574.124, "duration": 2.666}, {"text": "But we'll come back to\nthis perhaps before long.", "start": 576.79, "duration": 2.67}, {"text": "All right, so let's now\ntake the same approach", "start": 579.46, "duration": 2.64}, {"text": "that we did last time of introducing\none language by way of another.", "start": 582.1, "duration": 3.319}, {"text": "You'll recall, of course, that we\nstarted the whole semester with Scratch", "start": 585.419, "duration": 3.041}, {"text": "and then we transitioned a few\nweeks back now to C. Last week", "start": 588.46, "duration": 2.55}, {"text": "we made some comparisons\nwith JavaScript.", "start": 591.01, "duration": 1.77}, {"text": "Let's do the same thing\nbriefly with Python", "start": 592.78, "duration": 2.04}, {"text": "but then spend more time at the\nkeyboard comparing the two to see", "start": 594.82, "duration": 2.97}, {"text": "what actually is different about these.", "start": 597.79, "duration": 2.64}, {"text": "So why in another\nlanguage, though, first?", "start": 600.43, "duration": 1.92}, {"text": "We have Scratch, C, JavaScript,\nPython, not to mention HTML and CSS", "start": 602.35, "duration": 5.55}, {"text": "for different purposes.", "start": 607.9, "duration": 1.11}, {"text": "Like, why do we have all of\nthese darn languages already?", "start": 609.01, "duration": 2.88}, {"text": "Why didn't humans just decide,\nthat's it, we're all using Scratch?", "start": 611.89, "duration": 4.14}, {"text": "We're all using C or\nJavaScript or Python?", "start": 616.03, "duration": 3.69}, {"text": "What's, perhaps, the\nintuition behind that?", "start": 619.72, "duration": 4.21}, {"text": "Why are there so many damn languages,\nnot to mention in this one course?", "start": 623.93, "duration": 3.52}, {"text": "Yeah?", "start": 627.45, "duration": 0.673}, {"text": "AUDIENCE: [INAUDIBLE]", "start": 628.123, "duration": 1.802}, {"text": "DAVID MALAN: Say once more?", "start": 629.925, "duration": 1.125}, {"text": "AUDIENCE: Different ones are\ngood for different things.", "start": 631.05, "duration": 1.72}, {"text": "DAVID MALAN: Yeah, different ones\nare good for different things.", "start": 632.77, "duration": 1.77}, {"text": "And this probably goes without saying\nfor something like Scratch, right?", "start": 634.54, "duration": 2.31}, {"text": "It's so visual.", "start": 636.85, "duration": 0.72}, {"text": "It's so graphical and animated.", "start": 637.57, "duration": 1.77}, {"text": "It makes sense that the puzzle pieces--", "start": 639.34, "duration": 1.782}, {"text": "or that the language itself\nis based on puzzle pieces", "start": 641.122, "duration": 2.208}, {"text": "and dragging and dropping.", "start": 643.33, "duration": 1.39}, {"text": "So maybe languages are tailored\nto certain applications.", "start": 644.72, "duration": 2.69}, {"text": "But is that true for C,\nPython, and JavaScript, which", "start": 647.41, "duration": 4.14}, {"text": "are all text-based languages we'll see?", "start": 651.55, "duration": 2.94}, {"text": "AUDIENCE: [INAUDIBLE]\nfor example, they're", "start": 654.49, "duration": 2.82}, {"text": "different levels of abstraction.", "start": 657.31, "duration": 1.42}, {"text": "DAVID MALAN: OK.", "start": 658.73, "duration": 0.666}, {"text": "Different levels of abstraction.", "start": 659.396, "duration": 1.611}, {"text": "AUDIENCE: C is very [INAUDIBLE] actually\ndealing with a lot of things that you", "start": 661.007, "duration": 5.467}, {"text": "don't have to think about in Python--", "start": 666.474, "duration": 2.486}, {"text": "DAVID MALAN: Good.", "start": 668.96, "duration": 1.206}, {"text": "AUDIENCE: --where these sort of\nthings are taken care of for you,", "start": 670.166, "duration": 3.984}, {"text": "such as memory allocations and so on.", "start": 674.15, "duration": 3.984}, {"text": "And so depending on what level of\nabstraction you want to work on", "start": 678.134, "duration": 4.376}, {"text": "and what parts you want to manipulate.", "start": 682.51, "duration": 2.044}, {"text": "DAVID MALAN: OK, good.", "start": 684.554, "duration": 0.916}, {"text": "Bringing it back to\nabstraction does make sense.", "start": 685.47, "duration": 1.999}, {"text": "C is, indeed, very low level, literally\nhaving the ability to manipulate memory", "start": 687.469, "duration": 4.001}, {"text": "and via pointers and so forth.", "start": 691.47, "duration": 1.39}, {"text": "And that's great because you can do\nanything you want with the computer.", "start": 692.86, "duration": 2.6}, {"text": "But it comes at great\nrisk and great cost.", "start": 695.46, "duration": 1.83}, {"text": "One, the cost is human time.", "start": 697.29, "duration": 1.77}, {"text": "It's just painful to write\nthat kind of code sometimes.", "start": 699.06, "duration": 2.88}, {"text": "Two, it's also very risky because if you\nmake a mistake, even a simple mistake,", "start": 701.94, "duration": 6.27}, {"text": "the whole computer can crash.", "start": 708.21, "duration": 1.47}, {"text": "And we didn't see\nexamples of this, but you", "start": 709.68, "duration": 1.791}, {"text": "can make your code\nvulnerable to a hacker", "start": 711.471, "duration": 1.869}, {"text": "if he or she is able to somehow\nexploit a memory-related bug", "start": 713.34, "duration": 2.934}, {"text": "and read all of the passwords in\nyour program, or something like that.", "start": 716.274, "duration": 2.916}, {"text": "So with great power comes\ngreat responsibility", "start": 719.19, "duration": 2.31}, {"text": "is kind of the mantra of C down here.", "start": 721.5, "duration": 2.13}, {"text": "But JavaScript we saw allows us to\ndo things a little more high-level.", "start": 723.63, "duration": 3.512}, {"text": "There were no pointers.", "start": 727.142, "duration": 0.958}, {"text": "There was no memory.", "start": 728.1, "duration": 0.81}, {"text": "We didn't talk about\nthings at that level.", "start": 728.91, "duration": 1.74}, {"text": "We talked about things\nat the level of a tree,", "start": 730.65, "duration": 1.916}, {"text": "a DOM in memory and changing colors and\npositioning of things on the screen.", "start": 732.566, "duration": 4.336}, {"text": "And that's, indeed, a higher level.", "start": 736.902, "duration": 1.458}, {"text": "Now, Python is not\nnecessarily even web-centric.", "start": 738.36, "duration": 3.63}, {"text": "It's more of a multi-purpose language.", "start": 741.99, "duration": 1.59}, {"text": "People use Python to write\ncommand-line programs,", "start": 743.58, "duration": 2.73}, {"text": "like we will soon, at the keyboard,\nlike we've been doing with C.", "start": 746.31, "duration": 3.17}, {"text": "You can also, though,\nuse it, as we'll see", "start": 749.48, "duration": 1.75}, {"text": "next week, to generate other languages.", "start": 751.23, "duration": 2.17}, {"text": "So next week we will\nwrite code in Python,", "start": 753.4, "duration": 2.42}, {"text": "the language we're about to see,\nto generate another language, HTML", "start": 755.82, "duration": 4.17}, {"text": "and CSS.", "start": 759.99, "duration": 0.64}, {"text": "Some of you probably noticed in your\nhomepages that you had some redundancy.", "start": 760.63, "duration": 3.8}, {"text": "You probably had similar\ntags or similar structure,", "start": 764.43, "duration": 2.34}, {"text": "maybe a similar menu across pages.", "start": 766.77, "duration": 1.92}, {"text": "Python and other languages\nwill let us factor that", "start": 768.69, "duration": 2.43}, {"text": "out and generate those\ncommonalities a lot more", "start": 771.12, "duration": 2.64}, {"text": "easily, among many other things.", "start": 773.76, "duration": 1.68}, {"text": "And it's also arguably\neasier and faster to write", "start": 775.44, "duration": 3.12}, {"text": "because it comes with so many more\nfeatures, as we will soon see.", "start": 778.56, "duration": 3.49}, {"text": "So in fact-- you know what?", "start": 782.05, "duration": 1.13}, {"text": "Let me do this.", "start": 783.18, "duration": 0.76}, {"text": "Let me go ahead and open up CS50 IDE.", "start": 783.94, "duration": 3.63}, {"text": "Let me go ahead and create a new file.", "start": 787.57, "duration": 1.82}, {"text": "And out of curiosity,\nof our recent problem", "start": 789.39, "duration": 1.94}, {"text": "sets, what was maybe among the most\nchallenging programs you've written?", "start": 791.33, "duration": 5.152}, {"text": "AUDIENCE: Crack.", "start": 796.482, "duration": 0.715}, {"text": "DAVID MALAN: OK, crack was a good one.", "start": 797.197, "duration": 1.583}, {"text": "What else?", "start": 798.78, "duration": 0.9}, {"text": "AUDIENCE: Resize.", "start": 799.68, "duration": 0.78}, {"text": "DAVID MALAN: Resize, recover.", "start": 800.46, "duration": 1.11}, {"text": "Yeah, definitely the forensics ones.", "start": 801.57, "duration": 1.41}, {"text": "And more people probably\ndid recover and resize.", "start": 802.98, "duration": 2.0}, {"text": "So let's take resize, for example.", "start": 804.98, "duration": 1.66}, {"text": "So let me go ahead and write a program\nin a file called resize.py for Python,", "start": 806.64, "duration": 4.11}, {"text": "instead of .c, and see if we can't\nspend, what, few hours, couple days,", "start": 810.75, "duration": 5.04}, {"text": "as you probably did in\nC, implementing resize.", "start": 815.79, "duration": 2.43}, {"text": "Well, let me go ahead and do this.", "start": 818.22, "duration": 2.05}, {"text": "I'm going to go ahead and--", "start": 820.27, "duration": 2.09}, {"text": "let's see.", "start": 822.36, "duration": 0.6}, {"text": "First I'm going to import some\nfeatures that just come with Python.", "start": 822.96, "duration": 3.61}, {"text": "And I'm going to go ahead\nand say from sys import argv.", "start": 826.57, "duration": 4.34}, {"text": "And I'm going to go ahead and\nalso do from pil import image.", "start": 830.91, "duration": 3.82}, {"text": "Don't know yet what these are.", "start": 834.73, "duration": 1.25}, {"text": "We'll tease this apart in a moment.", "start": 835.98, "duration": 1.47}, {"text": "But then let me just do a check.", "start": 837.45, "duration": 1.333}, {"text": "If the length of--", "start": 838.783, "duration": 1.487}, {"text": "rather, if the length of\nargv does not equal 4,", "start": 840.27, "duration": 4.5}, {"text": "I'm going to go ahead and exit for the\nuser and say the usage of this program", "start": 844.77, "duration": 3.42}, {"text": "is Python resize.py\nand in file, out file.", "start": 848.19, "duration": 4.65}, {"text": "So even though some of this\nshould look cryptic at the moment,", "start": 852.84, "duration": 2.6}, {"text": "there's some commonalities--\nargv, you recall, from C,", "start": 855.44, "duration": 2.67}, {"text": "and this usage string that we printed\nout whenever anything went wrong.", "start": 858.11, "duration": 3.34}, {"text": "That looks very similar in spirit to C.", "start": 861.45, "duration": 2.19}, {"text": "And what did we do in resize?", "start": 863.64, "duration": 1.47}, {"text": "If you implemented resize,\nlike the less comfy version,", "start": 865.11, "duration": 2.46}, {"text": "to increase the size of things, you\nprobably declared a variable like an", "start": 867.57, "duration": 4.02}, {"text": "and got sys--", "start": 871.59, "duration": 1.65}, {"text": "or rather, argv bracket\none to get access to it.", "start": 873.24, "duration": 3.7}, {"text": "I'm going to go ahead and convert\nthat or cast that to an int.", "start": 876.94, "duration": 2.64}, {"text": "You probably had an infile variable\nthat gave you access to argv two.", "start": 879.58, "duration": 4.089}, {"text": "You probably had an out file variable\nthat gave you access to argv three,", "start": 883.669, "duration": 3.041}, {"text": "and so forth.", "start": 886.71, "duration": 1.11}, {"text": "And it turns out in\nPython, you know what?", "start": 887.82, "duration": 1.92}, {"text": "I can actually use a library, code\nthat other people have written.", "start": 889.74, "duration": 3.54}, {"text": "Let me come up with a variable\ncalled in image, like infile.", "start": 893.28, "duration": 3.3}, {"text": "This is my input image.", "start": 896.58, "duration": 1.71}, {"text": "And that's going to equal\nimage.open because I", "start": 898.29, "duration": 2.91}, {"text": "want to open this thing called infile.", "start": 901.2, "duration": 1.84}, {"text": "And then the width--", "start": 903.04, "duration": 1.61}, {"text": "let me get the width and the\nheight of the existing image", "start": 904.65, "duration": 2.58}, {"text": "by doing input image.size.", "start": 907.23, "duration": 2.61}, {"text": "And then let me go ahead and make a\nnew image-- out image, I'll call it--", "start": 909.84, "duration": 3.12}, {"text": "which is going to equal the input\nimage calling a resize function", "start": 912.96, "duration": 4.56}, {"text": "and doing the width times n, which is\nthe number the human probably typed in,", "start": 917.52, "duration": 4.69}, {"text": "and height times n, which is\nthe number the human typed in.", "start": 922.21, "duration": 4.01}, {"text": "Then let me go ahead and just\nsave the outfile as follows.", "start": 926.22, "duration": 3.75}, {"text": "Outfile, OK.", "start": 929.97, "duration": 2.55}, {"text": "Done.", "start": 932.52, "duration": 1.32}, {"text": "Problem set three.", "start": 933.84, "duration": 3.62}, {"text": "Tada.", "start": 937.46, "duration": 2.2}, {"text": "OK, either really exciting or\nreally, really disheartening perhaps.", "start": 939.66, "duration": 3.62}, {"text": "So with the right language,\nas you say, can you", "start": 943.28, "duration": 2.35}, {"text": "solve problems so much more easily.", "start": 945.63, "duration": 3.03}, {"text": "Now, I'm being a little\ndisingenuous because I'm also", "start": 948.66, "duration": 2.55}, {"text": "leveraging what's called a library.", "start": 951.21, "duration": 1.47}, {"text": "And we had access to these\nin C. And undoubtedly", "start": 952.68, "duration": 2.129}, {"text": "we could have dug a little\ndeeper on the internet", "start": 954.809, "duration": 2.041}, {"text": "into other people's available code and\nfound maybe a library for bitmap files.", "start": 956.85, "duration": 5.16}, {"text": "But notice that there is no\ndealing with padding now.", "start": 962.01, "duration": 3.83}, {"text": "There's no dealing with arrays.", "start": 965.84, "duration": 1.49}, {"text": "There's no dealing with memory because\nI'm using the right tool for the job.", "start": 967.33, "duration": 4.23}, {"text": "And if I wrote this\ncode correctly-- and let", "start": 971.56, "duration": 2.18}, {"text": "me cross my fingers that\nI didn't make any typos.", "start": 973.74, "duration": 2.7}, {"text": "Let me go ahead here\nand get myself a copy", "start": 976.44, "duration": 3.84}, {"text": "of smiley, which I brought with me.", "start": 980.28, "duration": 2.92}, {"text": "So that was the tiny little\nimage from last week.", "start": 983.2, "duration": 2.22}, {"text": "Let me go ahead and\nopen this in the IDE.", "start": 985.42, "duration": 1.708}, {"text": "Smiley, super small.", "start": 987.128, "duration": 1.642}, {"text": "Just a few pixels there.", "start": 988.77, "duration": 1.56}, {"text": "And let me go ahead now and run Python,\nwhich we'll see why in a moment,", "start": 990.33, "duration": 3.51}, {"text": "resize.", "start": 993.84, "duration": 1.02}, {"text": "Let's increase this by a factor of 10,\nincreasing Smiley, and call it out.bmp.", "start": 994.86, "duration": 5.82}, {"text": "Now let me go ahead and open out.bnp\nand voila, it indeed seems to work.", "start": 1000.68, "duration": 5.28}, {"text": "Right, no funky colors.", "start": 1005.96, "duration": 1.29}, {"text": "No weird sizes.", "start": 1007.25, "duration": 1.83}, {"text": "No padding.", "start": 1009.08, "duration": 0.73}, {"text": "No padding of all things.", "start": 1009.81, "duration": 1.52}, {"text": "It's just now Python.", "start": 1011.33, "duration": 1.74}, {"text": "So you can probably glean some of\nthe logic that's going on here.", "start": 1013.07, "duration": 2.94}, {"text": "But some of it certainly should\nand probably does look magical.", "start": 1016.01, "duration": 3.24}, {"text": "So let's use today to tease this\napart and appreciate not only", "start": 1019.25, "duration": 2.88}, {"text": "what you can do with another\nlanguage like Python,", "start": 1022.13, "duration": 2.52}, {"text": "but how it's similar and\ndifferent and how it actually", "start": 1024.65, "duration": 2.429}, {"text": "is built upon something like C.\nSo let's do some comparisons first", "start": 1027.079, "duration": 4.041}, {"text": "so that we can see that it's\nnot a huge stretch to introduce", "start": 1031.12, "duration": 2.499}, {"text": "yet another language so quickly.", "start": 1033.619, "duration": 1.933}, {"text": "So recall that in Scratch if we wanted\nto set a variable, like counter,", "start": 1035.552, "duration": 2.958}, {"text": "to zero, you might simply\ndo something like this,", "start": 1038.51, "duration": 2.43}, {"text": "setting it equal to zero at left.", "start": 1040.94, "duration": 1.53}, {"text": "In C, we would do the same\nthing here at the right.", "start": 1042.47, "duration": 2.34}, {"text": "In JavaScript, this instead\nlooked a little different.", "start": 1044.81, "duration": 2.799}, {"text": "What did we do in JavaScript?", "start": 1047.609, "duration": 2.061}, {"text": "Yeah, we used let instead because we\ndon't specify explicitly the type.", "start": 1049.67, "duration": 3.93}, {"text": "But we do need to tell the computer, let\nme have this variable called counter.", "start": 1053.6, "duration": 3.96}, {"text": "In Python, it's going to be that.", "start": 1057.56, "duration": 3.75}, {"text": "So we've gotten rid of the type still.", "start": 1061.31, "duration": 2.19}, {"text": "We've gotten rid of any mention\nof let or another keyword.", "start": 1063.5, "duration": 3.35}, {"text": "And we've gotten rid of--\nperhaps most gratifyingly--", "start": 1066.85, "duration": 4.03}, {"text": "semi-colons are gone.", "start": 1070.88, "duration": 1.56}, {"text": "No more semi-colons.", "start": 1072.44, "duration": 1.14}, {"text": "And no more curly braces in the\nway you've seen them thus far.", "start": 1073.58, "duration": 3.31}, {"text": "So that was C, JavaScript,\nand now Python.", "start": 1076.89, "duration": 2.395}, {"text": "So how about something like this?", "start": 1079.285, "duration": 1.375}, {"text": "In Scratch, if you wanted to\nincrement a counter by one,", "start": 1080.66, "duration": 2.747}, {"text": "you would use a block like this.", "start": 1083.407, "duration": 1.333}, {"text": "In C, we would do the same\non the right here in code.", "start": 1084.74, "duration": 2.46}, {"text": "In JavaScript, did it look\nany different on the right?", "start": 1087.2, "duration": 2.25}, {"text": "No.", "start": 1093.29, "duration": 1.38}, {"text": "You haven't had occasion\nto use this yet.", "start": 1094.67, "duration": 1.74}, {"text": "But one of the sort of revelations of\nJavaScript was that's also JavaScript.", "start": 1096.41, "duration": 4.23}, {"text": "It was identical.", "start": 1100.64, "duration": 1.32}, {"text": "Something like this, though, is Python.", "start": 1101.96, "duration": 2.97}, {"text": "So it's almost the same.", "start": 1104.93, "duration": 1.17}, {"text": "But I've gotten rid of the semi-colon.", "start": 1106.1, "duration": 1.583}, {"text": "But the logic is exactly the same--", "start": 1107.683, "duration": 1.687}, {"text": "set counter on the left equal to\nwhatever it is on the right plus one", "start": 1109.37, "duration": 3.39}, {"text": "additional value.", "start": 1112.76, "duration": 0.96}, {"text": "What about this?", "start": 1113.72, "duration": 0.94}, {"text": "This in C had what effect?", "start": 1114.66, "duration": 3.38}, {"text": "Incrementing the variable.", "start": 1118.04, "duration": 1.12}, {"text": "So this is exactly the same.", "start": 1119.16, "duration": 1.38}, {"text": "It's sort of a nice shorthand\nnotation for doing counter equals", "start": 1120.54, "duration": 3.256}, {"text": "counter plus 1, which just\ngets a little tedious to type.", "start": 1123.796, "duration": 2.374}, {"text": "We had that same syntax in JavaScript.", "start": 1126.17, "duration": 2.13}, {"text": "And you can probably guess in\nPython, what's it going to look like?", "start": 1128.3, "duration": 2.984}, {"text": "AUDIENCE: Same thing without the--", "start": 1131.284, "duration": 1.416}, {"text": "DAVID MALAN: Same thing\nminus the semi-colon.", "start": 1132.7, "duration": 2.15}, {"text": "So pretty nice pattern so far.", "start": 1134.85, "duration": 1.47}, {"text": "Languages just keep getting\ntrimmer and trimmer, if you will.", "start": 1136.32, "duration": 2.56}, {"text": "In C, recall that we\ncould just do plus plus,", "start": 1138.88, "duration": 2.28}, {"text": "which was another trick for\nautomating that same process.", "start": 1141.16, "duration": 3.15}, {"text": "JavaScript allows for the same.", "start": 1144.31, "duration": 2.13}, {"text": "And if you really like this syntax,\nI can't show you a slide for Python.", "start": 1146.44, "duration": 3.3}, {"text": "Doesn't exist.", "start": 1149.74, "duration": 0.69}, {"text": "Can no longer do plus plus.", "start": 1150.43, "duration": 1.32}, {"text": "So we're paying a price.", "start": 1151.75, "duration": 1.41}, {"text": "The author of Python did not\ninclude this in the language.", "start": 1153.16, "duration": 2.46}, {"text": "But that's OK.", "start": 1155.62, "duration": 0.63}, {"text": "We at least have this one,\nwhich is not too horrible.", "start": 1156.25, "duration": 2.58}, {"text": "So what else did we look at last time?", "start": 1158.83, "duration": 1.85}, {"text": "An if condition like this,\ncomparing if x is less than y,", "start": 1160.68, "duration": 3.1}, {"text": "in C it looks like this.", "start": 1163.78, "duration": 1.53}, {"text": "In JavaScript it looks\nlike this same thing.", "start": 1165.31, "duration": 2.61}, {"text": "In Python, it looks like this.", "start": 1167.92, "duration": 3.82}, {"text": "So gone are the curly braces.", "start": 1171.74, "duration": 2.72}, {"text": "Added is a colon.", "start": 1174.46, "duration": 1.59}, {"text": "And what you don't see yet is that\nindentation is going to be important.", "start": 1176.05, "duration": 4.33}, {"text": "So any of you have been a little\nfast and loose with style 50", "start": 1180.38, "duration": 2.99}, {"text": "and, like we've seen at office\nhours, all of your code,", "start": 1183.37, "duration": 2.71}, {"text": "however many lines you've\nwritten for whatever reason", "start": 1186.08, "duration": 2.208}, {"text": "is all aligned on the left and\nnothing is actually indented.", "start": 1188.288, "duration": 2.682}, {"text": "Now Python is not\ngoing to tolerate that.", "start": 1190.97, "duration": 1.708}, {"text": "Python requires indentation for logic.", "start": 1192.678, "duration": 2.502}, {"text": "And so this is actually a\nstylistic feature of the language.", "start": 1195.18, "duration": 2.5}, {"text": "It forces you to adopt good visual\nstylistic habits because the code just", "start": 1197.68, "duration": 4.32}, {"text": "won't run if you haven't\nindented it properly.", "start": 1202.0, "duration": 2.52}, {"text": "So anything that's going to\nhappen if x is less than y", "start": 1204.52, "duration": 2.55}, {"text": "needs to be indented, say, four\nspaces underneath that colon.", "start": 1207.07, "duration": 4.03}, {"text": "What else have we seen?", "start": 1211.1, "duration": 0.98}, {"text": "In C or in Scratch we had\nthis block for if's and elses.", "start": 1212.08, "duration": 2.55}, {"text": "In C it looks like this.", "start": 1214.63, "duration": 1.83}, {"text": "In JavaScript it looks like this.", "start": 1216.46, "duration": 1.71}, {"text": "In Python it's going to look like\nthis, albeit with indentation", "start": 1218.17, "duration": 3.72}, {"text": "below each of those colons.", "start": 1221.89, "duration": 1.236}, {"text": "How about this?", "start": 1223.126, "duration": 0.624}, {"text": "When we had three-way a fork in\nthe road-- if else, if else--", "start": 1223.75, "duration": 3.51}, {"text": "in C it looks like this.", "start": 1227.26, "duration": 1.71}, {"text": "JavaScript looked the same.", "start": 1228.97, "duration": 1.47}, {"text": "In Python, looks a little funky.", "start": 1230.44, "duration": 2.44}, {"text": "It's going to look like this--", "start": 1232.88, "duration": 1.25}, {"text": "elif but three colons, this time two.", "start": 1234.13, "duration": 2.54}, {"text": "What else?", "start": 1236.67, "duration": 0.5}, {"text": "We also looked at forever loops in\nScratch, in C, and in JavaScript.", "start": 1237.17, "duration": 4.31}, {"text": "You could use exactly the same\nsyntax in Python, almost the same.", "start": 1241.48, "duration": 4.47}, {"text": "Gone are the curly braces,\nadded is the colon.", "start": 1245.95, "duration": 2.37}, {"text": "And the slight subtlety, if\nyou noticed, true and false", "start": 1248.32, "duration": 4.26}, {"text": "are now proper nouns, if you will.", "start": 1252.58, "duration": 1.86}, {"text": "Capital T capital F\nis necessary to write.", "start": 1254.44, "duration": 2.52}, {"text": "How about a for loop?", "start": 1256.96, "duration": 0.97}, {"text": "So in Scratch, we could very\neasily say, repeat this 50 times.", "start": 1257.93, "duration": 2.94}, {"text": "C and JavaScript is a little\npedantic in that you have", "start": 1260.87, "duration": 2.54}, {"text": "to initialize and increment and check.", "start": 1263.41, "duration": 2.4}, {"text": "Both C and JavaScript\ntake that same approach,", "start": 1265.81, "duration": 2.25}, {"text": "although in JavaScript we of\ncourse use let instead of int.", "start": 1268.06, "duration": 3.39}, {"text": "Python is a little more succinct\nalthough a little less explicit", "start": 1271.45, "duration": 4.02}, {"text": "step by step.", "start": 1275.47, "duration": 1.41}, {"text": "You just do this.", "start": 1276.88, "duration": 1.08}, {"text": "For i in range of 50 is the way\nof saying start iterating at 0,", "start": 1277.96, "duration": 5.31}, {"text": "count all the way up to\nbut not including 50,", "start": 1283.27, "duration": 2.7}, {"text": "thereby giving you a range of values.", "start": 1285.97, "duration": 2.29}, {"text": "So this is the one that's\nperhaps the most weird", "start": 1288.26, "duration": 2.51}, {"text": "thus far, but still a little\nmore succinct to write.", "start": 1290.77, "duration": 2.85}, {"text": "So in C, we had so many data types--\nbool, char, double, float, int, long,", "start": 1293.62, "duration": 3.63}, {"text": "string--", "start": 1297.25, "duration": 0.715}, {"text": "the last of which, of course,\ncame from the CS50 library.", "start": 1297.965, "duration": 2.375}, {"text": "And there's others\nthat you can use in C,", "start": 1300.34, "duration": 1.708}, {"text": "as you might recall, from\nproblem set 3, perhaps.", "start": 1302.048, "duration": 2.762}, {"text": "In Python, we're going to shorten\nthis list, at least initially,", "start": 1304.81, "duration": 2.98}, {"text": "to just these data types.", "start": 1307.79, "duration": 1.06}, {"text": "In Python, we're going to have bools\nfor true-false, floats for real numbers,", "start": 1308.85, "duration": 3.88}, {"text": "ints for integers, and\nthen strs for strings.", "start": 1312.73, "duration": 3.68}, {"text": "Just a little more succinct, but it\ndoes actually exist. str in Python", "start": 1316.41, "duration": 3.454}, {"text": "is a real thing.", "start": 1319.864, "duration": 0.666}, {"text": "It is not a CS50 addition.", "start": 1320.53, "duration": 2.039}, {"text": "There are other data types\nthat come with Python.", "start": 1322.569, "duration": 2.041}, {"text": "In fact, this is where the\nlanguage gets powerful.", "start": 1324.61, "duration": 2.79}, {"text": "And those of you who came\nfrom a Java background or C++,", "start": 1327.4, "duration": 3.796}, {"text": "the subset of you who\nhave programmed before,", "start": 1331.196, "duration": 1.874}, {"text": "you have more features in Python just\nlike you do in those other languages", "start": 1333.07, "duration": 3.24}, {"text": "that we did not have in C. In Python,\nyou have dictionaries or hash tables.", "start": 1336.31, "duration": 5.46}, {"text": "You have lists, which are arrays,\nbut that can automatically resize.", "start": 1341.77, "duration": 3.87}, {"text": "You don't have to decide in\nadvance how big or small they are.", "start": 1345.64, "duration": 2.69}, {"text": "Range we just saw, it's a range\nof values, like 50 of them,", "start": 1348.33, "duration": 3.19}, {"text": "set in the mathematical sense.", "start": 1351.52, "duration": 1.53}, {"text": "It's a collection of things\nthat ensures you don't", "start": 1353.05, "duration": 2.55}, {"text": "have duplicates in that collection.", "start": 1355.6, "duration": 2.19}, {"text": "And then tuple is a combination\nof things kind of like for math", "start": 1357.79, "duration": 3.03}, {"text": "when you have x comma y or\nlatitude comma longitude.", "start": 1360.82, "duration": 2.94}, {"text": "Any time you have pairs or\ntriples or more of things,", "start": 1363.76, "duration": 2.73}, {"text": "those are called tuples.", "start": 1366.49, "duration": 1.38}, {"text": "And those are common in math courses\nand higher-level CS theory classes,", "start": 1367.87, "duration": 3.54}, {"text": "as well.", "start": 1371.41, "duration": 0.91}, {"text": "But we do give you, at\nleast in this first week", "start": 1372.32, "duration": 2.18}, {"text": "of our look at Python, a\nfew functions from CS50,", "start": 1374.5, "duration": 2.91}, {"text": "among them getFloat, getInt, and\ngetString, which behave exactly", "start": 1377.41, "duration": 4.2}, {"text": "like their C counterparts.", "start": 1381.61, "duration": 1.119}, {"text": "And this is just going\nto allow us to start", "start": 1382.729, "duration": 1.791}, {"text": "writing code very reminiscent of\nwhat we did the last few weeks.", "start": 1384.52, "duration": 3.66}, {"text": "But let's consider\nwhat's going to change", "start": 1388.18, "duration": 2.19}, {"text": "as we're about to start\nwriting our own programs.", "start": 1390.37, "duration": 2.37}, {"text": "In C, when you wanted to use\nthe CS50 library, you of course", "start": 1392.74, "duration": 3.39}, {"text": "included its header file.", "start": 1396.13, "duration": 1.56}, {"text": "That syntax is going to change in\nPython so that for this first week when", "start": 1397.69, "duration": 3.3}, {"text": "you want to use the CS50 library,\nyou're going to instead say", "start": 1400.99, "duration": 3.42}, {"text": "from CS50 import and then a comma\nseparated list of the functions", "start": 1404.41, "duration": 4.65}, {"text": "that you want to import\nor use in your code.", "start": 1409.06, "duration": 2.5}, {"text": "So it's a little more precise.", "start": 1411.56, "duration": 1.25}, {"text": "This syntax is not saying\ngive me everything.", "start": 1412.81, "duration": 2.13}, {"text": "Give me this, this,\nand this other thing.", "start": 1414.94, "duration": 1.71}, {"text": "And if you want to use one or more,\nyou can just separate them by commas.", "start": 1416.65, "duration": 3.112}, {"text": "As an aside, especially those of\nyou who have seen Python before,", "start": 1419.762, "duration": 2.708}, {"text": "there's other ways to do this.", "start": 1422.47, "duration": 1.8}, {"text": "There are several approaches.", "start": 1424.27, "duration": 1.47}, {"text": "This is, perhaps, the most\ncomparable for our purposes today.", "start": 1425.74, "duration": 2.559}, {"text": "What else are you're\ngoing to have to know?", "start": 1428.299, "duration": 1.791}, {"text": "In C you had to compile your code.", "start": 1430.09, "duration": 2.79}, {"text": "And you did so with clang, like this.", "start": 1432.88, "duration": 1.81}, {"text": "And then you ran your\nprogram with dot slash hello.", "start": 1434.69, "duration": 2.63}, {"text": "Or more simply, you\ndid make hello and then", "start": 1437.32, "duration": 1.95}, {"text": "we'd figure out the command for you\nin the IDE or the sandbox or lab.", "start": 1439.27, "duration": 3.36}, {"text": "In Python, you're going to\nskip the compilation step.", "start": 1442.63, "duration": 2.972}, {"text": "When you want to run\na program in Python,", "start": 1445.602, "duration": 1.708}, {"text": "you're going to do just\nwhat I did quickly before.", "start": 1447.31, "duration": 2.29}, {"text": "You're just going to run the command\nPython and then the name of the file", "start": 1449.6, "duration": 3.8}, {"text": "that you want to run.", "start": 1453.4, "duration": 1.26}, {"text": "And the reason for this is as follows.", "start": 1454.66, "duration": 1.92}, {"text": "In the world of C, recall that we\nhad this sort of pipeline process", "start": 1456.58, "duration": 4.17}, {"text": "where we have our source\ncode as our input.", "start": 1460.75, "duration": 3.78}, {"text": "And then we wanted to get to the point\nof machine code, the zeros and ones.", "start": 1464.53, "duration": 5.22}, {"text": "And what was standing in between\nsource code and machine code,", "start": 1469.75, "duration": 3.24}, {"text": "just to be clear?", "start": 1472.99, "duration": 1.44}, {"text": "What process?", "start": 1474.43, "duration": 1.99}, {"text": "Yeah, so compiling.", "start": 1476.42, "duration": 1.22}, {"text": "So we had a compiler in the\nmiddle whose purpose in life", "start": 1477.64, "duration": 3.09}, {"text": "is by definition to translate\none language to another.", "start": 1480.73, "duration": 3.45}, {"text": "It happens to be an English-like\nlanguage to a computer-like language,", "start": 1484.18, "duration": 3.33}, {"text": "but a compiler is a general term that\njust converts one thing to another.", "start": 1487.51, "duration": 3.28}, {"text": "And so this pipeline\nfor C looked like this.", "start": 1490.79, "duration": 2.96}, {"text": "And that's why you had to run\nClang explicitly, or make.", "start": 1493.75, "duration": 2.82}, {"text": "You had to induce that\nmiddle man operation", "start": 1496.57, "duration": 2.16}, {"text": "to convert the language to\nsomething the computer understands.", "start": 1498.73, "duration": 2.64}, {"text": "Python and other languages are not\ntypically compiled in the same way.", "start": 1501.37, "duration": 5.61}, {"text": "They're generally said\nto be interpreted,", "start": 1506.98, "duration": 2.04}, {"text": "whereby you don't compile\nthem into zeros and ones", "start": 1509.02, "duration": 2.58}, {"text": "and then run the program.", "start": 1511.6, "duration": 1.26}, {"text": "You instead run a program that\nsomeone else wrote called Python.", "start": 1512.86, "duration": 4.47}, {"text": "And that program is, by\ndefinition, an interpreter.", "start": 1517.33, "duration": 2.676}, {"text": "And that interpreter's\npurpose in life, as the word", "start": 1520.006, "duration": 2.124}, {"text": "implies, is to read your code\ntop to bottom, left to right,", "start": 1522.13, "duration": 3.45}, {"text": "and just do exactly\nwhat you tell it to do,", "start": 1525.58, "duration": 1.8}, {"text": "step by step by step, without doing\nthe upfront work of converting things", "start": 1527.38, "duration": 5.04}, {"text": "to zeros and ones.", "start": 1532.42, "duration": 0.84}, {"text": "So in the human world, if I\nspeak English and someone there", "start": 1533.26, "duration": 2.58}, {"text": "speaks Spanish and we don't\nspeak each other's language,", "start": 1535.84, "duration": 2.61}, {"text": "we might put a third human in between\nus, obviously a human interpreter.", "start": 1538.45, "duration": 3.27}, {"text": "The role is very similar.", "start": 1541.72, "duration": 1.35}, {"text": "The interpreter listens\nto me and then translates", "start": 1543.07, "duration": 2.042}, {"text": "that to something the\ncomputer understands.", "start": 1545.112, "duration": 1.791}, {"text": "But it doesn't get into zeros and ones.", "start": 1546.903, "duration": 1.857}, {"text": "It just goes from one\ndirectly to the other.", "start": 1548.76, "duration": 2.25}, {"text": "So the difference here in\nPython is that you still", "start": 1551.01, "duration": 2.37}, {"text": "are going to write source code,\nlike I quickly did for resize.", "start": 1553.38, "duration": 3.18}, {"text": "And ultimately, we\nwant to actually get it", "start": 1556.56, "duration": 2.82}, {"text": "into a program called an interpreter.", "start": 1559.38, "duration": 4.88}, {"text": "And so the step ideally\njust looks like this.", "start": 1564.26, "duration": 3.06}, {"text": "But as an aside, Python is a\npretty sophisticated language.", "start": 1567.32, "duration": 4.08}, {"text": "And even though we have the\npleasure of running it just", "start": 1571.4, "duration": 2.82}, {"text": "with one step instead of these two\nsteps, there actually is, as an aside,", "start": 1574.22, "duration": 4.35}, {"text": "some magic going on underneath the hood.", "start": 1578.57, "duration": 2.9}, {"text": "And for the curious, there actually\nis, for performance reasons,", "start": 1581.47, "duration": 4.03}, {"text": "a compiler built into Python that\nactually converts it to something", "start": 1585.5, "duration": 3.42}, {"text": "intermediary called bytecode.", "start": 1588.92, "duration": 2.58}, {"text": "And bytecode is what's\nactually interpreted.", "start": 1591.5, "duration": 2.62}, {"text": "And so this is why Python,\nwhile potentially slower than C", "start": 1594.12, "duration": 4.25}, {"text": "at certain tasks because you're not\ngoing to the low level zeros and ones,", "start": 1598.37, "duration": 3.72}, {"text": "can actually be used in business\napplications and popular websites", "start": 1602.09, "duration": 3.17}, {"text": "and such.", "start": 1605.26, "duration": 0.5}, {"text": "And that didn't really work very well.", "start": 1605.76, "duration": 1.83}, {"text": "And so it can be highly\nperforming, as well.", "start": 1607.59, "duration": 3.41}, {"text": "But more on that in a little bit.", "start": 1611.0, "duration": 1.99}, {"text": "So with that said, if these\nare the differences not only", "start": 1612.99, "duration": 2.87}, {"text": "syntactically but also\nmechanically, let's go ahead", "start": 1615.86, "duration": 2.55}, {"text": "and actually write a program.", "start": 1618.41, "duration": 2.01}, {"text": "So let me go ahead and go into the IDE.", "start": 1620.42, "duration": 2.707}, {"text": "Let me close our examples from before.", "start": 1623.127, "duration": 1.583}, {"text": "And let's start more simply because\nresize was a mouthful all at once.", "start": 1624.71, "duration": 2.97}, {"text": "Let me go ahead and create\na file called hello.py.", "start": 1627.68, "duration": 3.0}, {"text": "And instead of writing\nthis program in C,", "start": 1630.68, "duration": 2.46}, {"text": "let me go ahead and\njust write hello world.", "start": 1633.14, "duration": 2.28}, {"text": "So let's go ahead and do this.", "start": 1635.42, "duration": 1.77}, {"text": "Print hello world.", "start": 1637.19, "duration": 2.01}, {"text": "Done.", "start": 1639.2, "duration": 1.02}, {"text": "That's my first program in Python,\nand truly my first program in Python,", "start": 1640.22, "duration": 3.61}, {"text": "not sort of coming out\nswinging with resize.", "start": 1643.83, "duration": 2.55}, {"text": "So what is not present in this file\nthat was in something like hello.c?", "start": 1646.38, "duration": 6.575}, {"text": "There is no main\nfunction necessary here.", "start": 1652.955, "duration": 2.535}, {"text": "What else is missing?", "start": 1655.49, "duration": 1.66}, {"text": "AUDIENCE: Printf.", "start": 1657.15, "duration": 0.95}, {"text": "DAVID MALAN: There is\nno mention of printf.", "start": 1658.1, "duration": 1.43}, {"text": "It's instead print, which is\na little more human friendly.", "start": 1659.53, "duration": 2.416}, {"text": "AUDIENCE: Libraries.", "start": 1661.946, "duration": 0.834}, {"text": "DAVID MALAN: There is no mention\nof header files or libraries", "start": 1662.78, "duration": 2.54}, {"text": "at the top of the file.", "start": 1665.32, "duration": 1.03}, {"text": "I just dived right in and got to it.", "start": 1666.35, "duration": 2.41}, {"text": "Yeah?", "start": 1668.76, "duration": 0.5}, {"text": "AUDIENCE: No semi-colons.", "start": 1669.26, "duration": 0.9}, {"text": "DAVID MALAN: No semi-colons.", "start": 1670.16, "duration": 1.2}, {"text": "What else?", "start": 1671.36, "duration": 0.499}, {"text": "What else?", "start": 1675.34, "duration": 0.5}, {"text": "Yeah?", "start": 1675.84, "duration": 0.5}, {"text": "AUDIENCE: No backslash n.", "start": 1676.34, "duration": 1.244}, {"text": "DAVID MALAN: No backslash n.", "start": 1677.584, "duration": 1.166}, {"text": "I probably-- I haven't\nrun it yet, but I think", "start": 1678.75, "duration": 2.19}, {"text": "I will get that for free\nthis time with Python.", "start": 1680.94, "duration": 2.04}, {"text": "I don't have to be so explicit.", "start": 1682.98, "duration": 1.291}, {"text": "Was there another hand here?", "start": 1684.271, "duration": 2.341}, {"text": "AUDIENCE: There's no f in printf.", "start": 1686.612, "duration": 1.858}, {"text": "DAVID MALAN: There's\nno f in printf, yep.", "start": 1688.47, "duration": 2.226}, {"text": "Something else?", "start": 1690.696, "duration": 0.624}, {"text": "There's no indentation.", "start": 1694.14, "duration": 1.082}, {"text": "Though to be fair,\nthere's only one line.", "start": 1695.222, "duration": 1.708}, {"text": "But there's no indentation.", "start": 1696.93, "duration": 1.124}, {"text": "That's fair.", "start": 1698.054, "duration": 0.676}, {"text": "That's fair.", "start": 1698.73, "duration": 0.7}, {"text": "There's no curly braces, as well.", "start": 1699.43, "duration": 1.64}, {"text": "There's no mention of int.", "start": 1701.07, "duration": 1.11}, {"text": "There's no mention of void.", "start": 1702.18, "duration": 1.17}, {"text": "I mean, my God.", "start": 1703.35, "duration": 1.29}, {"text": "Why didn't we just do this last time?", "start": 1704.64, "duration": 2.25}, {"text": "And so this is why languages evolve.", "start": 1706.89, "duration": 2.4}, {"text": "People realized years ago,\ngee, C is serving us well.", "start": 1709.29, "duration": 3.27}, {"text": "Once I understand pointers\nand the syntax, OK, I got it.", "start": 1712.56, "duration": 2.82}, {"text": "But my God, it's just so tedious to\nwrite even the simplest of programs", "start": 1715.38, "duration": 3.21}, {"text": "because I have to do hash includes,\nstandard io.h, int main void, I mean,", "start": 1718.59, "duration": 4.32}, {"text": "all of this syntactic overhead\nthat's getting in the way of you just", "start": 1722.91, "duration": 3.15}, {"text": "doing the work you care\nabout, which in simplest form", "start": 1726.06, "duration": 2.46}, {"text": "here is just printing hello world.", "start": 1728.52, "duration": 2.13}, {"text": "So Python and a lot of more\nmodern languages-- among them,", "start": 1730.65, "duration": 3.24}, {"text": "Ruby and PHP and others--", "start": 1733.89, "duration": 2.22}, {"text": "just get rid of a lot of that\noverhead so that you can just get down", "start": 1736.11, "duration": 2.85}, {"text": "to work more quickly right away.", "start": 1738.96, "duration": 2.32}, {"text": "So how do I go ahead and run this?", "start": 1741.28, "duration": 1.51}, {"text": "In C, recall, I would have\ndone dot slash hello.py.", "start": 1742.79, "duration": 3.78}, {"text": "But we just said a moment ago\nthat's not the right approach.", "start": 1746.57, "duration": 2.5}, {"text": "How do I go and run this program?", "start": 1749.07, "duration": 2.71}, {"text": "Yeah, so I run literally a program that\nis coincidentally called Python itself.", "start": 1751.78, "duration": 4.67}, {"text": "That is the interpreter.", "start": 1756.45, "duration": 1.0}, {"text": "That's the man in the middle between\nme and my Spanish-speaking friend that", "start": 1757.45, "duration": 3.33}, {"text": "just has to convert hello.py\ninto whatever the computer itself", "start": 1760.78, "duration": 4.5}, {"text": "understands.", "start": 1765.28, "duration": 0.87}, {"text": "And so there, indeed,\nwe have hello world.", "start": 1766.15, "duration": 1.92}, {"text": "And as you notice, there's\nno backslash n on my code.", "start": 1768.07, "duration": 2.76}, {"text": "But I am moving the\ncursor to the new line.", "start": 1770.83, "duration": 2.38}, {"text": "So Python just decided, you know what?", "start": 1773.21, "duration": 1.67}, {"text": "It's so damn common to have new lines,\nlet's just add those by default.", "start": 1774.88, "duration": 3.004}, {"text": "You know, the price we're\ngoing to pay is it's", "start": 1777.884, "duration": 1.916}, {"text": "a little annoying to get rid of them.", "start": 1779.8, "duration": 1.68}, {"text": "But we'll see that in a little bit, too.", "start": 1781.48, "duration": 2.089}, {"text": "So just a tradeoff.", "start": 1783.569, "duration": 0.791}, {"text": "All right, let's do another one.", "start": 1784.36, "duration": 1.333}, {"text": "That's just a simplest\nof possible programs.", "start": 1785.693, "duration": 2.417}, {"text": "Let's go ahead and do, say,\nsomething a little fancier", "start": 1788.11, "duration": 3.24}, {"text": "that allows us to do\nsomething more than that.", "start": 1791.35, "duration": 3.37}, {"text": "So let's go ahead, say,\nand compare not just", "start": 1794.72, "duration": 3.59}, {"text": "that, but let's actually\ngo get some user input.", "start": 1798.31, "duration": 2.65}, {"text": "So for user input, there's\na few ways to do this.", "start": 1800.96, "duration": 2.06}, {"text": "We'll do it the CS50 way initially,\nbut these are training wheels this week", "start": 1803.02, "duration": 3.124}, {"text": "that we'll use for just a\nweek before we take them off,", "start": 1806.144, "duration": 2.366}, {"text": "just bridging us from C to Python.", "start": 1808.51, "duration": 3.09}, {"text": "Let me go ahead and\ncall this string zero.py", "start": 1811.6, "duration": 2.07}, {"text": "because I'm dealing with strings.", "start": 1813.67, "duration": 1.53}, {"text": "And let me go ahead and do\ns to give me a variable.", "start": 1815.2, "duration": 3.66}, {"text": "Get string.", "start": 1818.86, "duration": 0.91}, {"text": "Let me prompt the human for his or her\nname like this and then let me go ahead", "start": 1819.77, "duration": 3.29}, {"text": "and say hello.", "start": 1823.06, "duration": 1.8}, {"text": "And so and now I just have to\nconsider how to print out their name.", "start": 1824.86, "duration": 3.21}, {"text": "And in Python, I can\nactually just do this.", "start": 1828.07, "duration": 2.52}, {"text": "I don't need to do percent s.", "start": 1830.59, "duration": 1.65}, {"text": "I don't need to put a second-- or, I\ndo need to put a second comma here.", "start": 1832.24, "duration": 4.47}, {"text": "But I can just do this,\nwhich is a little simpler.", "start": 1836.71, "duration": 2.46}, {"text": "And this is not correct.", "start": 1839.17, "duration": 1.71}, {"text": "I'm not practicing what I preached.", "start": 1840.88, "duration": 3.022}, {"text": "Get rid of the f.", "start": 1843.902, "duration": 0.708}, {"text": "Just print what you\nwant to print, indeed.", "start": 1844.61, "duration": 1.92}, {"text": "So s, notice, is apparently a\nvariable because I'm assigning", "start": 1846.53, "duration": 3.06}, {"text": "it a value from right to left.", "start": 1849.59, "duration": 1.74}, {"text": "But notice that I'm not\nspecifying the type.", "start": 1851.33, "duration": 2.43}, {"text": "So Python does have type. str we\nsaid is the string equivalent.", "start": 1853.76, "duration": 3.456}, {"text": "But you don't have to mention it.", "start": 1857.216, "duration": 1.374}, {"text": "Python, like JavaScript, will just\nfigure it out, even without a keyword", "start": 1858.59, "duration": 2.999}, {"text": "like let.", "start": 1861.589, "duration": 0.571}, {"text": "But I do need to add one thing.", "start": 1862.16, "duration": 3.17}, {"text": "What's that?", "start": 1865.33, "duration": 0.515}, {"text": "AUDIENCE: You need to\nimport the getString?", "start": 1865.845, "duration": 1.791}, {"text": "DAVID MALAN: Yeah,\ngetString is a CS50 thing.", "start": 1867.636, "duration": 1.994}, {"text": "And we're only going to use it for\na week, but I do need to import it.", "start": 1869.63, "duration": 2.94}, {"text": "And the syntax with which to do this\nis to say, from the CS50 library,", "start": 1872.57, "duration": 3.42}, {"text": "import a function called get string.", "start": 1875.99, "duration": 1.95}, {"text": "I don't need to import\nany more with commas.", "start": 1877.94, "duration": 2.22}, {"text": "That one suffices for this program.", "start": 1880.16, "duration": 1.64}, {"text": "Yeah.", "start": 1881.8, "duration": 1.26}, {"text": "AUDIENCE: Would you want to--", "start": 1883.06, "duration": 2.45}, {"text": "instead of saying hello your name, would\nyou want to first getName that says", "start": 1885.51, "duration": 4.41}, {"text": "[INAUDIBLE]?", "start": 1889.92, "duration": 2.45}, {"text": "You're not indicating where\nthe error is [INAUDIBLE]..", "start": 1892.37, "duration": 3.154}, {"text": "DAVID MALAN: Sure, let me come\nback to this in one second.", "start": 1895.524, "duration": 2.416}, {"text": "Let's run this program first\nto demonstrate that it indeed", "start": 1897.94, "duration": 2.58}, {"text": "does what we saw it do last week.", "start": 1900.52, "duration": 2.29}, {"text": "And let me go ahead here and do\nthis time Python of string 0.", "start": 1902.81, "duration": 8.177}, {"text": "Let me go ahead and it's\njust waiting for my name.", "start": 1910.987, "duration": 2.083}, {"text": "So I'll type in David.", "start": 1913.07, "duration": 1.02}, {"text": "Hello, David.", "start": 1914.09, "duration": 0.65}, {"text": "But as you propose, what if\nyou wanted to flip this around?", "start": 1914.74, "duration": 3.06}, {"text": "Well, suppose I wanted to say\nthe person's name and then", "start": 1917.8, "duration": 3.51}, {"text": "something like hello because I'm\njust excited to see them, instead.", "start": 1921.31, "duration": 5.319}, {"text": "Let's see what this does.", "start": 1926.629, "duration": 1.041}, {"text": "Let me go ahead now and\nrun Python of string 0.", "start": 1927.67, "duration": 2.76}, {"text": "Type in my name.", "start": 1930.43, "duration": 1.62}, {"text": "And it's almost what\nI think you intended.", "start": 1932.05, "duration": 2.58}, {"text": "But there is a bug--", "start": 1934.63, "duration": 1.41}, {"text": "an aesthetic bug, at least.", "start": 1936.04, "duration": 1.29}, {"text": "So it seems with Python's\nprint function you don't need", "start": 1937.33, "duration": 2.52}, {"text": "to use the placeholder like percent s.", "start": 1939.85, "duration": 2.12}, {"text": "But it would seem to presumptuously add\na space for you after everything you're", "start": 1941.97, "duration": 5.71}, {"text": "passing in as an input to print itself.", "start": 1947.68, "duration": 3.51}, {"text": "So notice print is\ntaking how many arguments", "start": 1951.19, "duration": 2.19}, {"text": "according to this highlighted portion?", "start": 1953.38, "duration": 3.69}, {"text": "How many arguments might you infer?", "start": 1957.07, "duration": 2.61}, {"text": "AUDIENCE: S space and then the thing.", "start": 1959.68, "duration": 2.992}, {"text": "DAVID MALAN: Two?", "start": 1962.672, "duration": 0.708}, {"text": "Yeah, so two.", "start": 1963.38, "duration": 0.99}, {"text": "One is s, comma, and then the rest\nis what's highlighted in green here.", "start": 1964.37, "duration": 3.922}, {"text": "Yes, there's a second comma there,\nbut it's inside of the string.", "start": 1968.292, "duration": 2.708}, {"text": "So just like in C, that's\nsort of a red herring.", "start": 1971.0, "duration": 2.487}, {"text": "There's only two arguments here.", "start": 1973.487, "duration": 1.333}, {"text": "But it seems that the print\nfunction-- and you would know this", "start": 1974.82, "duration": 1.91}, {"text": "by reading that documentation-- if you\npass in two or three or more arguments,", "start": 1976.73, "duration": 3.45}, {"text": "it prints all of them.", "start": 1980.18, "duration": 1.05}, {"text": "But separates them with a single space.", "start": 1981.23, "duration": 1.626}, {"text": "So this isn't quite right.", "start": 1982.856, "duration": 1.082}, {"text": "So this is actually a great\nmotivation for cleaning this up.", "start": 1983.938, "duration": 2.512}, {"text": "If I want to actually improve this\nprogram and tidy it up a little bit,", "start": 1986.45, "duration": 3.58}, {"text": "let me do that in version one here.", "start": 1990.03, "duration": 1.91}, {"text": "Let me create another file\ncalled, say, string1.py.", "start": 1991.94, "duration": 3.72}, {"text": "Let me start where we\nstarted a moment ago.", "start": 1995.66, "duration": 2.19}, {"text": "And let me actually use a placeholder\nakin to C. So if I want to do,", "start": 1997.85, "duration": 3.58}, {"text": "for instance, hello so-and-so, it turns\nout you can actually say, hey Python,", "start": 2001.43, "duration": 5.72}, {"text": "put a variable called s right here.", "start": 2007.15, "duration": 3.39}, {"text": "However, if I run this as is,\nthere's still going to be a bug.", "start": 2010.54, "duration": 4.38}, {"text": "It's not quite solved yet.", "start": 2014.92, "duration": 1.54}, {"text": "But when I hit Enter now\nand type in my name--", "start": 2016.46, "duration": 2.31}, {"text": "all right, this is\nobviously stupid looking.", "start": 2018.77, "duration": 2.27}, {"text": "So it seems that I need to tell Python\nthat this string that I'm passing in,", "start": 2021.04, "duration": 4.62}, {"text": "hello comma so and so,\nis a formatted string.", "start": 2025.66, "duration": 2.82}, {"text": "It's a placeholder string that\nit should make some changes to.", "start": 2028.48, "duration": 3.6}, {"text": "And this is a little weird,\ncryptic syntactically in Python.", "start": 2032.08, "duration": 3.15}, {"text": "But the way you do this in Python is\nyou put an f before the string itself.", "start": 2035.23, "duration": 5.82}, {"text": "So I'm sorry, we got rid\nof the f a moment ago.", "start": 2041.05, "duration": 2.97}, {"text": "So we just called it print.", "start": 2044.02, "duration": 1.17}, {"text": "Now we're reusing a different f here.", "start": 2045.19, "duration": 2.04}, {"text": "And it's stupid-looking\nsyntax, admittedly.", "start": 2047.23, "duration": 2.04}, {"text": "But this just means hey, Python,\nthe following double quotes", "start": 2049.27, "duration": 3.0}, {"text": "or single quotes that\nyou're about to see should", "start": 2052.27, "duration": 2.01}, {"text": "be formatted by you in a special way.", "start": 2054.28, "duration": 1.919}, {"text": "And it literally goes at\nthe beginning of the string", "start": 2056.199, "duration": 2.581}, {"text": "even though that does\nadmittedly look weird.", "start": 2058.78, "duration": 2.23}, {"text": "But if I now rerun this Python\nstring one and type in my name now,", "start": 2061.01, "duration": 3.399}, {"text": "now it does the substitution.", "start": 2064.409, "duration": 1.701}, {"text": "So I can flip it around\nlogically much more flexibly now", "start": 2066.11, "duration": 3.35}, {"text": "and do something like hello because\nnow I'm passing in one argument", "start": 2069.46, "duration": 3.69}, {"text": "that print will format for me.", "start": 2073.15, "duration": 2.08}, {"text": "So when I type in my name now, I'm not\ngoing to get that superfluous space.", "start": 2075.23, "duration": 3.469}, {"text": "And now I have complete control\nover the formatting of the string.", "start": 2078.699, "duration": 3.391}, {"text": "So you know, sort of two steps forward,\none step back, perhaps, syntactically.", "start": 2082.09, "duration": 4.14}, {"text": "But it does allow us to do\nwhat we want this to do.", "start": 2086.23, "duration": 2.25}, {"text": "We could write the\nsame program using ints", "start": 2088.48, "duration": 1.75}, {"text": "and floats using getInt and getFloat.", "start": 2090.23, "duration": 2.239}, {"text": "Would look exactly the same.", "start": 2092.469, "duration": 1.391}, {"text": "You don't need to worry about percent\ns versus percent i versus percent f.", "start": 2093.86, "duration": 3.47}, {"text": "You just type in the variable\nname inside of those curly braces.", "start": 2097.33, "duration": 4.11}, {"text": "All right, let me go ahead\nand do some quick math.", "start": 2101.44, "duration": 3.394}, {"text": "Let me go ahead and do this.", "start": 2104.834, "duration": 1.166}, {"text": "Let me go ahead and create a new file.", "start": 2106.0, "duration": 1.68}, {"text": "We'll call this ints.py for integers.", "start": 2107.68, "duration": 2.49}, {"text": "And let me go ahead and\nget this access to--", "start": 2110.17, "duration": 3.51}, {"text": "how about the CS50 library's get\nint method or function which exists.", "start": 2113.68, "duration": 4.569}, {"text": "Then let me go ahead\nand declare a variable", "start": 2118.249, "duration": 1.791}, {"text": "called x and get an int from the user\nand just prompt him or her for x.", "start": 2120.04, "duration": 3.501}, {"text": "Then let me go ahead\nand do the same thing", "start": 2123.541, "duration": 1.749}, {"text": "and just get y from them, as well.", "start": 2125.29, "duration": 2.304}, {"text": "And then down here, let me\njust do some simple math.", "start": 2127.594, "duration": 2.166}, {"text": "And we did this way back in\nweek one by printing as follows.", "start": 2129.76, "duration": 4.51}, {"text": "Let me go ahead and just\nprint out x plus y equals--", "start": 2134.27, "duration": 3.95}, {"text": "and this is what's cool now\nabout this curly brace feature.", "start": 2138.22, "duration": 3.87}, {"text": "You can actually do not\njust variable's names,", "start": 2142.09, "duration": 3.96}, {"text": "but you can do simple\noperations in there, too.", "start": 2146.05, "duration": 2.13}, {"text": "I can literally do math inside of those\ncurly braces and print out that value.", "start": 2148.18, "duration": 4.254}, {"text": "But of course, this alone is just going\nto literally print the curly braces.", "start": 2152.434, "duration": 3.166}, {"text": "What do I have to add?", "start": 2155.6, "duration": 1.36}, {"text": "Yeah, so it looks a little weird.", "start": 2156.96, "duration": 1.6}, {"text": "But this now will solve that problem.", "start": 2158.56, "duration": 1.86}, {"text": "It will print literally x plus y\nequals whatever the actual sum is.", "start": 2160.42, "duration": 5.504}, {"text": "AUDIENCE: Just following\nup, what does f mean?", "start": 2165.924, "duration": 1.916}, {"text": "DAVID MALAN: Format.", "start": 2167.84, "duration": 0.833}, {"text": "Format the following string for me.", "start": 2168.673, "duration": 1.507}, {"text": "Good question.", "start": 2170.18, "duration": 0.88}, {"text": "Let's do just a few copy/paste\nbut change the operator here.", "start": 2171.06, "duration": 3.84}, {"text": "So x minus y, I want to\nsee what this looks like.", "start": 2174.9, "duration": 4.62}, {"text": "X, say-- what did we do last time?", "start": 2179.52, "duration": 1.55}, {"text": "Multiplying by y.", "start": 2181.07, "duration": 1.564}, {"text": "I want to do that math, too.", "start": 2182.634, "duration": 1.166}, {"text": "I can divide as well.", "start": 2183.8, "duration": 2.62}, {"text": "And then we had one\nmore, which was modulo,", "start": 2186.42, "duration": 2.72}, {"text": "or modular arithmetic, which,\nrecall, was the percent sign.", "start": 2189.14, "duration": 2.76}, {"text": "So syntactically, it's identical to see.", "start": 2191.9, "duration": 2.022}, {"text": "We're just adding this curly brace\nnotation just for the print function", "start": 2193.922, "duration": 2.958}, {"text": "right now.", "start": 2196.88, "duration": 0.75}, {"text": "Let me go ahead and run this.", "start": 2197.63, "duration": 1.208}, {"text": "Python of ints.py.", "start": 2198.838, "duration": 1.552}, {"text": "And let me go ahead\nand do one and say two.", "start": 2200.39, "duration": 4.32}, {"text": "So 1 plus 2 is 3.", "start": 2204.71, "duration": 2.13}, {"text": "1 minus 2 is negative 1.", "start": 2206.84, "duration": 1.77}, {"text": "1 times 2 is 2.", "start": 2208.61, "duration": 1.82}, {"text": "1 divided by 2 is 0.5.", "start": 2210.43, "duration": 2.85}, {"text": "And 1 then divide by 2 and\ntake the remainder is 1.", "start": 2213.28, "duration": 4.42}, {"text": "So I think this checks\nout mathematically.", "start": 2217.7, "duration": 2.85}, {"text": "But you should be a little\nsurprised by one of these outcomes.", "start": 2220.55, "duration": 2.685}, {"text": "Say again?", "start": 2226.34, "duration": 0.75}, {"text": "AUDIENCE: You're getting a float.", "start": 2227.09, "duration": 1.47}, {"text": "DAVID MALAN: Yeah, I'm getting a float.", "start": 2228.56, "duration": 1.624}, {"text": "Like, Python itself seems to\nhave fixed a bug in C itself.", "start": 2230.184, "duration": 4.376}, {"text": "What happened in C when you divided\n1, an integer, by 2, an integer, in C?", "start": 2234.56, "duration": 5.86}, {"text": "You would get another integer.", "start": 2240.42, "duration": 1.25}, {"text": "And what's the closest\ninteger you can represent", "start": 2241.67, "duration": 2.0}, {"text": "that doesn't have a decimal point?", "start": 2243.67, "duration": 2.504}, {"text": "0, because the C would truncate\neverything after the decimal point.", "start": 2246.174, "duration": 3.356}, {"text": "And yet, Python seems to\nhave fixed this problem.", "start": 2249.53, "duration": 2.69}, {"text": "And this is actually a\nsomewhat recent phenomenon.", "start": 2252.22, "duration": 2.12}, {"text": "And this a huge religious\ndebate as to whether or not", "start": 2254.34, "duration": 2.33}, {"text": "you should just keep the historical\ndefinition of division, which", "start": 2256.67, "duration": 4.23}, {"text": "is floor division, so to speak, or\nwe should make it truly division,", "start": 2260.9, "duration": 3.27}, {"text": "like we all grew up learning in school.", "start": 2264.17, "duration": 1.74}, {"text": "Python took the latter approach and made\ndivision mean division, true division,", "start": 2265.91, "duration": 4.32}, {"text": "where if you divide two\nints you get back a float.", "start": 2270.23, "duration": 2.229}, {"text": "Of course, this is a\nproblem if people want", "start": 2272.459, "duration": 1.791}, {"text": "to write code that assumes that\nit's going to be truncated.", "start": 2274.25, "duration": 2.49}, {"text": "That can actually be a powerful feature.", "start": 2276.74, "duration": 2.61}, {"text": "So it turns out, and you won't have\nterribly many occasions to use this,", "start": 2279.35, "duration": 3.39}, {"text": "but the compromise in the world\nwas, all right, if you really", "start": 2282.74, "duration": 2.91}, {"text": "want the old behavior of the division\nin Python, we will give it back to you.", "start": 2285.65, "duration": 5.37}, {"text": "You have to use two slashes.", "start": 2291.02, "duration": 1.364}, {"text": "So again, another one of these\ntwo steps forward, one step back.", "start": 2292.384, "duration": 2.666}, {"text": "But it's there, so problems can\nstill be solved in the same way.", "start": 2295.05, "duration": 2.99}, {"text": "And this, if I save it and\nrerun that same code, 1 and 2,", "start": 2298.04, "duration": 4.04}, {"text": "now I get back 0, just as I would in\nC, which does have some applicability.", "start": 2302.08, "duration": 5.08}, {"text": "Let's do one other example\nnow involving some numbers.", "start": 2307.16, "duration": 2.25}, {"text": "And let me go ahead and\ncall this floats.py.", "start": 2309.41, "duration": 3.11}, {"text": "And let me do the same thing, from\nCS50 import getFloat this time.", "start": 2312.52, "duration": 4.422}, {"text": "So I can deal with\nfloating point values.", "start": 2316.942, "duration": 1.708}, {"text": "Let me declare a variable\nx and get a float", "start": 2318.65, "duration": 1.92}, {"text": "and we'll ask the user for a variable x.", "start": 2320.57, "duration": 2.01}, {"text": "Then let's go ahead and get another\nfloat, and just as before, call it y.", "start": 2322.58, "duration": 3.262}, {"text": "But this time both of\nthem are, indeed, floats.", "start": 2325.842, "duration": 1.958}, {"text": "Then let me go ahead and do\nsome math, x plus y equals z.", "start": 2327.8, "duration": 3.27}, {"text": "Let's give myself a third variable.", "start": 2331.07, "duration": 1.59}, {"text": "And then let me just go ahead\nand print out a similar message--", "start": 2332.66, "duration": 2.82}, {"text": "x divided by y equals z.", "start": 2335.48, "duration": 4.72}, {"text": "All right, and let me go ahead\nand save this, clear my terminal,", "start": 2340.2, "duration": 2.93}, {"text": "and do Python of floats.py.", "start": 2343.13, "duration": 2.49}, {"text": "1 divided by 10 this time.", "start": 2345.62, "duration": 2.65}, {"text": "And I get-- dammit, bug.", "start": 2348.27, "duration": 1.43}, {"text": "How do I fix this?", "start": 2349.7, "duration": 1.57}, {"text": "All right, so just a simple f.", "start": 2351.27, "duration": 1.25}, {"text": "Make it a format string.", "start": 2352.52, "duration": 1.05}, {"text": "No big deal.", "start": 2353.57, "duration": 0.76}, {"text": "So let's rerun this, 1, 10.", "start": 2354.33, "duration": 2.28}, {"text": "OK, hoo, hoo.", "start": 2356.61, "duration": 2.39}, {"text": "That's a new one.", "start": 2359.0, "duration": 2.12}, {"text": "What is going on there?", "start": 2361.12, "duration": 1.31}, {"text": "AUDIENCE: [INAUDIBLE]", "start": 2367.18, "duration": 2.294}, {"text": "DAVID MALAN: I did define z in the line\nabove it, and what was your comment?", "start": 2369.474, "duration": 3.166}, {"text": "AUDIENCE: You used x plus y.", "start": 2372.64, "duration": 1.166}, {"text": "DAVID MALAN: I did use x\nplus y, but I think I--", "start": 2373.806, "duration": 2.414}, {"text": "oh, wait, OK.", "start": 2376.22, "duration": 1.11}, {"text": "I'm sorry.", "start": 2377.33, "duration": 0.54}, {"text": "Let's-- OK, so we can fix that.", "start": 2377.87, "duration": 3.89}, {"text": "Let's-- sorry.", "start": 2381.76, "duration": 2.83}, {"text": "There.", "start": 2384.59, "duration": 1.31}, {"text": "OK, so 110.", "start": 2385.9, "duration": 2.55}, {"text": "Hmm, still wrong.", "start": 2388.45, "duration": 3.45}, {"text": "Good catch, thank you, though.", "start": 2391.9, "duration": 2.25}, {"text": "Why is 1 plus 2 11--", "start": 2394.15, "duration": 3.69}, {"text": "or 1 plus 10, 11?", "start": 2397.84, "duration": 3.37}, {"text": "Yeah?", "start": 2401.21, "duration": 0.751}, {"text": "AUDIENCE: [INAUDIBLE].", "start": 2401.961, "duration": 1.739}, {"text": "DAVID MALAN: Wait, wait, wait.", "start": 2403.7, "duration": 1.25}, {"text": "Sorry.", "start": 2404.95, "duration": 1.31}, {"text": "AUDIENCE: [INAUDIBLE]", "start": 2406.26, "duration": 1.84}, {"text": "[LAUGHTER]", "start": 2408.1, "duration": 2.31}, {"text": "DAVID MALAN: This brings me back to\nmy earlier point as to how tired I am.", "start": 2410.41, "duration": 3.28}, {"text": "So this is correct.", "start": 2413.69, "duration": 0.9}, {"text": "So Python does math correctly.", "start": 2414.59, "duration": 4.87}, {"text": "But-- OK, horrifying.", "start": 2419.46, "duration": 2.3}, {"text": "All right, so now let's\ndo division and try", "start": 2421.76, "duration": 3.09}, {"text": "to make the point I think I meant to\nmake late last night where I if I do 1", "start": 2424.85, "duration": 3.84}, {"text": "divided by 10, OK, 1 divided by 10,\nas expected, does actually work here.", "start": 2428.69, "duration": 6.57}, {"text": "So 0.1, that's correct.", "start": 2435.26, "duration": 1.447}, {"text": "But remember in C-- let me\ndig myself out of this hole--", "start": 2436.707, "duration": 2.333}, {"text": "remember in C what happened\nif we dug a little deeper", "start": 2439.04, "duration": 3.39}, {"text": "and we looked a little past\nthe first decimal point.", "start": 2442.43, "duration": 2.32}, {"text": "So how do I do this in Python?", "start": 2444.75, "duration": 1.33}, {"text": "It's actually pretty similar.", "start": 2446.08, "duration": 1.43}, {"text": "Let me go ahead and not just\nshow myself z but go ahead", "start": 2447.51, "duration": 3.35}, {"text": "and print out to, let's say, two\ndecimal places that same value.", "start": 2450.86, "duration": 4.11}, {"text": "The syntax here is weird.", "start": 2454.97, "duration": 1.2}, {"text": "It's different from C. But you literally\ntake the variable that you want", "start": 2456.17, "duration": 3.3}, {"text": "to format, you put a\ncolon and then a dot--", "start": 2459.47, "duration": 2.91}, {"text": "because you want to adjust the dot--", "start": 2462.38, "duration": 1.5}, {"text": "and then you want to\nsay something like 2f.", "start": 2463.88, "duration": 2.34}, {"text": "So this is saying, hey,\nPython, format the variable", "start": 2466.22, "duration": 3.45}, {"text": "that's to the left of the\ncolon using two decimal points.", "start": 2469.67, "duration": 3.987}, {"text": "And by the way, it's a\nfloating point value.", "start": 2473.657, "duration": 1.833}, {"text": "So this f has a different meaning.", "start": 2475.49, "duration": 1.416}, {"text": "This is f as in float.", "start": 2476.906, "duration": 1.164}, {"text": "The f to the left is in format.", "start": 2478.07, "duration": 2.5}, {"text": "So let me go ahead and run this.", "start": 2480.57, "duration": 1.45}, {"text": "1 divided by 10.", "start": 2482.02, "duration": 1.57}, {"text": "And OK, still looking pretty good.", "start": 2483.59, "duration": 1.63}, {"text": "Let's do maybe three decimal\nplaces, save that, rerun it.", "start": 2485.22, "duration": 3.65}, {"text": "1 divided by 10.", "start": 2488.87, "duration": 1.56}, {"text": "Still pretty good.", "start": 2490.43, "duration": 1.06}, {"text": "Let's get a little ambitious.", "start": 2491.49, "duration": 1.55}, {"text": "Let's do it 50 decimal places\nout, 1 divided by 10, and damn it.", "start": 2493.04, "duration": 4.83}, {"text": "Python has not fixed\nthis fundamental problem.", "start": 2497.87, "duration": 2.82}, {"text": "So we describe this problem as what?", "start": 2500.69, "duration": 1.71}, {"text": "What's the sort of buzzword here to\nsort of explain or forgive this issue?", "start": 2505.59, "duration": 4.502}, {"text": "AUDIENCE: [INAUDIBLE]", "start": 2510.092, "duration": 1.099}, {"text": "DAVID MALAN: This is an integer\noverflow, related in spirit.", "start": 2511.191, "duration": 2.499}, {"text": "Integer overflow literally\nhappens when you're", "start": 2513.69, "duration": 1.92}, {"text": "doing lots of addition and something's\nrolling over from a big value", "start": 2515.61, "duration": 2.97}, {"text": "to a small or even a negative.", "start": 2518.58, "duration": 2.58}, {"text": "Similar in spirit.", "start": 2521.16, "duration": 0.824}, {"text": "Yeah?", "start": 2521.984, "duration": 0.5}, {"text": "AUDIENCE: [INAUDIBLE]", "start": 2522.484, "duration": 5.691}, {"text": "DAVID MALAN: Yeah.", "start": 2528.175, "duration": 0.75}, {"text": "If you want to have an infinite\namount of precision all the way out,", "start": 2528.925, "duration": 3.395}, {"text": "you need an infinite amount of memory.", "start": 2532.32, "duration": 1.59}, {"text": "And no Mac or PC or phone has\nan infinite amount of memory.", "start": 2533.91, "duration": 2.82}, {"text": "At some point, a line is drawn in the\nsand and you can only be so precise.", "start": 2536.73, "duration": 3.78}, {"text": "And so imprecision was the analog\nin the floating point world", "start": 2540.51, "duration": 3.72}, {"text": "to overflow, recall, where if you\nonly have a finite number of bits", "start": 2544.23, "duration": 3.06}, {"text": "you can do really well up to a point.", "start": 2547.29, "duration": 1.77}, {"text": "But eventually, the computer's\ngot to estimate that value for you", "start": 2549.06, "duration": 3.45}, {"text": "because you can't represent\nan infinite number of values.", "start": 2552.51, "duration": 2.86}, {"text": "So this is to say Python is\njust as limited, fundamentally,", "start": 2555.37, "duration": 3.59}, {"text": "as some other languages\nlike C. So we've not", "start": 2558.96, "duration": 1.95}, {"text": "gotten rid of all of those problems.", "start": 2560.91, "duration": 1.5}, {"text": "But frankly, in the world of\ndata science and analytics,", "start": 2562.41, "duration": 3.28}, {"text": "it's certainly important\nprecise mathematics.", "start": 2565.69, "duration": 2.0}, {"text": "So there are solutions to this problem.", "start": 2567.69, "duration": 2.02}, {"text": "But it requires special\nlibraries, typically,", "start": 2569.71, "duration": 2.36}, {"text": "importing something that allows\nyou to use as much memory", "start": 2572.07, "duration": 3.0}, {"text": "as you want more than just\nthe default amount of memory.", "start": 2575.07, "duration": 3.49}, {"text": "So that problem there still exists.", "start": 2578.56, "duration": 1.79}, {"text": "Let me go ahead and open\nup one other example here.", "start": 2580.35, "duration": 3.12}, {"text": "And in fact, in C, you'll recall\nthat we had this example here.", "start": 2583.47, "duration": 4.26}, {"text": "In C we had a program called overflow.c.", "start": 2587.73, "duration": 5.51}, {"text": "And notice that this code\nin C from a few weeks", "start": 2593.24, "duration": 3.09}, {"text": "back just multiplied i by 2, by 2, by 2.", "start": 2596.33, "duration": 3.585}, {"text": "So it was doing\nexponentiation, so to speak--", "start": 2599.915, "duration": 1.875}, {"text": "1 to 2 to 4 to 8, 16,\n32, 64, and so forth.", "start": 2601.79, "duration": 3.21}, {"text": "What happened if we waited\nlong enough and watched", "start": 2605.0, "duration": 2.67}, {"text": "this program a few weeks back?", "start": 2607.67, "duration": 3.243}, {"text": "AUDIENCE: You go to 5\nbillion instead of--", "start": 2610.913, "duration": 1.767}, {"text": "DAVID MALAN: Yeah, we hit\nroughly 5 billion or 4 billion--", "start": 2612.68, "duration": 4.166}, {"text": "or rather, we technically hit, I think,\n2 billion, and then it rolled over.", "start": 2616.846, "duration": 3.124}, {"text": "And it actually created a problem.", "start": 2619.97, "duration": 1.44}, {"text": "So let me actually do this.", "start": 2621.41, "duration": 0.82}, {"text": "Let me go ahead and make\noverflow so we can demonstrate", "start": 2622.23, "duration": 2.397}, {"text": "the points that you made earlier about\ninteger overflow, which is, indeed,", "start": 2624.627, "duration": 3.083}, {"text": "this one.", "start": 2627.71, "duration": 0.72}, {"text": "Let me go ahead now and run overflow.", "start": 2628.43, "duration": 2.43}, {"text": "I'll expand my window just so we\ncan fit a little more in the screen.", "start": 2630.86, "duration": 3.43}, {"text": "And as this runs--", "start": 2634.29, "duration": 1.57}, {"text": "whoops, let me fix this.", "start": 2635.86, "duration": 1.63}, {"text": "Here we go.", "start": 2637.49, "duration": 1.79}, {"text": "Let me go ahead and make overflow.", "start": 2639.28, "duration": 1.72}, {"text": "And now 1, 2, 4, 8,\n16, 32, and so forth.", "start": 2641.0, "duration": 5.29}, {"text": "It's a little slow to start,\nbut doubling and doubling", "start": 2646.29, "duration": 2.3}, {"text": "is going to get us up to a\nbig value pretty quickly.", "start": 2648.59, "duration": 2.446}, {"text": "This is indeed going to overflow\nonce we hit roughly 2 billion.", "start": 2651.036, "duration": 2.624}, {"text": "Why?", "start": 2653.66, "duration": 0.75}, {"text": "Why two billion, give or take?", "start": 2654.41, "duration": 2.56}, {"text": "Why that value in C?", "start": 2656.97, "duration": 1.73}, {"text": "Yeah?", "start": 2658.7, "duration": 1.176}, {"text": "AUDIENCE: [INAUDIBLE]", "start": 2659.876, "duration": 2.08}, {"text": "DAVID MALAN: Yeah, that's\nhow much an integer", "start": 2661.956, "duration": 1.874}, {"text": "can store because we're calling C. An\nint is typically 32 bits or 4 bytes.", "start": 2663.83, "duration": 3.87}, {"text": "And with 32 bits, you can represent\nfour billion possible values.", "start": 2667.7, "duration": 3.42}, {"text": "And if half of those values are\npositive and half of them are negative,", "start": 2671.12, "duration": 2.97}, {"text": "it stands to reason that the highest\nyou can count is roughly 2 billion.", "start": 2674.09, "duration": 3.63}, {"text": "And indeed, once we try to count up\njust doubling one billion, we overflow.", "start": 2677.72, "duration": 3.91}, {"text": "So to your point earlier,\noverflow is still an issue,", "start": 2681.63, "duration": 3.2}, {"text": "but in the context of integers.", "start": 2684.83, "duration": 1.71}, {"text": "But now let's try a\nPython version of this.", "start": 2686.54, "duration": 2.46}, {"text": "Let me go ahead now and\nopen up overflow.py,", "start": 2689.0, "duration": 3.887}, {"text": "which is a program I wrote in advance.", "start": 2692.887, "duration": 1.583}, {"text": "It's on the course's\nwebsite, as always, if you", "start": 2694.47, "duration": 1.958}, {"text": "want to take a look more closely.", "start": 2696.428, "duration": 1.872}, {"text": "And if I go into this file in weeks\none, overflow.py, we see this code.", "start": 2698.3, "duration": 5.94}, {"text": "So it's almost the same.", "start": 2704.24, "duration": 1.26}, {"text": "But notice I'm using another\nlibrary that we've not", "start": 2705.5, "duration": 2.124}, {"text": "seen before, from time import sleep.", "start": 2707.624, "duration": 1.966}, {"text": "It's kind of cute.", "start": 2709.59, "duration": 0.75}, {"text": "So this allows me to sleep for a second.", "start": 2710.34, "duration": 1.667}, {"text": "That's going to get tedious\nquickly, but that's OK.", "start": 2712.007, "duration": 2.124}, {"text": "Let's do this real fast.", "start": 2714.131, "duration": 1.029}, {"text": "If I go into the source\nsix directory, weeks one,", "start": 2715.16, "duration": 3.42}, {"text": "and run Python of overflow.py, it's\nthe same function-- or same program,", "start": 2718.58, "duration": 4.95}, {"text": "functionally.", "start": 2723.53, "duration": 1.012}, {"text": "But honestly, this is\ngetting a little tedious.", "start": 2724.542, "duration": 1.958}, {"text": "Let's go ahead and not sleep for a\nsecond every time, save and reload.", "start": 2726.5, "duration": 4.59}, {"text": "Let's just run the thing.", "start": 2731.09, "duration": 1.52}, {"text": "Whew, look at it go.", "start": 2732.61, "duration": 3.19}, {"text": "Only up there.", "start": 2735.8, "duration": 0.72}, {"text": "Look up there.", "start": 2736.52, "duration": 1.92}, {"text": "What's it doing differently?", "start": 2738.44, "duration": 3.63}, {"text": "It's counting a lot\nhigher than 2 billion.", "start": 2742.07, "duration": 2.31}, {"text": "So what might you infer\nabout integers in Python?", "start": 2744.38, "duration": 3.007}, {"text": "AUDIENCE: [INAUDIBLE]", "start": 2747.387, "duration": 1.283}, {"text": "DAVID MALAN: Say again?", "start": 2748.67, "duration": 1.476}, {"text": "AUDIENCE: An integer is defined\nto be quite a number of bits.", "start": 2750.146, "duration": 4.111}, {"text": "DAVID MALAN: OK, an integer is\ndefined to be quite a number of bits.", "start": 2754.257, "duration": 2.833}, {"text": "And indeed, that's the case.", "start": 2757.09, "duration": 1.566}, {"text": "Python is not actually this slow.", "start": 2758.656, "duration": 1.374}, {"text": "It's because we're running a web\nbased IDE and the internet itself", "start": 2760.03, "duration": 2.91}, {"text": "is a little slow.", "start": 2762.94, "duration": 0.96}, {"text": "And so what's happening here is just\nthe internet is getting in the way.", "start": 2763.9, "duration": 2.999}, {"text": "But suffice it to say that Python is\ncounting up way, way higher than C was.", "start": 2766.899, "duration": 3.73}, {"text": "And that's the power you get by\njust using larger data types.", "start": 2770.629, "duration": 2.541}, {"text": "We could have done this in C. We\ncould have used longs, for instance.", "start": 2773.17, "duration": 3.3}, {"text": "But notice that with Python you just\nget more by default out of the box.", "start": 2776.47, "duration": 3.799}, {"text": "Let's go ahead and take\na five minute break here.", "start": 2780.269, "duration": 2.041}, {"text": "And when we resume, we'll\nintroduce some more syntax", "start": 2782.31, "duration": 2.166}, {"text": "and solve some more problems.", "start": 2784.476, "duration": 1.474}, {"text": "All right, so let's take a\nlook at a few other examples", "start": 2785.95, "duration": 3.0}, {"text": "that are comparable to what we did\nback in week one and look at a few", "start": 2788.95, "duration": 2.97}, {"text": "from week two and three\nand really take a look", "start": 2791.92, "duration": 2.52}, {"text": "not just at the syntax, ultimately,\nbut some of the features of Python.", "start": 2794.44, "duration": 3.33}, {"text": "And of course, we need the ability\nto express ourselves conditionally", "start": 2797.77, "duration": 2.94}, {"text": "or logically with control flow.", "start": 2800.71, "duration": 1.77}, {"text": "And so let me propose\na quick program here", "start": 2802.48, "duration": 1.86}, {"text": "that we'll just call conditions.py,\nreminiscent of conditions.c", "start": 2804.34, "duration": 3.42}, {"text": "some time ago.", "start": 2807.76, "duration": 1.09}, {"text": "Let me go ahead and import\nfrom CS50 getInt this time", "start": 2808.85, "duration": 3.71}, {"text": "and get myself another x\nwith getInt x from the user.", "start": 2812.56, "duration": 3.97}, {"text": "Then let me go ahead and ask\nthem for getInt y from the user.", "start": 2816.53, "duration": 3.732}, {"text": "And then let me go ahead\nand just compare them.", "start": 2820.262, "duration": 1.958}, {"text": "And so per our comparison\nwith Scratch a bit ago,", "start": 2822.22, "duration": 2.61}, {"text": "I can simply say if x is\nless than y, then go ahead", "start": 2824.83, "duration": 3.39}, {"text": "and print out, for instance, print x is\nless than y, just as we did weeks ago.", "start": 2828.22, "duration": 5.87}, {"text": "Elif if x is greater\nthan y, we can go ahead", "start": 2834.09, "duration": 2.89}, {"text": "and print out x is greater than y.", "start": 2836.98, "duration": 3.63}, {"text": "And then we can still have a\nthird condition, else, just", "start": 2840.61, "duration": 2.55}, {"text": "like in C, where we print out, for\ninstance, the logical conclusion.", "start": 2843.16, "duration": 3.15}, {"text": "x is equal to y.", "start": 2846.31, "duration": 2.13}, {"text": "So just to point out\nsome of the differences,", "start": 2848.44, "duration": 1.89}, {"text": "indentation is ever so important now.", "start": 2850.33, "duration": 2.07}, {"text": "And it's got to be consistent.", "start": 2852.4, "duration": 1.459}, {"text": "You can't have four spaces and three.", "start": 2853.859, "duration": 1.541}, {"text": "You've got to have, for\ninstance, four all the way.", "start": 2855.4, "duration": 2.14}, {"text": "Notice that I've got the\ncolons consistently there.", "start": 2857.54, "duration": 2.15}, {"text": "But notice that I don't need the\nparentheses, either, anymore.", "start": 2859.69, "duration": 4.57}, {"text": "And with Python, there's\nsort of a buzzword, Pythonic.", "start": 2864.26, "duration": 2.64}, {"text": "There is a Pythonic way of doing things.", "start": 2866.9, "duration": 2.03}, {"text": "You can have parentheses around x,\nless than y, or x greater than y,", "start": 2868.93, "duration": 4.3}, {"text": "just like in C. But it doesn't\nadd anything logically, arguably.", "start": 2873.23, "duration": 3.372}, {"text": "And if it doesn't make\nyour code more readable,", "start": 2876.602, "duration": 1.958}, {"text": "don't clutter your code\nwith additional characters.", "start": 2878.56, "duration": 2.43}, {"text": "And so that's a general\nrule of thumb now.", "start": 2880.99, "duration": 1.83}, {"text": "Python is much more trim\nwhen it comes to syntax, only", "start": 2882.82, "duration": 3.279}, {"text": "introducing it when it really solves\na problem, which in this case,", "start": 2886.099, "duration": 2.791}, {"text": "it doesn't really.", "start": 2888.89, "duration": 0.82}, {"text": "Yeah?", "start": 2889.71, "duration": 1.009}, {"text": "AUDIENCE: Quick question,\nthe lines [INAUDIBLE],,", "start": 2890.719, "duration": 2.041}, {"text": "those are grouped right together,\none to the next, one to the next,", "start": 2892.76, "duration": 2.791}, {"text": "and one to the next.", "start": 2895.551, "duration": 0.964}, {"text": "If you were to put an\nadditional line between them,", "start": 2896.515, "duration": 2.125}, {"text": "would that break the code?", "start": 2898.64, "duration": 1.32}, {"text": "DAVID MALAN: No, not at all.", "start": 2899.96, "duration": 0.81}, {"text": "I can have as much whitespace\nvertically as I want if.", "start": 2900.77, "duration": 2.31}, {"text": "I want to add some comments,\nindeed, I can do that.", "start": 2903.08, "duration": 2.13}, {"text": "And why don't we do that, in fact,\nbecause the commenting syntax", "start": 2905.21, "duration": 2.55}, {"text": "for Python is a little different.", "start": 2907.76, "duration": 1.374}, {"text": "In C, we were in the habit\nof doing slash slash.", "start": 2909.134, "duration": 2.181}, {"text": "Python, it's actually\na little more succinct.", "start": 2911.315, "duration": 1.875}, {"text": "You can just use a single hash.", "start": 2913.19, "duration": 1.32}, {"text": "And you can say gets x from user here.", "start": 2914.51, "duration": 2.76}, {"text": "I can say get y from user here.", "start": 2917.27, "duration": 2.59}, {"text": "And then I can say something\nlike compare x and y.", "start": 2919.86, "duration": 2.697}, {"text": "And if I really wanted to, I\ncould put comments in here.", "start": 2922.557, "duration": 2.333}, {"text": "That is perfectly fine.", "start": 2924.89, "duration": 1.26}, {"text": "But I'll just keep it more compact\nwith this particular example.", "start": 2926.15, "duration": 3.27}, {"text": "So any questions on the conditional\nsyntax or what we've just done here?", "start": 2929.42, "duration": 5.32}, {"text": "All right, let Me whip\nup another example,", "start": 2934.74, "duration": 2.24}, {"text": "this time doing some comparisons.", "start": 2936.98, "duration": 2.36}, {"text": "This time, let me create\na file called answer.py,", "start": 2939.34, "duration": 2.85}, {"text": "which is reminiscent of a quick example\nwe did weeks ago called answer.c.", "start": 2942.19, "duration": 3.51}, {"text": "Let me go ahead and from\nCS50 import getString.", "start": 2945.7, "duration": 3.93}, {"text": "And this time, let me\ngo ahead and declare", "start": 2949.63, "duration": 2.58}, {"text": "a variable, C. And let me go ahead\nand get a string from the user--", "start": 2952.21, "duration": 2.88}, {"text": "whoops-- get a string from\nthe user for their answer", "start": 2955.09, "duration": 2.94}, {"text": "to whatever question\nit is we care about.", "start": 2958.03, "duration": 1.74}, {"text": "And then if it's meant to be a\nyes/no answer, let's check for that.", "start": 2959.77, "duration": 3.12}, {"text": "If c equals equals y or\nc equals equals little y,", "start": 2962.89, "duration": 5.95}, {"text": "then go ahead and say, just\nfor the sake of demonstration,", "start": 2968.84, "duration": 3.44}, {"text": "yes, because the human\npresumably meant that.", "start": 2972.28, "duration": 2.4}, {"text": "Elif c equals equals capital\nn or c equals equals little n,", "start": 2974.68, "duration": 5.46}, {"text": "then go ahead and print\nout, for instance, no.", "start": 2980.14, "duration": 3.18}, {"text": "So a short program, but what\nare some of the takeaways?", "start": 2983.32, "duration": 4.0}, {"text": "Well, what's different clearly among\nthese lines, 5 through 8, versus C,", "start": 2987.32, "duration": 3.86}, {"text": "weeks ago?", "start": 2991.18, "duration": 1.91}, {"text": "Yeah.", "start": 2993.09, "duration": 0.576}, {"text": "AUDIENCE: For or you have to do--", "start": 2993.666, "duration": 1.664}, {"text": "DAVID MALAN: Yeah, none of those\nstupid vertical bars or the ampersand", "start": 2995.33, "duration": 2.98}, {"text": "ampersand.", "start": 2998.31, "duration": 0.52}, {"text": "If you want to do something or or\nand it together, just say and and", "start": 2998.83, "duration": 3.6}, {"text": "or, much like Scratch,\nactually, some weeks ago.", "start": 3002.43, "duration": 3.15}, {"text": "Notice, too-- how are\nwe comparing strings?", "start": 3005.58, "duration": 3.39}, {"text": "Turns out Python does\nnot have chars, per se.", "start": 3008.97, "duration": 3.96}, {"text": "C did have chars, single characters.", "start": 3012.93, "duration": 2.03}, {"text": "Python only has strings.", "start": 3014.96, "duration": 1.42}, {"text": "It has strings, ints, floats,\nand then some fancier things,", "start": 3016.38, "duration": 2.727}, {"text": "but it doesn't have chars.", "start": 3019.107, "duration": 1.083}, {"text": "So that's why I am\ndeliberately using string.", "start": 3020.19, "duration": 2.34}, {"text": "But when we use strings in C,\nhow did we compare two strings?", "start": 3022.53, "duration": 5.6}, {"text": "Str comp, right, because of the whole\nannoying pointer comparison thing.", "start": 3028.13, "duration": 3.837}, {"text": "Well, it turns out now\nin Python if you want", "start": 3031.967, "duration": 1.833}, {"text": "to compare two strings character\nby character by character,", "start": 3033.8, "duration": 3.48}, {"text": "equal equals is back.", "start": 3037.28, "duration": 1.29}, {"text": "And it does exactly what you expect\nit to do, even if it's a full word.", "start": 3038.57, "duration": 4.48}, {"text": "So if you're actually checking for, for\ninstance, yes or yes from the human,", "start": 3043.05, "duration": 4.73}, {"text": "you can still use equal equals,\nas well, even though it's", "start": 3047.78, "duration": 2.85}, {"text": "more than now one character.", "start": 3050.63, "duration": 1.45}, {"text": "So that's a wonderful feature, too.", "start": 3052.08, "duration": 1.458}, {"text": "And it just makes the code\nmore readable and a lot easier", "start": 3053.538, "duration": 2.462}, {"text": "to write right out of the gate.", "start": 3056.0, "duration": 2.43}, {"text": "All right, so now recall that\nin C we spent a little while,", "start": 3058.43, "duration": 3.57}, {"text": "as well as in Scratch, taking a look\nat a few examples about coughing,", "start": 3062.0, "duration": 3.12}, {"text": "of all things.", "start": 3065.12, "duration": 0.93}, {"text": "And in fact, in Python and C--", "start": 3066.05, "duration": 1.95}, {"text": "rather, in Scratch and in C--", "start": 3068.0, "duration": 1.53}, {"text": "we did a zero example that\nlooked a little like this.", "start": 3069.53, "duration": 2.6}, {"text": "If you want to simulate the notion\nof Scratch the cat coughing,", "start": 3072.13, "duration": 2.86}, {"text": "you might, of course, do this.", "start": 3074.99, "duration": 1.456}, {"text": "And then if he's going to cough\nthree times, you might do this.", "start": 3076.446, "duration": 2.624}, {"text": "And we ran this and it just did\ncough, cough, cough on the screen.", "start": 3079.07, "duration": 2.959}, {"text": "I won't bother running it\nbecause it will just do that.", "start": 3082.029, "duration": 2.291}, {"text": "But this was bad design\nwe claimed weeks ago.", "start": 3084.32, "duration": 2.49}, {"text": "What was the gist of\nwhy this is bad design?", "start": 3086.81, "duration": 1.89}, {"text": "I mean, I literally copied and pasted.", "start": 3091.267, "duration": 1.583}, {"text": "And the odds are if you're ever\ndoing that in CS50 or in programming", "start": 3092.85, "duration": 3.026}, {"text": "more generally, you're\nprobably being a little lazy", "start": 3095.876, "duration": 2.124}, {"text": "and there's a better way to do it.", "start": 3098.0, "duration": 1.29}, {"text": "And it's a more\nmaintainable way to do it.", "start": 3099.29, "duration": 1.749}, {"text": "So of course, we introduced weeks\nago, both in Scratch and in C,", "start": 3101.039, "duration": 4.221}, {"text": "the ability to in cough\none, this time, do a loop.", "start": 3105.26, "duration": 4.35}, {"text": "And I can do a loop slightly differently\nin Python and in C. But for i", "start": 3109.61, "duration": 3.63}, {"text": "in the range of 3, go\nahead and print out cough.", "start": 3113.24, "duration": 3.762}, {"text": "So the syntax for the for\nloop is a little different.", "start": 3117.002, "duration": 2.208}, {"text": "But it's pretty\nstraightforward, nonetheless,", "start": 3119.21, "duration": 1.874}, {"text": "once you remember that you\nuse for, variable name, then", "start": 3121.084, "duration": 3.256}, {"text": "the preposition in, and then the word\nrange with a parenthesis and its--", "start": 3124.34, "duration": 4.229}, {"text": "parentheses and the value\nyou want to care about.", "start": 3128.569, "duration": 2.041}, {"text": "But then we saw an opportunity, recall,\nto actually abstract coughing away.", "start": 3130.61, "duration": 5.63}, {"text": "Coughing, at least in our textual form,\nis just the act of printing something.", "start": 3136.24, "duration": 3.25}, {"text": "So we introduced in\nversion two some time ago,", "start": 3139.49, "duration": 2.82}, {"text": "the following approach in cough two.", "start": 3142.31, "duration": 3.03}, {"text": "I instead defined a function called\ncough that did the coughing for me.", "start": 3145.34, "duration": 3.517}, {"text": "And we've not seen this yet in Python.", "start": 3148.857, "duration": 1.583}, {"text": "So how do you define a function\nin Python called cough?", "start": 3150.44, "duration": 2.91}, {"text": "Put another way, how do you make\nyour own custom puzzle piece,", "start": 3153.35, "duration": 3.33}, {"text": "just as we did in Scratch?", "start": 3156.68, "duration": 1.62}, {"text": "Well, you define it with def.", "start": 3158.3, "duration": 1.95}, {"text": "And then you have it do\nexactly what you want", "start": 3160.25, "duration": 2.14}, {"text": "it to do by just indenting the lines\nof code that belong to that function.", "start": 3162.39, "duration": 3.3}, {"text": "So there's no return value.", "start": 3165.69, "duration": 1.58}, {"text": "There's no need for an\ninput at the moment.", "start": 3167.27, "duration": 1.93}, {"text": "But we do have the colon.", "start": 3169.2, "duration": 1.31}, {"text": "And we have the indentation.", "start": 3170.51, "duration": 1.17}, {"text": "No curly braces, nothing else.", "start": 3171.68, "duration": 1.83}, {"text": "How do I now use this function?", "start": 3173.51, "duration": 1.72}, {"text": "Well, here's where we have a few\noptions stylistically in the program.", "start": 3175.23, "duration": 4.25}, {"text": "The simplest way to call this function\nwould be quite simply like this.", "start": 3179.48, "duration": 4.41}, {"text": "Go ahead and for i in range\n3, go ahead now and cough.", "start": 3183.89, "duration": 5.82}, {"text": "And this should look a little weird.", "start": 3189.71, "duration": 1.53}, {"text": "It looks, indeed, a little sloppy.", "start": 3191.24, "duration": 1.537}, {"text": "But let's see if it works.", "start": 3192.777, "duration": 1.083}, {"text": "So if I go ahead and run\nPython of coughtwo.py,", "start": 3193.86, "duration": 3.92}, {"text": "it seems to cough, cough, cough.", "start": 3197.78, "duration": 2.01}, {"text": "But I say this is a little\nweird because what am I", "start": 3199.79, "duration": 4.37}, {"text": "doing that's very different now from C?", "start": 3204.16, "duration": 4.43}, {"text": "There's no what?", "start": 3208.59, "duration": 1.39}, {"text": "There's no main function.", "start": 3209.98, "duration": 1.71}, {"text": "I just have some code right\nhere on the left of the screen.", "start": 3211.69, "duration": 3.052}, {"text": "And yet, I do have a function here.", "start": 3214.742, "duration": 1.458}, {"text": "And in Python, this is OK.", "start": 3216.2, "duration": 1.467}, {"text": "Because you're using an\ninterpreter and reading the file", "start": 3217.667, "duration": 2.333}, {"text": "top to bottom, left to right, you don't\nstrictly need a function called main.", "start": 3220.0, "duration": 3.39}, {"text": "It's just going to\ninterpret all of your code.", "start": 3223.39, "duration": 2.22}, {"text": "And when it's seen the\ndefinition of a function, OK.", "start": 3225.61, "duration": 2.201}, {"text": "It's going to say, OK, got it.", "start": 3227.811, "duration": 1.249}, {"text": "I now know what the verb cough means.", "start": 3229.06, "duration": 1.77}, {"text": "I will do this anytime\nI see it down here.", "start": 3230.83, "duration": 3.06}, {"text": "But we're going to run into a problem.", "start": 3233.89, "duration": 2.23}, {"text": "And if, indeed, I did what\nmy first instinct was,", "start": 3236.12, "duration": 2.75}, {"text": "which was to put the logic, the\nmain part of my program at the top", "start": 3238.87, "duration": 3.75}, {"text": "and to define cough down\nhere, let's see what happens.", "start": 3242.62, "duration": 2.62}, {"text": "Let me zoom out.", "start": 3245.24, "duration": 0.92}, {"text": "Let me go ahead and rerun coughtwo.py.", "start": 3246.16, "duration": 2.64}, {"text": "And now we start to see the\nfirst of our error messages.", "start": 3248.8, "duration": 2.61}, {"text": "And they're going to look just as\ncryptic at first glance as is clang", "start": 3251.41, "duration": 3.48}, {"text": "and make were.", "start": 3254.89, "duration": 0.84}, {"text": "Arrested assured that help 50 can help\nwith Python error messages, as well.", "start": 3255.73, "duration": 3.91}, {"text": "But let's just try to parse what I\ndo understand. cough2.py, line two", "start": 3259.64, "duration": 4.22}, {"text": "in module whatever that is, name error.", "start": 3263.86, "duration": 2.58}, {"text": "Name cough is not defined.", "start": 3266.44, "duration": 2.11}, {"text": "So what's your gut here?", "start": 3268.55, "duration": 1.28}, {"text": "What is that really--", "start": 3269.83, "duration": 1.35}, {"text": "what's the explanation for that error?", "start": 3271.18, "duration": 1.71}, {"text": "Because cough is clearly defined--", "start": 3272.89, "duration": 1.71}, {"text": "literally with the define def verb--", "start": 3274.6, "duration": 3.06}, {"text": "right there on line four now.", "start": 3277.66, "duration": 2.891}, {"text": "What--", "start": 3280.551, "duration": 0.499}, {"text": "AUDIENCE: You're calling\ncough before it's defined.", "start": 3281.05, "duration": 0.932}, {"text": "DAVID MALAN: Yeah, I'm trying\nto call it before it's defined.", "start": 3281.982, "duration": 2.541}, {"text": "Python is trying to\ntake me very literally.", "start": 3284.523, "duration": 2.184}, {"text": "And it's going to do top\nto bottom, left to right.", "start": 3286.707, "duration": 2.083}, {"text": "And if it doesn't see\nuntil the bottom something", "start": 3288.79, "duration": 2.0}, {"text": "it's supposed to be doing at the\ntop, it's just not going to work.", "start": 3290.79, "duration": 2.891}, {"text": "So there is a solution to this and\nit starts to get a little ugly.", "start": 3293.681, "duration": 2.749}, {"text": "But it's a more generalized solution.", "start": 3296.43, "duration": 1.71}, {"text": "It turns out that even though main\nis not required in a Python program,", "start": 3298.14, "duration": 3.75}, {"text": "many programmers just\ncreate one nonetheless", "start": 3301.89, "duration": 2.7}, {"text": "to address this particular problem.", "start": 3304.59, "duration": 2.19}, {"text": "And they specifically\ndo something like this--", "start": 3306.78, "duration": 2.37}, {"text": "def main-- and then below it\nthey indent everything there.", "start": 3309.15, "duration": 4.14}, {"text": "And then you need one specific\nfeature to solve this problem now.", "start": 3313.29, "duration": 5.1}, {"text": "I've now defined main and I've\ndefined cough, which theoretically", "start": 3318.39, "duration": 3.57}, {"text": "solves this problem just\nas it did in C. There", "start": 3321.96, "duration": 2.58}, {"text": "is no notion of a prototype in Python.", "start": 3324.54, "duration": 1.74}, {"text": "That is not the solution to copy paste\nthe name of the function up above.", "start": 3326.28, "duration": 4.0}, {"text": "But when I do this now,\nliterally nothing happens.", "start": 3330.28, "duration": 3.54}, {"text": "But I did get rid of the error.", "start": 3333.82, "duration": 2.1}, {"text": "So just reason through this, perhaps.", "start": 3335.92, "duration": 2.344}, {"text": "Especially if you've never\nprogrammed Python before,", "start": 3338.264, "duration": 2.166}, {"text": "why might nothing now be happening?", "start": 3340.43, "duration": 4.245}, {"text": "AUDIENCE: Not calling main?", "start": 3344.675, "duration": 1.124}, {"text": "DAVID MALAN: I'm not calling main, yeah.", "start": 3345.799, "duration": 1.876}, {"text": "So whereas in C--", "start": 3347.675, "duration": 1.335}, {"text": "and frankly, in Java, C++, and a few\nother languages-- main is special.", "start": 3349.01, "duration": 4.62}, {"text": "It just gets called by default.\nIn Python, main is not special.", "start": 3353.63, "duration": 3.96}, {"text": "I've chosen this name main just\nbecause so many other languages use it,", "start": 3357.59, "duration": 3.37}, {"text": "but it has no special significance.", "start": 3360.96, "duration": 1.88}, {"text": "If you want to call main,\nyou have to do it yourself.", "start": 3362.84, "duration": 3.13}, {"text": "And so this is a little\nweird, admittedly.", "start": 3365.97, "duration": 2.12}, {"text": "But you can literally do this down here\nbecause your code will be executed top", "start": 3368.09, "duration": 4.32}, {"text": "to bottom, left to right.", "start": 3372.41, "duration": 1.2}, {"text": "By the time line 10 is reached,\nboth main has been defined", "start": 3373.61, "duration": 3.03}, {"text": "and cough has been defined,\nwhich means you're good to go.", "start": 3376.64, "duration": 2.46}, {"text": "So if I now go down here and run Python\nof cough2, now it actually works.", "start": 3379.1, "duration": 4.53}, {"text": "Now, as an aside, this is\nnot Pythonic, if you will.", "start": 3383.63, "duration": 3.57}, {"text": "Most people would actually do this\nif the name equals equals main,", "start": 3387.2, "duration": 5.82}, {"text": "then do this.", "start": 3393.02, "duration": 1.89}, {"text": "This is for lower level reasons that\nlet me wave my hand out for today.", "start": 3394.91, "duration": 3.27}, {"text": "But long story short, the addition\nof this cryptic-looking line", "start": 3398.18, "duration": 2.752}, {"text": "solves other problems\nthat we're just not going", "start": 3400.932, "duration": 1.958}, {"text": "to trip over this week\nand probably next.", "start": 3402.89, "duration": 1.9}, {"text": "So this is the common way to do it.", "start": 3404.79, "duration": 1.92}, {"text": "But if you just ignore that, the\neffect of this cryptic-looking code", "start": 3406.71, "duration": 3.02}, {"text": "is just to call main yourself\nat the very bottom of your file.", "start": 3409.73, "duration": 2.73}, {"text": "So when we start writing\nmore interesting programs,", "start": 3412.46, "duration": 1.89}, {"text": "this is just going to\nbecome conventional.", "start": 3414.35, "duration": 1.57}, {"text": "If you want to start writing\nfunctions and so forth,", "start": 3415.92, "duration": 2.166}, {"text": "odds are you'll benefit\nby writing a main function", "start": 3418.086, "duration": 2.474}, {"text": "and putting more code in there.", "start": 3420.56, "duration": 1.56}, {"text": "So let's do one final example with\ncough that actually now parameterizes", "start": 3422.12, "duration": 5.28}, {"text": "the code, just as we did weeks ago in\nScratch and C. This will be cough3.py.", "start": 3427.4, "duration": 4.8}, {"text": "Let me start as I did\njust a little bit ago.", "start": 3432.2, "duration": 2.13}, {"text": "But suppose I want to\nachieve this effect.", "start": 3434.33, "duration": 2.22}, {"text": "I want the computer to cough three\ntimes by passing in an input.", "start": 3436.55, "duration": 4.23}, {"text": "I now do need to modify\ncough to take an input.", "start": 3440.78, "duration": 3.12}, {"text": "And in C, I would have\nsaid something like int n.", "start": 3443.9, "duration": 2.52}, {"text": "But you don't have to\nspecify data types in Python,", "start": 3446.42, "duration": 2.88}, {"text": "you just have to specify the\nparameter name or the argument name.", "start": 3449.3, "duration": 2.85}, {"text": "So that's nice and simple.", "start": 3452.15, "duration": 1.36}, {"text": "And now down in here, in cough\nis where I should probably", "start": 3453.51, "duration": 3.17}, {"text": "say for i in the range of 3, do this.", "start": 3456.68, "duration": 4.59}, {"text": "But this isn't quite right.", "start": 3461.27, "duration": 1.17}, {"text": "What fix do I want to make here?", "start": 3462.44, "duration": 2.261}, {"text": "Yeah.", "start": 3464.701, "duration": 0.499}, {"text": "Now I can just pass in n.", "start": 3465.2, "duration": 1.22}, {"text": "So range is just a function\nthat takes an argument that I've", "start": 3466.42, "duration": 2.5}, {"text": "been hard coding as three just because.", "start": 3468.92, "duration": 2.23}, {"text": "But you can generalize\nit with n, as well.", "start": 3471.15, "duration": 2.27}, {"text": "So now again, per our discussion\nof abstraction weeks and weeks", "start": 3473.42, "duration": 3.03}, {"text": "ago, do we have a sort of\nbeautiful version of coughing,", "start": 3476.45, "duration": 3.45}, {"text": "even though it's looking\nway more cryptic.", "start": 3479.9, "duration": 2.07}, {"text": "But by step by step by step\ndid we get to the point", "start": 3481.97, "duration": 2.25}, {"text": "of having a main function that\ntakes an abstraction, cough.", "start": 3484.22, "duration": 2.88}, {"text": "Do it this many times.", "start": 3487.1, "duration": 1.32}, {"text": "Now the implementation details are\nhidden in this custom puzzle piece,", "start": 3488.42, "duration": 2.95}, {"text": "if you will.", "start": 3491.37, "duration": 0.62}, {"text": "And the two lines at\nthe bottom just kick off", "start": 3491.99, "duration": 2.61}, {"text": "the whole execution of the program.", "start": 3494.6, "duration": 1.68}, {"text": "But that's the only stuff that's\nreally Python-specific now.", "start": 3496.28, "duration": 4.462}, {"text": "Yeah?", "start": 3500.742, "duration": 0.972}, {"text": "AUDIENCE: Can we use the cough\nfunction on line 11 [INAUDIBLE]??", "start": 3501.714, "duration": 5.836}, {"text": "DAVID MALAN: Could use the\ncough function on line 11?", "start": 3507.55, "duration": 3.601}, {"text": "Yes.", "start": 3511.151, "duration": 0.499}, {"text": "You could absolutely just do this, for\ninstance, and get rid of main again.", "start": 3511.65, "duration": 5.66}, {"text": "It's just a convention.", "start": 3517.31, "duration": 1.18}, {"text": "Once you start writing more\nsophisticated programs with functions,", "start": 3518.49, "duration": 3.0}, {"text": "you should probably introduce\nmain just to keep it tidy.", "start": 3521.49, "duration": 4.052}, {"text": "AUDIENCE: With the [INAUDIBLE].", "start": 3525.542, "duration": 3.788}, {"text": "DAVID MALAN: You could do that.", "start": 3529.33, "duration": 1.38}, {"text": "Then you're starting to be non-Pythonic.", "start": 3530.71, "duration": 2.7}, {"text": "Like, yes, you could do cough3\nbut people would look askew at you", "start": 3533.41, "duration": 5.91}, {"text": "because it's just not done that way.", "start": 3539.32, "duration": 2.13}, {"text": "That's what Pythonic means.", "start": 3541.45, "duration": 1.71}, {"text": "Yeah, other questions?", "start": 3543.16, "duration": 1.836}, {"text": "AUDIENCE: You need to have the\n[INAUDIBLE] come after the for i", "start": 3544.996, "duration": 3.944}, {"text": "in range n so that it\nknows what the cough is?", "start": 3548.94, "duration": 6.9}, {"text": "DAVID MALAN: Not in this case.", "start": 3555.84, "duration": 1.25}, {"text": "So the order now is OK because\nfirst Python is seeing here's", "start": 3557.09, "duration": 5.372}, {"text": "the definition of main.", "start": 3562.462, "duration": 0.958}, {"text": "OK, I got it.", "start": 3563.42, "duration": 1.08}, {"text": "And then it's saying, here is the\ndefinition of cough, OK, I got it.", "start": 3564.5, "duration": 2.88}, {"text": "But it's not actually\ncalling those functions yet.", "start": 3567.38, "duration": 2.64}, {"text": "The Python errors are thrown\nonly at what's called runtime,", "start": 3570.02, "duration": 3.15}, {"text": "the running of the program's time,\nwhich means only when main is called", "start": 3573.17, "duration": 4.32}, {"text": "does Python actually\nexecute line 4 and then see,", "start": 3577.49, "duration": 3.507}, {"text": "ooh, I need to call a\nfunction called cough.", "start": 3580.997, "duration": 1.833}, {"text": "But that's OK because it\nsaw it earlier when it first", "start": 3582.83, "duration": 2.52}, {"text": "read the file top to bottom.", "start": 3585.35, "duration": 1.99}, {"text": "So it matters when the\nfunctions are called,", "start": 3587.34, "duration": 2.6}, {"text": "not where they appear, per se, in\nthe file, the order in which they're", "start": 3589.94, "duration": 4.06}, {"text": "called.", "start": 3594.0, "duration": 0.66}, {"text": "Other questions?", "start": 3594.66, "duration": 2.64}, {"text": "All right, yes?", "start": 3597.3, "duration": 3.425}, {"text": "AUDIENCE: I don't know\nwhere you [INAUDIBLE] from.", "start": 3600.725, "duration": 3.465}, {"text": "How do you define n as an integer?", "start": 3604.19, "duration": 2.904}, {"text": "DAVID MALAN: How did I\ndefine n as an integer?", "start": 3607.094, "duration": 1.916}, {"text": "This is what's nice about Python.", "start": 3609.01, "duration": 1.23}, {"text": "If you want a variable\nor a parameter, just", "start": 3610.24, "duration": 1.791}, {"text": "start using it without\nmentioning its data type.", "start": 3612.031, "duration": 2.919}, {"text": "So the fact that I put n in\nparentheses in this function", "start": 3614.95, "duration": 3.41}, {"text": "means, hey, Python, let this\nfunction take an input called n.", "start": 3618.36, "duration": 3.6}, {"text": "And it can actually be any\ndata type-- int, float, string,", "start": 3621.96, "duration": 2.88}, {"text": "or even something else.", "start": 3624.84, "duration": 1.17}, {"text": "It's up to me to use it\nresponsibly as a number", "start": 3626.01, "duration": 2.94}, {"text": "and to call it\nresponsibly with a number.", "start": 3628.95, "duration": 3.61}, {"text": "Good question.", "start": 3632.56, "duration": 1.19}, {"text": "Yeah?", "start": 3633.75, "duration": 0.638}, {"text": "AUDIENCE: So it's possible\nfor a variable to change type?", "start": 3634.388, "duration": 2.537}, {"text": "DAVID MALAN: It is, indeed,\npossible for a variable", "start": 3636.925, "duration": 2.125}, {"text": "to change type, a good observation.", "start": 3639.05, "duration": 1.86}, {"text": "So yes, Python is not as\nstrongly-typed language, so to speak.", "start": 3640.91, "duration": 4.65}, {"text": "C is strongly-typed in that\nif you make something an int,", "start": 3645.56, "duration": 2.49}, {"text": "it is staying an int forever.", "start": 3648.05, "duration": 1.8}, {"text": "Python is loosely typed, whereby\nx can be an int initially.", "start": 3649.85, "duration": 3.27}, {"text": "But if you really want to turn\nit into a string, you can.", "start": 3653.12, "duration": 2.46}, {"text": "But the convention there would be, yes,\nyou can do that, but don't do that.", "start": 3655.58, "duration": 4.56}, {"text": "So Python has the, frankly,\nthe sort of arrogance", "start": 3660.14, "duration": 2.64}, {"text": "of being sort of an adult language.", "start": 3662.78, "duration": 1.68}, {"text": "Yes, you could do that, but just don't.", "start": 3664.46, "duration": 2.1}, {"text": "Why do we have to protect\nyou from yourselves?", "start": 3666.56, "duration": 1.917}, {"text": "And so in that sense, you need to be\na little more responsible about it.", "start": 3668.477, "duration": 2.999}, {"text": "But again, there are\narguments both ways.", "start": 3671.476, "duration": 1.834}, {"text": "That induces potential bugs\nthat C would catch for you.", "start": 3673.31, "duration": 3.51}, {"text": "And this is where humans start\nto disagree about the upsides", "start": 3676.82, "duration": 3.0}, {"text": "and downsides of languages, whether a\nlanguage should be strongly or loosely", "start": 3679.82, "duration": 3.57}, {"text": "or not even typed at all.", "start": 3683.39, "duration": 1.9}, {"text": "A good observation.", "start": 3685.29, "duration": 1.38}, {"text": "So let's look at a paradigm\nthat was super common in C", "start": 3686.67, "duration": 2.66}, {"text": "when we wanted to do\nsomething again and again", "start": 3689.33, "duration": 1.95}, {"text": "to see how it actually is a little\ndifferently done in Python now.", "start": 3691.28, "duration": 3.09}, {"text": "Let me go ahead and create\na file called positive.py", "start": 3694.37, "duration": 3.51}, {"text": "and go ahead and write a\nprogram a little quickly here.", "start": 3697.88, "duration": 3.07}, {"text": "So from CS50, let me go\nahead and import getInt,", "start": 3700.95, "duration": 3.3}, {"text": "so we can get integers from the user.", "start": 3704.25, "duration": 1.78}, {"text": "Let me go ahead and\ndefine a main function", "start": 3706.03, "duration": 1.75}, {"text": "that simply does i, which will be\nmy variable, gets a positive int,", "start": 3707.78, "duration": 6.16}, {"text": "and asks the user, just\nas we did weeks ago,", "start": 3713.94, "duration": 2.24}, {"text": "if you'll recall, for\na positive integer.", "start": 3716.18, "duration": 2.7}, {"text": "And then just goes ahead and\nvery boringly prints it out.", "start": 3718.88, "duration": 3.36}, {"text": "So that's all this program does.", "start": 3722.24, "duration": 1.62}, {"text": "And let me go ahead and\njust from recollection--", "start": 3723.86, "duration": 2.25}, {"text": "though it's totally fine to copy/paste\nthis cryptic-looking string,", "start": 3726.11, "duration": 2.82}, {"text": "we would just be remiss in not\nshowing you how most people do this.", "start": 3728.93, "duration": 4.66}, {"text": "So if I do this, this\nis a complete program,", "start": 3733.59, "duration": 2.18}, {"text": "except for the fact that\nwhat does not exist yet?", "start": 3735.77, "duration": 5.35}, {"text": "Get positive int probably does not\nexist, just as it didn't in week one,", "start": 3741.12, "duration": 3.145}, {"text": "because we have to invent it ourselves.", "start": 3744.265, "duration": 1.625}, {"text": "Get int exists, but get\npositive int does not.", "start": 3745.89, "duration": 2.14}, {"text": "And just for demonstration's\nsake, let's try this.", "start": 3748.03, "duration": 2.083}, {"text": "Python of positive.py,\nnotice we have name error get", "start": 3750.113, "duration": 3.247}, {"text": "positive int not defined.", "start": 3753.36, "duration": 1.43}, {"text": "OK, so we can fix that.", "start": 3754.79, "duration": 1.49}, {"text": "We can literally define, or def, it.", "start": 3756.28, "duration": 2.18}, {"text": "So get positive int.", "start": 3758.46, "duration": 2.46}, {"text": "It's going to take a\nprompt from the user,", "start": 3760.92, "duration": 1.75}, {"text": "just as it did weeks ago, the string\nthat you want to show to him or her.", "start": 3762.67, "duration": 3.2}, {"text": "And now let me go ahead\nand get a positive integer.", "start": 3765.87, "duration": 3.48}, {"text": "What type of programming\nconstruct did we", "start": 3769.35, "duration": 2.58}, {"text": "use in C to do something\nagain and again and again?", "start": 3771.93, "duration": 3.133}, {"text": "AUDIENCE: Loop.", "start": 3775.063, "duration": 0.759}, {"text": "DAVID MALAN: A loop, for\nsure, but more specifically,", "start": 3775.822, "duration": 2.208}, {"text": "to do something at least\nonce and then maybe again", "start": 3778.03, "duration": 2.67}, {"text": "and again and again if\nthey don't cooperate?", "start": 3780.7, "duration": 1.914}, {"text": "AUDIENCE: While.", "start": 3782.614, "duration": 0.666}, {"text": "DAVID MALAN: Do while.", "start": 3783.28, "duration": 1.27}, {"text": "No do while in Python.", "start": 3784.55, "duration": 2.18}, {"text": "So that handy feature for\nuser input does not exist.", "start": 3786.73, "duration": 3.02}, {"text": "So that's fine.", "start": 3789.75, "duration": 0.995}, {"text": "We need to solve this just differently.", "start": 3790.745, "duration": 1.625}, {"text": "And honestly, in C, you could have\nsolved that problem differently.", "start": 3792.37, "duration": 2.82}, {"text": "You don't need do while.", "start": 3795.19, "duration": 1.049}, {"text": "We could have taken it away from you.", "start": 3796.239, "duration": 1.541}, {"text": "C could take it away.", "start": 3797.78, "duration": 1.291}, {"text": "You could still solve every problem\nthat we have in the past weeks", "start": 3799.071, "duration": 2.749}, {"text": "using a for loop or a while loop.", "start": 3801.82, "duration": 2.16}, {"text": "Do while just is a nice handy feature.", "start": 3803.98, "duration": 2.16}, {"text": "But we can simulate it.", "start": 3806.14, "duration": 1.38}, {"text": "And the Pythonic way of\ndoing this is as follows.", "start": 3807.52, "duration": 2.55}, {"text": "Deliberately induce an\ninfinite loop, because you", "start": 3810.07, "duration": 2.79}, {"text": "do want to loop potentially.", "start": 3812.86, "duration": 1.83}, {"text": "But the logic is going to\nbe, give me an infinite loop", "start": 3814.69, "duration": 2.52}, {"text": "and I will break out of it when\nI'm ready to break out of it.", "start": 3817.21, "duration": 3.18}, {"text": "This would be the convention.", "start": 3820.39, "duration": 1.35}, {"text": "So while the following is true do this.", "start": 3821.74, "duration": 2.08}, {"text": "Go ahead and declare\na variable called n.", "start": 3823.82, "duration": 2.37}, {"text": "Get an int from the user and\npass in that same prompt.", "start": 3826.19, "duration": 2.25}, {"text": "So get int, we wrote-- the staff--", "start": 3828.44, "duration": 2.0}, {"text": "prompt is whatever I typed in up here.", "start": 3830.44, "duration": 2.31}, {"text": "So just copy/paste from the C version.", "start": 3832.75, "duration": 2.73}, {"text": "And then under what circumstances do I\nwant to break out of this infinite loop", "start": 3835.48, "duration": 3.63}, {"text": "if the function is to be\ncalled to get positive int?", "start": 3839.11, "duration": 2.792}, {"text": "AUDIENCE: [INAUDIBLE]", "start": 3841.902, "duration": 0.874}, {"text": "DAVID MALAN: Yeah, so\nif n is greater than 0,", "start": 3842.776, "duration": 2.004}, {"text": "then I do have the keyword\nbreak still, just as I did in C.", "start": 3844.78, "duration": 3.33}, {"text": "I can break out of this loop.", "start": 3848.11, "duration": 1.68}, {"text": "And then once I do that, I can\ngo ahead and just return n.", "start": 3849.79, "duration": 3.69}, {"text": "Or for that matter, I could\ncondense this a little bit.", "start": 3853.48, "duration": 2.58}, {"text": "I could just return n immediately\nand tighten it just a little bit.", "start": 3856.06, "duration": 3.51}, {"text": "So multiple ways to do this.", "start": 3859.57, "duration": 1.53}, {"text": "Otherwise it's just going\nto loop and loop forever.", "start": 3861.1, "duration": 2.88}, {"text": "So let me go ahead now\nand run positive.py", "start": 3863.98, "duration": 2.28}, {"text": "through Python, positive integer like\nnegative 1, maybe negative 2, 0, OK, 1.", "start": 3866.26, "duration": 6.66}, {"text": "And now it, indeed, co-operates.", "start": 3872.92, "duration": 1.53}, {"text": "So this is just a common paradigm.", "start": 3874.45, "duration": 1.55}, {"text": "This is the kind of thing when\nlearning a new language that honestly", "start": 3876.0, "duration": 2.98}, {"text": "tends to hang people up initially.", "start": 3878.98, "duration": 1.5}, {"text": "You need to learn the\nJavaScript way of doing things.", "start": 3880.48, "duration": 2.28}, {"text": "You need to learn the\nPython way of doing things.", "start": 3882.76, "duration": 2.08}, {"text": "But then you start to notice\nthese so-called design patterns.", "start": 3884.84, "duration": 2.47}, {"text": "Anytime in Python you want to\ndo something again and again,", "start": 3887.31, "duration": 1.93}, {"text": "yes, you want to loop.", "start": 3889.24, "duration": 1.15}, {"text": "But if you want to do something\ndefinitely once and maybe again?", "start": 3890.39, "duration": 3.74}, {"text": "You still just use a\nloop, but you deliberately", "start": 3894.13, "duration": 2.31}, {"text": "induce, typically, an infinite loop, and\njust break out of it when you're ready.", "start": 3896.44, "duration": 3.73}, {"text": "So a very common approach.", "start": 3900.17, "duration": 1.46}, {"text": "So not everything translates\nliterally from C back and forth.", "start": 3901.63, "duration": 5.04}, {"text": "Any questions then on that?", "start": 3906.67, "duration": 3.96}, {"text": "Yeah, in the back?", "start": 3910.63, "duration": 0.933}, {"text": "AUDIENCE: Is that something you\njust did with the while for loop,", "start": 3911.563, "duration": 3.864}, {"text": "is that [INAUDIBLE] initializing\na variable called [INAUDIBLE]", "start": 3915.427, "duration": 3.864}, {"text": "to a negative number and then\ndo while n is less than 0--", "start": 3919.291, "duration": 4.063}, {"text": "DAVID MALAN: Really good question.", "start": 3923.354, "duration": 1.416}, {"text": "Is this approach preferable\nto instead declaring, maybe", "start": 3924.77, "duration": 2.61}, {"text": "in here, a variable that is equal to\nsome known value, like zero or whatnot,", "start": 3927.38, "duration": 4.84}, {"text": "and then updating it?", "start": 3932.22, "duration": 1.55}, {"text": "Short answer, yes, because\nyour approach, while correct,", "start": 3933.77, "duration": 3.06}, {"text": "is not as well-designed, arguably\nbecause it's just not necessary.", "start": 3936.83, "duration": 3.34}, {"text": "And the Pythonic way, and\nreally the well-designed way", "start": 3940.17, "duration": 3.089}, {"text": "to do most things would\nbe use as few lines", "start": 3943.259, "duration": 1.791}, {"text": "as you can so long as it's still\nreadable and understandable,", "start": 3945.05, "duration": 2.73}, {"text": "which I would argue this is once\nyou're comfortable with the syntax.", "start": 3947.78, "duration": 3.0}, {"text": "But this does bring up an interesting\npoint about one other topic in C. Scope", "start": 3950.78, "duration": 5.25}, {"text": "has now gone out the window, at\nleast as we previously saw it.", "start": 3956.03, "duration": 3.45}, {"text": "Scope referred to\nwhere a variable lives.", "start": 3959.48, "duration": 3.09}, {"text": "And we defined it essentially\ncasually between two curly braces,", "start": 3962.57, "duration": 3.007}, {"text": "the most recently opened curly braces.", "start": 3965.577, "duration": 1.583}, {"text": "Well, no curly braces anymore so it\nturns out that variables by default", "start": 3967.16, "duration": 3.63}, {"text": "have function scope here.", "start": 3970.79, "duration": 1.74}, {"text": "So when you declare n on line 9,\nyou can use it in Python on line 10.", "start": 3972.53, "duration": 5.07}, {"text": "And you know what?", "start": 3977.6, "duration": 0.75}, {"text": "You can even use it on line 12,\neven though it was declared inside", "start": 3978.35, "duration": 4.53}, {"text": "of this loop higher up.", "start": 3982.88, "duration": 1.99}, {"text": "So once you declare a\nvariable on this line,", "start": 3984.87, "duration": 2.3}, {"text": "you can use it anywhere on a subsequent\nline within that same function.", "start": 3987.17, "duration": 3.484}, {"text": "So in some sense, it's a little\nsloppy that you're allowed to do this.", "start": 3990.654, "duration": 2.916}, {"text": "But on the other hand,\nit's very convenient", "start": 3993.57, "duration": 2.0}, {"text": "because you don't have\nto deal with those things", "start": 3995.57, "duration": 2.0}, {"text": "like declaring the variable up\nhere just to use it down here.", "start": 3997.57, "duration": 2.56}, {"text": "So it's one less thing to think about.", "start": 4000.13, "duration": 2.85}, {"text": "All right, let's take a look\njust a few examples from week two", "start": 4002.98, "duration": 3.27}, {"text": "wherein we introduced arrays\nand strings more generally", "start": 4006.25, "duration": 3.3}, {"text": "to see what has changed now, as well.", "start": 4009.55, "duration": 2.07}, {"text": "You'll recall that in week two, perhaps,\nwe had an example about capitalization.", "start": 4011.62, "duration": 4.71}, {"text": "And let me go ahead and look\nat the third version of that,", "start": 4016.33, "duration": 3.21}, {"text": "capitalize too, but\nconvert it to Python.", "start": 4019.54, "duration": 2.04}, {"text": "The purpose in life was to\ntake input from the user", "start": 4021.58, "duration": 2.61}, {"text": "and just capitalize\nevery character therein.", "start": 4024.19, "duration": 2.61}, {"text": "So if I type in my\nname in all lowercase,", "start": 4026.8, "duration": 1.86}, {"text": "it should come back as all uppercase.", "start": 4028.66, "duration": 2.17}, {"text": "So from the CS50\nlibrary, let me go ahead", "start": 4030.83, "duration": 1.82}, {"text": "and import getString so that I\nhave some input from the user.", "start": 4032.65, "duration": 3.66}, {"text": "Then let me go ahead and just get a\nstring from the user, like their name.", "start": 4036.31, "duration": 4.35}, {"text": "And then I want to go ahead\nand capitalize everything.", "start": 4040.66, "duration": 3.87}, {"text": "So let me go ahead and do this.", "start": 4044.53, "duration": 2.94}, {"text": "And this is a fancy feature.", "start": 4047.47, "duration": 1.62}, {"text": "In C I would have done a for int\ni is zero i less than strlen.", "start": 4049.09, "duration": 4.59}, {"text": "I mean, you perhaps remember the\nparadigm for iterating over a string.", "start": 4053.68, "duration": 3.17}, {"text": "Python is just so much more pleasant.", "start": 4056.85, "duration": 1.81}, {"text": "For c in s--", "start": 4058.66, "duration": 2.16}, {"text": "that will induce a loop over the string\ns, giving you access to every character", "start": 4060.82, "duration": 5.46}, {"text": "at a time, calling that variable c.", "start": 4066.28, "duration": 2.76}, {"text": "And so what is it I want to\ndo, just as a preliminary step,", "start": 4069.04, "duration": 3.9}, {"text": "a baby step, if you will, let's just\nprint out c, just to see what happens.", "start": 4072.94, "duration": 3.88}, {"text": "Let me go ahead down here and\ndo Python of capitalize two.", "start": 4076.82, "duration": 4.46}, {"text": "Let me go ahead and type\nin my name, all lowercase.", "start": 4081.28, "duration": 2.31}, {"text": "All right, and why is\nit showing up vertically", "start": 4083.59, "duration": 2.67}, {"text": "like that, one character per line?", "start": 4086.26, "duration": 2.62}, {"text": "Yeah, you get the free line--", "start": 4088.88, "duration": 1.56}, {"text": "free new line this time.", "start": 4090.44, "duration": 1.557}, {"text": "So let's see how you can disable that.", "start": 4091.997, "duration": 1.583}, {"text": "It's stupid looking, honestly.", "start": 4093.58, "duration": 1.72}, {"text": "But you say end equals quote unquote,\nthereby revealing a new feature", "start": 4095.3, "duration": 4.769}, {"text": "of Python that C does not have.", "start": 4100.069, "duration": 1.71}, {"text": "It turns out that Python has not only\npositional arguments, as it's called,", "start": 4101.779, "duration": 4.638}, {"text": "whereby you just pass in\narguments between commas.", "start": 4106.417, "duration": 2.083}, {"text": "That's what we've been doing in C.", "start": 4108.5, "duration": 1.62}, {"text": "But Python also has\nnamed arguments, whereby", "start": 4110.12, "duration": 3.51}, {"text": "you can specify the\nname of the argument,", "start": 4113.63, "duration": 2.309}, {"text": "then an equals sign, then the value.", "start": 4115.939, "duration": 2.311}, {"text": "And the power of named arguments,\neven though this is a tiny example,", "start": 4118.25, "duration": 4.319}, {"text": "means that you can sometimes pass\nin your arguments in any order.", "start": 4122.569, "duration": 3.585}, {"text": "You don't have to remember.", "start": 4126.154, "duration": 1.125}, {"text": "You don't have to pull up\nCS50 manual or the man pages", "start": 4127.279, "duration": 2.25}, {"text": "to remember what is the order\nof all these darn arguments.", "start": 4129.529, "duration": 3.12}, {"text": "You can pass them in in any\norder, but by specifying", "start": 4132.649, "duration": 2.761}, {"text": "the name of the argument, an\nequals sign, and its value.", "start": 4135.41, "duration": 3.51}, {"text": "And in Python 2, you can\nhave optional arguments.", "start": 4138.92, "duration": 2.169}, {"text": "Obviously, in all of\nthe examples thus far,", "start": 4141.089, "duration": 1.791}, {"text": "I have never typed the word\nend and an equals sign yet.", "start": 4142.88, "duration": 3.3}, {"text": "But what Python does support is\ndefault values for arguments.", "start": 4146.18, "duration": 3.719}, {"text": "And so if you look in the documentation\nfor Python, this is equivalent--", "start": 4149.899, "duration": 4.651}, {"text": "this cryptic looking sequence-- this\nis equivalent to the default behavior,", "start": 4154.55, "duration": 4.03}, {"text": "which is to type none of that at all.", "start": 4158.58, "duration": 2.399}, {"text": "End implies, for the print function,\nthat you should end every line", "start": 4160.979, "duration": 4.101}, {"text": "with that default character.", "start": 4165.08, "duration": 1.529}, {"text": "Therefore, if you want\nto override it, you", "start": 4166.609, "duration": 2.071}, {"text": "can just change it to the\nempty string, quote unquote.", "start": 4168.68, "duration": 3.12}, {"text": "So if I now run this again and\nrun it through with my name,", "start": 4171.8, "duration": 4.86}, {"text": "now I get it like that,\none character at a time.", "start": 4176.66, "duration": 2.34}, {"text": "But you can do weird things,\nlike ha ha ha ha ha--", "start": 4179.0, "duration": 3.149}, {"text": "not that you would.", "start": 4182.149, "duration": 1.495}, {"text": "I don't know why I went with that.", "start": 4183.644, "duration": 1.416}, {"text": "But I mean, that does\nthe exact same thing", "start": 4185.06, "duration": 3.924}, {"text": "because you're just\nchanging the line ending.", "start": 4188.984, "duration": 1.875}, {"text": "So don't do that, but do something\nelse like this with it, instead.", "start": 4190.859, "duration": 3.231}, {"text": "So suppose I want to now\ncapitalize the first character.", "start": 4194.09, "duration": 3.24}, {"text": "It turns out that strings in Python\nare more powerful than strings", "start": 4197.33, "duration": 5.58}, {"text": "in C. In C, there is no string.", "start": 4202.91, "duration": 2.28}, {"text": "That was a lie.", "start": 4205.19, "duration": 0.97}, {"text": "It's just a sequence of characters as\nreferenced by an address in memory.", "start": 4206.16, "duration": 3.59}, {"text": "In Python, a string is an actual object.", "start": 4209.75, "duration": 2.52}, {"text": "It's a data structure.", "start": 4212.27, "duration": 1.14}, {"text": "And if you think about C, we had\nstructs toward the very end of our look", "start": 4213.41, "duration": 3.06}, {"text": "at C, nodes and structs and\nstudent structures and the like.", "start": 4216.47, "duration": 2.76}, {"text": "A string in Python is like\nthis container inside of which", "start": 4219.23, "duration": 2.797}, {"text": "somewhere are all of those characters.", "start": 4222.027, "duration": 1.583}, {"text": "But in that container or structure\nis also built-in functions,", "start": 4223.61, "duration": 3.93}, {"text": "features of a string\nthat you can just call.", "start": 4227.54, "duration": 2.31}, {"text": "So in C, we would have\nsaid something like toUpper", "start": 4229.85, "duration": 3.27}, {"text": "and then passed as input to\na function called toUpper", "start": 4233.12, "duration": 3.06}, {"text": "the character that we care about.", "start": 4236.18, "duration": 1.59}, {"text": "Python kind of flips the logic around.", "start": 4237.77, "duration": 2.31}, {"text": "Strings come with built-in\nfunctionality that", "start": 4240.08, "duration": 3.09}, {"text": "allow you to operate on the\ngiven character automatically.", "start": 4243.17, "duration": 4.09}, {"text": "So in Python, the syntax is\nactually the character itself.", "start": 4247.26, "duration": 2.9}, {"text": "Use the dot notation\nbecause it's a structure.", "start": 4250.16, "duration": 2.37}, {"text": "And then you can literally do--", "start": 4252.53, "duration": 1.95}, {"text": "oops.", "start": 4254.48, "duration": 0.6}, {"text": "You can literally do upper.", "start": 4255.08, "duration": 3.25}, {"text": "So this is to say, built into\nthe string type in Python", "start": 4258.33, "duration": 5.96}, {"text": "is a bunch of features, one of\nwhich is a function called upper.", "start": 4264.29, "duration": 3.652}, {"text": "And the syntax with which you call\nit is the name of the variable", "start": 4267.942, "duration": 2.708}, {"text": "or the name of the string dot name of\nthe function open paren, close paren.", "start": 4270.65, "duration": 4.215}, {"text": "And that's just now the paradigm.", "start": 4274.865, "duration": 1.375}, {"text": "There's no C type library.", "start": 4276.24, "duration": 1.34}, {"text": "There's no to upper or to lower.", "start": 4277.58, "duration": 1.89}, {"text": "Those features now built\ninto the strings themselves.", "start": 4279.47, "duration": 2.55}, {"text": "And this is an example\nof encapsulation, or more", "start": 4282.02, "duration": 2.61}, {"text": "generally, object oriented\nprogramming, something", "start": 4284.63, "duration": 2.07}, {"text": "you'll explore if you take\na class like CS51 that", "start": 4286.7, "duration": 2.76}, {"text": "bakes into the data types itself\nall of the relevant functionality.", "start": 4289.46, "duration": 4.47}, {"text": "It does not relegate\nthem to another library.", "start": 4293.93, "duration": 3.49}, {"text": "So if I clean this up by just\nmoving the cursor to the next line,", "start": 4297.42, "duration": 3.6}, {"text": "now hopefully you'll indeed see David\ntyped out in all caps, the same idea", "start": 4301.02, "duration": 4.73}, {"text": "as before.", "start": 4305.75, "duration": 0.87}, {"text": "What about this length of a string?", "start": 4306.62, "duration": 1.6}, {"text": "This one is pretty trivial,\nbut if I go in here,", "start": 4308.22, "duration": 2.15}, {"text": "let me go ahead and create a\nfile called str len of .py.", "start": 4310.37, "duration": 3.736}, {"text": "If I want to see the length of a\nstring, from CS50 import getString,", "start": 4314.106, "duration": 3.554}, {"text": "just as we did before.", "start": 4317.66, "duration": 1.35}, {"text": "Let me go ahead and get a string\nfor myself, like my name again.", "start": 4319.01, "duration": 2.792}, {"text": "And then here, if I want to print\nthe length of the string, in Python--", "start": 4321.802, "duration": 2.958}, {"text": "in C, you would say strlen.", "start": 4324.76, "duration": 1.972}, {"text": "In Python, it's a little different.", "start": 4326.732, "duration": 1.458}, {"text": "You actually just say len for length.", "start": 4328.19, "duration": 2.59}, {"text": "So if I go ahead and run\nthis through strlen--", "start": 4330.78, "duration": 3.05}, {"text": "strlen-- type in my name.", "start": 4333.83, "duration": 2.13}, {"text": "Hopefully I, indeed, see five.", "start": 4335.96, "duration": 1.38}, {"text": "And there's no notion that you need\nto care about the backslash zero", "start": 4337.34, "duration": 3.3}, {"text": "in order to terminate the string.", "start": 4340.64, "duration": 2.77}, {"text": "Yeah?", "start": 4343.41, "duration": 1.709}, {"text": "AUDIENCE: So this upper [INAUDIBLE]", "start": 4345.119, "duration": 6.281}, {"text": "DAVID MALAN: No, in fact.", "start": 4351.4, "duration": 1.5}, {"text": "So that's a really good observation.", "start": 4352.9, "duration": 1.99}, {"text": "Let's rewind and actually\nimprove upon this", "start": 4354.89, "duration": 2.99}, {"text": "rather than just translate it from what\nwas our comparable example in C. Let", "start": 4357.88, "duration": 4.5}, {"text": "me go ahead here and\nactually say, you know what?", "start": 4362.38, "duration": 3.6}, {"text": "S gets s upper.", "start": 4365.98, "duration": 2.7}, {"text": "And then let me just print s, perhaps.", "start": 4368.68, "duration": 1.8}, {"text": "Let's see what happens.", "start": 4370.48, "duration": 1.18}, {"text": "Let me go back here and\nrun Python of capitalize 2.", "start": 4371.66, "duration": 3.44}, {"text": "Enter David.", "start": 4375.1, "duration": 2.13}, {"text": "And it operates on the whole string.", "start": 4377.23, "duration": 1.5}, {"text": "Good intuition.", "start": 4378.73, "duration": 0.625}, {"text": "And honestly, I don't need to do this.", "start": 4379.355, "duration": 1.665}, {"text": "I could just say upper here and\nreally trim this down and do", "start": 4381.02, "duration": 6.38}, {"text": "Python of capitalize, type in my name.", "start": 4387.4, "duration": 3.96}, {"text": "That still works.", "start": 4391.36, "duration": 0.72}, {"text": "And if I really want to be fancy,\nI don't even need s at all.", "start": 4392.08, "duration": 3.57}, {"text": "I can take this, get rid of that,\nput this here, immediately call", "start": 4395.65, "duration": 4.41}, {"text": "upper on the user's input and whittle\nthis down to one line, type in David,", "start": 4400.06, "duration": 4.14}, {"text": "and that, too, works.", "start": 4404.2, "duration": 1.0}, {"text": "So you just get lots and lots\nand lots of more expressiveness.", "start": 4405.2, "duration": 2.99}, {"text": "Good question.", "start": 4408.19, "duration": 0.84}, {"text": "So how do you even know\nthat things like this exist?", "start": 4409.03, "duration": 2.46}, {"text": "Well, quick aside.", "start": 4411.49, "duration": 1.38}, {"text": "Google will truly be your\nfriend in cases like this.", "start": 4412.87, "duration": 2.474}, {"text": "And you'll want to know at this point,\nthere's different versions of Python.", "start": 4415.344, "duration": 3.166}, {"text": "The world is kind of\nholding out and is still", "start": 4418.51, "duration": 1.95}, {"text": "using, a lot of people, version 2 of\nPython, which is older by many years", "start": 4420.46, "duration": 3.47}, {"text": "now.", "start": 4423.93, "duration": 0.53}, {"text": "We are using version 3.", "start": 4424.46, "duration": 1.029}, {"text": "And this is where the world is going.", "start": 4425.489, "duration": 1.541}, {"text": "And indeed, Python 2 will be\nofficially deprecated or phased out", "start": 4427.03, "duration": 3.42}, {"text": "in a couple of years, theoretically.", "start": 4430.45, "duration": 1.59}, {"text": "So when you Google, you just\nwant to be mindful of this", "start": 4432.04, "duration": 2.11}, {"text": "so that you don't accidentally make your\nway to old tutorials, old documentation", "start": 4434.15, "duration": 3.08}, {"text": "and the like.", "start": 4437.23, "duration": 0.69}, {"text": "So let me go ahead and Google\nPython 3 string, or str, and upper,", "start": 4437.92, "duration": 5.46}, {"text": "just to see if I can get\nto the documentation.", "start": 4443.38, "duration": 2.13}, {"text": "Here you have a number of tutorials.", "start": 4445.51, "duration": 2.28}, {"text": "But if we focus down here, what you're\ngenerally going to want to look for,", "start": 4447.79, "duration": 3.51}, {"text": "at least for the official\ndocumentation, is docs.python.org.", "start": 4451.3, "duration": 3.81}, {"text": "You see in the URL it's version\n3, and that's where we want to go.", "start": 4455.11, "duration": 3.31}, {"text": "So let me go ahead and click on\nthis, common string operators.", "start": 4458.42, "duration": 2.7}, {"text": "And I will disclaim this--", "start": 4461.12, "duration": 1.43}, {"text": "I think, personally,\nPython's documentation", "start": 4462.55, "duration": 2.22}, {"text": "is not terribly newbie-friendly.", "start": 4464.77, "duration": 1.637}, {"text": "Like, it's written fairly\narcanely and you kind of", "start": 4466.407, "duration": 2.083}, {"text": "have to really dig to\nunderstand certain things.", "start": 4468.49, "duration": 2.31}, {"text": "That's fine.", "start": 4470.8, "duration": 0.572}, {"text": "You'll get comfortable\nwith it over time.", "start": 4471.372, "duration": 1.708}, {"text": "But if you're feeling a\nlittle overwhelmed by,", "start": 4473.08, "duration": 1.916}, {"text": "oh my God, I just want to know about\nupper, everyone feels this way too.", "start": 4474.996, "duration": 4.054}, {"text": "So control F or Command\nF is your friend, upper.", "start": 4479.05, "duration": 3.3}, {"text": "Let me go ahead and search for this.", "start": 4482.35, "duration": 2.04}, {"text": "And it's not actually\non this page, is it?", "start": 4484.39, "duration": 3.01}, {"text": "String-- string methods.", "start": 4487.4, "duration": 3.03}, {"text": "Here we go.", "start": 4490.43, "duration": 0.5}, {"text": "String methods.", "start": 4490.93, "duration": 1.26}, {"text": "OK, so under string methods, let\nme go ahead and search for upper.", "start": 4492.19, "duration": 4.52}, {"text": "And down here, indeed,\nis the documentation.", "start": 4496.71, "duration": 2.31}, {"text": "So the convention will be the name\nof the data type in question--", "start": 4499.02, "duration": 3.47}, {"text": "str for string--", "start": 4502.49, "duration": 1.1}, {"text": "the name of the function here.", "start": 4503.59, "duration": 1.25}, {"text": "It would tell you in parentheses if it\ntakes any arguments, but it doesn't.", "start": 4504.84, "duration": 3.49}, {"text": "And so it returns a copy of the string\nwith all of the cased characters", "start": 4508.33, "duration": 3.127}, {"text": "converted to uppercase-- that just\nmeans the letters of the alphabet", "start": 4511.457, "duration": 2.833}, {"text": "essentially--", "start": 4514.29, "duration": 1.33}, {"text": "and then some additional\ndocumentation, and so forth.", "start": 4515.62, "duration": 2.25}, {"text": "It gets pretty low-level pretty quickly.", "start": 4517.87, "duration": 1.46}, {"text": "These are the equivalent\nof the man pages.", "start": 4519.33, "duration": 1.83}, {"text": "And there is no CS50\nreference for Python.", "start": 4521.16, "duration": 2.22}, {"text": "That was just for C. So\njust realize that there's", "start": 4523.38, "duration": 2.25}, {"text": "this documentation available.", "start": 4525.63, "duration": 1.422}, {"text": "And you'll notice there's\nbunches of functions.", "start": 4527.052, "duration": 1.958}, {"text": "Strip is actually kind of a\npopular one, or L strip or R strip.", "start": 4529.01, "duration": 4.187}, {"text": "If you have whitespace at the\nbeginning or end of a line", "start": 4533.197, "duration": 2.333}, {"text": "because your human got a little\nsloppy or there's new lines in a file,", "start": 4535.53, "duration": 3.63}, {"text": "you can call strip on a string and\nget rid of whitespace to the left", "start": 4539.16, "duration": 3.09}, {"text": "and right to kind of clean it up.", "start": 4542.25, "duration": 1.465}, {"text": "Terribly useful for things\nlike data science applications", "start": 4543.715, "duration": 2.375}, {"text": "and analysis of data where you\njust kind of clean up messy data.", "start": 4546.09, "duration": 2.666}, {"text": "So many functions like\nthat are built in for you.", "start": 4548.756, "duration": 2.954}, {"text": "All right, so let's take a look at a few\nother examples reminiscent of features", "start": 4551.71, "duration": 3.35}, {"text": "we did have in C, such as this one here.", "start": 4555.06, "duration": 2.98}, {"text": "Suppose I want to write\na program that takes", "start": 4558.04, "duration": 1.91}, {"text": "command line arguments,\nmuch like resize,", "start": 4559.95, "duration": 2.595}, {"text": "with which we started today's story.", "start": 4562.545, "duration": 1.5}, {"text": "Let's not even use the CS50 library.", "start": 4566.7, "duration": 1.66}, {"text": "Let's do this.", "start": 4568.36, "duration": 0.98}, {"text": "If you want access to argv, recall\nin C it looked like this-- int,", "start": 4569.34, "duration": 4.2}, {"text": "argc, string, argv.", "start": 4573.54, "duration": 5.61}, {"text": "It looked like this in C.", "start": 4579.15, "duration": 1.68}, {"text": "Well, unfortunately, if\nyou're not using main,", "start": 4580.83, "duration": 1.959}, {"text": "it would be nice if you can\nstill use command line arguments.", "start": 4582.789, "duration": 2.541}, {"text": "And you can, but you\nhave to import them.", "start": 4585.33, "duration": 1.74}, {"text": "It's a library that\nprovides you with access.", "start": 4587.07, "duration": 2.16}, {"text": "From the sys or system library,\nyou can import argv in Python.", "start": 4589.23, "duration": 4.5}, {"text": "And that gives you access to\ncommand line arguments as a feature.", "start": 4593.73, "duration": 3.12}, {"text": "Then you can say something like this.", "start": 4596.85, "duration": 1.69}, {"text": "If the length of argv--", "start": 4598.54, "duration": 2.21}, {"text": "which is just an array, recall, in C--", "start": 4600.75, "duration": 2.31}, {"text": "equals equals 2, then\ngo ahead and say hello.", "start": 4603.06, "duration": 4.2}, {"text": "And let's go ahead and print out\nwhatever the user typed in, argv 1.", "start": 4607.26, "duration": 4.77}, {"text": "Else, let's just by\ndefault say hello world.", "start": 4612.03, "duration": 4.0}, {"text": "So in English, what's happening?", "start": 4616.03, "duration": 1.64}, {"text": "If the user typed in a command line\nargument-- say, hello so-and-so.", "start": 4617.67, "duration": 4.32}, {"text": "Else if the human did not type in\nexactly one command line argument,", "start": 4621.99, "duration": 2.88}, {"text": "just say, by default, hello world.", "start": 4624.87, "duration": 2.34}, {"text": "So let me save this.", "start": 4627.21, "duration": 0.96}, {"text": "Do Python of argv1, or rather zero.", "start": 4628.17, "duration": 3.27}, {"text": "Enter.", "start": 4631.44, "duration": 0.76}, {"text": "OK, I didn't type in a\nword after the command.", "start": 4632.2, "duration": 2.13}, {"text": "So now let's do it again and\nI'll type in Brian's name.", "start": 4634.33, "duration": 4.11}, {"text": "Enter, hello Brian.", "start": 4638.44, "duration": 1.28}, {"text": "Let's do it again.", "start": 4639.72, "duration": 1.5}, {"text": "Veronica, enter.", "start": 4641.22, "duration": 2.37}, {"text": "Now, there's something that's not quite\nthe same as C. How many words did I", "start": 4643.59, "duration": 4.11}, {"text": "just type at the prompt?", "start": 4647.7, "duration": 3.07}, {"text": "3.", "start": 4650.77, "duration": 1.04}, {"text": "So that would suggest that this\nis argv 0, argv 1, and argv 2.", "start": 4651.81, "duration": 6.02}, {"text": "And yet, I'm printing\nargv 1, not argv 2.", "start": 4657.83, "duration": 3.36}, {"text": "So how do I think about this?", "start": 4661.19, "duration": 2.28}, {"text": "The code is correct, but\nit's different from C.", "start": 4663.47, "duration": 3.96}, {"text": "What does argv technically store\nwhen you run a command like these?", "start": 4667.43, "duration": 3.52}, {"text": "Remember, let's rewind.", "start": 4677.852, "duration": 0.958}, {"text": "In C, argv 0 stored what?", "start": 4678.81, "duration": 3.245}, {"text": "AUDIENCE: Name of the file.", "start": 4682.055, "duration": 1.125}, {"text": "DAVID MALAN: The name of the file or\nthe name of the program you just ran.", "start": 4683.18, "duration": 3.3}, {"text": "Notice, though, the program\nI just ran is called Python.", "start": 4686.48, "duration": 3.3}, {"text": "And so you would think that\nargv 0 would have Python in it,", "start": 4689.78, "duration": 3.3}, {"text": "but it doesn't because notice\nif I'm printing argv 1,", "start": 4693.08, "duration": 3.0}, {"text": "you would think that's 0, 1.", "start": 4696.08, "duration": 1.65}, {"text": "You would think I just said\nhello argv 0 .py, But I didn't.", "start": 4697.73, "duration": 3.1}, {"text": "argv 1 clearly prints Veronica or Brian.", "start": 4700.83, "duration": 3.89}, {"text": "So it stands to reason\nargv 0 is this, which", "start": 4704.72, "duration": 2.659}, {"text": "means this is, like, argv negative 1.", "start": 4707.379, "duration": 1.541}, {"text": "Python is excluded from the\nargument vector, as it's called.", "start": 4708.92, "duration": 3.92}, {"text": "The command line arguments do not\ninclude the name of the interpreter.", "start": 4712.84, "duration": 2.96}, {"text": "But otherwise, it works exactly the\nsame as it did once upon a time.", "start": 4715.8, "duration": 3.92}, {"text": "And notice, too, with\nthis new for construct,", "start": 4719.72, "duration": 3.3}, {"text": "notice what you can do whenever you\nhave access to an array of things.", "start": 4723.02, "duration": 3.36}, {"text": "If I go into argv1.py and import\nargv again, let me go ahead now", "start": 4726.38, "duration": 6.189}, {"text": "and just-- you know what?", "start": 4732.569, "duration": 1.041}, {"text": "For s in argv, go ahead and print out s.", "start": 4733.61, "duration": 4.38}, {"text": "It's really succinct.", "start": 4737.99, "duration": 1.23}, {"text": "What is this going to do?", "start": 4739.22, "duration": 1.23}, {"text": "Let me go ahead and do\nPython of argv1, enter.", "start": 4740.45, "duration": 4.05}, {"text": "And it just prints out\nthe name of the file.", "start": 4744.5, "duration": 1.99}, {"text": "If I go ahead and say foo,\nbar, baz, three random words,", "start": 4746.49, "duration": 3.29}, {"text": "it prints out all of those words.", "start": 4749.78, "duration": 1.81}, {"text": "And so what's powerful about\nPython is honestly this for loop.", "start": 4751.59, "duration": 2.72}, {"text": "There's no int i, less than,\nplus plus, any of that.", "start": 4754.31, "duration": 2.88}, {"text": "You just say, give me\na variable called s", "start": 4757.19, "duration": 2.19}, {"text": "and iterate over the entirety of the\nthing on the right, which is presumed,", "start": 4759.38, "duration": 3.57}, {"text": "in this case, to be an array.", "start": 4762.95, "duration": 2.07}, {"text": "You can be even more powerful than that.", "start": 4765.02, "duration": 1.77}, {"text": "If I-- just like in C weeks ago--", "start": 4766.79, "duration": 2.29}, {"text": "look at characters in these\nstrings-- let me do argv2.py--", "start": 4769.08, "duration": 3.47}, {"text": "suppose that this iterate\nover each string in argv,", "start": 4772.55, "duration": 5.476}, {"text": "and then here iterate over each\ncharacter in s, I can do for c in s", "start": 4778.026, "duration": 8.504}, {"text": "and now print out the character.", "start": 4786.53, "duration": 2.8}, {"text": "So now when I run this same\ncommand but on argv2.py,", "start": 4789.33, "duration": 4.49}, {"text": "notice what's going to happen.", "start": 4793.82, "duration": 1.27}, {"text": "Let me raise this a little bit.", "start": 4795.09, "duration": 2.32}, {"text": "Enter.", "start": 4797.41, "duration": 1.94}, {"text": "It prints every character\nfrom every word one at a time.", "start": 4799.35, "duration": 3.66}, {"text": "But it did so this time based\non using these two for loops.", "start": 4803.01, "duration": 3.31}, {"text": "So what does this mean?", "start": 4806.32, "duration": 1.01}, {"text": "When you have an array,\nas we've called it,", "start": 4807.33, "duration": 3.21}, {"text": "you can iterate over\neverything in the array.", "start": 4810.54, "duration": 1.95}, {"text": "When you have a string, you can iterate\nover every character in the string.", "start": 4812.49, "duration": 3.31}, {"text": "And this is where Python\njust gets wonderfully", "start": 4815.8, "duration": 1.916}, {"text": "flexible to do this again and again.", "start": 4817.716, "duration": 2.904}, {"text": "All right, let's take a look at--", "start": 4820.62, "duration": 2.55}, {"text": "let's see-- compared strings already.", "start": 4823.17, "duration": 1.97}, {"text": "We copied strings.", "start": 4825.14, "duration": 1.37}, {"text": "Let's go ahead and do this in Python.", "start": 4826.51, "duration": 2.6}, {"text": "Recall that we ran into a\nfundamental limitation of C,", "start": 4829.11, "duration": 3.18}, {"text": "and it would seem programming,\nwhen we had example called swap", "start": 4832.29, "duration": 3.27}, {"text": "and no swap back in the\nday where I was just", "start": 4835.56, "duration": 2.52}, {"text": "trying to swap two values, x and y.", "start": 4838.08, "duration": 2.16}, {"text": "And recall that I hardcoded\nsomething like x is 1 and y is 2.", "start": 4840.24, "duration": 3.93}, {"text": "And the whole goal was simply to\nfirst say, x is such and such,", "start": 4844.17, "duration": 4.2}, {"text": "y is such and such.", "start": 4848.37, "duration": 2.55}, {"text": "Let me go ahead and make\nthat a format string.", "start": 4850.92, "duration": 2.43}, {"text": "Then I wanted to print this again.", "start": 4853.35, "duration": 2.01}, {"text": "But somewhere in here, I\nwanted to swap x and y.", "start": 4855.36, "duration": 3.21}, {"text": "So to punctuate our sort of\nexploration of just what Python can do,", "start": 4858.57, "duration": 3.33}, {"text": "if you want to swap two variables,\nx and y, that's fine, just do it.", "start": 4861.9, "duration": 5.12}, {"text": "And it's this magical shell\ngame that just works in Python.", "start": 4867.02, "duration": 3.39}, {"text": "Now, technically these are what\nare called tuples on the left.", "start": 4870.41, "duration": 2.85}, {"text": "It's a x comma y pair.", "start": 4873.26, "duration": 1.75}, {"text": "It's latitude comma longitude.", "start": 4875.01, "duration": 1.31}, {"text": "So there's an actual underlying\nmental model for what's going on here.", "start": 4876.32, "duration": 4.32}, {"text": "But in effect, you're\nliterally switching them", "start": 4880.64, "duration": 1.95}, {"text": "and you don't need the\ntemporary variable.", "start": 4882.59, "duration": 1.75}, {"text": "Python the language takes\ncare of that for you.", "start": 4884.34, "duration": 4.22}, {"text": "All right, let's look at\na more powerful feature", "start": 4888.56, "duration": 2.11}, {"text": "still, this time using what's\nactually called a list.", "start": 4890.67, "duration": 3.26}, {"text": "So a moment ago I was using\nargv 0, 1, 2, as our examples.", "start": 4893.93, "duration": 4.08}, {"text": "And I was calling them arrays.", "start": 4898.01, "duration": 2.086}, {"text": "They're not arrays anymore.", "start": 4900.096, "duration": 1.124}, {"text": "Python does not have arrays.", "start": 4901.22, "duration": 1.86}, {"text": "Python has lists.", "start": 4903.08, "duration": 1.56}, {"text": "And lists sounds\nreminiscent of linked lists.", "start": 4904.64, "duration": 1.955}, {"text": "And indeed, they are.", "start": 4906.595, "duration": 0.875}, {"text": "In Python, you have\nlists that are resizable.", "start": 4907.47, "duration": 3.316}, {"text": "You don't have to decide in advance\nhow big they are or how small they are.", "start": 4910.786, "duration": 3.124}, {"text": "They will just grow and shrink for\nyou just like a linked list will,", "start": 4913.91, "duration": 3.42}, {"text": "but you don't have to write\nthe linked list yourself.", "start": 4917.33, "duration": 2.43}, {"text": "Yeah?", "start": 4919.76, "duration": 0.696}, {"text": "AUDIENCE: [INAUDIBLE]", "start": 4920.456, "duration": 4.398}, {"text": "DAVID MALAN: Sure.", "start": 4924.854, "duration": 0.749}, {"text": "AUDIENCE: [INAUDIBLE]", "start": 4925.603, "duration": 4.831}, {"text": "DAVID MALAN: Oh, sure.", "start": 4930.434, "duration": 0.916}, {"text": "Let me open that file up in argv1.", "start": 4931.35, "duration": 3.78}, {"text": "This one here?", "start": 4935.13, "duration": 1.133}, {"text": "AUDIENCE: No, it was, like, [INAUDIBLE].", "start": 4936.263, "duration": 3.141}, {"text": "DAVID MALAN: Oh, this one here.", "start": 4939.404, "duration": 1.291}, {"text": "AUDIENCE: Yeah.", "start": 4940.695, "duration": 0.624}, {"text": "[INAUDIBLE] bracket\nnotation [INAUDIBLE]..", "start": 4941.319, "duration": 2.111}, {"text": "DAVID MALAN: Yes, you can still--\nso argv, I called it an array,", "start": 4943.43, "duration": 2.827}, {"text": "but that was a white lie a moment ago.", "start": 4946.257, "duration": 1.583}, {"text": "It's actually a list, a linked list.", "start": 4947.84, "duration": 1.93}, {"text": "But whereas a linked list in C does\nnot allow you to use square brackets,", "start": 4949.77, "duration": 3.08}, {"text": "you have to use a for\nloop or a while loop", "start": 4952.85, "duration": 1.75}, {"text": "to iterate over the whole thing to find\nwhat you're looking for, in Python,", "start": 4954.6, "duration": 3.63}, {"text": "if something is in a list, you can\njust use, yes, the square brackets", "start": 4958.23, "duration": 2.97}, {"text": "to get at that specific element.", "start": 4961.2, "duration": 1.5}, {"text": "AUDIENCE: Or I'm saying you\ncould use the f right before--", "start": 4962.7, "duration": 3.23}, {"text": "DAVID MALAN: Oh, I could have, yes.", "start": 4965.93, "duration": 1.64}, {"text": "I didn't use the F, just because\nfrankly it just gets ugly eventually.", "start": 4967.57, "duration": 4.71}, {"text": "But yes, I could have also done this\nto achieve the exact same effect.", "start": 4972.28, "duration": 3.93}, {"text": "It just starts to look cryptic.", "start": 4976.21, "duration": 2.55}, {"text": "OK, so let's actually introduce a list,\nwhich itself is a data type in Python,", "start": 4978.76, "duration": 5.21}, {"text": "as well as in languages\nlike C++ and Java,", "start": 4983.97, "duration": 3.776}, {"text": "if some of you have that\nbackground, as well.", "start": 4987.746, "duration": 1.874}, {"text": "So here, in list.py, let me\ngo ahead and do the following.", "start": 4989.62, "duration": 3.48}, {"text": "Let me first import from\nthe CS50 library getInt", "start": 4993.1, "duration": 2.489}, {"text": "so that we can get some\nints from the user.", "start": 4995.589, "duration": 1.791}, {"text": "Let me give myself an array, a.k.a.", "start": 4997.38, "duration": 2.13}, {"text": "now a list in Python.", "start": 4999.51, "duration": 3.3}, {"text": "So in C you can't really\nexpress quite this idea.", "start": 5002.81, "duration": 3.12}, {"text": "In Python, if you want a\nvariable called numbers", "start": 5005.93, "duration": 3.33}, {"text": "and you want to initialize\nit to an empty list,", "start": 5009.26, "duration": 2.13}, {"text": "you just literally do open\nbracket, close bracket.", "start": 5011.39, "duration": 2.1}, {"text": "No number in between them.", "start": 5013.49, "duration": 1.65}, {"text": "And as before, no semi-colon.", "start": 5015.14, "duration": 1.95}, {"text": "Let's now do the following\nforever until I break out of this.", "start": 5017.09, "duration": 3.57}, {"text": "Let me go ahead and get\na number from the user,", "start": 5020.66, "duration": 2.49}, {"text": "just by asking them for some number.", "start": 5023.15, "duration": 1.98}, {"text": "Then let me say, if not number,\ngo ahead and break out of this.", "start": 5025.13, "duration": 4.475}, {"text": "This is going to, as an\naside, just let me quit out", "start": 5029.605, "duration": 2.125}, {"text": "of this by hitting Control D as we\ndiscussed ever so briefly a while back.", "start": 5031.73, "duration": 3.67}, {"text": "But that's just a UI feature.", "start": 5035.4, "duration": 1.61}, {"text": "So this is what's kind of cool.", "start": 5037.01, "duration": 1.74}, {"text": "Suppose I want to implement\nthe notion of checking", "start": 5038.75, "duration": 4.17}, {"text": "if the number the user's typed in\nis in the list already, and if so,", "start": 5042.92, "duration": 3.93}, {"text": "not add it.", "start": 5046.85, "duration": 0.544}, {"text": "I'm going to go ahead and do that.", "start": 5047.394, "duration": 1.416}, {"text": "But first, let's just do this--", "start": 5048.81, "duration": 1.291}, {"text": "numbers.append number.", "start": 5050.101, "duration": 3.259}, {"text": "And this is a new feature.", "start": 5053.36, "duration": 1.5}, {"text": "So what do I want to do here?", "start": 5054.86, "duration": 1.26}, {"text": "For number in numbers--", "start": 5056.12, "duration": 1.65}, {"text": "I'll explain this in a second--", "start": 5057.77, "duration": 2.376}, {"text": "let me go ahead and print number.", "start": 5060.146, "duration": 1.374}, {"text": "So what is this program aspiring to do?", "start": 5061.52, "duration": 2.39}, {"text": "At the very top, I'm importing getInt.", "start": 5063.91, "duration": 2.115}, {"text": "At the very top below that, I'm\njust giving myself an empty array,", "start": 5066.025, "duration": 3.145}, {"text": "now called a list, called numbers.", "start": 5069.17, "duration": 2.12}, {"text": "Then I do the following forever.", "start": 5071.29, "duration": 2.07}, {"text": "Go ahead and get the\nnumber from the user.", "start": 5073.36, "duration": 1.92}, {"text": "If he or she did not actually type\nin a number, just break out of this.", "start": 5075.28, "duration": 2.958}, {"text": "The program is done.", "start": 5078.238, "duration": 1.062}, {"text": "But here's the new feature.", "start": 5079.3, "duration": 1.47}, {"text": "Just as with strings, they\nare objects, so to speak.", "start": 5080.77, "duration": 3.4}, {"text": "They are data structures\nthat have functions built in.", "start": 5084.17, "duration": 2.66}, {"text": "So do lists have functions built in.", "start": 5086.83, "duration": 2.67}, {"text": "There is literally a function\ninside of every Python list", "start": 5089.5, "duration": 2.97}, {"text": "called append that literally does that.", "start": 5092.47, "duration": 2.07}, {"text": "You call append and it\nappends whatever its input", "start": 5094.54, "duration": 2.43}, {"text": "is to whatever the list itself is.", "start": 5096.97, "duration": 2.7}, {"text": "So in C, you might have\nhad to use realloc.", "start": 5099.67, "duration": 4.05}, {"text": "You might have had to add\nsomething to the end of the list.", "start": 5103.72, "duration": 2.91}, {"text": "None of that happens anymore.", "start": 5106.63, "duration": 1.35}, {"text": "Just at a high level, you\nsay append this to the list", "start": 5107.98, "duration": 2.43}, {"text": "and let the language\ntake care of it for you.", "start": 5110.41, "duration": 2.28}, {"text": "Then down here, left-aligned\nall the way at the end,", "start": 5112.69, "duration": 3.0}, {"text": "is just saying, for number in numbers.", "start": 5115.69, "duration": 1.89}, {"text": "Like, iterate over all of the numbers\nin the list and print out one at a time.", "start": 5117.58, "duration": 4.3}, {"text": "So let's try this.", "start": 5121.88, "duration": 0.84}, {"text": "Let me go down here and do Python of--", "start": 5122.72, "duration": 2.81}, {"text": "this is list.py-- and let me go ahead\nand type in a number like 13, 42, 50.", "start": 5125.53, "duration": 6.39}, {"text": "And I'm going to hit Control D,\nwhich means that's it, I'm done.", "start": 5131.92, "duration": 3.03}, {"text": "And there we see the three numbers.", "start": 5134.95, "duration": 1.5}, {"text": "It looks a little stupid\nbecause you know what?", "start": 5136.45, "duration": 1.65}, {"text": "I think I need a print here.", "start": 5138.1, "duration": 1.38}, {"text": "Let's fix this.", "start": 5139.48, "duration": 1.32}, {"text": "Let me rerun this.", "start": 5140.8, "duration": 1.4}, {"text": "13, 42, 50, Control D, there we go.", "start": 5142.2, "duration": 3.31}, {"text": "One per line.", "start": 5145.51, "duration": 1.2}, {"text": "But what this program has is\nhonestly kind of a bug, potentially.", "start": 5146.71, "duration": 3.69}, {"text": "Suppose I want unique\nnumbers, now I have three 13s.", "start": 5150.4, "duration": 3.222}, {"text": "But I'd ideally just want one copy\nof every number for whatever reason.", "start": 5153.622, "duration": 2.958}, {"text": "I want uniqueness.", "start": 5156.58, "duration": 1.15}, {"text": "Well, notice how easily\nyou can express that.", "start": 5157.73, "duration": 2.84}, {"text": "If my goal is to only conditionally\nadd a number to the numbers list", "start": 5160.57, "duration": 5.14}, {"text": "if it's not already there,\nhow would you do this in C?", "start": 5165.71, "duration": 3.23}, {"text": "You have an array called numbers\nand you want to first check", "start": 5168.94, "duration": 2.79}, {"text": "is a number in that array.", "start": 5171.73, "duration": 1.66}, {"text": "What would you do in English?", "start": 5173.39, "duration": 2.233}, {"text": "AUDIENCE: A for loop.", "start": 5175.623, "duration": 0.947}, {"text": "DAVID MALAN: A for loop, right?", "start": 5176.57, "duration": 0.67}, {"text": "You'd probably start at\nthe left, iterate over", "start": 5177.24, "duration": 1.64}, {"text": "the whole array looking for the number\nand then conclude true or false,", "start": 5178.88, "duration": 2.97}, {"text": "it's in there.", "start": 5181.85, "duration": 0.782}, {"text": "It's not hard but it's\na little annoying.", "start": 5182.632, "duration": 1.708}, {"text": "You have to write more code, a couple\nof lines, four lines for a for loop.", "start": 5184.34, "duration": 3.083}, {"text": "In Python, just say what you mean.", "start": 5187.423, "duration": 2.707}, {"text": "If number not in numbers, append it.", "start": 5190.13, "duration": 5.01}, {"text": "And it reads much more like English.", "start": 5195.14, "duration": 2.22}, {"text": "At the end of the day, some human wrote\nthe for loop that does that operation.", "start": 5197.36, "duration": 4.63}, {"text": "But we, the more modern programmers, can\njust now say, if number not in numbers,", "start": 5201.99, "duration": 4.12}, {"text": "append it.", "start": 5206.11, "duration": 0.82}, {"text": "And so it is meant to\nread more English-like.", "start": 5206.93, "duration": 1.94}, {"text": "So let's try this now.", "start": 5208.87, "duration": 1.67}, {"text": "13, 13, 50, done.", "start": 5210.54, "duration": 2.72}, {"text": "Now I just get one copy of the 13\nbecause it's checking that for me.", "start": 5213.26, "duration": 3.72}, {"text": "Now, running time is still an issue.", "start": 5216.98, "duration": 1.77}, {"text": "Consider this,\ntheoretically, you're still", "start": 5218.75, "duration": 2.67}, {"text": "wasting some time looking for\na number because someone wrote", "start": 5221.42, "duration": 3.09}, {"text": "code that's probably linear search.", "start": 5224.51, "duration": 1.48}, {"text": "Maybe it's binary search if it's sorted.", "start": 5225.99, "duration": 1.67}, {"text": "But someone wrote that code.", "start": 5227.66, "duration": 1.17}, {"text": "But the point is, with these\nhigher level languages,", "start": 5228.83, "duration": 2.166}, {"text": "these more modern languages like Python,\nthat is not our problem, necessarily.", "start": 5230.996, "duration": 3.941}, {"text": "It only becomes our problem\nif the program is just", "start": 5234.937, "duration": 2.083}, {"text": "too slow for some reason and we really\nneed to get into the weeds of why.", "start": 5237.02, "duration": 5.7}, {"text": "All right, let's look at a\nfinal feature syntactically", "start": 5242.72, "duration": 2.49}, {"text": "before we try this to a\nmore generalized problem.", "start": 5245.21, "duration": 2.37}, {"text": "Let me go ahead and save\na file called struct0.py,", "start": 5247.58, "duration": 2.97}, {"text": "which is reminiscent of\nstruct0.c a few weeks back.", "start": 5250.55, "duration": 3.23}, {"text": "And let me go ahead and from the\nCS50 library import getString.", "start": 5253.78, "duration": 4.04}, {"text": "Let me go ahead and give myself an array\nthis time called students that's empty,", "start": 5257.82, "duration": 3.95}, {"text": "or a list called students.", "start": 5261.77, "duration": 1.56}, {"text": "And then let me just get three\nstudents for the sake of discussion.", "start": 5263.33, "duration": 3.01}, {"text": "So for i in range 3, that\njust iterates three times,", "start": 5266.34, "duration": 3.83}, {"text": "let me go ahead and ask\nthe user for their name.", "start": 5270.17, "duration": 2.7}, {"text": "So getString, ask them for their name.", "start": 5272.87, "duration": 2.5}, {"text": "Then let me go ahead and\nask them for their dorm", "start": 5275.37, "duration": 2.0}, {"text": "and go ahead and get string for dorm.", "start": 5277.37, "duration": 2.67}, {"text": "And then that's enough.", "start": 5280.04, "duration": 1.5}, {"text": "Let me now go ahead and\nappend the student to my list.", "start": 5281.54, "duration": 2.85}, {"text": "So students dot append.", "start": 5284.39, "duration": 2.94}, {"text": "But I don't really have\na student structure yet.", "start": 5287.33, "duration": 2.159}, {"text": "Now, there's many ways we\ncan solve this, but let", "start": 5289.489, "duration": 2.041}, {"text": "me propose the simplest one.", "start": 5291.53, "duration": 1.8}, {"text": "It turns out in Python you can declare\nhash tables so wonderfully simply.", "start": 5293.33, "duration": 5.79}, {"text": "A hash table is just a\ncollection of key value pairs.", "start": 5299.12, "duration": 2.56}, {"text": "And I would argue at this point in\nmy example I have keys and values.", "start": 5301.68, "duration": 3.92}, {"text": "I have a name which is a key and\nthe value, like David or whatever,", "start": 5305.6, "duration": 3.73}, {"text": "another key called dorm, and then\na value which is like Matthews", "start": 5309.33, "duration": 4.1}, {"text": "or wherever.", "start": 5313.43, "duration": 0.78}, {"text": "And so keys and values.", "start": 5314.21, "duration": 1.29}, {"text": "So it would be kind of nice if I\ncould create for myself a hash table--", "start": 5315.5, "duration": 3.21}, {"text": "or even a try, for that matter--\nthat allows me to store this data.", "start": 5318.71, "duration": 2.95}, {"text": "Well, it turns out in\nPython, I can do just that.", "start": 5321.66, "duration": 2.6}, {"text": "I can go ahead and create\nan object called student", "start": 5324.26, "duration": 2.85}, {"text": "using curly bracket notation.", "start": 5327.11, "duration": 2.49}, {"text": "And you can literally do this.", "start": 5329.6, "duration": 1.77}, {"text": "The name shall be one key.", "start": 5331.37, "duration": 2.16}, {"text": "And now it's going to\ntake on that value.", "start": 5333.53, "duration": 2.07}, {"text": "Dorm shall be another key and\nit's going to take on that value.", "start": 5335.6, "duration": 3.93}, {"text": "So I could call this\nanything I want-- x and y", "start": 5339.53, "duration": 2.97}, {"text": "and have the values David and Matthews\nor whatever it is I'm going to type in.", "start": 5342.5, "duration": 3.42}, {"text": "But if you want a very\ngeneralized data structure", "start": 5345.92, "duration": 3.39}, {"text": "that isn't just a list of values from\nleft to right, but has metadata--", "start": 5349.31, "duration": 4.29}, {"text": "a key, or if you think of a\nspreadsheet, a column name", "start": 5353.6, "duration": 2.73}, {"text": "called name and a column name called\ndorm, each of which has values--", "start": 5356.33, "duration": 3.93}, {"text": "you just use curly braces.", "start": 5360.26, "duration": 1.26}, {"text": "And you put the keys in\nquotes and then a colon.", "start": 5361.52, "duration": 2.982}, {"text": "And then if you've got multiple\nkeys, you just put a comma.", "start": 5364.502, "duration": 2.458}, {"text": "So it's a little cryptic, but this is\njust like a container, a hash table,", "start": 5366.96, "duration": 4.1}, {"text": "that contains words and values.", "start": 5371.06, "duration": 2.53}, {"text": "Now, in p set 4, when\nyou implemented speller,", "start": 5373.59, "duration": 3.05}, {"text": "you actually just said yes or no,\nis the word in the dictionary?", "start": 5376.64, "duration": 3.42}, {"text": "But you certainly could\nhave stored more information", "start": 5380.06, "duration": 2.4}, {"text": "instead of just Boolean values.", "start": 5382.46, "duration": 1.5}, {"text": "You just tended to not need to do that.", "start": 5383.96, "duration": 3.19}, {"text": "So what does this mean for me?", "start": 5387.15, "duration": 1.46}, {"text": "At this point in the\nstory, I have an object,", "start": 5388.61, "duration": 2.31}, {"text": "as it's called in Python, that\nstores these keys and these values.", "start": 5390.92, "duration": 4.064}, {"text": "So if later on I want to iterate\nover them, I can do this.", "start": 5394.984, "duration": 2.416}, {"text": "For student in-- oh,\nyou have to append it--", "start": 5397.4, "duration": 3.93}, {"text": "so student.append student.", "start": 5401.33, "duration": 3.15}, {"text": "Let's add the student to the list.", "start": 5404.48, "duration": 1.84}, {"text": "So for student in\nstudents, which is just how", "start": 5406.32, "duration": 1.88}, {"text": "you iterate over every one\nof the things in that list.", "start": 5408.2, "duration": 2.249}, {"text": "Let me just go ahead and say a\nsentence like, I want to say so and so", "start": 5410.449, "duration": 5.821}, {"text": "is in this dorm.", "start": 5416.27, "duration": 2.07}, {"text": "So how do express that?", "start": 5418.34, "duration": 1.47}, {"text": "Well, so and so, I need to get\naccess to the student's name.", "start": 5419.81, "duration": 2.73}, {"text": "And the way I can do this is as follows.", "start": 5422.54, "duration": 2.85}, {"text": "I could say, let's go ahead and\nsay curly brace student bracket", "start": 5425.39, "duration": 5.46}, {"text": "name close bracket.", "start": 5430.85, "duration": 2.91}, {"text": "And then here, I can go ahead and say--", "start": 5433.76, "duration": 2.41}, {"text": "oops, let me put quotes in here--", "start": 5436.17, "duration": 2.54}, {"text": "and then here I can say student\nbracket quote unquote dorm.", "start": 5438.71, "duration": 3.81}, {"text": "So this is admittedly the most\ncryptic example we've done thus far.", "start": 5442.52, "duration": 2.88}, {"text": "But let's tease it apart\nas a format string.", "start": 5445.4, "duration": 2.47}, {"text": "So if I zoom in on\nthis, what am I doing?", "start": 5447.87, "duration": 2.39}, {"text": "The curly braces and the f\njust means format this string.", "start": 5450.26, "duration": 2.46}, {"text": "So you can ignore the curly braces\nas part of our story from earlier.", "start": 5452.72, "duration": 3.5}, {"text": "Student is the name of the\nvariable in the for loop.", "start": 5456.22, "duration": 2.17}, {"text": "So it's the current student.", "start": 5458.39, "duration": 1.5}, {"text": "The square brackets are new.", "start": 5459.89, "duration": 1.93}, {"text": "In C, the only time we used square\nbrackets was in what context?", "start": 5461.82, "duration": 3.53}, {"text": "AUDIENCE: Arrays.", "start": 5465.35, "duration": 0.967}, {"text": "DAVID MALAN: Arrays.", "start": 5466.317, "duration": 0.833}, {"text": "And what did we always put\nin those square brackets?", "start": 5467.15, "duration": 3.57}, {"text": "A number.", "start": 5470.72, "duration": 0.89}, {"text": "Yeah, so 0, 1, 2.", "start": 5471.61, "duration": 1.38}, {"text": "You can index into an array.", "start": 5472.99, "duration": 1.79}, {"text": "What's cool about an object--", "start": 5474.78, "duration": 2.21}, {"text": "or a hash table more generally,\nas we're now defining it--", "start": 5476.99, "duration": 3.17}, {"text": "is you can index into the variable\nusing not numbers, but words.", "start": 5480.16, "duration": 5.5}, {"text": "So you could think of student\nas being like a list or an array", "start": 5485.66, "duration": 3.45}, {"text": "with two values-- name and dorm.", "start": 5489.11, "duration": 1.877}, {"text": "But it's nice to be able to refer\nto those not as zero and one", "start": 5490.987, "duration": 2.583}, {"text": "or some stupid arbitrary\nnumber, but rather by keys--", "start": 5493.57, "duration": 3.15}, {"text": "name and dorm.", "start": 5496.72, "duration": 1.62}, {"text": "So this syntax here, though\ncryptic, says go inside the student", "start": 5498.34, "duration": 3.03}, {"text": "object and get me the value\nof the key called name.", "start": 5501.37, "duration": 3.6}, {"text": "And this says the same thing about dorm.", "start": 5504.97, "duration": 2.86}, {"text": "So an object in Python--", "start": 5507.83, "duration": 2.72}, {"text": "or more generally a hash table-- allows\nyou to associate keys with values.", "start": 5510.55, "duration": 3.57}, {"text": "And this is quite simply\nthe syntax you use for that.", "start": 5514.12, "duration": 2.597}, {"text": "So let me go ahead and run this.", "start": 5516.717, "duration": 1.333}, {"text": "Struct0.py, type in my name.", "start": 5518.05, "duration": 3.36}, {"text": "Let's say Matthews.", "start": 5521.41, "duration": 2.25}, {"text": "Let's do, like, Veronica, Weld.", "start": 5523.66, "duration": 3.42}, {"text": "Let's do Brian.", "start": 5527.08, "duration": 1.23}, {"text": "Brian, where did you live?", "start": 5528.31, "duration": 1.114}, {"text": "AUDIENCE: Which year?", "start": 5529.424, "duration": 1.021}, {"text": "DAVID MALAN: Freshman year.", "start": 5530.445, "duration": 1.125}, {"text": "AUDIENCE: Pennypacker.", "start": 5531.57, "duration": 0.916}, {"text": "DAVID MALAN: Pennypacker, enter.", "start": 5532.486, "duration": 2.204}, {"text": "Not that these specifics\nreally matter, but now we", "start": 5534.69, "duration": 2.73}, {"text": "have expressed all of these sentences.", "start": 5537.42, "duration": 1.63}, {"text": "So the short of it now is we\ndidn't quite see this in C,", "start": 5539.05, "duration": 2.9}, {"text": "but we did see a hint of this\nwhen we implemented our own hash", "start": 5541.95, "duration": 3.39}, {"text": "table in C so that we can actually\naccess keys and values arbitrarily.", "start": 5545.34, "duration": 5.25}, {"text": "So let's do a-- actually, let\nme pause here for any questions", "start": 5550.59, "duration": 4.49}, {"text": "before we bring back Mario.", "start": 5555.08, "duration": 4.06}, {"text": "All right.", "start": 5559.14, "duration": 0.64}, {"text": "So let's now not just do examples\nfor the sake of demonstration,", "start": 5559.78, "duration": 3.45}, {"text": "but rewind to an old friend\nthat we've seen a few times", "start": 5563.23, "duration": 3.862}, {"text": "and just look at a\nfew different screens.", "start": 5567.092, "duration": 1.708}, {"text": "So in Super Mario Bros,\nrunning left to right", "start": 5568.8, "duration": 2.154}, {"text": "you might recall or have seen that\nthere's stuff like this in the sky.", "start": 5570.954, "duration": 2.916}, {"text": "And Mario's supposed to\nrun under it and jump up", "start": 5573.87, "duration": 2.0}, {"text": "and he gets coins or whatever by jumping\nup and hitting these question marks.", "start": 5575.87, "duration": 3.44}, {"text": "So this is mostly a very\ncontrived way of saying,", "start": 5579.31, "duration": 2.24}, {"text": "suppose we want to\nprint out four question", "start": 5581.55, "duration": 1.75}, {"text": "marks on the screen just like Super\nMario Bros, how could we do it?", "start": 5583.3, "duration": 2.991}, {"text": "It's going to be a little black\nand white, a little textual,", "start": 5586.291, "duration": 2.499}, {"text": "but how do I print out\nfour question marks?", "start": 5588.79, "duration": 1.81}, {"text": "Well, let me go over here and\nlet me create a file called,", "start": 5590.6, "duration": 4.19}, {"text": "let's say, Mario0.py.", "start": 5594.79, "duration": 2.58}, {"text": "And how do I do this?", "start": 5597.37, "duration": 0.96}, {"text": "What's the simplest way to do\nthis, print four question marks?", "start": 5598.33, "duration": 3.85}, {"text": "OK, I heard print.", "start": 5602.18, "duration": 2.32}, {"text": "OK, four question marks.", "start": 5604.5, "duration": 1.15}, {"text": "Very good.", "start": 5605.65, "duration": 0.64}, {"text": "So let's go ahead and run Mario0.", "start": 5606.29, "duration": 2.45}, {"text": "Correct, that's right.", "start": 5608.74, "duration": 1.11}, {"text": "So this is not bad.", "start": 5609.85, "duration": 1.35}, {"text": "It's one string, not a huge deal.", "start": 5611.2, "duration": 1.57}, {"text": "Let's do it at least with a\nloop, as we've been often doing,", "start": 5612.77, "duration": 2.717}, {"text": "just to improve the\ndesign, even though this", "start": 5615.487, "duration": 1.833}, {"text": "is a very tiny, tiny, tiny example.", "start": 5617.32, "duration": 2.13}, {"text": "So Mario1.py, let's go ahead and print\nthis out with a loop, for instance.", "start": 5619.45, "duration": 4.99}, {"text": "So how do I do this?", "start": 5624.44, "duration": 1.23}, {"text": "How do I print four question\nmarks, but one at a time?", "start": 5625.67, "duration": 4.23}, {"text": "For i in range four,\nprint, question mark.", "start": 5629.9, "duration": 6.67}, {"text": "Save, all right.", "start": 5636.57, "duration": 0.9}, {"text": "So Python, Mario.", "start": 5637.47, "duration": 1.02}, {"text": "Does anyone want to yell\nout, no, don't do that?", "start": 5638.49, "duration": 3.126}, {"text": "OK, thanks.", "start": 5641.616, "duration": 0.774}, {"text": "That's great.", "start": 5642.39, "duration": 0.57}, {"text": "All right, so why did you\nnot want me to do that?", "start": 5642.96, "duration": 2.122}, {"text": "Because they're all vertical.", "start": 5645.082, "duration": 1.208}, {"text": "So we did have a fix for this how.", "start": 5646.29, "duration": 1.92}, {"text": "Do I tell print, don't end your\nlines with the default new line?", "start": 5648.21, "duration": 4.1}, {"text": "So and equals just quote unquote to\noverride the default backslash n value.", "start": 5652.31, "duration": 5.54}, {"text": "So now I can rerun this.", "start": 5657.85, "duration": 1.099}, {"text": "All right, it's a little buggy.", "start": 5658.949, "duration": 1.291}, {"text": "So how can I fix this and only\nput a newline after the last one?", "start": 5660.24, "duration": 4.55}, {"text": "AUDIENCE: [INAUDIBLE]", "start": 5664.79, "duration": 0.97}, {"text": "DAVID MALAN: Yeah, honestly,\njust do print nothing.", "start": 5665.76, "duration": 2.15}, {"text": "And that will have the effect\nof printing a new line for free.", "start": 5667.91, "duration": 2.83}, {"text": "So let's do this.", "start": 5670.74, "duration": 0.86}, {"text": "OK.", "start": 5671.6, "duration": 0.54}, {"text": "Now we've got a good example there.", "start": 5672.14, "duration": 1.85}, {"text": "All right, so it turns out we\nactually printed along the way", "start": 5673.99, "duration": 2.5}, {"text": "a separate example, which looked\nlike this, albeit with four blocks.", "start": 5676.49, "duration": 4.35}, {"text": "So we won't-- let's go ahead\nand do this now vertically,", "start": 5680.84, "duration": 2.54}, {"text": "not with question marks,\nbut with hashes like bricks.", "start": 5683.38, "duration": 2.354}, {"text": "So if we want to print\nout those three hashes,", "start": 5685.734, "duration": 1.916}, {"text": "allow me to draw some inspiration\nfrom this and let's say in Mario2.py,", "start": 5687.65, "duration": 5.49}, {"text": "let me go ahead and just\nsay for i in range of three,", "start": 5693.14, "duration": 5.64}, {"text": "go ahead and print out just one block.", "start": 5698.78, "duration": 2.22}, {"text": "And as you've been\nadvising, just do this--", "start": 5701.0, "duration": 2.58}, {"text": "or rather, no, let's use\nthe default to print out", "start": 5703.58, "duration": 2.64}, {"text": "a vertical bar of three blocks.", "start": 5706.22, "duration": 2.25}, {"text": "So this is Mario2.py.", "start": 5708.47, "duration": 1.77}, {"text": "And now we've done something\nreminiscent of that.", "start": 5710.24, "duration": 2.55}, {"text": "But now things get a little\ninteresting if we go underground.", "start": 5712.79, "duration": 3.3}, {"text": "And let's focus on this square.", "start": 5716.09, "duration": 1.71}, {"text": "So three by three, for instance,\nbecause we've not quite", "start": 5717.8, "duration": 2.76}, {"text": "seen something like this.", "start": 5720.56, "duration": 1.6}, {"text": "So in our last example here, let's see.", "start": 5722.16, "duration": 2.45}, {"text": "Could we get maybe a brave volunteer\nto come on up, tie some of these ideas", "start": 5724.61, "duration": 3.72}, {"text": "together?", "start": 5728.33, "duration": 1.77}, {"text": "Is that a hand back there?", "start": 5730.1, "duration": 1.25}, {"text": "Come on down.", "start": 5731.35, "duration": 2.16}, {"text": "So this will be Mario3.py, the\ngoal of which is to print a brick,", "start": 5733.51, "duration": 5.88}, {"text": "a bigger brick--", "start": 5739.39, "duration": 1.35}, {"text": "it's like 3 by 3-- hello again.", "start": 5740.74, "duration": 2.564}, {"text": "ANDREA: Hello.", "start": 5743.304, "duration": 0.876}, {"text": "DAVID MALAN: For the\naudience, what's your name?", "start": 5744.18, "duration": 0.94}, {"text": "ANDREA: Andrea.", "start": 5745.12, "duration": 0.93}, {"text": "DAVID MALAN: Andrea, nice to see you.", "start": 5746.05, "duration": 0.99}, {"text": "ANDREA: Nice to see you.", "start": 5747.04, "duration": 0.81}, {"text": "DAVID MALAN: All right,\nso the goal at hand", "start": 5747.85, "duration": 1.791}, {"text": "is to print a three\nby three grid of just", "start": 5749.641, "duration": 2.679}, {"text": "hashes reminiscent of those bricks.", "start": 5752.32, "duration": 2.67}, {"text": "All right, you're in charge.", "start": 5754.99, "duration": 1.224}, {"text": "ANDREA: All right.", "start": 5756.214, "duration": 1.422}, {"text": "Should I do, like, a loop or something?", "start": 5757.636, "duration": 2.126}, {"text": "DAVID MALAN: Whatever gets the job done.", "start": 5759.762, "duration": 1.666}, {"text": "All right, for.", "start": 5764.75, "duration": 2.941}, {"text": "OK, good.", "start": 5767.691, "duration": 0.499}, {"text": "OK, interesting.", "start": 5775.36, "duration": 1.648}, {"text": "OK, print, quote\nunquote, print, yeah, OK.", "start": 5783.71, "duration": 4.223}, {"text": "ANDREA: OK.", "start": 5787.933, "duration": 0.499}, {"text": "Oh, right.", "start": 5788.432, "duration": 0.628}, {"text": "DAVID MALAN: Key detail.", "start": 5789.06, "duration": 1.0}, {"text": "ANDREA: What was it, a hash?", "start": 5790.06, "duration": 1.167}, {"text": "DAVID MALAN: A hash is fine, yeah.", "start": 5791.227, "duration": 1.416}, {"text": "ANDREA: OK.", "start": 5792.643, "duration": 0.867}, {"text": "DAVID MALAN: All right.", "start": 5793.51, "duration": 1.09}, {"text": "And before we do this, does everyone\nwant her to run this program", "start": 5794.6, "duration": 5.72}, {"text": "and be correct?", "start": 5800.32, "duration": 1.744}, {"text": "AUDIENCE: Don't do it.", "start": 5802.064, "duration": 0.916}, {"text": "DAVID MALAN: No, why?", "start": 5802.98, "duration": 2.37}, {"text": "Someone who claims no, what?", "start": 5805.35, "duration": 1.26}, {"text": "What's your concern?", "start": 5806.61, "duration": 1.1}, {"text": "AUDIENCE: N equals--\nit'll do it [INAUDIBLE]", "start": 5807.71, "duration": 3.184}, {"text": "DAVID MALAN: Good, OK.", "start": 5810.894, "duration": 0.916}, {"text": "So you fixed that.", "start": 5811.81, "duration": 0.78}, {"text": "Good.", "start": 5812.59, "duration": 0.57}, {"text": "Any other concerns?", "start": 5813.16, "duration": 2.599}, {"text": "Yeah?", "start": 5815.759, "duration": 1.243}, {"text": "AUDIENCE: [INAUDIBLE]", "start": 5817.002, "duration": 4.702}, {"text": "DAVID MALAN: OK.", "start": 5821.704, "duration": 0.666}, {"text": "Is it going to go up and down?", "start": 5822.37, "duration": 1.14}, {"text": "Well, let's see.", "start": 5823.51, "duration": 0.2}, {"text": "Can you walk us through\nverbally-- do we have--", "start": 5823.71, "duration": 1.98}, {"text": "can you walk us through\nwhat the program does?", "start": 5829.46, "duration": 2.855}, {"text": "[LAUGHTER]", "start": 5832.315, "duration": 3.115}, {"text": "ANDREA: For i in range 3, so this\nwill happen three times, then j", "start": 5835.43, "duration": 3.825}, {"text": "in range three, the next thing\nwill also happen three times.", "start": 5839.255, "duration": 2.795}, {"text": "So we print a hash.", "start": 5842.05, "duration": 1.35}, {"text": "And then we another\nhash and another hash", "start": 5843.4, "duration": 1.97}, {"text": "because the end is the quotation marks.", "start": 5845.37, "duration": 3.56}, {"text": "DAVID MALAN: OK.", "start": 5848.93, "duration": 0.81}, {"text": "ANDREA: And then that happens\nand then we print a new line.", "start": 5849.74, "duration": 5.74}, {"text": "And then it should\nexecute that three times.", "start": 5855.48, "duration": 2.872}, {"text": "DAVID MALAN: All right.", "start": 5858.352, "duration": 0.958}, {"text": "What do you think?", "start": 5859.31, "duration": 0.75}, {"text": "Do you-- the duck is convinced.", "start": 5860.06, "duration": 2.154}, {"text": "All right, why don't you\ngo ahead and save the file.", "start": 5862.214, "duration": 2.166}, {"text": "Let's try.", "start": 5864.38, "duration": 0.78}, {"text": "No harm in trying, so\nright or wrong, let's see.", "start": 5865.16, "duration": 2.97}, {"text": "This is called Mario3.py, and I think\nwe have round of applause if we could.", "start": 5868.13, "duration": 5.61}, {"text": "Very nicely done.", "start": 5873.74, "duration": 2.03}, {"text": "All right.", "start": 5875.77, "duration": 0.79}, {"text": "So let's-- and if you'd like one more.", "start": 5876.56, "duration": 1.9}, {"text": "So let's take a look\nat one final example,", "start": 5878.46, "duration": 2.21}, {"text": "coming full circle from where we began.", "start": 5880.67, "duration": 2.22}, {"text": "We of course looked at resize.", "start": 5882.89, "duration": 1.44}, {"text": "And let's open that up, just to see how\nI got away with writing so little code", "start": 5884.33, "duration": 5.01}, {"text": "and actually getting that job done.", "start": 5889.34, "duration": 2.01}, {"text": "So in resize.py, which\nis where we began,", "start": 5891.35, "duration": 2.76}, {"text": "notice that I had a few lines that\nhopefully look a little more familiar", "start": 5894.11, "duration": 3.09}, {"text": "now.", "start": 5897.2, "duration": 0.5}, {"text": "But we didn't exactly introduce\nall of these features ourselves.", "start": 5897.7, "duration": 3.82}, {"text": "So it turns out in line\none and line two we have", "start": 5901.52, "duration": 3.33}, {"text": "one unfamiliar and one familiar line.", "start": 5904.85, "duration": 1.654}, {"text": "Line two just gives us access to\na command line arguments, which", "start": 5906.504, "duration": 2.666}, {"text": "we needed for resizing the bitmap.", "start": 5909.17, "duration": 1.74}, {"text": "Line one is where a lot of\nthe power is coming from.", "start": 5910.91, "duration": 3.16}, {"text": "It turns out there's a library\nin Python called pillow", "start": 5914.07, "duration": 2.65}, {"text": "that you can install by typing a\ncertain command at your terminal.", "start": 5916.72, "duration": 2.75}, {"text": "It doesn't necessarily\ncome with your Mac or PC.", "start": 5919.47, "duration": 1.96}, {"text": "You have to download it and\ninstall it with a command.", "start": 5921.43, "duration": 2.249}, {"text": "And then if you read\nits documentation, it", "start": 5923.679, "duration": 1.961}, {"text": "will say, from pill for\npillow import image.", "start": 5925.64, "duration": 3.0}, {"text": "Now, that's not a specific image.", "start": 5928.64, "duration": 1.56}, {"text": "That's the name of a\nlibrary called the image", "start": 5930.2, "duration": 2.67}, {"text": "library that comes with that software\nthat someone freely made available.", "start": 5932.87, "duration": 3.87}, {"text": "So that's just saying, give me\naccess to an image-related library.", "start": 5936.74, "duration": 3.68}, {"text": "And undoubtedly, there could exist\nsimilar things in C. But we of course", "start": 5940.42, "duration": 3.55}, {"text": "did things very hands-on low-level.", "start": 5943.97, "duration": 2.22}, {"text": "All right, if the length of argv is\nnot 4, yell at the user with the usage.", "start": 5946.19, "duration": 3.96}, {"text": "And that's just if they don't cooperate\nby typing in as they should, this.", "start": 5950.15, "duration": 3.33}, {"text": "It's a little more verbose\nnow because we have Python", "start": 5953.48, "duration": 2.489}, {"text": "and we have the file extension.", "start": 5955.969, "duration": 1.291}, {"text": "But we could technically clean\nthat up if we really wanted.", "start": 5957.26, "duration": 2.67}, {"text": "Lines 7, 8, and 9, there's\nnothing really new there.", "start": 5959.93, "duration": 3.36}, {"text": "I'm just declaring three\nvariables implicitly typed.", "start": 5963.29, "duration": 2.94}, {"text": "I don't have to bother\nsaying int or string.", "start": 5966.23, "duration": 2.28}, {"text": "I'm accessing argv 1, 2,\nand 3, which is 1, 2, and 3.", "start": 5968.51, "duration": 4.81}, {"text": "And then I'm doing one thing line 7.", "start": 5973.32, "duration": 2.6}, {"text": "What is line 7 doing that's important?", "start": 5975.92, "duration": 3.798}, {"text": "AUDIENCE: [INAUDIBLE]", "start": 5979.718, "duration": 1.427}, {"text": "DAVID MALAN: I'm changing the\nargument from what is technically", "start": 5981.145, "duration": 2.625}, {"text": "a string by default-- because\nindeed, it came from the human hands", "start": 5983.77, "duration": 2.75}, {"text": "at a keyboard-- and\nconverting it into a number.", "start": 5986.52, "duration": 2.59}, {"text": "Now, as an aside, if the user does\nnot provide a number like 2 or 10,", "start": 5989.11, "duration": 4.14}, {"text": "this code could break.", "start": 5993.25, "duration": 1.05}, {"text": "To be fair, I should really\nhave some error checking", "start": 5994.3, "duration": 2.166}, {"text": "to make sure if the user typed\nin hello and not 2 or 10,", "start": 5996.466, "duration": 4.164}, {"text": "I need to catch that error.", "start": 6000.63, "duration": 1.15}, {"text": "So I'm being a little sloppy.", "start": 6001.78, "duration": 1.208}, {"text": "But it was really meant to\ndemonstrate succinct code.", "start": 6002.988, "duration": 3.142}, {"text": "So now we have infile and outfile\ndefined exactly as before.", "start": 6006.13, "duration": 3.6}, {"text": "So we have just three lines left that\nactually implement most of the magic.", "start": 6009.73, "duration": 3.31}, {"text": "Yeah.", "start": 6013.04, "duration": 1.675}, {"text": "AUDIENCE: [INAUDIBLE]", "start": 6014.715, "duration": 7.935}, {"text": "DAVID MALAN: Wait, say\nthe last part again.", "start": 6022.65, "duration": 1.791}, {"text": "AUDIENCE: [INAUDIBLE]", "start": 6024.441, "duration": 2.159}, {"text": "DAVID MALAN: Yes.", "start": 6026.6, "duration": 1.95}, {"text": "AUDIENCE: There was almost [INAUDIBLE]", "start": 6028.55, "duration": 4.88}, {"text": "DAVID MALAN: Good observation.", "start": 6033.43, "duration": 1.25}, {"text": "So this is not just converting the\nuser's input to the equivalent ASCII", "start": 6034.68, "duration": 4.02}, {"text": "value because that's not what we want.", "start": 6038.7, "duration": 2.1}, {"text": "This int used here is\nactually converting it", "start": 6040.8, "duration": 3.6}, {"text": "as via a2i, a function that you've\nprobably used a couple of weeks ago,", "start": 6044.4, "duration": 4.02}, {"text": "it's just named a\nlittle more succinctly.", "start": 6048.42, "duration": 2.04}, {"text": "There is a function via which you\ncould convert a character or a string", "start": 6050.46, "duration": 3.48}, {"text": "to its ASCII equivalent.", "start": 6053.94, "duration": 1.261}, {"text": "But that's not what's going on here.", "start": 6055.201, "duration": 1.499}, {"text": "It does the more intuitive\nturn this into an integer", "start": 6056.7, "duration": 2.49}, {"text": "without using a cryptically\nnamed function like a2i.", "start": 6059.19, "duration": 2.621}, {"text": "So let's scroll down just a little\nfurther to these last few lines", "start": 6061.811, "duration": 2.749}, {"text": "and see what's going on.", "start": 6064.56, "duration": 1.21}, {"text": "Some of them you would only\nknow how to do from having", "start": 6065.77, "duration": 2.45}, {"text": "read the documentation just as we did.", "start": 6068.22, "duration": 1.65}, {"text": "This says give me a\nvariable called in image.", "start": 6069.87, "duration": 1.891}, {"text": "Could have called it anything.", "start": 6071.761, "duration": 1.249}, {"text": "I'm just trying to be\nconsistent with in file.", "start": 6073.01, "duration": 1.93}, {"text": "This says, use the image library.", "start": 6074.94, "duration": 2.16}, {"text": "Use its open function\nthat comes with it.", "start": 6077.1, "duration": 2.04}, {"text": "So image is some kind of\nstructure, inside of which", "start": 6079.14, "duration": 2.64}, {"text": "is some useful\nimage-related functionality.", "start": 6081.78, "duration": 1.95}, {"text": "So call its open function\non the name of the file,", "start": 6083.73, "duration": 3.13}, {"text": "then go ahead and extract\nits height and width.", "start": 6086.86, "duration": 2.39}, {"text": "So turns out this is\nanother tuple, if you will.", "start": 6089.25, "duration": 2.85}, {"text": "Tuples, again, are like x comma\ny, latitude comma longitude.", "start": 6092.1, "duration": 3.01}, {"text": "You'd only know that it is a\ntuple from the documentation.", "start": 6095.11, "duration": 2.45}, {"text": "So when I say width comma height, this\nis taking what's technically a list", "start": 6097.56, "duration": 4.59}, {"text": "of size two-- or really, a tuple--", "start": 6102.15, "duration": 1.525}, {"text": "and it's just extracting for\nme the width and the height.", "start": 6103.675, "duration": 2.375}, {"text": "But let me wave my hands\nat that particular syntax.", "start": 6106.05, "duration": 2.312}, {"text": "The rest of this just\nsays the following.", "start": 6108.362, "duration": 1.708}, {"text": "Give me a new variable called out image.", "start": 6110.07, "duration": 2.38}, {"text": "Call the input image's resize function,\nanother piece of functionality", "start": 6112.45, "duration": 3.8}, {"text": "built into it, just\nlike open, and change it", "start": 6116.25, "duration": 3.36}, {"text": "by this width and this height--\nthe original width times n,", "start": 6119.61, "duration": 4.14}, {"text": "the original height times n.", "start": 6123.75, "duration": 1.77}, {"text": "No padding manipulation, that's all\nthe responsibility of the library.", "start": 6125.52, "duration": 3.33}, {"text": "Some other human dealt\nwith all of that for us.", "start": 6128.85, "duration": 2.31}, {"text": "And this last line,\nperhaps not surprisingly,", "start": 6131.16, "duration": 2.13}, {"text": "saves the output image\nto that file name.", "start": 6133.29, "duration": 3.37}, {"text": "So in just, what, 15\nlines of code and fewer", "start": 6136.66, "duration": 2.202}, {"text": "if we get rid of some of\nthe whitespace can you", "start": 6138.862, "duration": 1.958}, {"text": "implement the entirety of resize.", "start": 6140.82, "duration": 1.59}, {"text": "But really focusing on\nthe logic of the problem,", "start": 6142.41, "duration": 2.08}, {"text": "I want to take an input from the user.", "start": 6144.49, "duration": 1.64}, {"text": "I want to scale it up by a factor of n.", "start": 6146.13, "duration": 1.47}, {"text": "And I want to save out the file.", "start": 6147.6, "duration": 1.14}, {"text": "That's what you care about.", "start": 6148.74, "duration": 1.3}, {"text": "You don't necessarily care about getting\ninto the weeds of exactly what it", "start": 6150.04, "duration": 3.23}, {"text": "was you had to do when you did it in C.", "start": 6153.27, "duration": 3.6}, {"text": "So let's do one final example here.", "start": 6156.87, "duration": 2.43}, {"text": "You'll recall from problem set four\nyou implemented your own spell checker.", "start": 6159.3, "duration": 3.48}, {"text": "And odds are you did a try\nor a hash table or the like.", "start": 6162.78, "duration": 3.01}, {"text": "And it turns out that is\nnon-trivial, certainly in C.", "start": 6165.79, "duration": 2.33}, {"text": "And it's non-trivial certainly for\nthe first time in any language.", "start": 6168.12, "duration": 2.98}, {"text": "But let me take a stab at\ndoing this now in Python.", "start": 6171.1, "duration": 2.78}, {"text": "Let me go into source 6 where\nI have a speller example.", "start": 6173.88, "duration": 3.45}, {"text": "And notice that in this folder today\nI've brought a few files with me.", "start": 6177.33, "duration": 3.51}, {"text": "So I've brought a copy\nof the dictionaries", "start": 6180.84, "duration": 2.19}, {"text": "from p set four, a copy of the text\nfiles, like la-la land and the like", "start": 6183.03, "duration": 3.72}, {"text": "in text.", "start": 6186.75, "duration": 0.94}, {"text": "And then I brought two files--\ndictionary.py and speller.py--", "start": 6187.69, "duration": 3.59}, {"text": "the latter of which is an\nimplementation of speller.c in Python.", "start": 6191.28, "duration": 3.66}, {"text": "And I'm not going to pull that one\nup because we wrote that one entirely", "start": 6194.94, "duration": 3.0}, {"text": "for you.", "start": 6197.94, "duration": 0.66}, {"text": "But let me go ahead and write, for\ninstance, just my own dictionary.", "start": 6198.6, "duration": 4.17}, {"text": "So dictionary.py is the\nanalog of dictionary.c.", "start": 6202.77, "duration": 5.91}, {"text": "And let's go ahead and set this up.", "start": 6208.68, "duration": 2.426}, {"text": "Let me go ahead and create\nthis file in a separate folder", "start": 6211.106, "duration": 2.374}, {"text": "for now, so dictionary.py.", "start": 6213.48, "duration": 2.67}, {"text": "And there's a few\nfunctions in dictionary.c", "start": 6216.15, "duration": 2.034}, {"text": "which we should probably\nget around to implementing.", "start": 6218.184, "duration": 2.166}, {"text": "What are those functions?", "start": 6220.35, "duration": 1.422}, {"text": "AUDIENCE: Load.", "start": 6221.772, "duration": 1.608}, {"text": "DAVID MALAN: Load was\none, and load takes", "start": 6223.38, "duration": 1.71}, {"text": "the name of a file or a dictionary.", "start": 6225.09, "duration": 1.9}, {"text": "So let's do this.", "start": 6226.99, "duration": 0.86}, {"text": "And I'll just say to do.", "start": 6227.85, "duration": 1.08}, {"text": "Come back to that.", "start": 6228.93, "duration": 0.75}, {"text": "What other functions\nwere in dictionary.c?", "start": 6229.68, "duration": 2.34}, {"text": "Check, so def check.", "start": 6232.02, "duration": 1.56}, {"text": "And what did check take as an input?", "start": 6233.58, "duration": 2.7}, {"text": "A word, yep.", "start": 6236.28, "duration": 0.54}, {"text": "So we'll come back to this and\njust come back to that to do.", "start": 6236.82, "duration": 2.5}, {"text": "What other functions?", "start": 6239.32, "duration": 1.203}, {"text": "AUDIENCE: Size.", "start": 6240.523, "duration": 0.847}, {"text": "DAVID MALAN: Size was one, so def size.", "start": 6241.37, "duration": 2.831}, {"text": "This did not take input, but it just\nreturned the size of the structure.", "start": 6244.201, "duration": 2.999}, {"text": "So we'll come back to that.", "start": 6247.2, "duration": 0.75}, {"text": "And lastly?", "start": 6247.95, "duration": 0.762}, {"text": "AUDIENCE: Unload.", "start": 6248.712, "duration": 0.708}, {"text": "DAVID MALAN: OK, so unload.", "start": 6249.42, "duration": 1.125}, {"text": "All right, so this is the Python\nversion of the distribution code", "start": 6250.545, "duration": 2.765}, {"text": "for speller for your dictionary file.", "start": 6253.31, "duration": 1.86}, {"text": "So unload also didn't take an argument.", "start": 6255.17, "duration": 2.5}, {"text": "So that's something for us to do, too.", "start": 6257.67, "duration": 2.15}, {"text": "So what's the gist of\nmaking a spell checker?", "start": 6259.82, "duration": 2.58}, {"text": "You are loading words in your load\nfunction from a dictionary file.", "start": 6262.4, "duration": 3.33}, {"text": "And the goal is to load\nthose somehow into memory.", "start": 6265.73, "duration": 2.25}, {"text": "You had a design decision\nfor the p set in C,", "start": 6267.98, "duration": 2.97}, {"text": "where you could make\na hash table or a try", "start": 6270.95, "duration": 1.89}, {"text": "or even a linked list or even an array.", "start": 6272.84, "duration": 1.95}, {"text": "But odds are the first of those\ntwo were probably more efficient.", "start": 6274.79, "duration": 2.79}, {"text": "So it turns out that in\nPython, you have the ability", "start": 6277.58, "duration": 2.97}, {"text": "to store words pretty readily in\nany number of data structures.", "start": 6280.55, "duration": 3.09}, {"text": "You have not just ints\nand floats and strings,", "start": 6283.64, "duration": 3.0}, {"text": "but you clearly have\nlists, as we've seen.", "start": 6286.64, "duration": 2.61}, {"text": "We call them objects\nor hashes, hash tables.", "start": 6289.25, "duration": 3.261}, {"text": "And there's other\nthings, too, even called", "start": 6292.511, "duration": 1.749}, {"text": "sets, where a set is kind of\njust a collection of words", "start": 6294.26, "duration": 3.39}, {"text": "which would be very nicely searchable.", "start": 6297.65, "duration": 2.7}, {"text": "And so you know what?", "start": 6300.35, "duration": 0.897}, {"text": "If I want to ultimately\nload some words, let", "start": 6301.247, "duration": 1.833}, {"text": "me give myself a global\nvariable called words", "start": 6303.08, "duration": 2.52}, {"text": "and just initialize it to an empty set.", "start": 6305.6, "duration": 2.65}, {"text": "So I have a global variable called\nwords and nothing is in it just yet.", "start": 6308.25, "duration": 3.08}, {"text": "But it's a set of words.", "start": 6311.33, "duration": 1.83}, {"text": "How do I go about loading\nwords into that dictionary?", "start": 6313.16, "duration": 2.5}, {"text": "Well, let's go ahead\nand implement load here.", "start": 6315.66, "duration": 1.88}, {"text": "So let me go ahead and declare\na variable called file and open", "start": 6317.54, "duration": 2.7}, {"text": "this dictionary in read\nmode, just as in C.", "start": 6320.24, "duration": 3.99}, {"text": "And then how do I integrate\nover the lines in a file?", "start": 6324.23, "duration": 2.31}, {"text": "We've not seen that.", "start": 6326.54, "duration": 0.97}, {"text": "But I do know how to iterate\nover the strings in an array", "start": 6327.51, "duration": 3.02}, {"text": "and the characters in a string.", "start": 6330.53, "duration": 1.31}, {"text": "So let me go with my\ninstinct for line in file.", "start": 6331.84, "duration": 3.88}, {"text": "Indeed, this will do exactly\nwhat you want it to do.", "start": 6335.72, "duration": 2.52}, {"text": "Then let me go ahead and add to my\nwords data structure the following line.", "start": 6338.24, "duration": 6.51}, {"text": "And then let me close the file.", "start": 6344.75, "duration": 2.215}, {"text": "And then let me just say return\ntrue because all is well.", "start": 6346.965, "duration": 2.375}, {"text": "Done.", "start": 6349.34, "duration": 1.44}, {"text": "All right, so I'm cutting\na few corners, technically.", "start": 6350.78, "duration": 2.91}, {"text": "Let me use that function\nI alluded to earlier.", "start": 6353.69, "duration": 1.98}, {"text": "Let me go ahead and call\nr strip and strip off", "start": 6355.67, "duration": 2.914}, {"text": "the new line because in\nthe file, technically,", "start": 6358.584, "duration": 1.916}, {"text": "when you're reading in those words,\nevery line ends with a backslash zero.", "start": 6360.5, "duration": 2.96}, {"text": "That's now part of the word.", "start": 6363.46, "duration": 1.16}, {"text": "So a minor correction there\nthat I'm stripping off the line.", "start": 6364.62, "duration": 2.5}, {"text": "But that's it for load.", "start": 6367.12, "duration": 1.09}, {"text": "How do I now check if a\ngiven word is in that set?", "start": 6368.21, "duration": 4.83}, {"text": "Well, I can just say, if\nword in words return true.", "start": 6373.04, "duration": 5.47}, {"text": "Else, return false.", "start": 6378.51, "duration": 2.61}, {"text": "Done with check.", "start": 6381.12, "duration": 1.83}, {"text": "How do I return the size\nof this data structure?", "start": 6382.95, "duration": 3.64}, {"text": "How about I just return the length\nof that structure, words, and then", "start": 6386.59, "duration": 3.86}, {"text": "unload--", "start": 6390.45, "duration": 0.54}, {"text": "heck, Python's doing this all for me--", "start": 6390.99, "duration": 2.092}, {"text": "done.", "start": 6393.082, "duration": 2.736}, {"text": "Let me shrink this.", "start": 6395.818, "duration": 1.302}, {"text": "And you know what?", "start": 6397.12, "duration": 0.75}, {"text": "This is a little verbose.", "start": 6397.87, "duration": 1.14}, {"text": "I don't actually need\nto do this if else.", "start": 6399.01, "duration": 1.71}, {"text": "I could just return word in words and\nthat will return a Boolean for me.", "start": 6400.72, "duration": 3.971}, {"text": "And honestly, if I want to\nlower case it, that's easy.", "start": 6404.691, "duration": 2.249}, {"text": "I can just do this\nand take care of that.", "start": 6406.94, "duration": 1.708}, {"text": "Now it's even better.", "start": 6408.648, "duration": 1.336}, {"text": "That's p set 4.", "start": 6409.984, "duration": 1.431}, {"text": "Excited?", "start": 6414.76, "duration": 1.68}, {"text": "Wish we had done this in C?", "start": 6416.44, "duration": 1.35}, {"text": "So what is the whole\npoint of all of this,", "start": 6417.79, "duration": 2.04}, {"text": "because the goal wasn't to create\nsort of great angst and wonder now.", "start": 6419.83, "duration": 3.93}, {"text": "But the whole point of having introduced\nC over these past few weeks is to,", "start": 6423.76, "duration": 3.45}, {"text": "one, none of this now\ndo you take for granted.", "start": 6427.21, "duration": 2.129}, {"text": "I mean, you might be longing for\nhaving implemented this in Python.", "start": 6429.339, "duration": 2.791}, {"text": "And you might have had to\nread some documentation", "start": 6432.13, "duration": 1.71}, {"text": "and figure out the various syntax.", "start": 6433.84, "duration": 1.47}, {"text": "But my God.", "start": 6435.31, "duration": 1.35}, {"text": "We whittled down what probably took\nmost of you hours into just seconds", "start": 6436.66, "duration": 3.422}, {"text": "once you're more comfortable\nwith the language.", "start": 6440.082, "duration": 1.958}, {"text": "But also, to our very\nearliest point today,", "start": 6442.04, "duration": 1.91}, {"text": "once you have the right language\nand the right tool for the job.", "start": 6443.95, "duration": 3.4}, {"text": "Now, it's not to say that this\nis perfect, because in fact,", "start": 6447.35, "duration": 2.85}, {"text": "let's go ahead and do some tests.", "start": 6450.2, "duration": 1.49}, {"text": "Let me go into my terminal window here.", "start": 6451.69, "duration": 2.67}, {"text": "And I actually brought my own\nsolution in my C folder here.", "start": 6454.36, "duration": 3.96}, {"text": "Let's see.", "start": 6458.32, "duration": 0.66}, {"text": "I have my own code to speller\nimplemented in C here.", "start": 6458.98, "duration": 4.872}, {"text": "And let me go ahead and run a test.", "start": 6463.852, "duration": 1.458}, {"text": "Let me go ahead and run speller\non, say, the text Shakespeare.", "start": 6465.31, "duration": 3.81}, {"text": "That's a pretty big input.", "start": 6469.12, "duration": 1.11}, {"text": "Let's go ahead and hit Enter.", "start": 6470.23, "duration": 1.44}, {"text": "And this is my spell checker running.", "start": 6471.67, "duration": 1.56}, {"text": "And all the words are outputting.", "start": 6473.23, "duration": 1.374}, {"text": "And the time total to run speller\nin C was, say, 0.9 seconds.", "start": 6474.604, "duration": 4.176}, {"text": "So that's actually pretty good.", "start": 6478.78, "duration": 1.43}, {"text": "In a second window, let me go up\nhere in another terminal window.", "start": 6480.21, "duration": 3.7}, {"text": "And let me go into today's code and\ninto the speller folder where I have", "start": 6483.91, "duration": 4.98}, {"text": "a Python version that I'm going\nto run as follows-- speller.py--", "start": 6488.89, "duration": 3.75}, {"text": "let me go ahead and\nrun it on Shakespeare.", "start": 6492.64, "duration": 2.61}, {"text": "So we've not looked at speller.py.", "start": 6495.25, "duration": 1.72}, {"text": "But it is essentially line for line a\nport, a translation, from C to Python.", "start": 6496.97, "duration": 3.701}, {"text": "But you're welcome to\nlook at that online.", "start": 6500.671, "duration": 1.749}, {"text": "And it's using my dictionary.py file.", "start": 6502.42, "duration": 3.25}, {"text": "Let me go ahead and run that.", "start": 6505.67, "duration": 1.37}, {"text": "It's running through all the words.", "start": 6507.04, "duration": 1.74}, {"text": "Top is Python, bottom is C. Here we go.", "start": 6508.78, "duration": 4.45}, {"text": "Here we go.", "start": 6513.23, "duration": 2.9}, {"text": "Here we go.", "start": 6516.13, "duration": 2.575}, {"text": "Now, this is a bit misleading because\nagain, the internet is the way.", "start": 6518.705, "duration": 2.875}, {"text": "We're using a web-based IDE, and so it's\nfunny that that appears so many times.", "start": 6521.58, "duration": 4.44}, {"text": "And you'll see it's not 10, 20\nseconds, however long that was.", "start": 6526.02, "duration": 2.707}, {"text": "That was just the internet being slow.", "start": 6528.727, "duration": 1.583}, {"text": "And all we're timing is your\nfunctions in both C and Python.", "start": 6530.31, "duration": 2.88}, {"text": "But what's the takeaway\nbetween Python and C?", "start": 6533.19, "duration": 2.76}, {"text": "Same inputs.", "start": 6538.88, "duration": 2.944}, {"text": "What do you see?", "start": 6541.824, "duration": 0.666}, {"text": "Yeah?", "start": 6542.49, "duration": 1.2}, {"text": "AUDIENCE: Be more concise [INAUDIBLE].", "start": 6543.69, "duration": 1.801}, {"text": "DAVID MALAN: Yeah, I\nwouldn't say concise.", "start": 6545.491, "duration": 1.749}, {"text": "That's more aesthetic.", "start": 6547.24, "duration": 0.96}, {"text": "It's more--", "start": 6548.2, "duration": 1.084}, {"text": "AUDIENCE: Specific [INAUDIBLE].", "start": 6549.284, "duration": 1.566}, {"text": "DAVID MALAN: Well, not\neven that, I think.", "start": 6550.85, "duration": 1.75}, {"text": "These are correct.", "start": 6552.6, "duration": 0.879}, {"text": "Both of them are correct.", "start": 6553.479, "duration": 1.041}, {"text": "All the important numbers\nat the top are identical.", "start": 6554.52, "duration": 3.51}, {"text": "But what is clearly different, though?", "start": 6558.03, "duration": 3.65}, {"text": "It's slower.", "start": 6561.68, "duration": 1.08}, {"text": "So Python seems to be slower, right?", "start": 6562.76, "duration": 1.95}, {"text": "It takes in total-- if we\njust look at two numbers--", "start": 6564.71, "duration": 2.44}, {"text": "1.55 seconds in Python, if\nyou ignore the internet speed", "start": 6567.15, "duration": 3.08}, {"text": "and just look at the code\nperformance, versus 0.9.", "start": 6570.23, "duration": 2.59}, {"text": "So it's almost twice as slow as\nC. So what's the takeaway there?", "start": 6572.82, "duration": 5.15}, {"text": "Well, yes, it took me, what, 10,\n20, 30 seconds to write the code.", "start": 6577.97, "duration": 4.21}, {"text": "But it's taking me\ntwice as long to run it.", "start": 6582.18, "duration": 1.9}, {"text": "Now, not a big deal,\nof course, when we're", "start": 6584.08, "duration": 1.24}, {"text": "talking a few seconds here and there.", "start": 6585.32, "duration": 1.584}, {"text": "But if this were a big data set that\nyou're analyzing for some project", "start": 6586.904, "duration": 2.916}, {"text": "or for work or for any kind of analysis\nproject and the data is much larger", "start": 6589.82, "duration": 4.767}, {"text": "than even this-- especially in\nthe medical field or the like--", "start": 6594.587, "duration": 2.583}, {"text": "maybe you don't want to use Python.", "start": 6597.17, "duration": 1.458}, {"text": "Sure, you can bang out the code in\njust a few minutes, maybe a few hours.", "start": 6598.628, "duration": 3.352}, {"text": "But once you run it, damn, it's\nslower than using something like C.", "start": 6601.98, "duration": 3.92}, {"text": "Whereas in C, might take\nyou more time upfront.", "start": 6605.9, "duration": 2.314}, {"text": "And you might not even\nhave the comfort with C", "start": 6608.214, "duration": 1.916}, {"text": "anymore so it's going to take an even\nlonger because you have to go relearn", "start": 6610.13, "duration": 2.49}, {"text": "the language.", "start": 6612.62, "duration": 0.78}, {"text": "But when you run it, wow,\nit runs twice as fast.", "start": 6613.4, "duration": 2.85}, {"text": "You therefore need\nless RAM, potentially,", "start": 6616.25, "duration": 1.86}, {"text": "less hardware or less expensive hardware\nbecause you can get away with more.", "start": 6618.11, "duration": 3.42}, {"text": "So again, this theme we keep seeing\nin data structures and algorithms", "start": 6621.53, "duration": 3.03}, {"text": "is trade-offs.", "start": 6624.56, "duration": 0.78}, {"text": "Like, developer time is a resource\nand it is wonderful that I", "start": 6625.34, "duration": 3.42}, {"text": "and now you would be able to\nwrite code so much more quickly.", "start": 6628.76, "duration": 2.76}, {"text": "But you do have to\npay a price somewhere.", "start": 6631.52, "duration": 1.904}, {"text": "And there's clearly a price with Python.", "start": 6633.424, "duration": 1.666}, {"text": "And it's not because Python\nis poorly implemented.", "start": 6635.09, "duration": 2.52}, {"text": "But what is the fundamental\ndifference between the paradigm", "start": 6637.61, "duration": 2.88}, {"text": "of programming in C versus in\nPython as we've seen it today?", "start": 6640.49, "duration": 4.372}, {"text": "What's different?", "start": 6644.862, "duration": 0.708}, {"text": "Yeah?", "start": 6645.57, "duration": 0.759}, {"text": "AUDIENCE: [INAUDIBLE] line by\nline, whereas C, it essentially--", "start": 6646.329, "duration": 6.487}, {"text": "[INAUDIBLE] optimize running\nit, it will run [INAUDIBLE]..", "start": 6652.816, "duration": 4.221}, {"text": "DAVID MALAN: Indeed.", "start": 6657.037, "duration": 0.833}, {"text": "And let me flip it around.", "start": 6657.87, "duration": 0.68}, {"text": "So with C, you're compiling\ndown to zeros and ones.", "start": 6658.55, "duration": 2.21}, {"text": "And that compiler is super smart.", "start": 6660.76, "duration": 1.51}, {"text": "And it's going to move\nthings around in memory.", "start": 6662.27, "duration": 1.44}, {"text": "It's going to talk the computer's\nnative language of zeros and ones.", "start": 6663.71, "duration": 2.833}, {"text": "Python is, indeed, reading your code, by\ncontrast, line by line, top to bottom,", "start": 6666.543, "duration": 3.934}, {"text": "left to right.", "start": 6670.477, "duration": 0.583}, {"text": "And even though technically underneath\nthe hood there is a compilation step,", "start": 6671.06, "duration": 3.166}, {"text": "there is nonetheless\nsome overhead involved.", "start": 6674.226, "duration": 2.164}, {"text": "The mere fact that we're no\nlonger running clang and then", "start": 6676.39, "duration": 2.47}, {"text": "getting 0's and 1's or running make and\ngetting zeros and ones, that's great.", "start": 6678.86, "duration": 3.66}, {"text": "But we have to pay the price somewhere.", "start": 6682.52, "duration": 1.667}, {"text": "So this is going to be thematic.", "start": 6684.187, "duration": 1.333}, {"text": "Like, there is no holy grail among\nlanguages or tools or techniques.", "start": 6685.52, "duration": 3.0}, {"text": "There's going to be trade-offs\namong your comfort, your familiarity", "start": 6688.52, "duration": 2.82}, {"text": "or recollection of a language,\nhow easy it is to use,", "start": 6691.34, "duration": 2.65}, {"text": "how succinctly you can type it, and\nthen how efficiently you can actually", "start": 6693.99, "duration": 3.74}, {"text": "run it on the screen.", "start": 6697.73, "duration": 1.32}, {"text": "And with C, hopefully now-- we\nwill not write any more C-code--", "start": 6699.05, "duration": 3.51}, {"text": "you have an appreciation in\nPython of when you create a hash--", "start": 6702.56, "duration": 3.39}, {"text": "or a list, rather--", "start": 6705.95, "duration": 1.5}, {"text": "or if you create a set or a hash\ntable or the like, what you're really", "start": 6707.45, "duration": 3.39}, {"text": "getting access to is someone\nelse's implementation of p", "start": 6710.84, "duration": 2.81}, {"text": "set four and p set three and p set\ntwo and p set one, in some form,", "start": 6713.65, "duration": 3.8}, {"text": "but now exposed to you in a more\npowerful and more modern language.", "start": 6717.45, "duration": 3.86}, {"text": "So let's end there officially today.", "start": 6721.31, "duration": 1.5}, {"text": "And next week, we'll do the same thing,\nbut in the context of web programming.", "start": 6722.81, "duration": 4.486}]