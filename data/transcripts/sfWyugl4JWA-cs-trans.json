[{"text": "hey everyone in this video i'm going to", "start": 0.0, "duration": 3.679}, {"text": "give you an introduction to", "start": 2.159, "duration": 4.24}, {"text": "hash tables and dictionaries first of", "start": 3.679, "duration": 4.801}, {"text": "all let me explain what a dictionary is", "start": 6.399, "duration": 4.081}, {"text": "and then i'm going to explain how it can", "start": 8.48, "duration": 4.8}, {"text": "be implemented using a hash table", "start": 10.48, "duration": 6.0}, {"text": "so here's an example of a dictionary as", "start": 13.28, "duration": 4.48}, {"text": "you might guess this is", "start": 16.48, "duration": 4.16}, {"text": "essentially a table that shows different", "start": 17.76, "duration": 4.4}, {"text": "people's age", "start": 20.64, "duration": 3.6}, {"text": "and you can ask this table or this", "start": 22.16, "duration": 3.68}, {"text": "dictionary how old is", "start": 24.24, "duration": 3.68}, {"text": "paul for example then you get the number", "start": 25.84, "duration": 3.439}, {"text": "29 right away", "start": 27.92, "duration": 4.24}, {"text": "or you can ask it how old is chloe and", "start": 29.279, "duration": 5.201}, {"text": "you get 88", "start": 32.16, "duration": 5.52}, {"text": "and that operation can be called search", "start": 34.48, "duration": 5.919}, {"text": "because you're looking for a specific", "start": 37.68, "duration": 3.199}, {"text": "key", "start": 40.399, "duration": 3.68}, {"text": "for example paul to find the", "start": 40.879, "duration": 4.241}, {"text": "corresponding", "start": 44.079, "duration": 4.401}, {"text": "value uh in that case 29", "start": 45.12, "duration": 5.759}, {"text": "and these pairs are often called key", "start": 48.48, "duration": 3.84}, {"text": "value pairs by the way", "start": 50.879, "duration": 3.601}, {"text": "so a dictionary is basically a", "start": 52.32, "duration": 4.399}, {"text": "collection of these key value pairs", "start": 54.48, "duration": 4.32}, {"text": "or a data structure that can store these", "start": 56.719, "duration": 3.36}, {"text": "key value pairs", "start": 58.8, "duration": 3.439}, {"text": "so that you can retrieve the value of", "start": 60.079, "duration": 3.841}, {"text": "any of those keys quickly", "start": 62.239, "duration": 4.161}, {"text": "and in additionally you can define a few", "start": 63.92, "duration": 4.48}, {"text": "more operations", "start": 66.4, "duration": 5.6}, {"text": "one is insert and that would be adding a", "start": 68.4, "duration": 5.28}, {"text": "new entry to this", "start": 72.0, "duration": 6.08}, {"text": "table by saying bob is eight for example", "start": 73.68, "duration": 7.6}, {"text": "another one is delete", "start": 78.08, "duration": 5.12}, {"text": "and that would be dealing an existing", "start": 81.28, "duration": 4.24}, {"text": "entry for example you might say well i", "start": 83.2, "duration": 2.8}, {"text": "don't want", "start": 85.52, "duration": 4.0}, {"text": "this data about chloe anymore", "start": 86.0, "duration": 5.6}, {"text": "when you implement a dictionary you", "start": 89.52, "duration": 3.599}, {"text": "should be able to implement it", "start": 91.6, "duration": 5.199}, {"text": "ideally so that all of these operations", "start": 93.119, "duration": 6.881}, {"text": "take only one in time on average", "start": 96.799, "duration": 5.441}, {"text": "and a hash table is a good way to do", "start": 100.0, "duration": 3.04}, {"text": "that", "start": 102.24, "duration": 3.12}, {"text": "to build a hash table the first thing", "start": 103.04, "duration": 3.439}, {"text": "you'll need is", "start": 105.36, "duration": 5.039}, {"text": "an array so here i have an array of", "start": 106.479, "duration": 6.96}, {"text": "eight elements just as an example", "start": 110.399, "duration": 5.201}, {"text": "and let's say that we want to use the", "start": 113.439, "duration": 3.04}, {"text": "array or the", "start": 115.6, "duration": 2.879}, {"text": "hash table to represent the dictionary", "start": 116.479, "duration": 4.24}, {"text": "that we saw earlier this one", "start": 118.479, "duration": 5.121}, {"text": "to do that we're going to put each key", "start": 120.719, "duration": 4.161}, {"text": "value pair", "start": 123.6, "duration": 4.879}, {"text": "in one of these slots but to do that", "start": 124.88, "duration": 6.56}, {"text": "we need a way to decide which key value", "start": 128.479, "duration": 3.601}, {"text": "pair", "start": 131.44, "duration": 2.56}, {"text": "is going to go into which slot of this", "start": 132.08, "duration": 3.36}, {"text": "array", "start": 134.0, "duration": 4.56}, {"text": "one way to do that would be to look at", "start": 135.44, "duration": 4.08}, {"text": "the first", "start": 138.56, "duration": 4.399}, {"text": "letter the first character of each key", "start": 139.52, "duration": 6.799}, {"text": "and compare it to the letter a", "start": 142.959, "duration": 6.481}, {"text": "and compute how many characters away it", "start": 146.319, "duration": 3.761}, {"text": "is", "start": 149.44, "duration": 3.12}, {"text": "from the letter a so for example for", "start": 150.08, "duration": 3.36}, {"text": "this key", "start": 152.56, "duration": 4.319}, {"text": "paul you can look at the first letter p", "start": 153.44, "duration": 5.92}, {"text": "convert it to the lowercase p and", "start": 156.879, "duration": 3.841}, {"text": "compare it to", "start": 159.36, "duration": 4.56}, {"text": "the lowercase a and in ascii code", "start": 160.72, "duration": 5.519}, {"text": "you'll be able to see that p is 15", "start": 163.92, "duration": 3.44}, {"text": "characters away", "start": 166.239, "duration": 4.72}, {"text": "from a but 15 wouldn't be an index of", "start": 167.36, "duration": 5.2}, {"text": "this array because that would be out of", "start": 170.959, "duration": 2.481}, {"text": "range", "start": 172.56, "duration": 3.679}, {"text": "so you would need to use for example the", "start": 173.44, "duration": 4.719}, {"text": "model operator", "start": 176.239, "duration": 5.041}, {"text": "mod 8 mod of the length of the array", "start": 178.159, "duration": 6.321}, {"text": "to get the desired range that would be 0", "start": 181.28, "duration": 3.52}, {"text": "to", "start": 184.48, "duration": 3.36}, {"text": "7 inclusive and with that method you", "start": 184.8, "duration": 4.24}, {"text": "would get", "start": 187.84, "duration": 5.039}, {"text": "7. so at that point you can put", "start": 189.04, "duration": 7.199}, {"text": "this key value pair paul 29 over here", "start": 192.879, "duration": 6.321}, {"text": "at index 7. and just like that we can", "start": 196.239, "duration": 4.161}, {"text": "decide", "start": 199.2, "duration": 3.44}, {"text": "which index of the array we want to use", "start": 200.4, "duration": 3.119}, {"text": "for each", "start": 202.64, "duration": 3.92}, {"text": "key value pair so jane", "start": 203.519, "duration": 5.921}, {"text": "would be over here at index one chloe", "start": 206.56, "duration": 4.319}, {"text": "would be over here", "start": 209.44, "duration": 4.56}, {"text": "and alex would be", "start": 210.879, "duration": 5.761}, {"text": "over here and actually what i showed you", "start": 214.0, "duration": 3.44}, {"text": "here", "start": 216.64, "duration": 4.319}, {"text": "is already a hash table so basically to", "start": 217.44, "duration": 5.28}, {"text": "construct a hash table", "start": 220.959, "duration": 4.241}, {"text": "you need an array and the dictionary you", "start": 222.72, "duration": 3.519}, {"text": "want to represent", "start": 225.2, "duration": 3.44}, {"text": "and a way to decide which index of the", "start": 226.239, "duration": 3.441}, {"text": "array you want to use", "start": 228.64, "duration": 4.08}, {"text": "for each key value pair another way to", "start": 229.68, "duration": 4.16}, {"text": "describe the same thing", "start": 232.72, "duration": 4.079}, {"text": "would be to say we need a function that", "start": 233.84, "duration": 3.599}, {"text": "turns", "start": 236.799, "duration": 2.8}, {"text": "each of these keys whether they're", "start": 237.439, "duration": 4.16}, {"text": "strings or anything else", "start": 239.599, "duration": 5.041}, {"text": "into an index of this array", "start": 241.599, "duration": 6.161}, {"text": "that we constructed and we could call", "start": 244.64, "duration": 4.0}, {"text": "that function", "start": 247.76, "duration": 3.6}, {"text": "for example h1 and with the method that", "start": 248.64, "duration": 3.76}, {"text": "i just showed you", "start": 251.36, "duration": 4.96}, {"text": "h1 of paw would be 7. and this function", "start": 252.4, "duration": 5.92}, {"text": "is usually called a hash function and", "start": 256.32, "duration": 3.68}, {"text": "that's why this whole thing is called a", "start": 258.32, "duration": 2.879}, {"text": "hash table", "start": 260.0, "duration": 3.52}, {"text": "but this particular hash function that i", "start": 261.199, "duration": 3.601}, {"text": "just showed you", "start": 263.52, "duration": 4.0}, {"text": "might not be ideal for a few reasons one", "start": 264.8, "duration": 3.2}, {"text": "of them", "start": 267.52, "duration": 4.239}, {"text": "is this if you consider english names", "start": 268.0, "duration": 5.84}, {"text": "there might be a lot of names that start", "start": 271.759, "duration": 4.081}, {"text": "with j", "start": 273.84, "duration": 5.2}, {"text": "and if you put for example josh", "start": 275.84, "duration": 5.6}, {"text": "in this dictionary or this hash table it", "start": 279.04, "duration": 3.2}, {"text": "would try to", "start": 281.44, "duration": 3.6}, {"text": "go into the same bucket as jane and the", "start": 282.24, "duration": 4.0}, {"text": "same thing with", "start": 285.04, "duration": 4.24}, {"text": "jennifer and that would be called a", "start": 286.24, "duration": 4.0}, {"text": "collision", "start": 289.28, "duration": 3.44}, {"text": "when multiple keys would try to go into", "start": 290.24, "duration": 3.04}, {"text": "the same", "start": 292.72, "duration": 4.24}, {"text": "spot of this array and there is a way to", "start": 293.28, "duration": 5.44}, {"text": "deal with collisions and we're going to", "start": 296.96, "duration": 2.799}, {"text": "talk about those", "start": 298.72, "duration": 3.039}, {"text": "but for now you should know that we want", "start": 299.759, "duration": 3.041}, {"text": "to avoid", "start": 301.759, "duration": 3.681}, {"text": "collisions as much as possible to keep", "start": 302.8, "duration": 3.2}, {"text": "your", "start": 305.44, "duration": 3.84}, {"text": "hash table efficient and so one way to", "start": 306.0, "duration": 5.039}, {"text": "deal with a problem like that would be", "start": 309.28, "duration": 3.12}, {"text": "to consider", "start": 311.039, "duration": 3.281}, {"text": "most of the letters or many of the", "start": 312.4, "duration": 3.519}, {"text": "letters in the given key", "start": 314.32, "duration": 4.64}, {"text": "if not all of the letters and one such", "start": 315.919, "duration": 4.0}, {"text": "function", "start": 318.96, "duration": 4.4}, {"text": "is called djb2 and i'm going to put a", "start": 319.919, "duration": 5.361}, {"text": "link to some information about that in", "start": 323.36, "duration": 3.279}, {"text": "the description just in case you're", "start": 325.28, "duration": 2.639}, {"text": "curious about it", "start": 326.639, "duration": 3.201}, {"text": "anyway when you're choosing a hash", "start": 327.919, "duration": 3.681}, {"text": "function for your hash table", "start": 329.84, "duration": 3.44}, {"text": "there are a few things that you should", "start": 331.6, "duration": 4.0}, {"text": "consider one is that it should be", "start": 333.28, "duration": 5.04}, {"text": "fast to compute and the other one is", "start": 335.6, "duration": 3.68}, {"text": "that", "start": 338.32, "duration": 3.04}, {"text": "is to try to avoid collisions as much as", "start": 339.28, "duration": 3.199}, {"text": "possible", "start": 341.36, "duration": 3.279}, {"text": "and that's pretty much it when it comes", "start": 342.479, "duration": 3.921}, {"text": "to the criteria", "start": 344.639, "duration": 4.56}, {"text": "in some textbooks they might say your", "start": 346.4, "duration": 4.32}, {"text": "hash functions should be uniformly", "start": 349.199, "duration": 2.241}, {"text": "distributed", "start": 350.72, "duration": 3.28}, {"text": "or random looking or something like that", "start": 351.44, "duration": 3.68}, {"text": "but", "start": 354.0, "duration": 3.84}, {"text": "it's really not necessary for practical", "start": 355.12, "duration": 3.84}, {"text": "purposes", "start": 357.84, "duration": 3.6}, {"text": "and it's not necessarily better than", "start": 358.96, "duration": 4.32}, {"text": "non-uniformly distributed", "start": 361.44, "duration": 4.4}, {"text": "functions so if you're choosing a hash", "start": 363.28, "duration": 4.08}, {"text": "function for your hash table", "start": 365.84, "duration": 3.84}, {"text": "you should really only consider these", "start": 367.36, "duration": 3.839}, {"text": "two criteria", "start": 369.68, "duration": 3.44}, {"text": "and when you're choosing a hash function", "start": 371.199, "duration": 3.761}, {"text": "for security purposes", "start": 373.12, "duration": 3.76}, {"text": "you might have other concerns but here", "start": 374.96, "duration": 4.079}, {"text": "we're only talking about a hash function", "start": 376.88, "duration": 4.08}, {"text": "for a hash table", "start": 379.039, "duration": 5.121}, {"text": "okay let's now talk about how to do with", "start": 380.96, "duration": 5.6}, {"text": "collisions we're going to talk about two", "start": 384.16, "duration": 4.319}, {"text": "families of methods for dealing with", "start": 386.56, "duration": 3.6}, {"text": "collisions in this video", "start": 388.479, "duration": 4.961}, {"text": "and the first one is called chaining", "start": 390.16, "duration": 6.0}, {"text": "with this method instead of storing the", "start": 393.44, "duration": 4.08}, {"text": "key value pairs", "start": 396.16, "duration": 4.96}, {"text": "directly in the array we're going to", "start": 397.52, "duration": 6.72}, {"text": "store them in a linked list and from", "start": 401.12, "duration": 5.44}, {"text": "each element of the array we're going to", "start": 404.24, "duration": 3.92}, {"text": "have a pointer", "start": 406.56, "duration": 4.72}, {"text": "to that linked list and that linked list", "start": 408.16, "duration": 4.159}, {"text": "is going to contain", "start": 411.28, "duration": 2.8}, {"text": "all the key value pairs that were", "start": 412.319, "duration": 4.32}, {"text": "assigned to that particular", "start": 414.08, "duration": 6.0}, {"text": "slot in the array so for example", "start": 416.639, "duration": 5.521}, {"text": "if you have another key value pair that", "start": 420.08, "duration": 3.44}, {"text": "was assigned", "start": 422.16, "duration": 4.4}, {"text": "to this same slot", "start": 423.52, "duration": 5.36}, {"text": "then what we'll need to do is we'll need", "start": 426.56, "duration": 3.28}, {"text": "to", "start": 428.88, "duration": 3.599}, {"text": "put the new key value pair at the", "start": 429.84, "duration": 3.84}, {"text": "beginning", "start": 432.479, "duration": 4.241}, {"text": "or at the top of this linked list", "start": 433.68, "duration": 6.4}, {"text": "just like that and", "start": 436.72, "duration": 6.479}, {"text": "if you have another key value pair that", "start": 440.08, "duration": 4.16}, {"text": "was assigned", "start": 443.199, "duration": 3.28}, {"text": "to an empty slot then we'll need to", "start": 444.24, "duration": 3.44}, {"text": "create a new", "start": 446.479, "duration": 3.12}, {"text": "linked list containing this single", "start": 447.68, "duration": 3.44}, {"text": "element", "start": 449.599, "duration": 5.04}, {"text": "and then have a pointer that points", "start": 451.12, "duration": 6.799}, {"text": "to the new linked list from that slot", "start": 454.639, "duration": 6.321}, {"text": "and with chaining insertion", "start": 457.919, "duration": 6.161}, {"text": "only takes oh one in time or constant", "start": 460.96, "duration": 4.4}, {"text": "amount of time", "start": 464.08, "duration": 4.559}, {"text": "and what about search", "start": 465.36, "duration": 6.08}, {"text": "well to explain that i'll need to first", "start": 468.639, "duration": 5.84}, {"text": "define a few variables", "start": 471.44, "duration": 6.319}, {"text": "and here is the number of elements that", "start": 474.479, "duration": 3.521}, {"text": "we", "start": 477.759, "duration": 3.521}, {"text": "have put in so far in this hash table", "start": 478.0, "duration": 7.28}, {"text": "and m is the length of the array", "start": 481.28, "duration": 6.88}, {"text": "so this alpha which is n over m is going", "start": 485.28, "duration": 4.24}, {"text": "to show how full", "start": 488.16, "duration": 4.4}, {"text": "this hash table is so right now because", "start": 489.52, "duration": 6.56}, {"text": "n is 4 and m is 8 alpha is exactly a", "start": 492.56, "duration": 4.88}, {"text": "half", "start": 496.08, "duration": 4.48}, {"text": "and with this you can show that", "start": 497.44, "duration": 6.4}, {"text": "search only takes o 1 plus alpha", "start": 500.56, "duration": 6.479}, {"text": "in time what this means is that if you", "start": 503.84, "duration": 3.919}, {"text": "keep", "start": 507.039, "duration": 4.16}, {"text": "alpha below a certain number below let's", "start": 507.759, "duration": 5.121}, {"text": "say 1", "start": 511.199, "duration": 3.681}, {"text": "search would only take a constant amount", "start": 512.88, "duration": 3.68}, {"text": "of time and this o", "start": 514.88, "duration": 5.279}, {"text": "1 plus alpha is the average time", "start": 516.56, "duration": 5.919}, {"text": "and here you might say what if i don't", "start": 520.159, "duration": 3.521}, {"text": "want to use this", "start": 522.479, "duration": 3.36}, {"text": "extra data structure outside of this", "start": 523.68, "duration": 3.36}, {"text": "array", "start": 525.839, "duration": 3.921}, {"text": "then the approach you might want to use", "start": 527.04, "duration": 3.44}, {"text": "is called", "start": 529.76, "duration": 2.88}, {"text": "open addressing and there are a few", "start": 530.48, "duration": 4.4}, {"text": "different flavors for it", "start": 532.64, "duration": 4.319}, {"text": "i'm going to explain the simplest one", "start": 534.88, "duration": 3.6}, {"text": "first which is", "start": 536.959, "duration": 4.56}, {"text": "linear probing with linear probing or", "start": 538.48, "duration": 6.08}, {"text": "with open addressing in general we store", "start": 541.519, "duration": 5.361}, {"text": "all the key value pairs within the array", "start": 544.56, "duration": 5.44}, {"text": "itself just like you can see here", "start": 546.88, "duration": 6.0}, {"text": "let's say here that we have another key", "start": 550.0, "duration": 4.8}, {"text": "value pair", "start": 552.88, "duration": 5.12}, {"text": "that collides with this one then with", "start": 554.8, "duration": 4.08}, {"text": "linear probing", "start": 558.0, "duration": 3.6}, {"text": "all we need to do is we'll need to check", "start": 558.88, "duration": 3.6}, {"text": "the element", "start": 561.6, "duration": 3.12}, {"text": "that's directly to the right of the", "start": 562.48, "duration": 3.28}, {"text": "collision", "start": 564.72, "duration": 2.64}, {"text": "and if it's empty we can just put it", "start": 565.76, "duration": 3.12}, {"text": "there", "start": 567.36, "duration": 4.8}, {"text": "and if another element collides with", "start": 568.88, "duration": 6.48}, {"text": "this one again we'll need to check", "start": 572.16, "duration": 6.4}, {"text": "this element and then this element next", "start": 575.36, "duration": 5.44}, {"text": "until we find an empty element and then", "start": 578.56, "duration": 4.0}, {"text": "we can put it in there", "start": 580.8, "duration": 5.44}, {"text": "so just like that if this new q", "start": 582.56, "duration": 6.16}, {"text": "value pair collides with this one we'll", "start": 586.24, "duration": 4.4}, {"text": "need to keep checking the elements", "start": 588.72, "duration": 6.16}, {"text": "to the right until we find an empty one", "start": 590.64, "duration": 6.8}, {"text": "so i would say linear probing is an okay", "start": 594.88, "duration": 3.44}, {"text": "approach", "start": 597.44, "duration": 3.2}, {"text": "but it could be inefficient when you", "start": 598.32, "duration": 3.92}, {"text": "have a lot of elements", "start": 600.64, "duration": 4.24}, {"text": "and that's because these elements are", "start": 602.24, "duration": 3.839}, {"text": "likely to", "start": 604.88, "duration": 2.8}, {"text": "start forming clusters when you have a", "start": 606.079, "duration": 4.961}, {"text": "lot of them so for example you have", "start": 607.68, "duration": 6.32}, {"text": "a cluster of five elements here and when", "start": 611.04, "duration": 4.88}, {"text": "you have a cluster of five elements or", "start": 614.0, "duration": 4.8}, {"text": "maybe a lot more elements it would take", "start": 615.92, "duration": 4.64}, {"text": "you know extra time to go through all of", "start": 618.8, "duration": 2.4}, {"text": "them", "start": 620.56, "duration": 3.68}, {"text": "and to find an empty spot", "start": 621.2, "duration": 6.8}, {"text": "and one way to solve that issue is", "start": 624.24, "duration": 6.48}, {"text": "called double hashing so let me explain", "start": 628.0, "duration": 5.12}, {"text": "how double hashing works", "start": 630.72, "duration": 5.6}, {"text": "let's say that this", "start": 633.12, "duration": 6.64}, {"text": "key value pair happens to collide with", "start": 636.32, "duration": 6.4}, {"text": "this one then what we're going to do is", "start": 639.76, "duration": 4.72}, {"text": "similar to linear probing", "start": 642.72, "duration": 3.28}, {"text": "in a way that we're going to jump ahead", "start": 644.48, "duration": 3.2}, {"text": "and check other elements to see if", "start": 646.0, "duration": 2.959}, {"text": "they're empty", "start": 647.68, "duration": 3.92}, {"text": "but instead of jumping ahead by one", "start": 648.959, "duration": 4.161}, {"text": "element", "start": 651.6, "duration": 4.239}, {"text": "we're going to pick a number here let's", "start": 653.12, "duration": 4.08}, {"text": "say 3", "start": 655.839, "duration": 3.68}, {"text": "to determine how many elements we want", "start": 657.2, "duration": 4.16}, {"text": "to check ahead", "start": 659.519, "duration": 4.32}, {"text": "so if we pick three here we're going to", "start": 661.36, "duration": 3.2}, {"text": "check", "start": 663.839, "duration": 3.761}, {"text": "one two three this element", "start": 664.56, "duration": 5.44}, {"text": "the third element and we're gonna check", "start": 667.6, "duration": 3.679}, {"text": "every third element", "start": 670.0, "duration": 3.68}, {"text": "ahead of that so since this is empty", "start": 671.279, "duration": 4.081}, {"text": "we're going to put it here", "start": 673.68, "duration": 4.96}, {"text": "but if another pair", "start": 675.36, "duration": 5.76}, {"text": "collides with this one and if we happen", "start": 678.64, "duration": 3.759}, {"text": "to pick", "start": 681.12, "duration": 4.48}, {"text": "three again we're gonna check the third", "start": 682.399, "duration": 4.401}, {"text": "element", "start": 685.6, "duration": 2.72}, {"text": "and then we're going to jump ahead by", "start": 686.8, "duration": 3.68}, {"text": "three elements again so that would be", "start": 688.32, "duration": 2.48}, {"text": "one", "start": 690.48, "duration": 3.68}, {"text": "two it would be this almond but since", "start": 690.8, "duration": 5.92}, {"text": "it doesn't exist we're gonna jump back", "start": 694.16, "duration": 3.76}, {"text": "here", "start": 696.72, "duration": 3.44}, {"text": "and the nice thing about double hashing", "start": 697.92, "duration": 4.96}, {"text": "is that every time we have a collision", "start": 700.16, "duration": 4.72}, {"text": "uh depending on the key or depending on", "start": 702.88, "duration": 3.44}, {"text": "the starting point", "start": 704.88, "duration": 3.68}, {"text": "we're going to produce a slightly", "start": 706.32, "duration": 3.36}, {"text": "different", "start": 708.56, "duration": 4.24}, {"text": "sequence every time the sequence of the", "start": 709.68, "duration": 4.719}, {"text": "elements that we're going to check", "start": 712.8, "duration": 4.88}, {"text": "so let's say that this new pair collides", "start": 714.399, "duration": 4.801}, {"text": "with this one", "start": 717.68, "duration": 4.64}, {"text": "we might pick uh one", "start": 719.2, "duration": 5.04}, {"text": "for the number of elements that we're", "start": 722.32, "duration": 3.84}, {"text": "going to drop ahead if we pick one", "start": 724.24, "duration": 4.56}, {"text": "we're going to just go to this element", "start": 726.16, "duration": 4.4}, {"text": "and find that this is", "start": 728.8, "duration": 5.52}, {"text": "empty so we don't necessarily jump", "start": 730.56, "duration": 7.279}, {"text": "from here to here and have another", "start": 734.32, "duration": 5.28}, {"text": "equation", "start": 737.839, "duration": 4.0}, {"text": "and that's why we're less likely to have", "start": 739.6, "duration": 3.28}, {"text": "clusters", "start": 741.839, "duration": 3.201}, {"text": "in double hashing and that's why it can", "start": 742.88, "duration": 4.8}, {"text": "be more efficient than linear probing", "start": 745.04, "duration": 6.32}, {"text": "to summarize this we first", "start": 747.68, "duration": 7.839}, {"text": "pick our initial index for the given key", "start": 751.36, "duration": 7.919}, {"text": "with a hash function h1 with the model", "start": 755.519, "duration": 5.281}, {"text": "operator", "start": 759.279, "duration": 3.441}, {"text": "the length of the array in this", "start": 760.8, "duration": 4.0}, {"text": "particular case 8", "start": 762.72, "duration": 4.32}, {"text": "and then the next index that we're going", "start": 764.8, "duration": 3.839}, {"text": "to check is going to be", "start": 767.04, "duration": 4.799}, {"text": "the original index plus c", "start": 768.639, "duration": 5.281}, {"text": "the number that we're going to pick for", "start": 771.839, "duration": 4.161}, {"text": "the particular key", "start": 773.92, "duration": 5.599}, {"text": "mod 8. and the next one after that is", "start": 776.0, "duration": 4.88}, {"text": "going to be i plus 2c", "start": 779.519, "duration": 4.161}, {"text": "mod 8 and so on and here i think the", "start": 780.88, "duration": 4.32}, {"text": "natural question would be", "start": 783.68, "duration": 4.399}, {"text": "how do we pick this number c well one", "start": 785.2, "duration": 3.6}, {"text": "condition", "start": 788.079, "duration": 4.161}, {"text": "that we need to satisfy is that", "start": 788.8, "duration": 6.24}, {"text": "gcd of c and m or the greatest common", "start": 792.24, "duration": 4.88}, {"text": "divisor or the greatest common factor of", "start": 795.04, "duration": 2.479}, {"text": "c", "start": 797.12, "duration": 3.519}, {"text": "and m should be 1 and m", "start": 797.519, "duration": 5.12}, {"text": "is the length of the array here and", "start": 800.639, "duration": 3.521}, {"text": "that's because by", "start": 802.639, "duration": 3.841}, {"text": "satisfying this condition we can make", "start": 804.16, "duration": 3.359}, {"text": "sure that", "start": 806.48, "duration": 4.24}, {"text": "this sequence of indices", "start": 807.519, "duration": 6.641}, {"text": "will eventually cover the entire array", "start": 810.72, "duration": 6.0}, {"text": "and one convenient way to make sure", "start": 814.16, "duration": 3.76}, {"text": "that's true", "start": 816.72, "duration": 3.76}, {"text": "is to always set m the length of the", "start": 817.92, "duration": 4.56}, {"text": "array to be a prime number", "start": 820.48, "duration": 4.88}, {"text": "and c to be a positive integer and that", "start": 822.48, "duration": 3.2}, {"text": "way", "start": 825.36, "duration": 4.4}, {"text": "gcd of c and m will automatically be 1.", "start": 825.68, "duration": 7.2}, {"text": "okay so how do we pick c uh here's", "start": 829.76, "duration": 6.48}, {"text": "one way of picking it assuming that m is", "start": 832.88, "duration": 4.72}, {"text": "a prime number", "start": 836.24, "duration": 3.36}, {"text": "we're going to use a second hash", "start": 837.6, "duration": 3.599}, {"text": "function which we're going to call", "start": 839.6, "duration": 5.12}, {"text": "h2 and then we're going to put a key", "start": 841.199, "duration": 6.08}, {"text": "into that function and then do some", "start": 844.72, "duration": 3.52}, {"text": "operations here", "start": 847.279, "duration": 2.8}, {"text": "so let me explain what we're doing here", "start": 848.24, "duration": 3.76}, {"text": "here we're applying the", "start": 850.079, "duration": 5.921}, {"text": "mod operation with m minus 1", "start": 852.0, "duration": 7.279}, {"text": "to the result of the hash function", "start": 856.0, "duration": 7.76}, {"text": "and that way the range of", "start": 859.279, "duration": 7.36}, {"text": "the results that we can get from this", "start": 863.76, "duration": 3.68}, {"text": "whole", "start": 866.639, "duration": 4.0}, {"text": "expression is going to be", "start": 867.44, "duration": 6.24}, {"text": "0 to n minus 2", "start": 870.639, "duration": 6.721}, {"text": "inclusive and by adding 1", "start": 873.68, "duration": 5.76}, {"text": "to that result we're going to get the", "start": 877.36, "duration": 3.279}, {"text": "range", "start": 879.44, "duration": 4.72}, {"text": "1 to n minus 1", "start": 880.639, "duration": 6.32}, {"text": "inclusive and that's the range that we", "start": 884.16, "duration": 3.76}, {"text": "want", "start": 886.959, "duration": 3.521}, {"text": "and here the natural question after that", "start": 887.92, "duration": 3.2}, {"text": "is", "start": 890.48, "duration": 4.479}, {"text": "how do we pick h2 for that i ran", "start": 891.12, "duration": 5.76}, {"text": "an experiment and i tried a few", "start": 894.959, "duration": 3.601}, {"text": "different approaches", "start": 896.88, "duration": 5.28}, {"text": "so here's uh the first approach i tried", "start": 898.56, "duration": 6.959}, {"text": "we have h1 the original hash function", "start": 902.16, "duration": 6.96}, {"text": "and to make h2 i simply appended", "start": 905.519, "duration": 5.201}, {"text": "a letter which i picked it could be", "start": 909.12, "duration": 3.12}, {"text": "anything but i picked d", "start": 910.72, "duration": 4.72}, {"text": "here to the key so if the key", "start": 912.24, "duration": 6.32}, {"text": "is jane i just put jane", "start": 915.44, "duration": 6.48}, {"text": "d to h1 and then i used that", "start": 918.56, "duration": 7.44}, {"text": "as h2 and it actually seemed to perform", "start": 921.92, "duration": 8.479}, {"text": "pretty well and by the way the h1 i used", "start": 926.0, "duration": 6.48}, {"text": "for this one is the default hash", "start": 930.399, "duration": 3.12}, {"text": "function", "start": 932.48, "duration": 4.32}, {"text": "of python which seems to be based on dj", "start": 933.519, "duration": 3.841}, {"text": "b2", "start": 936.8, "duration": 2.959}, {"text": "which i mentioned earlier and the second", "start": 937.36, "duration": 3.839}, {"text": "approach i tried", "start": 939.759, "duration": 4.561}, {"text": "is simply this so i used exactly the", "start": 941.199, "duration": 4.0}, {"text": "same", "start": 944.32, "duration": 3.519}, {"text": "hash function as the original one as the", "start": 945.199, "duration": 4.08}, {"text": "second hash function", "start": 947.839, "duration": 4.721}, {"text": "and so much surprisingly it performed as", "start": 949.279, "duration": 3.92}, {"text": "well as", "start": 952.56, "duration": 3.04}, {"text": "the first approach but i would say if", "start": 953.199, "duration": 4.161}, {"text": "you want to try implementing double", "start": 955.6, "duration": 2.4}, {"text": "hashing", "start": 957.36, "duration": 3.44}, {"text": "yourself you should try a few different", "start": 958.0, "duration": 4.079}, {"text": "hash functions", "start": 960.8, "duration": 3.76}, {"text": "because the performance probably depends", "start": 962.079, "duration": 3.44}, {"text": "on your particular", "start": 964.56, "duration": 3.199}, {"text": "environment and the particular kind of", "start": 965.519, "duration": 3.76}, {"text": "input data that you get", "start": 967.759, "duration": 4.241}, {"text": "anyway with double hashing you can show", "start": 969.279, "duration": 3.36}, {"text": "that with", "start": 972.0, "duration": 4.16}, {"text": "a few assumptions that to complete", "start": 972.639, "duration": 5.921}, {"text": "either the search operation or the", "start": 976.16, "duration": 4.239}, {"text": "insertion operation", "start": 978.56, "duration": 5.12}, {"text": "you need to check almost this", "start": 980.399, "duration": 7.041}, {"text": "number of elements on average", "start": 983.68, "duration": 6.88}, {"text": "that's 1 over 1 minus alpha where alpha", "start": 987.44, "duration": 6.8}, {"text": "is n over m so again n is the number of", "start": 990.56, "duration": 5.839}, {"text": "elements that we've put in so far in the", "start": 994.24, "duration": 3.36}, {"text": "hash table and", "start": 996.399, "duration": 4.081}, {"text": "m is the length of the array so just", "start": 997.6, "duration": 3.919}, {"text": "like i said before", "start": 1000.48, "duration": 5.68}, {"text": "alpha shows how full your hash table is", "start": 1001.519, "duration": 8.481}, {"text": "so let's say that alpha is two thirds", "start": 1006.16, "duration": 6.88}, {"text": "then this expression one over one minus", "start": 1010.0, "duration": 3.6}, {"text": "alpha", "start": 1013.04, "duration": 3.599}, {"text": "becomes three so that means that", "start": 1013.6, "duration": 6.0}, {"text": "to complete search or insertion you need", "start": 1016.639, "duration": 3.601}, {"text": "to check", "start": 1019.6, "duration": 4.719}, {"text": "at most three elements on average", "start": 1020.24, "duration": 6.64}, {"text": "so basically if you keep alpha below a", "start": 1024.319, "duration": 3.681}, {"text": "certain number", "start": 1026.88, "duration": 3.28}, {"text": "let's say two thirds again you'll be", "start": 1028.0, "duration": 3.12}, {"text": "able to complete", "start": 1030.16, "duration": 4.0}, {"text": "search or insertion in", "start": 1031.12, "duration": 5.919}, {"text": "constant time so what i would suggest if", "start": 1034.16, "duration": 3.919}, {"text": "you're implementing", "start": 1037.039, "duration": 3.841}, {"text": "double hashing by yourself well at least", "start": 1038.079, "duration": 3.681}, {"text": "one way", "start": 1040.88, "duration": 4.319}, {"text": "to do that would be to pick m to be a", "start": 1041.76, "duration": 4.48}, {"text": "prime number", "start": 1045.199, "duration": 5.521}, {"text": "let's say 7 or 701", "start": 1046.24, "duration": 7.679}, {"text": "and then as soon as alpha becomes uh", "start": 1050.72, "duration": 6.24}, {"text": "greater than two-thirds resize the array", "start": 1053.919, "duration": 5.521}, {"text": "pick a larger prime number than the", "start": 1056.96, "duration": 4.8}, {"text": "original m", "start": 1059.44, "duration": 5.28}, {"text": "and then transfer all the elements to", "start": 1061.76, "duration": 4.56}, {"text": "the new array", "start": 1064.72, "duration": 5.04}, {"text": "and that way resizing the array takes", "start": 1066.32, "duration": 6.239}, {"text": "extra time but at least for search and", "start": 1069.76, "duration": 4.48}, {"text": "insertion", "start": 1072.559, "duration": 3.441}, {"text": "it's only going to take a constant", "start": 1074.24, "duration": 4.16}, {"text": "amount of time as long as alpha", "start": 1076.0, "duration": 6.08}, {"text": "stays low enough okay so that's my", "start": 1078.4, "duration": 5.76}, {"text": "introduction to hash tables and", "start": 1082.08, "duration": 4.08}, {"text": "dictionaries but there are a few things", "start": 1084.16, "duration": 4.0}, {"text": "i wanted to mention before i go", "start": 1086.16, "duration": 3.519}, {"text": "one is that there is a coding interview", "start": 1088.16, "duration": 3.2}, {"text": "problem that i covered a while ago on", "start": 1089.679, "duration": 2.561}, {"text": "this channel", "start": 1091.36, "duration": 2.64}, {"text": "and for that problem you can actually", "start": 1092.24, "duration": 3.36}, {"text": "use one of these concepts to", "start": 1094.0, "duration": 3.919}, {"text": "solve it so i'll put a link to that", "start": 1095.6, "duration": 4.0}, {"text": "video in the description below just in", "start": 1097.919, "duration": 3.441}, {"text": "case you want to watch it", "start": 1099.6, "duration": 3.52}, {"text": "the other one is that i tried", "start": 1101.36, "duration": 3.199}, {"text": "implementing a hash table", "start": 1103.12, "duration": 4.08}, {"text": "in python so i'm going to put a link to", "start": 1104.559, "duration": 4.24}, {"text": "that code in the description below as", "start": 1107.2, "duration": 2.4}, {"text": "well", "start": 1108.799, "duration": 2.641}, {"text": "and from that code you'll be able to see", "start": 1109.6, "duration": 4.0}, {"text": "how i ran the experiment i mentioned", "start": 1111.44, "duration": 3.52}, {"text": "earlier too", "start": 1113.6, "duration": 3.28}, {"text": "anyway thank you as always for watching", "start": 1114.96, "duration": 3.44}, {"text": "my videos and i'll see you guys in the", "start": 1116.88, "duration": 4.24}, {"text": "next one", "start": 1118.4, "duration": 2.72}]