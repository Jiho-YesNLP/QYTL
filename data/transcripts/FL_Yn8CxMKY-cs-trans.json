[{"text": "in today's lecture we will see solved", "start": 0.32, "duration": 3.68}, {"text": "questions part one", "start": 2.56, "duration": 4.319}, {"text": "in ethernet we will start the session by", "start": 4.0, "duration": 5.04}, {"text": "knowing the conversion of hexadecimal to", "start": 6.879, "duration": 3.041}, {"text": "binary", "start": 9.04, "duration": 3.759}, {"text": "the hexadecimal to binary conversion we", "start": 9.92, "duration": 3.2}, {"text": "know", "start": 12.799, "duration": 2.8}, {"text": "one hexadecimal digit is equal to 4", "start": 13.12, "duration": 3.52}, {"text": "binary bits", "start": 15.599, "duration": 3.281}, {"text": "because hexadecimal takes the value", "start": 16.64, "duration": 3.92}, {"text": "between 0 and 9", "start": 18.88, "duration": 5.84}, {"text": "a b c d e and f so there are 16 possible", "start": 20.56, "duration": 6.16}, {"text": "values in hexadecimal digit", "start": 24.72, "duration": 4.959}, {"text": "but binary takes only two values zero", "start": 26.72, "duration": 3.92}, {"text": "and one", "start": 29.679, "duration": 2.88}, {"text": "in order to convert hexadecimal to", "start": 30.64, "duration": 4.4}, {"text": "binary we need to know the decimal", "start": 32.559, "duration": 4.16}, {"text": "equivalent of hexadecimal", "start": 35.04, "duration": 3.76}, {"text": "so the decimal equivalent is placed as a", "start": 36.719, "duration": 3.201}, {"text": "table like this", "start": 38.8, "duration": 3.279}, {"text": "so we have hexadecimal numbers and we", "start": 39.92, "duration": 3.36}, {"text": "have decimal numbers", "start": 42.079, "duration": 3.281}, {"text": "so in decimal if it is 0 and the", "start": 43.28, "duration": 4.32}, {"text": "hexadecimal equivalent is 0 only", "start": 45.36, "duration": 5.12}, {"text": "so from 0 to 9 the decimal equivalent", "start": 47.6, "duration": 5.04}, {"text": "and hexadecimal equivalent are the same", "start": 50.48, "duration": 4.079}, {"text": "for decimal 10 the hexadecimal", "start": 52.64, "duration": 3.36}, {"text": "equivalent is a", "start": 54.559, "duration": 4.401}, {"text": "for 11 the hexadecimal equivalent is b", "start": 56.0, "duration": 3.52}, {"text": "12", "start": 58.96, "duration": 3.759}, {"text": "13 14 and 15 in decimal it's equivalent", "start": 59.52, "duration": 4.16}, {"text": "in hexadecimal", "start": 62.719, "duration": 4.72}, {"text": "r c d e and f respectively", "start": 63.68, "duration": 5.92}, {"text": "let's see the conversion now in order to", "start": 67.439, "duration": 3.281}, {"text": "do the conversion", "start": 69.6, "duration": 4.72}, {"text": "i am giving you a notion called 8 4 to 1", "start": 70.72, "duration": 5.28}, {"text": "to remember this i will give you a", "start": 74.32, "duration": 4.0}, {"text": "shortcut just start with 1", "start": 76.0, "duration": 4.4}, {"text": "multiply this with 2 we will get the", "start": 78.32, "duration": 3.92}, {"text": "next part that is 2", "start": 80.4, "duration": 4.96}, {"text": "1 into 2 is 2 multiply this with 2 we", "start": 82.24, "duration": 4.08}, {"text": "will get 4", "start": 85.36, "duration": 3.6}, {"text": "multiply this with 2 we will get 8 in", "start": 86.32, "duration": 3.439}, {"text": "other words", "start": 88.96, "duration": 2.88}, {"text": "this will be starting from 2 power 0", "start": 89.759, "duration": 4.4}, {"text": "because binaries have only 2 digits", "start": 91.84, "duration": 5.36}, {"text": "so 2 pi 0 is 1 2 pi 1", "start": 94.159, "duration": 6.881}, {"text": "is 2 2 pi 2 is 4 2 part 3 is 8.", "start": 97.2, "duration": 6.879}, {"text": "we will see an example now convert", "start": 101.04, "duration": 6.16}, {"text": "the hexadecimal 5b base 16 to binary we", "start": 104.079, "duration": 4.881}, {"text": "know when the base is 16 it's an", "start": 107.2, "duration": 3.04}, {"text": "hexadecimal number", "start": 108.96, "duration": 3.28}, {"text": "and we are required to convert this into", "start": 110.24, "duration": 3.76}, {"text": "binary so what i am going", "start": 112.24, "duration": 4.32}, {"text": "to do is i am going to take this table", "start": 114.0, "duration": 3.04}, {"text": "because", "start": 116.56, "duration": 2.64}, {"text": "the decimal values equal and hexadecimal", "start": 117.04, "duration": 3.679}, {"text": "is depicted in this table", "start": 119.2, "duration": 4.959}, {"text": "so the answer for 5 b base 16 is", "start": 120.719, "duration": 6.881}, {"text": "0 1 0 0 1 0 1 1 base 2", "start": 124.159, "duration": 5.841}, {"text": "how did we get this so i'll solve this", "start": 127.6, "duration": 4.639}, {"text": "now let's take the first hexadecimal", "start": 130.0, "duration": 3.36}, {"text": "digit 5", "start": 132.239, "duration": 2.72}, {"text": "as i already mentioned in the previous", "start": 133.36, "duration": 3.68}, {"text": "slide that in order to convert", "start": 134.959, "duration": 4.481}, {"text": "we are going to follow the notion 8 4 to", "start": 137.04, "duration": 3.04}, {"text": "1", "start": 139.44, "duration": 3.84}, {"text": "so just place eight four two one now for", "start": 140.08, "duration": 4.879}, {"text": "what digit hexadecimal digit we are", "start": 143.28, "duration": 2.64}, {"text": "going to convert", "start": 144.959, "duration": 3.601}, {"text": "file just go to this table and refer the", "start": 145.92, "duration": 4.72}, {"text": "hexadecimal number five", "start": 148.56, "duration": 4.08}, {"text": "the hexadecimal fives decimal equivalent", "start": 150.64, "duration": 4.239}, {"text": "is five just take this five", "start": 152.64, "duration": 4.959}, {"text": "and how can we get this 5 with the help", "start": 154.879, "duration": 4.0}, {"text": "of 8 4 2 1", "start": 157.599, "duration": 3.521}, {"text": "so we don't need 8 because 5 is a", "start": 158.879, "duration": 3.921}, {"text": "smaller number than 8", "start": 161.12, "duration": 4.64}, {"text": "but we need 4 so i am putting a 1", "start": 162.8, "duration": 3.519}, {"text": "against", "start": 165.76, "duration": 3.6}, {"text": "4 and we need 1 more in order to get 5", "start": 166.319, "duration": 3.841}, {"text": "right so 5", "start": 169.36, "duration": 3.2}, {"text": "is equal to 4 plus 1 so we are putting 1", "start": 170.16, "duration": 3.28}, {"text": "against 4", "start": 172.56, "duration": 3.2}, {"text": "and we are putting 1 against 1 and the", "start": 173.44, "duration": 4.0}, {"text": "other things are 0.", "start": 175.76, "duration": 4.559}, {"text": "so this is this this blue color is 4 5.", "start": 177.44, "duration": 4.96}, {"text": "how to do the conversion for hexadecimal", "start": 180.319, "duration": 2.56}, {"text": "b", "start": 182.4, "duration": 2.72}, {"text": "just go to the table see what is the", "start": 182.879, "duration": 4.64}, {"text": "decimal equivalent for hexadecimal b", "start": 185.12, "duration": 4.32}, {"text": "the hexadecimal b's decimal equivalent", "start": 187.519, "duration": 4.481}, {"text": "is 11. so we are going to take this", "start": 189.44, "duration": 5.28}, {"text": "11 and we are going to create this how", "start": 192.0, "duration": 3.84}, {"text": "can we get 11", "start": 194.72, "duration": 3.84}, {"text": "11 is equal to 8 plus 3 so i am putting", "start": 195.84, "duration": 3.119}, {"text": "1", "start": 198.56, "duration": 3.52}, {"text": "against 8 and we need to put 1 against 3", "start": 198.959, "duration": 5.521}, {"text": "but there is no 3 in the table but 3 can", "start": 202.08, "duration": 4.4}, {"text": "be achieved with the help of 2 and 1", "start": 204.48, "duration": 4.399}, {"text": "so i am putting 1 against 2 and 1", "start": 206.48, "duration": 3.44}, {"text": "against 1", "start": 208.879, "duration": 3.521}, {"text": "and we don't need 4 here so the binary", "start": 209.92, "duration": 3.44}, {"text": "equivalent for b", "start": 212.4, "duration": 4.72}, {"text": "is 1 0 1 1 so the binary equivalent for", "start": 213.36, "duration": 5.04}, {"text": "hexadecimal phi b", "start": 217.12, "duration": 5.039}, {"text": "is 0 1 0 1 1 0 1 1 base 2.", "start": 218.4, "duration": 6.16}, {"text": "i hope you are clear with the examples", "start": 222.159, "duration": 4.481}, {"text": "now we will dive into question number", "start": 224.56, "duration": 3.84}, {"text": "one", "start": 226.64, "duration": 3.84}, {"text": "what is the hexadecimal equivalent of", "start": 228.4, "duration": 4.0}, {"text": "the following ethernet address", "start": 230.48, "duration": 4.24}, {"text": "and we are given with the binary address", "start": 232.4, "duration": 4.399}, {"text": "we know in this example they have given", "start": 234.72, "duration": 4.56}, {"text": "in binary and we are required to convert", "start": 236.799, "duration": 3.841}, {"text": "this binary to its equivalent", "start": 239.28, "duration": 2.319}, {"text": "hexadecimal", "start": 240.64, "duration": 2.959}, {"text": "but in the example we have seen how to", "start": 241.599, "duration": 4.321}, {"text": "convert from hexadecimal to binary", "start": 243.599, "duration": 4.241}, {"text": "but this question involves conversion of", "start": 245.92, "duration": 3.519}, {"text": "binary to hexadecimal", "start": 247.84, "duration": 3.759}, {"text": "the process is very simple let's see how", "start": 249.439, "duration": 3.44}, {"text": "to solve this problem", "start": 251.599, "duration": 3.521}, {"text": "the solution is we know every ethernet", "start": 252.879, "duration": 3.92}, {"text": "address will be of 6 bytes so this is", "start": 255.12, "duration": 4.32}, {"text": "byte 1 by 2 by 3 byte 4 byte 5 and byte", "start": 256.799, "duration": 3.041}, {"text": "6", "start": 259.44, "duration": 2.079}, {"text": "so we are concerned about these six", "start": 259.84, "duration": 3.76}, {"text": "bytes and we need a table for doing this", "start": 261.519, "duration": 2.96}, {"text": "conversion", "start": 263.6, "duration": 3.44}, {"text": "and we are going to follow the same 8421", "start": 264.479, "duration": 5.121}, {"text": "notion and let's take the six bytes and", "start": 267.04, "duration": 3.68}, {"text": "place it like this", "start": 269.6, "duration": 4.24}, {"text": "so this is byte one this is by two this", "start": 270.72, "duration": 4.16}, {"text": "is by three", "start": 273.84, "duration": 2.799}, {"text": "and we have placed all the six bytes", "start": 274.88, "duration": 3.12}, {"text": "just like this", "start": 276.639, "duration": 4.161}, {"text": "after we place this like this now we", "start": 278.0, "duration": 4.16}, {"text": "will focus on the first", "start": 280.8, "duration": 3.92}, {"text": "byte this first byte has two hexadecimal", "start": 282.16, "duration": 4.72}, {"text": "characters or two hexadecimal digits", "start": 284.72, "duration": 2.88}, {"text": "because", "start": 286.88, "duration": 3.84}, {"text": "the first four bits represents digit one", "start": 287.6, "duration": 5.44}, {"text": "the second four bits represent these two", "start": 290.72, "duration": 4.4}, {"text": "and the hexadecimal equivalent for", "start": 293.04, "duration": 5.68}, {"text": "1 0 1 1 0 1 0 is 5a how did we get this", "start": 295.12, "duration": 5.44}, {"text": "we will place this four bits in the", "start": 298.72, "duration": 3.199}, {"text": "eight four two one table", "start": 300.56, "duration": 3.44}, {"text": "now where and all we are getting one", "start": 301.919, "duration": 3.12}, {"text": "against four", "start": 304.0, "duration": 4.08}, {"text": "and against one so four plus one is five", "start": 305.039, "duration": 5.041}, {"text": "so five is the hexadecimal equivalent", "start": 308.08, "duration": 3.119}, {"text": "for 0 1 0", "start": 310.08, "duration": 4.399}, {"text": "1 and we are using that 5 here next we", "start": 311.199, "duration": 4.56}, {"text": "will focus on 1 0", "start": 314.479, "duration": 4.641}, {"text": "1 0 let's place 1 0 1 0 in the 8 4 2 1", "start": 315.759, "duration": 4.241}, {"text": "table", "start": 319.12, "duration": 4.0}, {"text": "when we place 1 0 1 0 we will get", "start": 320.0, "duration": 6.32}, {"text": "this is 8 plus 2 this is 10", "start": 323.12, "duration": 6.24}, {"text": "so 10 means in decimal 10 means its", "start": 326.32, "duration": 4.56}, {"text": "hexadecimal equivalent is", "start": 329.36, "duration": 4.0}, {"text": "a so the hexadecimal equivalent for this", "start": 330.88, "duration": 4.0}, {"text": "binary is 5a", "start": 333.36, "duration": 3.839}, {"text": "let's see the second byte the second", "start": 334.88, "duration": 4.0}, {"text": "bytes hexadecimal equivalent", "start": 337.199, "duration": 4.321}, {"text": "is 1 1 how did we get this the first", "start": 338.88, "duration": 4.72}, {"text": "half is 0 0 0 1 the second half", "start": 341.52, "duration": 4.64}, {"text": "is also 0 0 0 1 we will place it in the", "start": 343.6, "duration": 3.68}, {"text": "8 4 2 1 table", "start": 346.16, "duration": 5.36}, {"text": "0 0 0 1 and here also 0 0 0 1 both are", "start": 347.28, "duration": 4.72}, {"text": "same so", "start": 351.52, "duration": 2.32}, {"text": "we can do it only for one time it's", "start": 352.0, "duration": 4.08}, {"text": "enough so what is the decimal equivalent", "start": 353.84, "duration": 4.88}, {"text": "the decimal equivalent is 1 and once", "start": 356.08, "duration": 3.6}, {"text": "decimal equivalent", "start": 358.72, "duration": 3.599}, {"text": "is equivalent to 1 hexadecimal so we get", "start": 359.68, "duration": 3.359}, {"text": "1 1", "start": 362.319, "duration": 3.041}, {"text": "so use the same approach to complete the", "start": 363.039, "duration": 3.201}, {"text": "remaining things", "start": 365.36, "duration": 3.52}, {"text": "so we will get 5 5 for the third byte", "start": 366.24, "duration": 4.64}, {"text": "one eight for the fourth byte", "start": 368.88, "duration": 4.8}, {"text": "a a for the fifth byte and zero f for", "start": 370.88, "duration": 5.039}, {"text": "the last byte how did we get zero f", "start": 373.68, "duration": 4.32}, {"text": "the first half is all zeros when it is", "start": 375.919, "duration": 3.761}, {"text": "all zero obviously it is 0", "start": 378.0, "duration": 3.919}, {"text": "and the second half is all 1 when it is", "start": 379.68, "duration": 5.2}, {"text": "all 1 it will be 8 plus 4 plus 2 plus 1", "start": 381.919, "duration": 5.84}, {"text": "so it is 15 the 15 is the decimal number", "start": 384.88, "duration": 4.48}, {"text": "its equivalent hexadecimal is", "start": 387.759, "duration": 5.041}, {"text": "f so the answer to question 1 is", "start": 389.36, "duration": 7.04}, {"text": "5 5a115518aa00s", "start": 392.8, "duration": 5.04}, {"text": "i hope now you are clear with the", "start": 396.4, "duration": 3.519}, {"text": "conversion we will move on to question", "start": 397.84, "duration": 3.6}, {"text": "number two", "start": 399.919, "duration": 3.361}, {"text": "define the type of the following", "start": 401.44, "duration": 3.52}, {"text": "destination addresses", "start": 403.28, "duration": 3.759}, {"text": "there are three mac addresses given and", "start": 404.96, "duration": 4.239}, {"text": "we are required to define the type of", "start": 407.039, "duration": 4.0}, {"text": "the following destination address", "start": 409.199, "duration": 3.28}, {"text": "just recollect what are the different", "start": 411.039, "duration": 3.201}, {"text": "destination addresses we have", "start": 412.479, "duration": 4.0}, {"text": "the destination address can be a unicast", "start": 414.24, "duration": 4.239}, {"text": "address or a multicast address or a", "start": 416.479, "duration": 3.201}, {"text": "broadcast address", "start": 418.479, "duration": 3.201}, {"text": "how to know whether the given address is", "start": 419.68, "duration": 4.0}, {"text": "a unicast address or multicast address", "start": 421.68, "duration": 3.359}, {"text": "or broadcast address", "start": 423.68, "duration": 3.6}, {"text": "we will revisit the ethernet address", "start": 425.039, "duration": 4.081}, {"text": "before solving this problem", "start": 427.28, "duration": 4.24}, {"text": "this is the ethernet address and how to", "start": 429.12, "duration": 4.32}, {"text": "know that whether this is a multicast", "start": 431.52, "duration": 3.519}, {"text": "address or a unicast address or a", "start": 433.44, "duration": 3.039}, {"text": "broadcast address", "start": 435.039, "duration": 3.6}, {"text": "just take the first byte of the ethernet", "start": 436.479, "duration": 3.681}, {"text": "address or the mac address", "start": 438.639, "duration": 3.601}, {"text": "when we take the first byte just convert", "start": 440.16, "duration": 3.68}, {"text": "that into binary", "start": 442.24, "duration": 4.079}, {"text": "so we will be obviously getting 8 bits", "start": 443.84, "duration": 5.12}, {"text": "for 0 6 will be getting 8 bits in the", "start": 446.319, "duration": 3.361}, {"text": "binary", "start": 448.96, "duration": 3.359}, {"text": "and this is byte one if the first bytes", "start": 449.68, "duration": 3.04}, {"text": "last", "start": 452.319, "duration": 3.121}, {"text": "bit that is the least significant bit if", "start": 452.72, "duration": 3.759}, {"text": "it is zero", "start": 455.44, "duration": 3.84}, {"text": "then it is unicast and if it is one it", "start": 456.479, "duration": 4.321}, {"text": "is multicast", "start": 459.28, "duration": 4.08}, {"text": "and when all bits in the all bytes are", "start": 460.8, "duration": 3.28}, {"text": "one", "start": 463.36, "duration": 3.44}, {"text": "that is in hexadecimal if all digits are", "start": 464.08, "duration": 3.36}, {"text": "f", "start": 466.8, "duration": 3.28}, {"text": "then it is a broadcast address now we", "start": 467.44, "duration": 4.24}, {"text": "will move on to the question", "start": 470.08, "duration": 4.32}, {"text": "let's solve subdivision a and we will", "start": 471.68, "duration": 5.359}, {"text": "take the first byte the first byte is 4a", "start": 474.4, "duration": 4.799}, {"text": "when we convert that first byte 4a to", "start": 477.039, "duration": 4.88}, {"text": "binary we will get 0 1 0 0", "start": 479.199, "duration": 5.921}, {"text": "1 0 1 0 and the least significant bit in", "start": 481.919, "duration": 4.321}, {"text": "the first byte is", "start": 485.12, "duration": 3.919}, {"text": "0. when the least significant bit of the", "start": 486.24, "duration": 4.399}, {"text": "first byte is 0", "start": 489.039, "duration": 4.401}, {"text": "then it is a unicast address now we will", "start": 490.639, "duration": 3.601}, {"text": "solve b", "start": 493.44, "duration": 2.64}, {"text": "the first byte in the given address is", "start": 494.24, "duration": 4.56}, {"text": "47 so the binary equivalent for the", "start": 496.08, "duration": 4.559}, {"text": "hexadecimal 47 is", "start": 498.8, "duration": 5.04}, {"text": "0 1 0 0 0 triple 1", "start": 500.639, "duration": 5.201}, {"text": "and the last bit that is the least", "start": 503.84, "duration": 4.56}, {"text": "significant bit of the first byte is 1", "start": 505.84, "duration": 5.28}, {"text": "when it is 1 it is a multicast address", "start": 508.4, "duration": 4.559}, {"text": "and finally we will determine the type", "start": 511.12, "duration": 2.24}, {"text": "of", "start": 512.959, "duration": 3.841}, {"text": "c the address that is given in c", "start": 513.36, "duration": 5.76}, {"text": "in binary if all the digits in the mac", "start": 516.8, "duration": 3.679}, {"text": "address are one", "start": 519.12, "duration": 3.52}, {"text": "then it is a broadcast address in other", "start": 520.479, "duration": 3.841}, {"text": "words in hexadecimal", "start": 522.64, "duration": 4.24}, {"text": "if all digits are f then it is a", "start": 524.32, "duration": 3.68}, {"text": "broadcast address", "start": 526.88, "duration": 3.76}, {"text": "all digits are f so it is a broadcast", "start": 528.0, "duration": 3.36}, {"text": "address", "start": 530.64, "duration": 3.44}, {"text": "so just focus on the first byte if the", "start": 531.36, "duration": 4.0}, {"text": "first byte is not", "start": 534.08, "duration": 4.4}, {"text": "sf then take the first byte alone and", "start": 535.36, "duration": 4.32}, {"text": "solve this problem", "start": 538.48, "duration": 3.84}, {"text": "if the first byte is cff then check the", "start": 539.68, "duration": 4.32}, {"text": "remaining bytes also", "start": 542.32, "duration": 3.76}, {"text": "and this is how we can determine the", "start": 544.0, "duration": 3.44}, {"text": "destination address", "start": 546.08, "duration": 3.199}, {"text": "whether it is a unicast address or a", "start": 547.44, "duration": 4.32}, {"text": "multicast address or a broadcast address", "start": 549.279, "duration": 4.081}, {"text": "let's now move on to question number", "start": 551.76, "duration": 3.199}, {"text": "three", "start": 553.36, "duration": 5.039}, {"text": "show how the address 47 colon 20 colon", "start": 554.959, "duration": 6.481}, {"text": "1b colon 2e colon 08 colon ee", "start": 558.399, "duration": 5.281}, {"text": "is sent on the line so there is a", "start": 561.44, "duration": 3.68}, {"text": "destination mac address", "start": 563.68, "duration": 3.36}, {"text": "how this destination mac address is", "start": 565.12, "duration": 4.399}, {"text": "placed on the channel or the line", "start": 567.04, "duration": 4.64}, {"text": "and this is a new type of question so we", "start": 569.519, "duration": 3.76}, {"text": "will see how to solve this kind of", "start": 571.68, "duration": 2.64}, {"text": "question", "start": 573.279, "duration": 3.201}, {"text": "please make a note of this solution the", "start": 574.32, "duration": 3.199}, {"text": "address is sent", "start": 576.48, "duration": 3.039}, {"text": "left to right so where is the left hand", "start": 577.519, "duration": 3.521}, {"text": "side path this is the left hand side", "start": 579.519, "duration": 2.88}, {"text": "part and this is the right hand side", "start": 581.04, "duration": 1.919}, {"text": "part", "start": 582.399, "duration": 3.281}, {"text": "so this address will be sent from left", "start": 582.959, "duration": 4.641}, {"text": "to right that is this byte is going to", "start": 585.68, "duration": 2.719}, {"text": "be sent", "start": 587.6, "duration": 3.2}, {"text": "followed by this byte followed by this", "start": 588.399, "duration": 3.761}, {"text": "this this and this", "start": 590.8, "duration": 3.039}, {"text": "this will be the first byte that is", "start": 592.16, "duration": 4.0}, {"text": "placed on the channel or the line", "start": 593.839, "duration": 4.721}, {"text": "then how it is going to be placed by by", "start": 596.16, "duration": 4.48}, {"text": "byte so this is the first byte it is", "start": 598.56, "duration": 3.04}, {"text": "going to be placed", "start": 600.64, "duration": 4.24}, {"text": "is it just like 47 no for", "start": 601.6, "duration": 6.479}, {"text": "each byte it is sent right to left", "start": 604.88, "duration": 6.88}, {"text": "bit by bit it means this 47 is not sent", "start": 608.079, "duration": 4.721}, {"text": "as 47", "start": 611.76, "duration": 4.4}, {"text": "on the channel but it is placed as 74", "start": 612.8, "duration": 4.159}, {"text": "that is 7", "start": 616.16, "duration": 4.0}, {"text": "4 and after placing it at 7 4 also", "start": 616.959, "duration": 5.681}, {"text": "it should be bit by bit from right to", "start": 620.16, "duration": 3.119}, {"text": "left", "start": 622.64, "duration": 2.48}, {"text": "we will see an example it will be clear", "start": 623.279, "duration": 4.641}, {"text": "for you the answer for this question is", "start": 625.12, "duration": 5.839}, {"text": "this now how did we get this we will", "start": 627.92, "duration": 5.28}, {"text": "just make a partition for every hexa", "start": 630.959, "duration": 3.12}, {"text": "digit", "start": 633.2, "duration": 2.96}, {"text": "and this is what the partition is now", "start": 634.079, "duration": 3.841}, {"text": "when i say this blue color", "start": 636.16, "duration": 4.32}, {"text": "this 4 is not sent as the first this is", "start": 637.92, "duration": 4.4}, {"text": "how the data is going to be sent", "start": 640.48, "duration": 4.0}, {"text": "this is not 4 actually that is this is", "start": 642.32, "duration": 4.32}, {"text": "not this byte this 4", "start": 644.48, "duration": 5.12}, {"text": "means this is this part this 7 means", "start": 646.64, "duration": 4.319}, {"text": "this is this part", "start": 649.6, "duration": 4.08}, {"text": "so as i mentioned this 4 and 7 are not", "start": 650.959, "duration": 4.801}, {"text": "just sent as 4 7 directly", "start": 653.68, "duration": 4.88}, {"text": "so this 4 is placed here and this 7 is", "start": 655.76, "duration": 3.68}, {"text": "placed here", "start": 658.56, "duration": 3.519}, {"text": "and this is right to left but still it's", "start": 659.44, "duration": 4.16}, {"text": "not eight four two one", "start": 662.079, "duration": 3.76}, {"text": "it's one two four eight the reverse so", "start": 663.6, "duration": 4.239}, {"text": "if you want to do it eight four two one", "start": 665.839, "duration": 4.321}, {"text": "do it from the right to left so every", "start": 667.839, "duration": 3.041}, {"text": "bit should be", "start": 670.16, "duration": 2.64}, {"text": "right to left so seven is the extra", "start": 670.88, "duration": 4.16}, {"text": "decimal digit and its binary equivalent", "start": 672.8, "duration": 5.52}, {"text": "is 0 triple 1 4 2", "start": 675.04, "duration": 5.6}, {"text": "1 so this is how we have to place what", "start": 678.32, "duration": 4.4}, {"text": "is the hexadecimal equivalent for 4", "start": 680.64, "duration": 5.12}, {"text": "it is 0 1 0 0 so how we are going to", "start": 682.72, "duration": 4.32}, {"text": "place 0 1 0 0", "start": 685.76, "duration": 4.72}, {"text": "0 1 0 0 like this let's see the second", "start": 687.04, "duration": 4.32}, {"text": "byte", "start": 690.48, "duration": 2.479}, {"text": "the second byte this pink color", "start": 691.36, "duration": 3.599}, {"text": "represents this side and this yellow", "start": 692.959, "duration": 3.681}, {"text": "color represents this side", "start": 694.959, "duration": 4.481}, {"text": "what's the extra digit it's 2. how can", "start": 696.64, "duration": 3.84}, {"text": "we get 2", "start": 699.44, "duration": 4.959}, {"text": "it's 8 4 2 1 so it is 0 0 1 0 so against", "start": 700.48, "duration": 5.28}, {"text": "2 we put a 1", "start": 704.399, "duration": 3.841}, {"text": "and what about for 0 it's all 0's it's", "start": 705.76, "duration": 3.519}, {"text": "not a problem", "start": 708.24, "duration": 2.88}, {"text": "so this is how we are going to solve", "start": 709.279, "duration": 3.441}, {"text": "this problem so just", "start": 711.12, "duration": 3.76}, {"text": "try this by completing all the remaining", "start": 712.72, "duration": 4.64}, {"text": "bytes and the answer for this question", "start": 714.88, "duration": 2.88}, {"text": "is", "start": 717.36, "duration": 3.68}, {"text": "this now let's see the last question", "start": 717.76, "duration": 6.16}, {"text": "question number four the address 4 3", "start": 721.04, "duration": 3.84}, {"text": "colon 7b", "start": 723.92, "duration": 4.56}, {"text": "colon 6c colon de colon 10 colon 0 0", "start": 724.88, "duration": 5.36}, {"text": "has been shown as the destination", "start": 728.48, "duration": 3.68}, {"text": "address in an ethernet frame", "start": 730.24, "duration": 4.159}, {"text": "and the receiver has discarded the frame", "start": 732.16, "duration": 3.04}, {"text": "why", "start": 734.399, "duration": 2.56}, {"text": "this is the destination address which is", "start": 735.2, "duration": 3.199}, {"text": "there on the ethernet frame", "start": 736.959, "duration": 3.12}, {"text": "if you recollect the ethernet frame", "start": 738.399, "duration": 3.44}, {"text": "format after preamble", "start": 740.079, "duration": 4.641}, {"text": "we get sfd after sfd we will get", "start": 741.839, "duration": 4.24}, {"text": "destination mac address", "start": 744.72, "duration": 3.04}, {"text": "after destination mac address we will", "start": 746.079, "duration": 3.121}, {"text": "find the source mac address", "start": 747.76, "duration": 3.519}, {"text": "and what it is given in the frame if we", "start": 749.2, "duration": 4.24}, {"text": "explore in the source address part we", "start": 751.279, "duration": 3.601}, {"text": "are finding this address", "start": 753.44, "duration": 3.28}, {"text": "but the receiver has discarded this", "start": 754.88, "duration": 4.079}, {"text": "frame why quite tricky you know", "start": 756.72, "duration": 3.679}, {"text": "we will see why the receiver has", "start": 758.959, "duration": 3.921}, {"text": "discarded now when we take this mac", "start": 760.399, "duration": 3.041}, {"text": "address", "start": 762.88, "duration": 2.959}, {"text": "when we convert the first byte to binary", "start": 763.44, "duration": 3.199}, {"text": "we will get", "start": 765.839, "duration": 3.921}, {"text": "0 1 0 0 0 0 1 1.", "start": 766.639, "duration": 5.841}, {"text": "now when we see the last bit that is the", "start": 769.76, "duration": 3.199}, {"text": "first", "start": 772.48, "duration": 3.039}, {"text": "bytes least significant bit if it is", "start": 772.959, "duration": 4.481}, {"text": "zero it is a unicast address", "start": 775.519, "duration": 4.56}, {"text": "if it is one it is a multicast address", "start": 777.44, "duration": 4.32}, {"text": "this is the answer", "start": 780.079, "duration": 4.481}, {"text": "when it is one it is a multicast address", "start": 781.76, "duration": 3.28}, {"text": "how can", "start": 784.56, "duration": 2.32}, {"text": "a multicast address be found in the", "start": 785.04, "duration": 3.599}, {"text": "source mac address part", "start": 786.88, "duration": 3.6}, {"text": "this is the reason why the receiver has", "start": 788.639, "duration": 3.281}, {"text": "discarded the frame", "start": 790.48, "duration": 4.0}, {"text": "so the least significant bit is one that", "start": 791.92, "duration": 3.84}, {"text": "is this one", "start": 794.48, "duration": 3.2}, {"text": "this means the pattern defines a", "start": 795.76, "duration": 3.36}, {"text": "multicast address", "start": 797.68, "duration": 3.36}, {"text": "and a multicast address can be a", "start": 799.12, "duration": 3.279}, {"text": "destination address", "start": 801.04, "duration": 4.08}, {"text": "but not a source address because when a", "start": 802.399, "duration": 4.801}, {"text": "source machine creates a packet or a", "start": 805.12, "duration": 2.64}, {"text": "frame", "start": 807.2, "duration": 2.8}, {"text": "it has to put its source mac address in", "start": 807.76, "duration": 3.84}, {"text": "the source mac address field", "start": 810.0, "duration": 3.04}, {"text": "and destination mark address in the", "start": 811.6, "duration": 3.28}, {"text": "destination mac address if the source", "start": 813.04, "duration": 3.76}, {"text": "computer wants to multicast", "start": 814.88, "duration": 3.759}, {"text": "it has to put the multicast address in", "start": 816.8, "duration": 3.92}, {"text": "the destination multicast address only", "start": 818.639, "duration": 4.0}, {"text": "if a frame is having a multicast address", "start": 820.72, "duration": 3.28}, {"text": "in the source address field", "start": 822.639, "duration": 4.081}, {"text": "the receiver has to discard it therefore", "start": 824.0, "duration": 4.399}, {"text": "the receiver knows that there is an", "start": 826.72, "duration": 4.239}, {"text": "error and discards the packet", "start": 828.399, "duration": 4.401}, {"text": "i hope you like the lecture and thank", "start": 830.959, "duration": 12.88}, {"text": "you for watching", "start": 832.8, "duration": 11.039}, {"text": "[Music]", "start": 845.22, "duration": 2.22}, {"text": "you", "start": 845.36, "duration": 2.08}]