[{"text": "hello everyone and welcome back in this", "start": 6.16, "duration": 6.399}, {"text": "session we are going to have an overview", "start": 10.32, "duration": 4.88}, {"text": "of the cache design that means we are", "start": 12.559, "duration": 4.241}, {"text": "going to learn the things that takes", "start": 15.2, "duration": 4.88}, {"text": "place inside the cache step by step so", "start": 16.8, "duration": 5.76}, {"text": "without any further ado let's get to", "start": 20.08, "duration": 4.64}, {"text": "learning now the cache is designed", "start": 22.56, "duration": 4.479}, {"text": "keeping these four things in mind first", "start": 24.72, "duration": 5.12}, {"text": "thing first is block placement which is", "start": 27.039, "duration": 4.4}, {"text": "where to place the main memory block", "start": 29.84, "duration": 4.0}, {"text": "inside the cache that means it helps us", "start": 31.439, "duration": 4.561}, {"text": "find out the way how to place a main", "start": 33.84, "duration": 4.32}, {"text": "memory block inside the cache", "start": 36.0, "duration": 4.0}, {"text": "coming to the next one is block", "start": 38.16, "duration": 4.16}, {"text": "identification which help us resolve the", "start": 40.0, "duration": 4.399}, {"text": "question how to find out the main memory", "start": 42.32, "duration": 4.0}, {"text": "block inside the cache", "start": 44.399, "duration": 4.401}, {"text": "that means we find out whether the main", "start": 46.32, "duration": 4.8}, {"text": "memory block is present inside the cache", "start": 48.8, "duration": 3.36}, {"text": "or not", "start": 51.12, "duration": 3.759}, {"text": "now next up is block replacement that", "start": 52.16, "duration": 5.52}, {"text": "means during a cache image how to choose", "start": 54.879, "duration": 5.2}, {"text": "which entry to replace from the cache", "start": 57.68, "duration": 4.879}, {"text": "that means first we choose a main memory", "start": 60.079, "duration": 5.04}, {"text": "block inside the cache and then replace", "start": 62.559, "duration": 5.041}, {"text": "that with the newly requested block", "start": 65.119, "duration": 4.481}, {"text": "now the last but not the least is write", "start": 67.6, "duration": 4.64}, {"text": "strategy which answers how are the", "start": 69.6, "duration": 5.36}, {"text": "updations propagated that means whenever", "start": 72.24, "duration": 4.48}, {"text": "we make some updations to the cache", "start": 74.96, "duration": 4.24}, {"text": "block how that is propagated to the main", "start": 76.72, "duration": 3.439}, {"text": "memory", "start": 79.2, "duration": 2.559}, {"text": "now so far we have acquired some", "start": 80.159, "duration": 3.6}, {"text": "knowledge regarding block placement and", "start": 81.759, "duration": 4.161}, {"text": "block identification during the study of", "start": 83.759, "duration": 3.601}, {"text": "different caching memory mapping", "start": 85.92, "duration": 4.0}, {"text": "techniques in today's discussion we will", "start": 87.36, "duration": 4.719}, {"text": "first brush up these concepts and", "start": 89.92, "duration": 3.839}, {"text": "thereafter we will talk about block", "start": 92.079, "duration": 4.72}, {"text": "replacement and the right strategies", "start": 93.759, "duration": 5.36}, {"text": "now let's begin with block placement in", "start": 96.799, "duration": 4.401}, {"text": "direct mapping the block placement takes", "start": 99.119, "duration": 3.921}, {"text": "place having the particular main memory", "start": 101.2, "duration": 3.68}, {"text": "block number and the number of lines", "start": 103.04, "duration": 3.52}, {"text": "inside the cache and performing a", "start": 104.88, "duration": 4.4}, {"text": "modulus operation that means if we are", "start": 106.56, "duration": 4.48}, {"text": "to find out where the content of the", "start": 109.28, "duration": 3.92}, {"text": "main memory block number 15 is going to", "start": 111.04, "duration": 4.48}, {"text": "be placed inside the cache all we need", "start": 113.2, "duration": 5.199}, {"text": "is to perform 15 mod 4 that is the", "start": 115.52, "duration": 5.04}, {"text": "number of lines inside the cache which", "start": 118.399, "duration": 4.161}, {"text": "will give us the line number 3.", "start": 120.56, "duration": 3.839}, {"text": "therefore the contents of the main", "start": 122.56, "duration": 3.68}, {"text": "memory block number 15 that is word", "start": 124.399, "duration": 5.441}, {"text": "number 60 61 62 and 63 will be placed", "start": 126.24, "duration": 6.079}, {"text": "inside the line number three", "start": 129.84, "duration": 4.56}, {"text": "now in case of set associative mapping", "start": 132.319, "duration": 3.92}, {"text": "the block placement takes place taking", "start": 134.4, "duration": 3.68}, {"text": "the particular main memory block number", "start": 136.239, "duration": 3.921}, {"text": "and the number of sets inside the cache", "start": 138.08, "duration": 4.08}, {"text": "and performing a modulus operation which", "start": 140.16, "duration": 3.6}, {"text": "gives us the set number where that", "start": 142.16, "duration": 3.28}, {"text": "particular main memory block will be", "start": 143.76, "duration": 4.479}, {"text": "mapped onto for an instance if we are to", "start": 145.44, "duration": 4.72}, {"text": "find out where the contents of the main", "start": 148.239, "duration": 4.08}, {"text": "memory block number six will be placed", "start": 150.16, "duration": 4.159}, {"text": "inside this two-way set associative", "start": 152.319, "duration": 4.64}, {"text": "cache with two different sets all we", "start": 154.319, "duration": 6.0}, {"text": "need to do is perform 6 mod 2", "start": 156.959, "duration": 4.961}, {"text": "because that is the number of sets", "start": 160.319, "duration": 4.241}, {"text": "inside the cache which will give us the", "start": 161.92, "duration": 5.76}, {"text": "set number that is 0 where the contents", "start": 164.56, "duration": 5.12}, {"text": "of the main memory block number six can", "start": 167.68, "duration": 4.72}, {"text": "be mapped onto now if the set number", "start": 169.68, "duration": 6.16}, {"text": "zero is empty previously in that case", "start": 172.4, "duration": 5.919}, {"text": "for the main memory block number six we", "start": 175.84, "duration": 4.88}, {"text": "have two different mapping options that", "start": 178.319, "duration": 4.881}, {"text": "is the line number zero and the line", "start": 180.72, "duration": 4.0}, {"text": "number 1.", "start": 183.2, "duration": 3.84}, {"text": "now in associative mapping or fully", "start": 184.72, "duration": 5.519}, {"text": "associative mapping suppose the cache is", "start": 187.04, "duration": 4.08}, {"text": "empty", "start": 190.239, "duration": 3.36}, {"text": "now in this scenario if we are to find", "start": 191.12, "duration": 3.92}, {"text": "out where the contents of the main", "start": 193.599, "duration": 3.601}, {"text": "memory block number 3 will be placed", "start": 195.04, "duration": 3.68}, {"text": "inside the cache", "start": 197.2, "duration": 3.36}, {"text": "in that case we don't really have any", "start": 198.72, "duration": 4.56}, {"text": "restrictions it can be placed onto any", "start": 200.56, "duration": 5.28}, {"text": "of the cache lines therefore in", "start": 203.28, "duration": 5.44}, {"text": "associative mapping we can place a main", "start": 205.84, "duration": 5.92}, {"text": "memory block anywhere inside the cache", "start": 208.72, "duration": 5.28}, {"text": "and that's how block placement is done", "start": 211.76, "duration": 4.64}, {"text": "in terms of associative mapping now", "start": 214.0, "duration": 4.64}, {"text": "let's talk about block identification", "start": 216.4, "duration": 4.559}, {"text": "here we actually try to identify whether", "start": 218.64, "duration": 4.64}, {"text": "the main memory block is present or not", "start": 220.959, "duration": 4.481}, {"text": "inside the cache coming to direct", "start": 223.28, "duration": 3.12}, {"text": "mapping", "start": 225.44, "duration": 2.96}, {"text": "we know the physical address in that", "start": 226.4, "duration": 4.64}, {"text": "case is divided into tag fills line", "start": 228.4, "duration": 5.36}, {"text": "index and block or line offset now at", "start": 231.04, "duration": 5.36}, {"text": "first using the line index and the block", "start": 233.76, "duration": 4.8}, {"text": "or line offset we try to find out the", "start": 236.4, "duration": 5.039}, {"text": "potential match inside the cache now", "start": 238.56, "duration": 5.28}, {"text": "once that is found out we take the tags", "start": 241.439, "duration": 4.641}, {"text": "associated with that line and compare", "start": 243.84, "duration": 4.479}, {"text": "them with the tags provided inside the", "start": 246.08, "duration": 4.64}, {"text": "physical address and that's how block", "start": 248.319, "duration": 4.721}, {"text": "identification is done in case of direct", "start": 250.72, "duration": 5.04}, {"text": "mapping now in set associative mapping", "start": 253.04, "duration": 4.879}, {"text": "we know the physical address is split as", "start": 255.76, "duration": 5.12}, {"text": "tag filled set index and block or line", "start": 257.919, "duration": 5.84}, {"text": "offset so first we try to find out the", "start": 260.88, "duration": 5.44}, {"text": "particular set using the set number and", "start": 263.759, "duration": 5.201}, {"text": "once that is found out we take the tag", "start": 266.32, "duration": 4.879}, {"text": "bit provided inside the physical address", "start": 268.96, "duration": 4.4}, {"text": "and compare that with all the tags", "start": 271.199, "duration": 4.321}, {"text": "associated with all the lines belonging", "start": 273.36, "duration": 5.52}, {"text": "to that particular set parallelly", "start": 275.52, "duration": 5.36}, {"text": "and that's how block identification is", "start": 278.88, "duration": 4.879}, {"text": "done in terms of set associative mapping", "start": 280.88, "duration": 5.12}, {"text": "now in associative mapping we know the", "start": 283.759, "duration": 4.801}, {"text": "physical address is split as tag bits", "start": 286.0, "duration": 5.199}, {"text": "and block or line offset so for block", "start": 288.56, "duration": 4.72}, {"text": "identification we take the tag bits", "start": 291.199, "duration": 4.321}, {"text": "provided inside the physical address and", "start": 293.28, "duration": 4.08}, {"text": "compare that with all the tags", "start": 295.52, "duration": 3.76}, {"text": "associated to every line inside the", "start": 297.36, "duration": 5.119}, {"text": "cache that too simultaneously", "start": 299.28, "duration": 5.44}, {"text": "and that's how block identification is", "start": 302.479, "duration": 5.041}, {"text": "done in terms of associative mapping now", "start": 304.72, "duration": 4.88}, {"text": "this much we have already known while", "start": 307.52, "duration": 3.679}, {"text": "studying about different mapping", "start": 309.6, "duration": 2.72}, {"text": "techniques", "start": 311.199, "duration": 3.44}, {"text": "so let's talk about the next phase that", "start": 312.32, "duration": 4.48}, {"text": "is block replacement", "start": 314.639, "duration": 5.12}, {"text": "now the cache is limited in size that", "start": 316.8, "duration": 5.839}, {"text": "means we don't have the luxury of size", "start": 319.759, "duration": 5.44}, {"text": "when it comes to cache so during block", "start": 322.639, "duration": 4.56}, {"text": "replacement the question we should be", "start": 325.199, "duration": 5.121}, {"text": "asking is what should be done a", "start": 327.199, "duration": 5.361}, {"text": "when the cache is full which is also", "start": 330.32, "duration": 5.439}, {"text": "known as capacity miss that means we are", "start": 332.56, "duration": 6.079}, {"text": "asking for a new block however the cache", "start": 335.759, "duration": 5.601}, {"text": "is full at that point that kind of mess", "start": 338.639, "duration": 4.801}, {"text": "is known as capacity image now the", "start": 341.36, "duration": 4.16}, {"text": "second question is what should be done", "start": 343.44, "duration": 4.16}, {"text": "when the potential match can't be found", "start": 345.52, "duration": 4.239}, {"text": "inside the cache now it can happen in", "start": 347.6, "duration": 4.48}, {"text": "two scenarios the first one is called", "start": 349.759, "duration": 5.121}, {"text": "compulsory miss that means the main", "start": 352.08, "duration": 4.559}, {"text": "memory block that we are looking for", "start": 354.88, "duration": 4.08}, {"text": "inside the cache has not been accessed", "start": 356.639, "duration": 4.56}, {"text": "yet therefore we can't really do", "start": 358.96, "duration": 4.799}, {"text": "anything about it so it's a compulsory", "start": 361.199, "duration": 5.041}, {"text": "image and the second one is conflict", "start": 363.759, "duration": 5.28}, {"text": "miss that means the main memory block", "start": 366.24, "duration": 5.36}, {"text": "inside the cache where it should be has", "start": 369.039, "duration": 4.801}, {"text": "already been occupied by some other main", "start": 371.6, "duration": 5.52}, {"text": "memory block now for these two cases we", "start": 373.84, "duration": 6.479}, {"text": "can do block replacement that means", "start": 377.12, "duration": 5.68}, {"text": "replace a block residing the cache with", "start": 380.319, "duration": 5.121}, {"text": "the newly requested block and move the", "start": 382.8, "duration": 4.8}, {"text": "replace block into the next level of the", "start": 385.44, "duration": 4.64}, {"text": "memory hierarchy suppose when a new", "start": 387.6, "duration": 4.24}, {"text": "block has been requested by the", "start": 390.08, "duration": 4.88}, {"text": "processor it happens to be a miss inside", "start": 391.84, "duration": 4.479}, {"text": "the nth level", "start": 394.96, "duration": 4.0}, {"text": "in that case we need to replace a block", "start": 396.319, "duration": 5.44}, {"text": "inside nth level and place that block", "start": 398.96, "duration": 5.84}, {"text": "into n plus one level and make space for", "start": 401.759, "duration": 5.041}, {"text": "the newly requested block which should", "start": 404.8, "duration": 4.16}, {"text": "be brought into the nth level from the n", "start": 406.8, "duration": 3.519}, {"text": "plus one level", "start": 408.96, "duration": 3.84}, {"text": "let's have a more realistic illustration", "start": 410.319, "duration": 4.961}, {"text": "suppose the processor is asking for a", "start": 412.8, "duration": 4.56}, {"text": "new block and it's a mess inside the", "start": 415.28, "duration": 4.4}, {"text": "cache now it can happen either in case", "start": 417.36, "duration": 4.88}, {"text": "of capacity miss that is the cache is", "start": 419.68, "duration": 5.04}, {"text": "already full or it can happen in case of", "start": 422.24, "duration": 5.28}, {"text": "conflict miss that means the block where", "start": 424.72, "duration": 5.12}, {"text": "it's supposed to be inside the cache has", "start": 427.52, "duration": 5.04}, {"text": "been occupied by some other block now in", "start": 429.84, "duration": 5.04}, {"text": "any of these cases one cache block from", "start": 432.56, "duration": 4.56}, {"text": "the cache will be selected and will be", "start": 434.88, "duration": 3.84}, {"text": "moved to the next level of the memory", "start": 437.12, "duration": 4.4}, {"text": "hierarchy that is the main memory making", "start": 438.72, "duration": 4.96}, {"text": "space for the newly requested block", "start": 441.52, "duration": 4.48}, {"text": "which then will be brought from the next", "start": 443.68, "duration": 4.799}, {"text": "level of the memory to the caching and", "start": 446.0, "duration": 5.36}, {"text": "that's how block replacement takes place", "start": 448.479, "duration": 5.201}, {"text": "now for block replacement there is a", "start": 451.36, "duration": 4.72}, {"text": "question that should be answered which", "start": 453.68, "duration": 4.72}, {"text": "is which block to replace", "start": 456.08, "duration": 4.399}, {"text": "that means which cache block will be", "start": 458.4, "duration": 4.16}, {"text": "selected for eviction so that it can", "start": 460.479, "duration": 4.72}, {"text": "make space for the newly requested block", "start": 462.56, "duration": 4.72}, {"text": "now in order to answer this question we", "start": 465.199, "duration": 3.68}, {"text": "have different cache replacement", "start": 467.28, "duration": 4.319}, {"text": "policies the first one is random", "start": 468.879, "duration": 4.72}, {"text": "replacement where we replace any of the", "start": 471.599, "duration": 5.121}, {"text": "cache block at random next up is first", "start": 473.599, "duration": 6.0}, {"text": "in first out that means the cache blocks", "start": 476.72, "duration": 5.599}, {"text": "are evicted in their arrival order that", "start": 479.599, "duration": 4.72}, {"text": "means whichever block came into the", "start": 482.319, "duration": 3.841}, {"text": "cache first will be selected for", "start": 484.319, "duration": 2.88}, {"text": "eviction", "start": 486.16, "duration": 4.0}, {"text": "also we have the last in first out where", "start": 487.199, "duration": 4.72}, {"text": "the block which got placed inside the", "start": 490.16, "duration": 4.08}, {"text": "cache for the last time will be evicted", "start": 491.919, "duration": 3.361}, {"text": "first", "start": 494.24, "duration": 3.519}, {"text": "also we have the recency-based policies", "start": 495.28, "duration": 4.96}, {"text": "where we keep track of the access orders", "start": 497.759, "duration": 3.921}, {"text": "of the blocks", "start": 500.24, "duration": 3.679}, {"text": "next up we have the frequency based", "start": 501.68, "duration": 5.199}, {"text": "policies in these we keep track of the", "start": 503.919, "duration": 4.72}, {"text": "number of times a block has been", "start": 506.879, "duration": 4.081}, {"text": "referred to and finally we have the", "start": 508.639, "duration": 4.64}, {"text": "optimal replacement policy which is also", "start": 510.96, "duration": 4.879}, {"text": "known as bill addy's optimal algorithm", "start": 513.279, "duration": 4.32}, {"text": "now we will discuss about all these", "start": 515.839, "duration": 4.401}, {"text": "cache replacement policies in details in", "start": 517.599, "duration": 5.44}, {"text": "our upcoming sessions for now let's talk", "start": 520.24, "duration": 5.36}, {"text": "about the next phase that is the right", "start": 523.039, "duration": 5.201}, {"text": "strategy so at first the question should", "start": 525.6, "duration": 5.04}, {"text": "be asked when it is needed", "start": 528.24, "duration": 4.64}, {"text": "and the answer to that is whenever the", "start": 530.64, "duration": 4.96}, {"text": "processor needs to modify a data world", "start": 532.88, "duration": 4.8}, {"text": "and there are two situations where the", "start": 535.6, "duration": 4.64}, {"text": "right strategy is needed the first one", "start": 537.68, "duration": 5.44}, {"text": "is called write hit that means the data", "start": 540.24, "duration": 4.96}, {"text": "word which is to be modified is already", "start": 543.12, "duration": 4.56}, {"text": "present inside the caching in such kind", "start": 545.2, "duration": 4.639}, {"text": "of situation we have two different", "start": 547.68, "duration": 4.8}, {"text": "strategies the first one is called write", "start": 549.839, "duration": 5.281}, {"text": "through that means both the cache and", "start": 552.48, "duration": 4.16}, {"text": "the main memory are updated", "start": 555.12, "duration": 3.12}, {"text": "simultaneously", "start": 556.64, "duration": 3.44}, {"text": "let's understand this with the help of", "start": 558.24, "duration": 3.2}, {"text": "an illustration", "start": 560.08, "duration": 3.759}, {"text": "suppose this is the organization and", "start": 561.44, "duration": 4.079}, {"text": "these are the words inside the main", "start": 563.839, "duration": 4.0}, {"text": "memory now since it's a right hit", "start": 565.519, "duration": 4.721}, {"text": "situation suppose the contents of the", "start": 567.839, "duration": 4.881}, {"text": "main memory block number one are already", "start": 570.24, "duration": 4.24}, {"text": "present inside the cache", "start": 572.72, "duration": 4.08}, {"text": "suppose the processor needs to modify", "start": 574.48, "duration": 4.32}, {"text": "this particular data world", "start": 576.8, "duration": 3.44}, {"text": "now according to the write through", "start": 578.8, "duration": 3.52}, {"text": "strategy when the modification will be", "start": 580.24, "duration": 4.48}, {"text": "made it will be propagated to the main", "start": 582.32, "duration": 5.199}, {"text": "memory as well updating the main memory", "start": 584.72, "duration": 3.84}, {"text": "block", "start": 587.519, "duration": 3.521}, {"text": "now this strategy is used during lesser", "start": 588.56, "duration": 5.44}, {"text": "write operations now why so because", "start": 591.04, "duration": 5.12}, {"text": "cache is embedded into the processors", "start": 594.0, "duration": 4.959}, {"text": "themselves therefore accessing the cache", "start": 596.16, "duration": 5.2}, {"text": "requires way less time than accessing", "start": 598.959, "duration": 3.761}, {"text": "the main memory", "start": 601.36, "duration": 3.44}, {"text": "now since in case of write through both", "start": 602.72, "duration": 3.679}, {"text": "the cache and the main memory are", "start": 604.8, "duration": 3.599}, {"text": "updated simultaneously therefore", "start": 606.399, "duration": 4.161}, {"text": "whenever there is a need for write as", "start": 608.399, "duration": 4.081}, {"text": "the modification should be propagated to", "start": 610.56, "duration": 4.24}, {"text": "the next level as well therefore for", "start": 612.48, "duration": 4.64}, {"text": "each write operation the time required", "start": 614.8, "duration": 4.719}, {"text": "will be longer so this is the entire", "start": 617.12, "duration": 5.44}, {"text": "concept of write through strategy now", "start": 619.519, "duration": 4.961}, {"text": "right through strategy comes with its", "start": 622.56, "duration": 4.32}, {"text": "own pros and cons talking about the", "start": 624.48, "duration": 5.359}, {"text": "advantages it's actually reliable and", "start": 626.88, "duration": 5.68}, {"text": "helps in data recovery that means if the", "start": 629.839, "duration": 5.12}, {"text": "cache fails at a certain point of time", "start": 632.56, "duration": 4.32}, {"text": "since the updations are propagated to", "start": 634.959, "duration": 4.641}, {"text": "the main memory simultaneously we won't", "start": 636.88, "duration": 5.84}, {"text": "lose any data however the data rights", "start": 639.6, "duration": 6.239}, {"text": "are delayed because for every updation", "start": 642.72, "duration": 4.96}, {"text": "we actually need to access both the", "start": 645.839, "duration": 4.881}, {"text": "cache and the main memory now the next", "start": 647.68, "duration": 5.52}, {"text": "right strategy under right hit situation", "start": 650.72, "duration": 5.679}, {"text": "is known as right back or right deferred", "start": 653.2, "duration": 6.639}, {"text": "now why so because only the cache is", "start": 656.399, "duration": 6.321}, {"text": "updated in real time so if the processor", "start": 659.839, "duration": 4.721}, {"text": "wants to update this particular data", "start": 662.72, "duration": 4.48}, {"text": "world inside the cache it will update it", "start": 664.56, "duration": 4.64}, {"text": "and the updation will be reflected using", "start": 667.2, "duration": 4.16}, {"text": "a bit called dirty bit and when the", "start": 669.2, "duration": 4.24}, {"text": "updation is met the dirty bit will be", "start": 671.36, "duration": 4.64}, {"text": "set to 1. now the information regarding", "start": 673.44, "duration": 4.56}, {"text": "the dirty bit will be kept inside the", "start": 676.0, "duration": 4.48}, {"text": "tag directory for each tag directory", "start": 678.0, "duration": 5.44}, {"text": "entry along with its tag information and", "start": 680.48, "duration": 5.2}, {"text": "the updation will be propagated to the", "start": 683.44, "duration": 4.32}, {"text": "main memory whenever the replacement", "start": 685.68, "duration": 3.279}, {"text": "takes place", "start": 687.76, "duration": 3.28}, {"text": "that means whenever the processor asks", "start": 688.959, "duration": 4.161}, {"text": "for a new block which will be placed", "start": 691.04, "duration": 4.799}, {"text": "inside the cache in the same line the", "start": 693.12, "duration": 4.88}, {"text": "contents of the line will be evicted", "start": 695.839, "duration": 3.921}, {"text": "from the cache and if for that", "start": 698.0, "duration": 4.0}, {"text": "particular line the dirty bit is set to", "start": 699.76, "duration": 4.88}, {"text": "1 the updation will be propagated to the", "start": 702.0, "duration": 5.12}, {"text": "main memory and afterwards", "start": 704.64, "duration": 4.8}, {"text": "the newly requested block will be placed", "start": 707.12, "duration": 4.719}, {"text": "inside the cache and that's the entire", "start": 709.44, "duration": 5.6}, {"text": "concept of write back or write deferred", "start": 711.839, "duration": 5.281}, {"text": "now let's talk about the pros and cons", "start": 715.04, "duration": 4.32}, {"text": "of this strategy as well coming to the", "start": 717.12, "duration": 6.48}, {"text": "advantage it is way faster why because", "start": 719.36, "duration": 6.32}, {"text": "the updation is propagated to the main", "start": 723.6, "duration": 4.96}, {"text": "memory only when replacement takes place", "start": 725.68, "duration": 5.12}, {"text": "so apart from replacement we are not", "start": 728.56, "duration": 4.16}, {"text": "going to access the main memory very", "start": 730.8, "duration": 4.4}, {"text": "often however this makes the data", "start": 732.72, "duration": 4.4}, {"text": "recovery impossible", "start": 735.2, "duration": 4.0}, {"text": "that means at any certain point of time", "start": 737.12, "duration": 4.399}, {"text": "if the cache fails we won't be able to", "start": 739.2, "duration": 5.439}, {"text": "recover the updated data therefore for", "start": 741.519, "duration": 5.041}, {"text": "write it there are two different write", "start": 744.639, "duration": 4.64}, {"text": "strategies one is right through and", "start": 746.56, "duration": 4.8}, {"text": "another one is right back", "start": 749.279, "duration": 3.601}, {"text": "now let's talk about the second", "start": 751.36, "duration": 4.24}, {"text": "situation which is called write miss", "start": 752.88, "duration": 4.72}, {"text": "that means the data the processor needs", "start": 755.6, "duration": 4.16}, {"text": "to modify is actually absent from the", "start": 757.6, "duration": 4.56}, {"text": "cache now for this situation as well", "start": 759.76, "duration": 4.639}, {"text": "there are two different strategies the", "start": 762.16, "duration": 5.28}, {"text": "first one is called right allocate that", "start": 764.399, "duration": 5.281}, {"text": "means since the data is absent from the", "start": 767.44, "duration": 5.199}, {"text": "cache the data is brought into the cache", "start": 769.68, "duration": 3.92}, {"text": "first", "start": 772.639, "duration": 2.561}, {"text": "now suppose the processor needs to", "start": 773.6, "duration": 4.0}, {"text": "modify this particular data word of the", "start": 775.2, "duration": 4.879}, {"text": "main memory block number one now as the", "start": 777.6, "duration": 5.039}, {"text": "name suggests we have to allocate the", "start": 780.079, "duration": 4.961}, {"text": "main memory block inside the cache first", "start": 782.639, "duration": 5.121}, {"text": "and afterwards the updation will be made", "start": 785.04, "duration": 5.44}, {"text": "now write allocate can work equally with", "start": 787.76, "duration": 4.72}, {"text": "write through that means whenever the", "start": 790.48, "duration": 4.4}, {"text": "updation is made it will be propagated", "start": 792.48, "duration": 4.72}, {"text": "to the main memory at the same time as", "start": 794.88, "duration": 4.959}, {"text": "well as right back that means the", "start": 797.2, "duration": 5.12}, {"text": "updation will be propagated when only", "start": 799.839, "duration": 5.12}, {"text": "the cache block is replaced however", "start": 802.32, "duration": 4.56}, {"text": "since right through suffers from delayed", "start": 804.959, "duration": 4.081}, {"text": "data rights that's why right allocate is", "start": 806.88, "duration": 4.88}, {"text": "mostly used with right back so this is", "start": 809.04, "duration": 5.68}, {"text": "the underlying concept of write allocate", "start": 811.76, "duration": 5.12}, {"text": "now coming to the next strategy that is", "start": 814.72, "duration": 5.2}, {"text": "no write allocate where the data is", "start": 816.88, "duration": 5.68}, {"text": "updated directly inside the main memory", "start": 819.92, "duration": 4.64}, {"text": "which essentially means we don't really", "start": 822.56, "duration": 3.6}, {"text": "bother the cache regarding the", "start": 824.56, "duration": 2.8}, {"text": "allocation", "start": 826.16, "duration": 3.76}, {"text": "suppose the processor needs to modify", "start": 827.36, "duration": 4.64}, {"text": "this particular data word of block", "start": 829.92, "duration": 4.719}, {"text": "number one in that case the processor", "start": 832.0, "duration": 4.72}, {"text": "will update that particular data word of", "start": 834.639, "duration": 4.161}, {"text": "that particular block inside the main", "start": 836.72, "duration": 4.799}, {"text": "memory itself and this is the concept of", "start": 838.8, "duration": 5.599}, {"text": "no right allocate isn't it pretty simple", "start": 841.519, "duration": 5.041}, {"text": "so in write mess we also have two", "start": 844.399, "duration": 4.56}, {"text": "different write strategy the first one", "start": 846.56, "duration": 4.88}, {"text": "is write allocate where we first bring", "start": 848.959, "duration": 5.44}, {"text": "the data to be modified inside the cache", "start": 851.44, "duration": 5.12}, {"text": "and afterward we can perform either", "start": 854.399, "duration": 4.56}, {"text": "right through or right back however", "start": 856.56, "duration": 4.639}, {"text": "right back is mostly used and the second", "start": 858.959, "duration": 4.88}, {"text": "strategy is no right allocate where we", "start": 861.199, "duration": 5.121}, {"text": "directly update the data inside the main", "start": 863.839, "duration": 4.0}, {"text": "memory", "start": 866.32, "duration": 3.68}, {"text": "all right everyone that will be all for", "start": 867.839, "duration": 4.321}, {"text": "this session in today's session we", "start": 870.0, "duration": 4.32}, {"text": "learned about various phases keeping", "start": 872.16, "duration": 4.64}, {"text": "which in mind the cache is designed in", "start": 874.32, "duration": 4.8}, {"text": "the upcoming sessions we will learn", "start": 876.8, "duration": 4.08}, {"text": "about different cache replacement", "start": 879.12, "duration": 4.719}, {"text": "policies in details so i hope to see you", "start": 880.88, "duration": 4.959}, {"text": "in the next ones thank you all for", "start": 883.839, "duration": 3.941}, {"text": "watching", "start": 885.839, "duration": 2.121}, {"text": "[Music]", "start": 887.78, "duration": 2.36}, {"text": "[Applause]", "start": 887.96, "duration": 10.36}, {"text": "[Music]", "start": 890.14, "duration": 10.259}, {"text": "you", "start": 898.32, "duration": 2.079}]