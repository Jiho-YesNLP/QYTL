[{"vid": "7lQXYl_L28w", "cid": "UgyYoqnlfZMmVH3hTOp4AaABAg", "comment": "I didnt quite understand the difference between the 2 bisection search cases(complexity wise). Anyone care to explain???", "votes": "0", "replies": "", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "UgwYgqK-uH1vEmzFJ8V4AaABAg", "comment": "def get_power_set(L):   if len(L) == 0: return [[]]    power_set_without_first = get_power_set(L[1:])    first = [L[0]]   power_set_with_first = []   for set_without_first in power_set_without_first:     power_set_with_first.append(set_without_first + first)      return power_set_without_first + power_set_with_first", "votes": "0", "replies": "", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "UgwZQX5LXQwDNMOmDqN4AaABAg", "comment": "23:09 why is it O(logn)? Shouldn't it be O(n), since when we say \"algorithm that works in logn time\" we mean, in logn time with regards to input size - in bits.", "votes": "0", "replies": "", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "UgyxyGOXc0cQYY0TuMB4AaABAg", "comment": "can anybody explain how the time complexity of converting integer to string is logarithmic and not linear", "votes": "0", "replies": "2", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "UgwmOxahu_aXS41K3Ut4AaABAg", "comment": "31:35", "votes": "0", "replies": "", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "Ugx8E8mwaS5yCtN3DD94AaABAg", "comment": "for those who don't quite understand recursion(like me), here are two iterative approaches to the power set problem", "votes": "0", "replies": "3", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "UgxBq5NscmOWQdbEu0F4AaABAg", "comment": "prof. if assumed are not,at that risk....?", "votes": "0", "replies": "", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "UgwzQ8_UDwsCnZgzTKx4AaABAg", "comment": "Welp was breezing through the course up until now, time to study.", "votes": "0", "replies": "", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "Ugxi0n-EyiD_c77w-aN4AaABAg", "comment": "The exponential complexity code did not run the way is was supposed to \ud83d\ude2c", "votes": "0", "replies": "", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "UgwcgJMiBDnUBrLA9Wh4AaABAg", "comment": "Up until now, I was deluding myself thinking I was able to follow the course. Clearly, I am not. Damn :/", "votes": "1", "replies": "", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "Ugy8Pstgx7MqPJmhdc94AaABAg", "comment": "5:30 how?  If it\u2019s linear like k*n+b \u2014O(n) then if input(n) is doubled then it\u2019s 2k*n+b. The worst case is almost doubled. How can get much more larger. 5:51 He said it can be more than doubled", "votes": "1", "replies": "", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "Ugz2JkXkk-z-XafE4al4AaABAg", "comment": "Great lecture. Great proffessor.  Just a note: from context @22:01 the caption should read \"add that to the string I'm *building*\".", "votes": "1", "replies": "", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "Ugz6bEc6_7gQynxzDSZ4AaABAg", "comment": "Thanks a lot for this kind of Open Education. This lecture has helped me clear many important concepts in a profound way.", "votes": "1", "replies": "", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "UgxsPBVfTZB4ey1-bM14AaABAg", "comment": "what is blah try again?", "votes": "0", "replies": "", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "UgzE0YPOoKBXoa-j-Ch4AaABAg", "comment": "def Binary_search(li, e, f, l):     mid = int((f+l)/2)     if li[mid] == e:         print(\"Found\",li[mid] )     elif f == l-1 and li[mid] != e:         print(\"Not Found \")     elif e < li[mid]:         Binary_search(li, e, f,mid)     elif e > li[mid]:         Binary_search(li, e, mid,l)", "votes": "0", "replies": "", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "UgyVcLZC6HYJFt1yYzV4AaABAg", "comment": "Why n/(2**k) = 1 then k = log(n)??? k should be log 2(n)", "votes": "0", "replies": "", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "UgxiNwjMHIgJg9p06v14AaABAg", "comment": "The intToStr() example uses string concatenation, which itself is an O(n) operation, making the function i log(i).", "votes": "0", "replies": "", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "Ugx7ynvLICQWLoIpI-94AaABAg", "comment": "Could you not argue that the intToStr() example is linear with respect to the number of digits in the input number? How do we decide what the input space is when it's ambiguous?", "votes": "1", "replies": "", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "Ugymda5uAHkcj_4hoM14AaABAg", "comment": "Inttostr method  complexisty is O(n)  it deal with lenght of string and reduce it only by 1 everytime not by 10 times so it O(n) and if it how it is it will be log10(n) if we deal with digits as big number to iterate over", "votes": "0", "replies": "", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "Ugzcp9XZqJTDrfnaWRp4AaABAg", "comment": "This is amazing", "votes": "0", "replies": "", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "UgyxyGOXc0cQYY0TuMB4AaABAg.9uanIBlp2AY9xsgLkttyaR", "comment": "Logarithmic in the size of the number, linear in the number of digits.", "votes": "0", "replies": "", "reply": true}, {"vid": "7lQXYl_L28w", "cid": "UgyxyGOXc0cQYY0TuMB4AaABAg.9uanIBlp2AYA12mlmpkTlh", "comment": "its because the input of 999, to achieve a linear complexity, the algorithm must be runs 999 times, but with this algorithm will run just 3(3 digits), so log n.", "votes": "0", "replies": "", "reply": true}, {"vid": "7lQXYl_L28w", "cid": "Ugx8E8mwaS5yCtN3DD94AaABAg.9nTIr95e9979nTIvrzSw0z", "comment": "def power_set(l):     ps = [[]]     for i in range(len(l)):         new = []         for s in ps:             c = s.copy()             c.append(l[i])             new.append(c)         ps.extend(new)     return ps", "votes": "0", "replies": "", "reply": true}, {"vid": "7lQXYl_L28w", "cid": "Ugx8E8mwaS5yCtN3DD94AaABAg.9nTIr95e9979nTIz0zPrG1", "comment": "def power_set(l):     ps = []     count = len(l)     for i in range(2**count):         new = []         bit = bin(i)[2:].zfill(count)         for b, c in zip(bit, x):             if b == '1':                 new.append(c)         ps.append(new)     return ps", "votes": "0", "replies": "", "reply": true}, {"vid": "7lQXYl_L28w", "cid": "Ugx8E8mwaS5yCtN3DD94AaABAg.9nTIr95e9979nTJXgC7an_", "comment": "the bitmask approach is probably not performant but it's the first that came to my mind and it's very clear that it does exponentially grow(2**len(l))", "votes": "0", "replies": "", "reply": true}, {"vid": "7lQXYl_L28w", "cid": "Ugxc2b-Z8dSYgKqk4p94AaABAg", "comment": "23:09 Aren't string immutables? So this means it will reassign the string res = digits[i%10] + res (by creating a new string). Wouldnt that mean creating a new string log(n) times.Hence shouldn't the complexity be (1 + 2 + 3 ....... log(n)) = (1+log(n))*log(n)/2 == O(log(n)*log(n))?", "votes": "3", "replies": "2", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "UgxqCIEYAG2adraZ7V54AaABAg", "comment": "If anyone else had the hardest time in the world comprehending how the exponential complexity function at 37:00 works, here's a crude but comprehendible analogy of how it functions:  Russian_Doll_Function(russian_doll)    if russian_doll == doll0 (the final baby one that can't be opened)       return doll    doll = Russian_Doll_Function(russian_doll - layer)    ##The above code will run till you reach doll0 (to ensure it's a valid variable) and the function will then execute the remaining code starting in the outermost frame of doll0.      dress_up = [ ]     for braid on doll:          dress_up.append(braid extension sticker)     dress_up.append(mustache sticker)     dress_up.append(hat)      return doll + dress_up  As mentioned above, the code will run till doll0 reached/returned, then it will run the code which will instruct doll0 to be dressed up and returned to the doll layer above it (doll1) which will be dressed up and returned to doll2...etc until the whole doll has been reassemled and returned back to the first call of the Russian_Doll_Function.   This example isn't really exponential (if you want, you can say braids are all the same size on each doll and their count increases exponentially as the doll grows in diameter), it just shows more or less how the function runs.", "votes": "2", "replies": "", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "UgyFAgcw1acX-ZZHlod4AaABAg", "comment": "This guy is too math focused for me, his examples are all so theoretical and I\u2019d never remember be apply them to real life.", "votes": "2", "replies": "", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "Ugw8wOEYVXWp_Xweyl54AaABAg", "comment": "the most beautiful thing in the world is free instruction.God bless MIT", "votes": "23", "replies": "", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "UgyKdFubTOmvAiXeuD14AaABAg", "comment": "For the power set, wouldn't it be better to put the last element (\"extra\") in a list of itself before adding it to \"small\"? This way the function will work for all variables that can be indexed (tuple, list, string) instead of working only with lists.  def genSubsets(L):\r     if len(L) == 0:\r         return [[]]\r     else:\r         smaller = genSubsets(L[:-1])\r         extra = [L[len(L)-1]] # put the last elem in its own list\r         new = []\r         for small in smaller:\r             new.append(small + extra)\r         return smaller + new", "votes": "3", "replies": "", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "Ugza4YoGNz5IaoHcF5d4AaABAg", "comment": "Can someone please point out what textbook/resources go along with these lectures?", "votes": "0", "replies": "2", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "UgxCqOZWwnhGRXDlogR4AaABAg", "comment": "\u200b\u200b0:00:00  Review  0:02:00\u200b  0:04:08  0:06:13  0:08:00   0:09:30  Bisection search  0:10:39   \u200b0:12:46  \u200bBisection search implementation 1  0:14:50\u200b  0:16:32   0:17:32  Bisection search implementation 2  0:20:00 \u200b0:21:22  Logarithmic  \u200b0:22:35  0:24:23  \u200b 0:26:00  Polynomial complexity 0:27:46\u200b  Hanoi tower  0:30:00 \u200b0:32:17  Exponential complexity  0:34:00  \u200b0:35:30  \u200b0:38:21\u200b  0:40:44  0:42:00  \u200b 0:44:03  \u200bFibonacci 0:46:06  \u200b0:47:40\u200b", "votes": "4", "replies": "", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "UgwQhki7XrvdridedMJ4AaABAg", "comment": "5:28 You are indeed a generous professor who is not ashamed to say that I was wrong. I respect you sir", "votes": "3", "replies": "", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "Ugzat78rSKQjp_5iShx4AaABAg", "comment": "Why is store in list of order 1? Dont you have to store all n elements so it should be n?", "votes": "2", "replies": "", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "UgxVETmJMAa27hQcH1x4AaABAg", "comment": "How is it implied that the first bisection search function copies the list first?  And why is it o(n) even when length is halved at each search?", "votes": "0", "replies": "", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "UgwbGh3VeWVYRRM5Crh4AaABAg", "comment": "thanks a lot.Very interesting and livefull lections for self education", "votes": "0", "replies": "", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "UgzLJrw67Ps5vCGrVpp4AaABAg", "comment": "5:00 Suddenly reminded of Project Zero Dawn's MINERVA subordinate function that took 50 years to break the robot codes.", "votes": "0", "replies": "", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "UgwWI9SxdmYXeF7paoJ4AaABAg", "comment": "My takeaways: 1. Complexity class 4:05 2. Constant complexity 7:05 3. Logarithmic complexity 7:47 4. Binary search algorithm (linear complexity) 8:05 5. Bisection search algorithm 9:20, implementation 1 (linear complexity) 12:45, implementation 2 (logarithmic complexity) 16:15 6. Characteristic of linear: reduce the problem size by 1 each time, and characteristic of log complexity: reduce the problem size by 1/n (n>1) each time 20:50 7. Iterative loop (linear complexity) 23:20 8. Recursive (linear complexity) 24:16 9. Log-linear complexity 25:30: see next lecture 12. Searching and Sorting https://youtu.be/6LOwPhPDwVc 10. Polynomial complexity, characteristic: commonly occurs when we have nested loops or nested recursive function calls 25:58 11. Exponential complexity, characteristic: recursive functions where more than one recursive calls for each size of problem 26:31 12. Tower of Hanoi algorithm (exponential complexity) 26:53 13. Power set algorithm (exponential complexity) 31:43 14. Summary of complexity class 42:45 15. Fibonacci algorithm 43:55, iterative implementation (linear complexity) 44:01, recursive implementation (exponential complexity) 45:05 16. The complexity of common python functions: list vs dictionaries 47:35", "votes": "67", "replies": "5", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "Ugz_FalsxqGSxy_ronJ4AaABAg", "comment": "This is tight af", "votes": "2", "replies": "2", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "UgyJxGyao0wMpLm_8cF4AaABAg", "comment": "My brain can't handle recursive functions.", "votes": "14", "replies": "2", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "Ugy29UfJmi3Gj13wWKx4AaABAg", "comment": "I think the complexity of finding the dictionary length should be O(1). Why is it O(n)? 48:27", "votes": "1", "replies": "1", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "UgywmA4Ckd6jvQNplix4AaABAg", "comment": "\"a gain\"", "votes": "1", "replies": "", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "UgxD1Rq9ReKBpnYB0I14AaABAg", "comment": "this is genius teaching. Thanks!!!", "votes": "1", "replies": "", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "UgwyUWaN7mmZnhYPyMN4AaABAg", "comment": "At 23:14, i think the code should say \"return res\" instead of \"return result\"", "votes": "3", "replies": "", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "UgzMDa2U8uZ5ZHF4oL54AaABAg", "comment": "Incredilble class, very clear explanation", "votes": "0", "replies": "", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "Ugxc2b-Z8dSYgKqk4p94AaABAg.9MlJuonvnXk9WrOVUC1YKc", "comment": "Yes! I thought I was going mad for a second so it's good to have someone else notice too!", "votes": "0", "replies": "", "reply": true}, {"vid": "7lQXYl_L28w", "cid": "Ugxc2b-Z8dSYgKqk4p94AaABAg.9MlJuonvnXk9apLYO9OPZQ", "comment": "If concatenation complexity is O(n^2) you are right, but if it is O(n), then it's O(log(i))... in this case, I assume it's O(n)", "votes": "0", "replies": "", "reply": true}, {"vid": "7lQXYl_L28w", "cid": "Ugza4YoGNz5IaoHcF5d4AaABAg.9J8-Lnf332i9J97xU4BPT-", "comment": "VIsit the course on MIT OpenCourseWare for all the materials at: https://ocw.mit.edu/6-0001F16. Best wishes on your studies!", "votes": "0", "replies": "", "reply": true}, {"vid": "7lQXYl_L28w", "cid": "Ugza4YoGNz5IaoHcF5d4AaABAg.9J8-Lnf332i9J9AwSG83no", "comment": "\u00a0@mitocw\u00a0 thank you", "votes": "0", "replies": "", "reply": true}, {"vid": "7lQXYl_L28w", "cid": "UgwWI9SxdmYXeF7paoJ4AaABAg.984DVItgFk699TEoFNmx3A", "comment": "\ud83d\udc51 you dropped this", "votes": "7", "replies": "", "reply": true}, {"vid": "7lQXYl_L28w", "cid": "UgwWI9SxdmYXeF7paoJ4AaABAg.984DVItgFk69A3cOCZd7Ul", "comment": "Both analysis videos? Nice. Thank you. \ud83c\udf86\ud83c\udf86", "votes": "2", "replies": "", "reply": true}, {"vid": "7lQXYl_L28w", "cid": "UgwWI9SxdmYXeF7paoJ4AaABAg.984DVItgFk69AD8A0MKjTU", "comment": "Lei Xun Thanks for sharing", "votes": "1", "replies": "", "reply": true}, {"vid": "7lQXYl_L28w", "cid": "UgwWI9SxdmYXeF7paoJ4AaABAg.984DVItgFk69Is87RTA1S8", "comment": "thank you Lei", "votes": "1", "replies": "", "reply": true}, {"vid": "7lQXYl_L28w", "cid": "UgwWI9SxdmYXeF7paoJ4AaABAg.984DVItgFk69IsBd8Qh3vD", "comment": "\u00a0@dvi2948\u00a0 You are welcome", "votes": "1", "replies": "", "reply": true}, {"vid": "7lQXYl_L28w", "cid": "Ugz_FalsxqGSxy_ronJ4AaABAg.96qEFlR6M0G971tWuaHEGR", "comment": "Yo, have you done the psets?", "votes": "0", "replies": "", "reply": true}, {"vid": "7lQXYl_L28w", "cid": "Ugz_FalsxqGSxy_ronJ4AaABAg.96qEFlR6M0G9DjVQ7n5HB1", "comment": "\u00a0@sciencethings5731\u00a0 I have", "votes": "0", "replies": "", "reply": true}, {"vid": "7lQXYl_L28w", "cid": "UgyJxGyao0wMpLm_8cF4AaABAg.909onc7gGuP97RC7yttyhu", "comment": "You can just treat it as for loop Then convert it into recursion version", "votes": "2", "replies": "", "reply": true}, {"vid": "7lQXYl_L28w", "cid": "UgyJxGyao0wMpLm_8cF4AaABAg.909onc7gGuP98ZWE0_7Apy", "comment": "https://www.youtube.com/watch?v=BQxw7fA4n_0&feature=youtu.be", "votes": "1", "replies": "", "reply": true}, {"vid": "7lQXYl_L28w", "cid": "Ugy29UfJmi3Gj13wWKx4AaABAg.8yh-1gj842u94aSJf1AYBr", "comment": "I think he is refering to the fact that in a list you always know what position the elements are in. list[5], you don't care about the other elemnts, go straight to 5, boom. In a dictionary, you have  to look through all the keys, find the key that matches the one you're looking for and then access the element with that key. At least that's how I understood it.", "votes": "1", "replies": "", "reply": true}, {"vid": "7lQXYl_L28w", "cid": "UgxwIa7E7OxMqKgQihV4AaABAg", "comment": "Love these lectures but I'm a little curious why the lecturers wear the same clothes every day.", "votes": "7", "replies": "10", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "UgzGth-vvtl87YhBRPB4AaABAg", "comment": "Thank you MIT", "votes": "1", "replies": "", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "UgzzBQHwc37zhpd0llR4AaABAg", "comment": "A Javascript version of series generation:  arr = [\"1\", \"2\", \"3\", \"4\"]; function get_subset(arr){  if(arr.length == 0)        return [[]];     smaller = get_subset(arr.slice(0,arr.length-1))     nw = []     extra = arr.slice(-1);     for(s in smaller){        nw.push(smaller[s].concat(extra))     }     return smaller.concat(nw); } get_subset(arr);", "votes": "3", "replies": "", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "UgweT67yD5CL_o-hzrx4AaABAg", "comment": "Well Eric, the only way to true nirvana is to become a Born Again Christian. Praise the Lord", "votes": "0", "replies": "", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "UgyVVWIzO2cRw2CsaCl4AaABAg", "comment": "@15:38 it says \"turns out that the total cost to copy is O(n) and this dominates the log(n) cost due to the recursive calls\" I agree that the cost will be O(n) but not with the part that says \"and this dominates the log(n) cost due to recursive calls\". The following is implied: O(log(n)) + O(n) = O(n), but such addition can't be the case. Log(n\u2080) is the amount of recursive calls, which should be used as a multiplicative factor with the amount of steps inside one function call. As was mentioned correctly, the amount of steps in each consecutive function call decreases by factor of 2. Suppose that n\u2080 = 32; then the amount of function calls is s = log\u2082(n\u2080) = log\u2082(32) = 5. The total steps in all function calls combined is  (1 - 1/(2^log\u2082(n\u2080))) * n\u2080 =  (1 - 1/2\u02e2)n\u2080  =  (1/2 + 1/4 + 1/8 + ... + 1/2\u02e2)n\u2080  =  n\u2080/2 + n\u2080/4 + n\u2080/8 + n\u2080/16 + n\u2080/32  =  32/2 + 32/4 + 32/8 + 32/16 + 32/32 = 0.96875n\u2080  =  31  \u2248  n\u2080 (for large n\u2080) --> O(n). I don't see how the addition of log(n) with n is logical in the proof for the code being O(n).", "votes": "1", "replies": "7", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "UgxjKN3IROAYB2N1jxh4AaABAg", "comment": "Is this The Architect from The Matrix?", "votes": "48", "replies": "1", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "UgxGUkwlg-bp7CWc-XJ4AaABAg", "comment": "A person's knowledge of academic material is very well demonstrated by how clearly they can explain it to someone else. By that measure, Dr. Grimson is a master. Thanks to all who made this available to the public.", "votes": "84", "replies": "2", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "UgxwslFfgL2ltpQLIt14AaABAg", "comment": "Great lecture! Thank you.Especially  a code for finding all subsets for  set. I thinks it's much better to learn it from YouTube.Although  i can't ask question personally from a teacher, i can stop the video whenever i want and return it back. Everything that i didn''t understand after couple of rehearings i get it. So it is actually much better than a sitting in the class.", "votes": "4", "replies": "", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "UgxrStZeQ0wHHzA-Zxt4AaABAg", "comment": "this guy does some nice lectures and his so likeable like a happy Santa Claus that brings you awesome knowledge as his gift :D :D been looking for an \"easy way\" to understand complexity without knowing all the mathematics behind the theorems, to do the exact calcs, and this did it very well. ty ^^    38:00 found the extra excitement and \"off-topic\" statements, smiling of small faults etc. what kept my interest throughout the lecture. if it gets to \"dry\" the brain has a hard time keeping constant focus, so the small breaks here and there allows it to stay focused a lot longer on the important stuff ^^", "votes": "5", "replies": "", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "UgyBgTEitYeNxxXU1xB4AaABAg", "comment": "Why is res = [] needed in the power set problem code?  I don't see any reason why it needed to be there.", "votes": "1", "replies": "1", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "UgyOm41e3WNcyzy9r214AaABAg", "comment": "def power(L):     if len(L) == 0:         return [[]]     smaller = power(L[:-1])     for i in range(0,len(smaller)):         smaller.append(smaller[i] + L[-1:])       return smaller print(power([1,2,3,4]))  #smaller :P", "votes": "2", "replies": "", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "UggohGnkww2gN3gCoAEC", "comment": "I don't get the exponential complexity code", "votes": "7", "replies": "", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "UgitKfJwrq1z8XgCoAEC", "comment": "Around 5:30 he says \"... linear is, if you double the size of the input, it's going to double the amount of time it takes. Actually, that's an incorrect statement. Really, what I should have said was, the increment--if I go from, say, 10 to 100, the increase in time is going to be the same as the incremeent if I go from 100 to 1000. Might be more than double depending on what the constant is. But that growth is linear.\"  I don't get the difference... he's saying 10->100 = 10x, 100->1000 = 10x, right? And the earlier version was 1->2 = 2x and 2->4 = 2x. Aren't these the same? What am I missing here?", "votes": "0", "replies": "7", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "Ugg6ZfSmDsmHkngCoAEC", "comment": "2^64 / 60 / 575,600 = 5.3413e10^11 ... so about 534 billion years.  Several times longer than the age of the universe...so yeah...might want to put the kettle on and grab a book.", "votes": "22", "replies": "2", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "UghaiHksMm7J8HgCoAEC", "comment": "thank you ,mit", "votes": "15", "replies": "", "reply": false}, {"vid": "7lQXYl_L28w", "cid": "UgxwIa7E7OxMqKgQihV4AaABAg.8qfR0Kjqs8O8s0bd2QA19j", "comment": "bro I was thinking of the same thing.", "votes": "1", "replies": "", "reply": true}, {"vid": "7lQXYl_L28w", "cid": "UgxwIa7E7OxMqKgQihV4AaABAg.8qfR0Kjqs8O8s0vvadq5Vh", "comment": "\u00a0@muhammadijlal3216\u00a0 i know right? and it's not like they were all taught on the same day. pretty sure it was an actual semester long course at MIT", "votes": "3", "replies": "", "reply": true}, {"vid": "7lQXYl_L28w", "cid": "UgxwIa7E7OxMqKgQihV4AaABAg.8qfR0Kjqs8O8s65h53rmhv", "comment": "John Rhaenys but Ana wears the same thing every day too.", "votes": "1", "replies": "", "reply": true}, {"vid": "7lQXYl_L28w", "cid": "UgxwIa7E7OxMqKgQihV4AaABAg.8qfR0Kjqs8O992n-Ie0fJI", "comment": "it's a mit thing, or a thing in higher education. They don't want waste time thinking about what to wear everyday", "votes": "2", "replies": "", "reply": true}, {"vid": "7lQXYl_L28w", "cid": "UgxwIa7E7OxMqKgQihV4AaABAg.8qfR0Kjqs8O992u3bZXliZ", "comment": "\u00a0@zichaowang8617\u00a0 i'm kinda the same way but this just results in me wearing random different shit every day haha", "votes": "1", "replies": "", "reply": true}, {"vid": "7lQXYl_L28w", "cid": "UgxwIa7E7OxMqKgQihV4AaABAg.8qfR0Kjqs8O9CE8KPWlLNr", "comment": "they set up a const function in their closet to pick their clothes each day", "votes": "3", "replies": "", "reply": true}, {"vid": "7lQXYl_L28w", "cid": "UgxwIa7E7OxMqKgQihV4AaABAg.8qfR0Kjqs8O9CEteXcwsZ5", "comment": "\u00a0@alec9527\u00a0 best answer so far.", "votes": "0", "replies": "", "reply": true}, {"vid": "7lQXYl_L28w", "cid": "UgxwIa7E7OxMqKgQihV4AaABAg.8qfR0Kjqs8O9JeGH_jLy-o", "comment": "MIT doesn't teach fashion design. And by the way: the clothes may look the same, but how do you know they are? Sometimes, if a T-Shirt seemed to fit, I just bought 10 items of it.", "votes": "1", "replies": "", "reply": true}, {"vid": "7lQXYl_L28w", "cid": "UgxwIa7E7OxMqKgQihV4AaABAg.8qfR0Kjqs8O9JeuDx9KJ4J", "comment": "\u00a0@kenmeyer100\u00a0 i actually do this too, i was just surprised to see the same behavior among ALL members of a teaching team. this must mean i'm mit professor level of intelligence. i wish logic worked that way...", "votes": "0", "replies": "", "reply": true}, {"vid": "7lQXYl_L28w", "cid": "UgxwIa7E7OxMqKgQihV4AaABAg.8qfR0Kjqs8O9Jh8cm_6pjR", "comment": "\u00a0@TheMasterfulcreator\u00a0 There's some kind of an initiation rite to become a member of the cult  I guess", "votes": "0", "replies": "", "reply": true}, {"vid": "7lQXYl_L28w", "cid": "UgyVVWIzO2cRw2CsaCl4AaABAg.8kkSfiI4wgu8wjtiYD9-Xj", "comment": "tn=tn/2+n/2+c      =tn/4+n/2+n/4+c+c      =.......      =tn/2Pow(k) + (n/2+n/4+.....n/2Pow(k))+   k*c       note k=log(n)     =1+ n-1+log(n)*c    =n+log(n)*c   ---->O(n)", "votes": "1", "replies": "", "reply": true}, {"vid": "7lQXYl_L28w", "cid": "UgyVVWIzO2cRw2CsaCl4AaABAg.8kkSfiI4wgu8wjupDrvBgE", "comment": "similar @41:00              Tn=Tn-1+Loop steps of(Smaller) +Copy time of (n-1)+c                    =Tn-1+2**n-1+n-1+c                    =Tn-2+2**n-2+n-2+z**n-1+n-1+c+c                  =..................                 =Tn-n+ 2**0+2**1+2**2+.....+2**n-1+   0+1+2+...+n-1 + n*c                 =1+2**(n) +n(n-1)/2  +n*c                 ------>O(2**n)", "votes": "0", "replies": "", "reply": true}, {"vid": "7lQXYl_L28w", "cid": "UgyVVWIzO2cRw2CsaCl4AaABAg.8kkSfiI4wgu8wjvRZJuGlz", "comment": "for the improvement Log(n)  Tn=Tn/2+c    =Tn/2**k  +k*c   note k=log(n)    =1+c*log(n)   ----->O(log(n))", "votes": "0", "replies": "", "reply": true}, {"vid": "7lQXYl_L28w", "cid": "UgyVVWIzO2cRw2CsaCl4AaABAg.8kkSfiI4wgu99LyD5Znj8c", "comment": "I don\u2019t get this part either", "votes": "0", "replies": "", "reply": true}, {"vid": "7lQXYl_L28w", "cid": "UgyVVWIzO2cRw2CsaCl4AaABAg.8kkSfiI4wgu9PYKGveGSR7", "comment": "\u00a0@jhdwhz\u00a0 may I ask what you meant by Tn?", "votes": "0", "replies": "", "reply": true}, {"vid": "7lQXYl_L28w", "cid": "UgyVVWIzO2cRw2CsaCl4AaABAg.8kkSfiI4wgu9PYM65D_Q7X", "comment": "Oh you meant Tn as in total time that it takes to solve problem of size n", "votes": "0", "replies": "", "reply": true}, {"vid": "7lQXYl_L28w", "cid": "UgyVVWIzO2cRw2CsaCl4AaABAg.8kkSfiI4wgu9VWfc81fXfL", "comment": "For each recursion call, the function needs to copy n/2 into 1 list, and n/2 into another list. That copying is O(n) work. i.e., for n=1000, that's 1000 copying steps for 1st recursion, halved with every recursion (500, 250, 125). n=100mil, that's 100mil copying steps for 1st recursion, halved with every recursion (50mil, 25mil, 12.5mil). Yes, it is smaller than n, but still on order of n. Hence  --> O(n.log n)", "votes": "0", "replies": "", "reply": true}, {"vid": "7lQXYl_L28w", "cid": "UgxjKN3IROAYB2N1jxh4AaABAg.8k2C338jHRxA5GcLZ1uc4N", "comment": "\ud83d\ude02\ud83d\ude02\ud83d\ude02\ud83d\ude02", "votes": "0", "replies": "", "reply": true}, {"vid": "7lQXYl_L28w", "cid": "UgxGUkwlg-bp7CWc-XJ4AaABAg.8jSHvWdDwK28vRwdcu6eln", "comment": "What's the best playlist I can find that doesn't skip anything important and goes in depth", "votes": "0", "replies": "", "reply": true}, {"vid": "7lQXYl_L28w", "cid": "UgxGUkwlg-bp7CWc-XJ4AaABAg.8jSHvWdDwK29datJAVTAr5", "comment": "5:30 how?  If it\u2019s linear like k*n+b \u2014O(n) then if input(n) is doubled then it\u2019s 2k*n+b. The worst case is almost doubled. How can get much more larger. 5:51 He said it can be more than doubled", "votes": "0", "replies": "", "reply": true}, {"vid": "7lQXYl_L28w", "cid": "UgyBgTEitYeNxxXU1xB4AaABAg.8ZoZl-gKbCL8bYA-Y77pgy", "comment": "35:52 , 37:29 It was a mistake.", "votes": "0", "replies": "", "reply": true}, {"vid": "7lQXYl_L28w", "cid": "UgitKfJwrq1z8XgCoAEC.8SO86c_wGrK8U9j1eSWrjT", "comment": "I think it's that if you double the size of the input but triple the output, the growth is still linear if that's as true for an increase from 10 to 100 as it is for an increase from 100 to 1000.", "votes": "0", "replies": "", "reply": true}, {"vid": "7lQXYl_L28w", "cid": "UgitKfJwrq1z8XgCoAEC.8SO86c_wGrK8Zo_6pTKbfn", "comment": "Let's say the  time required by a program for input of size n is n+100. If you now go from 10 to 20, for 10, it takes 110 secs. But for 20, it takes 120 secs. For 30, it takes 130 secs. But difference between times for 10 and 20 and between 20 and 30 is same (10). Observe that from 10 to 20, time taken doesn't double. But the difference remains same", "votes": "4", "replies": "", "reply": true}, {"vid": "7lQXYl_L28w", "cid": "UgitKfJwrq1z8XgCoAEC.8SO86c_wGrK8dOA8-BS5cx", "comment": "Great explanation, thanks!", "votes": "0", "replies": "", "reply": true}, {"vid": "7lQXYl_L28w", "cid": "UgitKfJwrq1z8XgCoAEC.8SO86c_wGrK8gNBVaWjF2y", "comment": "Appreciate, you made it so easy to absorb .... *Thumbs up*", "votes": "0", "replies": "", "reply": true}, {"vid": "7lQXYl_L28w", "cid": "UgitKfJwrq1z8XgCoAEC.8SO86c_wGrK8tfJ9K77U01", "comment": "\u00a0@tejeshreddy6252\u00a0 Yes but when talking about orders of growth we are thinking about huge numbers for n. When n is huge, the +100 will have a negligible effect on the doubling of n. So saying the time required doubles when the input doubles is a correct definition for  a linear order of growth (no matter the constant added or subtracted)", "votes": "0", "replies": "", "reply": true}, {"vid": "7lQXYl_L28w", "cid": "UgitKfJwrq1z8XgCoAEC.8SO86c_wGrK8tfL_w-OvmM", "comment": "\u00a0@Nico2000\u00a0 Sure. But if you read the original comment, the question was what the professor meant by his statements. That was what I clarified. As you said, as the inputs get bigger, the difference becomes \"negligible\", but not necessarily 0. Hence, it is not going to be exactly double but approximately. That was the whole point of the quotes in the original comment.", "votes": "0", "replies": "", "reply": true}, {"vid": "7lQXYl_L28w", "cid": "UgitKfJwrq1z8XgCoAEC.8SO86c_wGrK9EeiAGmN2B_", "comment": "Professor Grimes mis-spoke here. As Tejesh Reddy explains very well, the increments in runtime for a program with linear growth are equal if the corresponding increments in input size are equal. However, the numbers that Professor Grimes gave in his example don't reflect this: The increment between 100 and 1000 is 10 times as big as the increment between 10 and 100, so for a program with linear growth, the increment in run-times will be 10 times as big as well. The numbers he gave would be correct for a program with logarithmic growth.", "votes": "2", "replies": "", "reply": true}, {"vid": "7lQXYl_L28w", "cid": "Ugg6ZfSmDsmHkngCoAEC.8Q58sqhA1WH8rOG0N44vWg", "comment": "It is 584.9 billion years. Just did the math in Python.", "votes": "1", "replies": "", "reply": true}, {"vid": "7lQXYl_L28w", "cid": "Ugg6ZfSmDsmHkngCoAEC.8Q58sqhA1WH8rOHWURtHAA", "comment": "2^64 /(60*60*24*365)", "votes": "0", "replies": "", "reply": true}]