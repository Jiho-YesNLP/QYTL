[{"vid": "DuDz6B4cqVc", "cid": "Ugw37VphyOM5SHrWMVt4AaABAg", "comment": "chad and stacey studio lmao", "votes": "2", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgzjaH8v_UjYKFXOmi54AaABAg", "comment": "I am fasting and she showed me that delicious meal whyyyyyyy\ud83d\ude05", "votes": "2", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgyZ6mPZi6FxjZVShUN4AaABAg", "comment": "If your a normal human you need to decrease the video speed", "votes": "3", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugz9YoppS81N3uj29e94AaABAg", "comment": "Brilliant", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugya4n4S7TZ0rKA5Y2h4AaABAg", "comment": "That algorithm that allows this video to be played at half speed....that's a favorite of mine", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgzBldaMd9lXnqF30Wp4AaABAg", "comment": "Boi I sure hope this all makes sense in 3 years when I have to learned this", "votes": "1", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgwC8TD-td7YmHRNFr94AaABAg", "comment": "This is said in c++", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgzQpivifvxrzwIF86h4AaABAg", "comment": "2:45 Aw.  Thanks.", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugwx3A0bxVOe-mllY_94AaABAg", "comment": "fantastic!!!!", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgwLsS7V8zrDsein3vV4AaABAg", "comment": "Great video, easily digestible content", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgxEW1nFYYj7gF7DXRt4AaABAg", "comment": "Amazing videos. Thanks. In fairness, the reason why you think these videos explained better than in your college (or you think your college was useless) because you have understood and have existing background already. Imagine if your knowledge is zero.", "votes": "1", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgwwfkgGah8VD03wdRh4AaABAg", "comment": "Matrices are rectangular/2 dimensions specifically.", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgxDMB_v1dYKMNtQeut4AaABAg", "comment": "when this video teaches you more about what a data structure is than your entire semester Data Structures class....-_-", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgxzGMgPwmbEJJT-q0d4AaABAg", "comment": "0.75x speed will be great Just try!", "votes": "2", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugx5nHlIfwmFwGTbH2d4AaABAg", "comment": "this gives me flash backs to homestuck, and i don't know if i like that XD.", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgzKFa5FHRE1Nzla0b14AaABAg", "comment": "As someone studying computer science, this is a fantastic refresher of all the basic concepts. So clearly explained!", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgyVErZb_F3hr7r2lxx4AaABAg", "comment": "Unreal channel found :) Wow content.", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgykyvrsVCJUleWA5i14AaABAg", "comment": "Pointer is a jumping structure, it can let you jump to another one. Just like open a portal and jump, open a portal and jump, open a portal and jump...", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgwRmkG5CUZe1k0vjq14AaABAg", "comment": "Create complex data structure just really similar as you create a pile of structured files and folders in windowsOS, the pointer similar as shortcut that point to a folder or file in windows, so you can create linked data.", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgwHLXcuC192GbhZVYN4AaABAg", "comment": "Told my friends I know how to access a 5 dimensionnal matrix. They were impressed!", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgxRInGyejIkWWSPdn94AaABAg", "comment": "Java Class Library for Java and Standard Template Library for C++", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugz9oxlmNxnNdRH45sJ4AaABAg", "comment": "when i was wathching this video list in python is a list\u2192list in python is actually a matirx\u2192or a node struct actually\u2192whatever", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugw7U1BFCHzu6qfFGXt4AaABAg", "comment": "percent_value(this_comment_section) people who know programming but are watching this for some reason: 95% people who are actually here to learn: 5%   percent_value(people_watching_this video) people here to learn: 95% people who know programming: 5%   likely_p_error = 1", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgxQyEnfv8wKmnfOadV4AaABAg", "comment": "wtf woman , just breathe at least", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgyXcuXd4YrFfYO1xS54AaABAg", "comment": "7:00 see if you had \u201csmart\u201d nodes, that wouldn\u2019t be so hard would it? Please say yes, my instructor forced it upon us \ud83d\ude2d\ud83d\ude2d", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgyruluNIs52plqQPhl4AaABAg", "comment": "The range that includes range that includes range that includes range... and you can jump to another range then jump to another range then jump to another another range... so you can build any structure as you want.", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugy1hPHCO7u4Mf7LTxt4AaABAg", "comment": "Thank you.", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgwwUDTGO_p1eiLKpjJ4AaABAg", "comment": "I want crashcourse on regex", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgyHinRzufRiZo6xgX54AaABAg", "comment": "4:12 doesn\u2019t it be  account.accountNumber = 12784221  account.balance = 189.14 ?", "votes": "0", "replies": "5", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgyspAMLq3oswqshPB54AaABAg", "comment": "This series is so clearly and helpful.", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgwRkvAlNxcxoDuLlyp4AaABAg", "comment": "\ud83d\udc4d", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugz4RGRvLXQSxe98D2l4AaABAg", "comment": "We love 2-3 Trees :,) fun times", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgyiqY_ecUIEaSCfUj94AaABAg", "comment": "Save a value into a variable? Or save a value with a variable is more accurate in a container?", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgxN9pGkL15u6JvpiK94AaABAg", "comment": "Science are growing up, benefit opportunity are growing up and the same the extinction opportunity are growing at the same time.", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugw3ybhOQLzkENsX0K54AaABAg", "comment": "Speak slowly", "votes": "0", "replies": "1", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugz_ubmGp2S7rZ0RjD54AaABAg", "comment": "Awesome.", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugw6eHswP1ESNg1M6_B4AaABAg", "comment": "You don't want your data to be like John Green's college dorm room, haha. That's pretty messy.", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugy0uGo_tVOArszQAnt4AaABAg", "comment": "Wa jenay sam da okh poskai ye", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgxYPopQsoyjZJK0A1V4AaABAg", "comment": "slow down to 0.75 plz", "votes": "0", "replies": "1", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgwRBvfYnZWJ8KNzQsx4AaABAg", "comment": "Too fast for me", "votes": "0", "replies": "1", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgyHinRzufRiZo6xgX54AaABAg.96cbMONGS3T97f3uuLgZa5", "comment": "Peterolen thank you so much for your replying and helping, the video hadn\u2019t Shawn assign struct account to j cause this, such as: let j = account() sentence. And my understanding the data is a address, design the data structure is design address structure, just like you creation and management of your folders and files in your computer. It makes me wanna make new comment. Creat a new stuff in type we call it instance unlike data stuct creation, you can creat function in a type but data struct only focus on more base data. Roughly you can understand type creation as data struct creation or more directly the address structure creation. And not only for type but everything non flow controlling such as variable creation just like: \u201cvar a = 3.65\u201d is creat data \u201ca\u201d and it indicate to a changeable address \u201c3.65\u201d, \u201ca = b\u201d assign the address that belongs to b before, now to a, this also just like copy the file that belongs to folder b before, now going to folder a.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgyHinRzufRiZo6xgX54AaABAg.96cbMONGS3T97h-GWBe-uT", "comment": "Peterolen thank you for your replying, we cannot data is just information, information builds on top of true variable correlation, to define a information we must not only need data and also need relation plus the inspecting to prediction of these related data, these 3 components together combine the define of information, data is just a piece of information. But maybe you wanted to say data is flow just like information, yes it flow in data structure net work, and Yes data structure is organization of data, Address is a location in memory, but memory not represent RAM only, data structure is also memory, memory has sub address, data structure has sub data, so the data in data structure is address, it saved location, data structure is the memory of relations between address and address, so data structure is address structure, is organization of address. So the data is flow that flows in data structure or say data flows in address structure. Sorry for my rough explain. Do you get my point?", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgyHinRzufRiZo6xgX54AaABAg.96cbMONGS3T97mPXBdHEh0", "comment": "Peterolen no I was not saying all sub data stored as pointer, because I was not saying how to save data in my second replying to you even though mine starts at how to save data. I was saying Data is address that be stored by memory, regardless how to save data it doesn\u2019t change Data is address and thanks for your replying about more details about how to save data or say how to save address. My second replying wants to express Data structure is the organization of data, is the organization of data where to store and how to store, Data structure is data how storage, data flow control is data how processing. Data is from memory only, also you can see reality as memory so you can gather data from reality if Data can become signal to flow in processor to turn on and turn off specific unit in processor logically, or it says data can be read by processor if data became signal. And data also makes processor yield some output behavior that changing data in memory, or it says data can be written by processor. Regardless What Memory stored is to store address, data is address, so data structure is the organization of address, the organization of witch address to store witch address, you put a data to a address is you put address to a address, see data structure as how to save data as how to save address,  read data is read address, change data is change address, data is address, data structure is address structure.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgyHinRzufRiZo6xgX54AaABAg.96cbMONGS3T97nIFGlMYNu", "comment": "Peterolen I needn\u2019t keep saying that if that understanding gets so many wrong prediction. If data has more or different attributes than address had, I admit my understanding wrong, if not then we can say data and address is synonyms. Right? and Thank you for you have having patient to me.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgyHinRzufRiZo6xgX54AaABAg.96cbMONGS3T98_pTen2c2j", "comment": "Peterolen I don\u2019t keep say that now, I found data has more attributes than address, address can be a data, but data is not address.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugw3ybhOQLzkENsX0K54AaABAg.95rFH1hAxvv96GPqySYyz2", "comment": "Playback the video at 0.75 X or 0.5 X speed.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgxYPopQsoyjZJK0A1V4AaABAg.92b7BWXOkRJ96GPvCy_iJm", "comment": "Click on the gear wheel to playback at slower speeds.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgwRBvfYnZWJ8KNzQsx4AaABAg.923dhDtiMY296GPzz7_hoe", "comment": "Click on the gear wheel to playback at slower speeds.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgzZMHHdO1FMd50Uoxl4AaABAg", "comment": "how can i like this video more than once", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgxRpA9UAl_7ncFAEEh4AaABAg", "comment": "Uh", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgyEbVVNeHzKIG3zJel4AaABAg", "comment": "I love you Carrie Anne.", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgzGdWQnZADtjop8j9x4AaABAg", "comment": "This video is great", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgzHGTiI0kNqrHqH1y54AaABAg", "comment": "Great video good for those who have studied already these concepts in detail", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugxf8ojvm6XBnArJuwp4AaABAg", "comment": "carrie anne make things fun to learn :)", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugy-M6HNUsPMx1-Dbr14AaABAg", "comment": "I feel like Stan is the Evan Goldberg of Crash Course", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgywBPMyodbkA1c7G6p4AaABAg", "comment": "Thanks a lot!\ud83d\ude03  Excellently Explained...", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgwiCDQz8gOVq0TI0yt4AaABAg", "comment": "thanks for mentioning string cat. Super useful", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugz5686WkncWh5fkTyB4AaABAg", "comment": "Well you do need to know things about LING LISTS if you want to program", "votes": "1", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgyR4yGSbehTKN2XsUR4AaABAg", "comment": "What are the uses of linked lists?Can anyone explain(briefly) with an example?", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgzDp1uILO-SCtwaVL54AaABAg", "comment": "What is a struct?? I'm not getting things clearly after 4:05", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgwX78QnAoVyIki4__l4AaABAg", "comment": "Wooow , 3 months of computer science in 10 min", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgwSQgLmtu-_XynyPV14AaABAg", "comment": "or just read homestuck act 1", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgyfLzaarF9nlfb081l4AaABAg", "comment": "data structures in Java and C++ already there..so no worriers Also there are trees ,linked list,array,index,struct.", "votes": "1", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgxrMytqVMonANSVPYh4AaABAg", "comment": "2:40 - Used a set of brackets to show a function call - print[j] - oops :)", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgzQztTZyK0iPb7jBm14AaABAg", "comment": "i just love this woman, thank you so much", "votes": "3", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgxA8hYi3w6EO-jTyEl4AaABAg", "comment": "She looks like girl version of Austin powers", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgwW_QuGTokTwCsaswl4AaABAg", "comment": "Note that in some languages, strings are not null-terminated, but rather they start with how many characters the string contains. There's pros and cons to each approach.   (Also, the C++ standard library is called the Standard Library. The standard template library used to be a non-standard library that has since been added to the standard.)", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgyD_KYX0lD6kfIN_Ox4AaABAg", "comment": "The diversity in languages and hardware keeps programming simple but allows complexity.", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgztplDMSfCiYx47Yg14AaABAg", "comment": "I'm gonna put watching this video on my resume", "votes": "1", "replies": "1", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugw4G11bEUAmcBrYv1x4AaABAg", "comment": "Umm WHERME SANDWICH  woman", "votes": "1", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgzaLBPu63jjcVAPdqt4AaABAg", "comment": "No offense to Indian people, but it is so refreshing to have tutorials on CS that don't have incomprehendable accents", "votes": "4", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugypgyof2gWR1I3wBPR4AaABAg", "comment": "why 82 became 84??  From 0:53 on 1:19??? Just cause of that I could not understand anything!! :((", "votes": "0", "replies": "1", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgzV9PdHQw0fbHIY1GN4AaABAg", "comment": "Print('help me')", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugx-jvD2JUdzwDLYiWF4AaABAg", "comment": "You should put what you say as a lyric too", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgzoFYNsQHl5X0cgSdR4AaABAg", "comment": "where is the abstraction clip????", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgyaaFe2nTeWZzJYNAl4AaABAg", "comment": "You basically covered last semester programing course in a 10 min video, I am impressed. But it might be too much information for people who are seeing the topic for the first time.", "votes": "14", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugy-qNs_jA6fC7YKlTV4AaABAg", "comment": "too fast...", "votes": "2", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgzpYYsO26CIOev_Znp4AaABAg", "comment": "0:59  \"Almost all programming languages start at index zero\"  Me: slowly turns and glares at Matlab", "votes": "427", "replies": "6", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugyj11zm3FBv-yq-LLh4AaABAg", "comment": "Very basic but still awesome! Thanks", "votes": "1", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgzeW8hr2GhUIFPA7FV4AaABAg", "comment": "love the geeky GoT examples!", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgxP_biq9dtTM7oTbYF4AaABAg", "comment": "I told my friends that I now know how to access a 5 dimension matrix. They are no longer my friends.", "votes": "390", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgwFLbs7cjJANMVJF-l4AaABAg", "comment": "Why cannot you go directly from Riverrun to Winterfell?", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgyWmnL7aHE3-rTKL694AaABAg", "comment": "\"I\u00b4ll leave that to your fan fiction\".", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgypXs_pqTzF2MPXZM94AaABAg", "comment": "Ada yang punya substitlenya?", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgzwUZbFK-DBHtvYmX54AaABAg", "comment": "just fuckoffffff", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgziDmeIUxXVPN0ikup4AaABAg", "comment": "I love how the oscilloscope is different each time", "votes": "7", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugy9l3fZiWGff7-UkYl4AaABAg", "comment": "Man i didn't knew Information Technology would be this hard. : (", "votes": "3", "replies": "2", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgzXcXncwCPtm_khdS94AaABAg", "comment": "This is A LOT to take in.. i have the feeling most comments are from people who know most of this... i learned this stuff hands on through programming.. i wonder how valuable these videos are to newcomers?", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgztplDMSfCiYx47Yg14AaABAg.8vQUuGcRx0c8y2ZtdR3TrW", "comment": "Lol", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugypgyof2gWR1I3wBPR4AaABAg.8uQNHGXWrDw96GRKCOHLaw", "comment": "You just discovered a continuity error.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgzpYYsO26CIOev_Znp4AaABAg.8tEJoZxnQVa91BLTzGbX3Q", "comment": "MaTLaB Is NoT a ReAl ProGrAmMiNg LanGuAge", "votes": "58", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgzpYYsO26CIOev_Znp4AaABAg.8tEJoZxnQVa97E4sGid_S7", "comment": "Pascal does this as well", "votes": "1", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgzpYYsO26CIOev_Znp4AaABAg.8tEJoZxnQVa97P68OUzjYU", "comment": "shouts at LUA", "votes": "10", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgzpYYsO26CIOev_Znp4AaABAg.8tEJoZxnQVa981fq2T-DXc", "comment": "@Thomas Samoht you are right, my bad.", "votes": "1", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgzpYYsO26CIOev_Znp4AaABAg.8tEJoZxnQVa98ehjVDaGQ_", "comment": "LUA starts at 1 for some reason", "votes": "1", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgzpYYsO26CIOev_Znp4AaABAg.8tEJoZxnQVa9A1O7LApzdl", "comment": "Matlab is not just programming language... \ud83d\ude02\ud83d\ude02", "votes": "4", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugy9l3fZiWGff7-UkYl4AaABAg.8rAa1ZGn9OS93AsRpeHwXd", "comment": "Any STEM subject is equally challenging. Just keep on revising your notes, trust me you will get hat \u201caha\u201d light bulb moment soon. Just practice my friend.", "votes": "3", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugy9l3fZiWGff7-UkYl4AaABAg.8rAa1ZGn9OS97rc0hXkwzA", "comment": "To be fair this isn't really Information Technology, this is more like Computer Science which is (in my mind) arguably the hardest study path/degree that exists.", "votes": "1", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgzoBP-qxp9faQCCjyN4AaABAg", "comment": "NO.  2:08 Strings  are not just arrays of written symbols. They are arrays of characters, where an endoding like ASCII or UTF-8 has control characters, which are not written.  2:35 The string does NOT have to end in a zero. Yes, the computer has to know when to stop. It will even without a zero, if you otherwise tell the computer how many characters to read.  3:25 I need to specify two indices, if the compiler says I do .  3:42 We can make them any size storage permits .  4:28 I can move data out of the back end of my list, and allocate the now free memory, for my array.  4:44 Sure, it can be a struct, but it doesn't have to be a struct to be a structure.  4:49 Everything points. The only thing that's special about a pointer variable is that we say it is one.   7:17 Kind of forced joke there.  7:22 What's so funny about it?  7:36 You'd be looking at the values of the pointers if they were relevant to your debugging efforts, which they have been to pretty much everyone I know studying CS at my local university.  7:40 Roots meet branches, but roots don't have children.  8:35 No, but there are notions of neighbours, neighbourhoods, and cliques. In fact, every closed neighbourhood of any graph, is a tree!", "votes": "0", "replies": "1", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgzGib6UnXa6nEnOJtF4AaABAg", "comment": "Excellent summary!", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgxcgOezjtzh23tYNx14AaABAg", "comment": "Cool video, very well explained!", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgzDykc_MhmXDnbN2BN4AaABAg", "comment": "Excellent brief info!", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugy4Sp-6MnoIQplUotB4AaABAg", "comment": "why u talk to fast :(", "votes": "4", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgxXctlBnM8KWmv88Px4AaABAg", "comment": "A cool crash course would be one on JavaScript.", "votes": "0", "replies": "1", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgyoL_5xJmMSOZFt1HN4AaABAg", "comment": "Personally I always take the pancakes from the bottom of the stack", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgySBuzTWs3zYE6X2x14AaABAg", "comment": "She speaks Too fast then  the Computer.", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgyC1CRZHwqSxgMu2et4AaABAg", "comment": "to fast", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgwvCJgxYcz_LB1wPzJ4AaABAg", "comment": "nice content, but I wonder if she ever takes a deep breath. She talks so fast and so much than when she makes a joke I hate it cause instead of being funny it confuses you. it would be nice if she made pauses so it doesn't make the video annoying sometimes.", "votes": "0", "replies": "1", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgzYfrGGHENcYMsWttp4AaABAg", "comment": "I know what you all are thinking, and yes... she is the female version of you.", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgywoAUhNJ4esTUp4Rp4AaABAg", "comment": "CPU was way easy than this \ud83d\ude10", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgyBRiZL5w4OmOfWSrZ4AaABAg", "comment": "Watch it at .75x speed, thank me later.", "votes": "1", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgzlREpOZWPT5WhDyrd4AaABAg", "comment": "Now I want pancakes", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugwt_oxxo6kb7bjouh54AaABAg", "comment": "You guys are amazing! I have my interviews in the next two weeks and this really helps me speed up", "votes": "1", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugz0MRvmN4-oGp7cxIh4AaABAg", "comment": "If this seems difficult you can refer to cs50", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgxpgGAZVUYO94a8tcZ4AaABAg", "comment": "I don't know who are those people who dislike the video", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgwV6UdnRho_S_11v154AaABAg", "comment": "Carrie Anne is a lot of stuff. I would like to put her into a new level of abstraction to steal all her knowledge.", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugzo1aSSkBPMg4Q2PG14AaABAg", "comment": "Homestuck, anyone?", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgzkwJNiMzB6qI6gAqJ4AaABAg", "comment": "if you reverse the pointers in trees you don't even need to have multiple pointers", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgzoBP-qxp9faQCCjyN4AaABAg.8q8W-W1_PXJ8sZUfG1VT7a", "comment": "Nice.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgxXctlBnM8KWmv88Px4AaABAg.8oFs1anl0gt8oFs97aznRr", "comment": "There may be an exact same comment like this below, also under my account please ignore there was a glitch that I can't work out", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgwvCJgxYcz_LB1wPzJ4AaABAg.8neJuG68pKB8nnMMTlQNd0", "comment": "Google the stuff she talks about, all of this is just a brief overview of the material.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugzjb2ovdnCOUAuIivB4AaABAg", "comment": "What a great Video!! such clever use of graphics and sounds in education....I enjoyed it wholeheartedly", "votes": "1", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugw0oufBz-Rka_4P5fp4AaABAg", "comment": "Aaron Burr killed Alexander Hamilton in a duel in 1804.", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgyRjs3KSG9WRBbMkDV4AaABAg", "comment": "wow an actual video where I knew about evrrything and wasn\u2019t confused at any time during it??", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgwkYP8ORubOxgdWcpZ4AaABAg", "comment": "Was I studying or sleeping till the end of the video ? :'(", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgxHCMxjvh1tiPg0VJZ4AaABAg", "comment": "This is the fastest coverage of basic data structures I have ever seen", "votes": "1", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugx_g0IzO-l9gMckhHJ4AaABAg", "comment": "\"Every programming language comes with a sort function\"  Except object Pascal apparently...", "votes": "1", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgzCKSuHfuixJR3lleB4AaABAg", "comment": "everything went above my head", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgxAqbQdjl9ua_o1OxN4AaABAg", "comment": "Totally Crashed!.", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugyj_jxkOLtnEo2S-Al4AaABAg", "comment": "I am also not john green", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgyLfc9dex45No__xQF4AaABAg", "comment": "I am also not John Green.", "votes": "2", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgzqGRSdqyigI403Y3Z4AaABAg", "comment": "4:36 Well, depending on the programming language. In JavaScript, let's say we want to insert a number 5 to index 3, simply do: array.splice(3, 0, 5);", "votes": "4", "replies": "2", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgzGkyGi4M6ktncr1BJ4AaABAg", "comment": "You talk very f\u00e0aaaaaaaaaaaaaast", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugx04xAjNaY3T_Ka5I94AaABAg", "comment": "Is that simple?? I had such a hard time understanding matrices", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugw5CY3slBCdh2W4BSF4AaABAg", "comment": "Had to watch it 0.75 speed", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugw9p9lDpettT0_TDXt4AaABAg", "comment": "I like this series!\ud83d\ude00\ud83d\ude0a\ud83d\udc4d", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgzPRjEB2QEMfhfzD094AaABAg", "comment": "String concatenation is also known as concat()", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgwT59gG6FvA2KQd1nt4AaABAg", "comment": "Is computer science the same as a programming?", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgzijohwLohY6cJA0dF4AaABAg", "comment": "I now understand those C language \"null terminator\" memes.", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgxHI5ShX-toHUBCUAt4AaABAg", "comment": "it is easy to understand thankyou", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugwj98_ge12rUc01lZR4AaABAg", "comment": "Super speech thank you", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgzqGRSdqyigI403Y3Z4AaABAg.8jebLW4A7tU99NYyh5BCbk", "comment": "I think they are talking about how its implemented in the memory", "votes": "1", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgzqGRSdqyigI403Y3Z4AaABAg.8jebLW4A7tU99NZ2sQQugP", "comment": "You would have to copy the array up to the elements its the same, then insert the new element, and then copy the remaining elements", "votes": "1", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgztBsY60Zulh0wpgGZ4AaABAg", "comment": "No hash map?", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgzglGIwaavjyNh_G8d4AaABAg", "comment": "Way to fast !!!!slow down, however , this video has a lot of good information.", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgzDUXmnIbBe48DwjEZ4AaABAg", "comment": "This is confusing :(", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugw8NJBZ0GnH-7CMHQ94AaABAg", "comment": "Damn British people really do have bad teeth", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgwExy7rf4xGro7_rmd4AaABAg", "comment": "excuse me, but null \u2260 0", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgxxZlaMUpzAkqQJeGp4AaABAg", "comment": "Wow..........this was best for my quick revision of DS. Thanks @CrashCourse!!", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugz1JcsR27lDQIDm9E14AaABAg", "comment": "In how many levels of abstraction are we already? Anybody counting? Haha", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgzhKW8JWfm8pIWIpoZ4AaABAg", "comment": "The first node, the one at the top, is the root, and the ones at the end are called leaves. They ought to call those pointers \"branches!\"", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgwiI4tyZeoHyrOWl9V4AaABAg", "comment": "John Greens dorm room!! \ud83d\ude02\ud83d\ude02\ud83d\ude02\ud83d\ude02", "votes": "1", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugx_r6O12iSS0-wMlv54AaABAg", "comment": "Awesome videos...Thank you!!", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugwyi1IYRXlr5er9pJd4AaABAg", "comment": "I absolutely loved this crash course at 75% playback speed!", "votes": "3", "replies": "2", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugwqcrf1iuH3DlNUswR4AaABAg", "comment": "hank and stan lol", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgzYhhrGvVSkHClcfRJ4AaABAg", "comment": "Crash Course Computer Science! Amazing.", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgyapqQ5sGYxUhRTICp4AaABAg", "comment": "The NUL character is usually written with one L", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgwMS3CYFXY4_qoh_dl4AaABAg", "comment": "YOU GUYS ARE THE BEST", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgzeXHUQd6Zdm1TU9-p4AaABAg", "comment": "why is she reading so fast? Is there a train to be catch? this is not explaining science. It is reading english as fast as u can", "votes": "3", "replies": "4", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgwgjdSsQH0u0mYt0rt4AaABAg", "comment": "Awesome wrk\u2764", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugy67tCvjr-PTHoJGI14AaABAg", "comment": "Error after 7.30 - Doubly linked list is explained as Tree.", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgxZcsbuDejeRih32Yt4AaABAg", "comment": "Good job giving us an easy to understand taste of different data structures", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgwpZWkqpIQOGI6hY-54AaABAg", "comment": "Hi, am I getting it correctly - list of lists in python list_of_lists = [[1,2,3], [4,5,6], [7,8,9]]  is a 3-dimensional matrix, correct?", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugwyi1IYRXlr5er9pJd4AaABAg.8dBbACyVhag8sBVCQOEqkZ", "comment": "Same. And I usually watch things at 1.5", "votes": "1", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugwyi1IYRXlr5er9pJd4AaABAg.8dBbACyVhag8tcZsISj-uZ", "comment": "Exactly what I was just thinking - they're going over this one a lot faster than the previous videos.", "votes": "1", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgzeXHUQd6Zdm1TU9-p4AaABAg.8bfSawvi4Qy8cp3JpIsO2p", "comment": "adityahpatel thank god someone else is feeling the same way, it's like the fastest run on sentence ever.", "votes": "2", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgzeXHUQd6Zdm1TU9-p4AaABAg.8bfSawvi4Qy8dyiUqJ0ddd", "comment": "Just the play the video at a slower rate by clicking on the gear wheel.", "votes": "3", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgzeXHUQd6Zdm1TU9-p4AaABAg.8bfSawvi4Qy8g24K4P8giT", "comment": "It's called crash course.", "votes": "2", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgzeXHUQd6Zdm1TU9-p4AaABAg.8bfSawvi4Qy8lrsiyXGBIZ", "comment": "If you're an absolute beginner and trying to understand these new concepts through this video, I advise you to study them from elsewhere and then come back because this is too intensive. Just saying.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgwAKh1e48g5dZ93cWF4AaABAg", "comment": "Is a CLASS also a data structure ? But I feel like that.", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgwrcOIXthWNA1BYfIJ4AaABAg", "comment": "Just remember, if you are new, that this 10m video is a 1 semester or a few books study compressed, so take it lightly.", "votes": "1.7K", "replies": "12", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugx1JHraE07HDjgnaOV4AaABAg", "comment": "i think we are at like 40839 levels of abstraction by now", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugx0QOHB_mzcfkPgJ_94AaABAg", "comment": "Mangrove trees go from leaf to root...", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgygXxmAp5KXZXzfdnB4AaABAg", "comment": "THANK YOU for having a woman explain this!!! I am a girl, and I seem to actually pay better attention to women and I rarely see women explain programming. It makes me happy when this happens :)", "votes": "1", "replies": "1", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugz5WGWv6dDRw4u-5vx4AaABAg", "comment": "I appreciate the discussion about linked lists, but it's not unfortunate that Lisp has only barely been mentioned in this series so far. Not out of an ideological bent (although I readily admit to having one), but simply because linked lists are inconvenient in most other languages and get abstracted out into vector objects, whose implementation is often not linked lists anyway.", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugx6N9Mm2rj9eQ1zNUV4AaABAg", "comment": "My brain hurts now.", "votes": "1", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgyU0NBeIrFv8pzypON4AaABAg", "comment": "How could you use a command like print to print past the end of a string into another memory location? I remember doing some type of code injection on a form to retrieve values in memory from a webpage that doesn't sanitize input back in college. That was awhile ago, I should search that up again. Btw this was in a lab class, I wasn't doing this maliciously.", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugxpm76rL-jok_7_itR4AaABAg", "comment": "Meanwhile I'm googling. What's a variable.", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgzdmJ4vQhyw17z2Yet4AaABAg", "comment": "i am so in love with the narrator.She is so adorable ! <3", "votes": "17", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgyJvLbKcbZYAq7bNSx4AaABAg", "comment": "You said in the beginning you weren't gonna go into programming yet I feel like I've learned a ton about the fundamentals of code languages and where programming happens. You tricked me into learning way too much!", "votes": "2", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgwuNOA-XCgH2TsZeuZ4AaABAg", "comment": "String IS NOT ARRAY. String is a CLASS which contains array (or not,  we can implement own type of string storing characters inside linked list); And there no STRINGs in C. In C You have char*", "votes": "0", "replies": "1", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgyMwNrTFffMVe2f8el4AaABAg", "comment": "So good! Thank you for the excellent summary", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugy4CJFfp5cUTJ1dR3N4AaABAg", "comment": "0:44 list != array An list uses pointers to get to the next index. An array uses ons block of memory. Meaning that a list is faster if you are iterating over the shops structure, but An array is better of you need to het a specific indexeert element.", "votes": "1", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgyPUc5qS7V1nQ7oSuB4AaABAg", "comment": "Dear Carrie Anne and crashcourse, I hope you're seeing this.   You are all amazing. Thanks so much for making these very good quality videos and keeping them for free.   I'm considering supporting you after I'm done with binge watching the entire series. I'll definitely recommend this series to others.   I'm impressed. You're amazing.", "votes": "10", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgxWODoMvW1_UQxWCSR4AaABAg", "comment": "Noooo not the fan fic", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgxNAZiRJ4TGolICrRR4AaABAg", "comment": "I can't feel time by hearing your voice  It's just awsome", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgzWbSsHO8g4C-6sSxh4AaABAg", "comment": "Sorry but she should lose the glasses", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgzjvYZ91fA8o0JHEJR4AaABAg", "comment": "Thanks a lot. I enjoyed the crash course. I now know what data structures are. planning to delve deeper", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgyU6yrdA4RZMkv8PmJ4AaABAg", "comment": "you are so fast :/ horrible video!", "votes": "0", "replies": "1", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgwrcOIXthWNA1BYfIJ4AaABAg.8ad4ezQjTVi8k6Kw3iAESJ", "comment": "They've explained it better here than at my college... I should be laughing, but it hurts.", "votes": "234", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgwrcOIXthWNA1BYfIJ4AaABAg.8ad4ezQjTVi8kFHzWda8tl", "comment": "lol my school started this like over a month ago and still hasn't finished XD. But its pretty simple tbh", "votes": "50", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgwrcOIXthWNA1BYfIJ4AaABAg.8ad4ezQjTVi8luxdp-rpXL", "comment": "Proof that one on one IS more efficient than telling a group of people to memorize datum.", "votes": "36", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgwrcOIXthWNA1BYfIJ4AaABAg.8ad4ezQjTVi8qg0ZvRAo0f", "comment": "Am I doing it wrong? I've binge watched up until now, and I plan on continuing until the end. FORTY SEMESTERS WORTH OF COMP SCI IN TWO DAYS!!!", "votes": "57", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgwrcOIXthWNA1BYfIJ4AaABAg.8ad4ezQjTVi8te7nuViEho", "comment": "\u00a0@aboxinspace\u00a0 Ditto. I am revisiting it 2 years later and I am just amazed how well it explained the concepts in just ten minutes. It helps though having studied it before in my opinion though.", "votes": "29", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgwrcOIXthWNA1BYfIJ4AaABAg.8ad4ezQjTVi8thB9atCQa2", "comment": "\u00a0@aboxinspace\u00a0 Wait you college taught it", "votes": "1", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgwrcOIXthWNA1BYfIJ4AaABAg.8ad4ezQjTVi8ufx8dfdbjF", "comment": "I will say, it did help me get a better understanding of my chapter specifically based on data structures.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgwrcOIXthWNA1BYfIJ4AaABAg.8ad4ezQjTVi8yzcv_mnb9t", "comment": "Adrian B.G. Hence the name crash course.", "votes": "9", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgwrcOIXthWNA1BYfIJ4AaABAg.8ad4ezQjTVi92jZf-UJ1HE", "comment": "Which book or article do you recommend to study this in depth? Thank you.", "votes": "5", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgwrcOIXthWNA1BYfIJ4AaABAg.8ad4ezQjTVi95Zbnw3ZhHC", "comment": "I wanted to know how data structures are implemented in games, now I know how much I have to learn", "votes": "3", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgwrcOIXthWNA1BYfIJ4AaABAg.8ad4ezQjTVi970LJ8zWmAG", "comment": "the amazing thing Is this is not hard to take, the amazing thing Is this video makes a few books into a 10m video that so clear and understandable perfect. Not only this video and also the hole series have these amazing things.", "votes": "8", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgwrcOIXthWNA1BYfIJ4AaABAg.8ad4ezQjTVi97j7ldun7Qb", "comment": "Joe Black based jc Denton pfp", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgygXxmAp5KXZXzfdnB4AaABAg.8a-LMZEbail8h13u1b_FQI", "comment": "Dont get used to it", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgwuNOA-XCgH2TsZeuZ4AaABAg.8ZJsUoYw5j38bnGG95He-L", "comment": "Peterolen if we talk about string as data structure it is not an array. Read my comment again please", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgyU6yrdA4RZMkv8PmJ4AaABAg.8XEkN4bDwzX8dyiefSauFR", "comment": "Just the play the video at a slower rate by clicking on the gear wheel.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgxHM_Eu_ayygVBcdgt4AaABAg", "comment": "At 2:45 \"Print[j]\" on the screen really should be written with parentheses instead of brackets like this \"Print(j)\".", "votes": "2", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgwLg8DGFcRTrICd9wp4AaABAg", "comment": "4:14 The \"C\" programming language uses \"struct\". A struct is the predecessor of a \"class\".", "votes": "1", "replies": "1", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgxYOky_C4cuhqCq_Bx4AaABAg", "comment": "I have taken so many classes that have gone over linked lists and I never truly understood it until watching this video, thank you so much!!", "votes": "1", "replies": "1", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugw7_aNT-FmLHefBqHh4AaABAg", "comment": "im currently doing a course on data structures and we've only just reached pointer variables so this video is linking everything tgr before I've even learned it. cheers", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgyOsUlPTu3reMniLIR4AaABAg", "comment": "wish she was my prof .", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgikzRPcUMNJRXgCoAEC", "comment": "Is it just me or does it often look like she's holding back laughter? I'm not sure if it's that or if it's just how she talks.", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UghwKyIgzTS88HgCoAEC", "comment": "oh this was so helpful.", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugj-SGj03gRhKngCoAEC", "comment": "C++", "votes": "2", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugikr6GjSj8ISXgCoAEC", "comment": "JAVA", "votes": "1", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgiEE1V8JScHfngCoAEC", "comment": "Was that a bong on the table on the picture of the dorm room next to the Xbox controller?", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Uggc5rgTZ8J9xXgCoAEC", "comment": "You haven't talked about the more complicated data structures like Segment trees, Fenwick trees, Red black trees, Trie, Suffix tree, Suffix array , Wavelet trees which can do quite a lot!!", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgiKrMVd3gwj23gCoAEC", "comment": "Ripple Carrie adder", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgiHbDAI-pkIJXgCoAEC", "comment": "What About Classes ?", "votes": "1", "replies": "1", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgjdCEja9rXUkngCoAEC", "comment": "You can now access a 5th dimensional matrix, tell your friends lol. That actually made me lol.", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgixJmwRLfU-h3gCoAEC", "comment": "Like for the game of thrones reference. In John Snow we trust!", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugjpe7KRlOtYDXgCoAEC", "comment": "Carrie Anne, you're a very good teacher!", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgiX_uObVUJDPngCoAEC", "comment": "Nice game of thrones", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgjJyeEOGtmKTHgCoAEC", "comment": "I never knew Austin Powers hosted YouTube videos...", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UggQ7akFlJkfZ3gCoAEC", "comment": "No hash tables? Just make an easy hash function. They're important.", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UggMKs7kfWA_F3gCoAEC", "comment": "She is so much more preferable to my monotone prof! I'm learning heaps - THX", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgwLg8DGFcRTrICd9wp4AaABAg.8WIauCxkBa58YmvxgoXNqV", "comment": "Ikem Krueger struct == Class, but with a default public accessor. At least in C++.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgxYOky_C4cuhqCq_Bx4AaABAg.8W2Z-Jfiorb8b9TlZeMDop", "comment": "Alisa Kotliarova you serious??", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgiHbDAI-pkIJXgCoAEC.8UNjrpmFe8-8h13zM3uuzO", "comment": "Aakash Prasad not in all languages.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UggGfw-2FTLo13gCoAEC", "comment": "Is a struct the exact same thing as an object?", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Uggw_EqbETxNnngCoAEC", "comment": "Did you just forget the Map data structure? :'(", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgjzBU6DxRJda3gCoAEC", "comment": "> \"All languages start at index 0.\"  Except Lua.", "votes": "11", "replies": "3", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UggeUZj8hfUuk3gCoAEC", "comment": "Wonderful episode and series!! Thank you guys! I wish you showed a more in depth example of the push/pop with link nodes graphically to help. Matrix too lol great job, I'd love 15-30 mins eps just you know you :p  ... Always end up watching them 3 times anyway lol", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgjLxrSnJOG_QXgCoAEC", "comment": "So what's next?? OOP? Functional Programming?", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UggzT073cPxiL3gCoAEC", "comment": "I'm surprised you did touch on classes and its differences from structures.  Good show!", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgjRQEGHEyJjA3gCoAEC", "comment": "Now I got what the Null.Pointer.Exception error is lol", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgiiNik8vkCQ5HgCoAEC", "comment": "Is this up for malloc/memory allocation next?", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgipzJEnqGCfR3gCoAEC", "comment": "I think these videos are sooo interesting. wish their were more", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugj-uvBrNiKZwXgCoAEC", "comment": "Damn, now you lost me!", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugi0rtwqyBdPa3gCoAEC", "comment": "Is an accent supposed to correct for the numerous inaccuracies or is that what the sped up audio is for?", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugj3ElpAo86QJHgCoAEC", "comment": "Is that an Arduino in the background using a sound sensor to light an LED?", "votes": "1", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgiohOTaKtn3IXgCoAEC", "comment": "Who the hell is John Green then?!", "votes": "0", "replies": "1", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgiuAzbxmQEr8HgCoAEC", "comment": "Totally wicked!", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgiFcxTAm-wBi3gCoAEC", "comment": "2:36 print[j] should be print(j), if j is an array of characters and print a procedure or function.", "votes": "1", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugh5RqCg2LUsYHgCoAEC", "comment": "2:40-2:50 isn't that basically what heartbleed was about? tricking the computer into giving more information than it was intended to", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UghDo8nLilVZxHgCoAEC", "comment": "One thing:  (\"A NEW LEVEL OF ABSTRACTION\")", "votes": "3", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UghDaMrEcDkQingCoAEC", "comment": "Strings don't always end with a NULL. Sometimes they have a byte or word at the beginning that declares the length, though that's fairly uncommon.", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UggiokTVwcEMyHgCoAEC", "comment": "I'm trying to get my teacher friends to show this series to their students. I love this. All students should see this in class.", "votes": "63", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugg4SnvJjO8ScHgCoAEC", "comment": "No Thought Bubble...?", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgjzBU6DxRJda3gCoAEC.8TXTZekpH8V8dt25vT0NDN", "comment": "Connor King and Matlab lol", "votes": "1", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgjzBU6DxRJda3gCoAEC.8TXTZekpH8V8iZGelJqjMX", "comment": "*Except R", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgjzBU6DxRJda3gCoAEC.8TXTZekpH8V8k3wg-NdlUn", "comment": "Victor Sung MATLAB is alright.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgiohOTaKtn3IXgCoAEC.8TNGA_IgISg8TSxK1wWtSH", "comment": "James Weber your sister \ud83d\ude02\ud83d\ude02\ud83d\ude02", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgjqyiqrBSPMMHgCoAEC", "comment": "Aw, we reached A New Level of Abstraction\u00ae, but no trip in the elevator. \ud83d\ude41", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UghdXN_hA8QhUHgCoAEC", "comment": "You speak very faster. \ud83d\ude02", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgiEh-ITZRDcDngCoAEC", "comment": "shouldn't it be tensor if it's more than 2D", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UggJHP9pZBRUaHgCoAEC", "comment": "you speak too fast.", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UginqFTyItO68XgCoAEC", "comment": "A string doesn't necessarily terminate in a null. Although this is typical in C-like languages, many other languages store strings with the length of the string, eliminating the need for null terminating. (and allowing the null character to be included in a string)", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgjuzoD1qWF3EngCoAEC", "comment": "would love to see a video on heap and hash in this format!", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UggPowAlO_O1rngCoAEC", "comment": "Che", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgigAhpHUr1GSngCoAEC", "comment": "What a bunch of garbage (collection). j/k", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugj_q4YJiNt44HgCoAEC", "comment": "when are we going to discuss nueromorphic architecture???", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugib2iJhkYKYFngCoAEC", "comment": "I want crash course to do a criminology course!!", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UghJXe41bqGueXgCoAEC", "comment": "I'm learning to Program now, and surprisingly understood everything. Had to stop and scroll back a few times, but that was a beautifully clear explanation of each concept!", "votes": "11", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UghXmfrdw7j1VXgCoAEC", "comment": "She was kidding about 5D arrays. Don't try to tell your friends.", "votes": "1", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UggJUzVtdAsMqngCoAEC", "comment": "This course is so good. They weren't mentioned but K-D trees frustrate me a lot", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgjAUXYPVdiAZngCoAEC", "comment": "As a workable alternative to this video, you could also read the first few acts of Homestuck.", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugh8IgCvIHDlrXgCoAEC", "comment": "Calling a five-dimensional array a matrix sounds cool and all, but it really isn't a matrix anymore if it doesn't behave mathematically like an actual matrix. You can't really use matrix multiplication in 5D for example", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugj3KViwgQ-qZXgCoAEC", "comment": "I was waiting for John Green", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UghZFt2kKqFEAHgCoAEC", "comment": "Next week subject : \"Objects\".", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugi6-yLxtLh_u3gCoAEC", "comment": "hopefully you will talk about data hashing, this is crucially important in the modern world of programming.", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugj9rcCZy3S6VngCoAEC", "comment": "Addendum: Null character terminated strings are the most common way of doing it, but it's also possible to just store the length of the string as a number as the first field, then the string. Then, we know where to stop because we see the length before reading the string.", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Uggx3YF7Ku49wngCoAEC", "comment": "she look cute", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugg-M8PzZKNJiXgCoAEC", "comment": "nothing major, but collections of data of the same type are mostly marked by [ and ], not { and } :)", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgiN_txTsr4jQHgCoAEC", "comment": "Welp, that was fast.", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugjsfdqmi1xmkHgCoAEC", "comment": "Graphs are usually stored as list of nodes and tuples of edges.", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgjWJQ5QSGpJBngCoAEC", "comment": "Crash Course died after John Green decided to stop being the host", "votes": "0", "replies": "1", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UghrSr4cLsPX2HgCoAEC", "comment": "One thing I don't get about null pointers, why don't they point to memory address 0? is there no memory address 0?", "votes": "0", "replies": "2", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgidDtX_Sf5kKXgCoAEC", "comment": "one thing left out in this otherwise really good overview is the main disadvantage of linked lists: random access (that is, getting the value at a certain index into the list) becomes much more difficult, and is much less efficient than in simple arrays. each data structure has its tradeoffs and use\u200b cases", "votes": "1", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgjyJdCi50pT6ngCoAEC", "comment": "forgot the judicial branch.", "votes": "3", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgjpfNbkYqp9BngCoAEC", "comment": "Ack! Thomas Jefferson and Aaron Burr! inner Hamilton screaming intensifies", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgiAUueEiH7OHngCoAEC", "comment": "Speaking of classes\u2026OO video please?", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugh4fFLdhn2gsngCoAEC", "comment": "are you an alien ?\ud83d\ude0a", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UghwZKSonhuWVXgCoAEC", "comment": "Bruh I studied this for an entire semester and all I got out of it that she didn't cover was pqueues, skiplists, red-black, AVL trees, hashtables, sparse matrices and heaps. Heaps and hashmaps definitely would have been a good to cover here those are super useful and not just minor variations on a general theme.", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgjxSoonR5EXh3gCoAEC", "comment": "Why aren't maps/dictionaries covered?", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgiYDTWG5GvZ93gCoAEC", "comment": "How long are the pointer values in terms of bytes?", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ughe7NCxGoAaHngCoAEC", "comment": "I'm glad l managed to pop my cellphone out of my sylladex so l could watch this video.", "votes": "1", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgiCKmJJPC_aiHgCoAEC", "comment": "i have a computer architecture final tomorrow but i just couldn't help myself but see this even though i know all of it \ud83d\ude01\ud83d\ude01", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugj0HoCWmqff-HgCoAEC", "comment": "Hello, Carrie Anne:  Your explanations and videos are great!!! Thank you so much for helping me understand computing better. Small petition (although given my ignorance it may be huge X-D):  Could you please say or list the levels of abstraction required to display, for example, a \"C\" on a computer screen? 20+?  Thanks again for being awesome :-) Miguel", "votes": "2", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugh4Y6jQX3KXiHgCoAEC", "comment": "So, the first lesson of linked lists; WHY are you using a linked list?If it's not for; Rapid random insertion and deletion AND Adjoinment of lists to the tail of pre-existing lists AND Reading of the list from head to tail You probably shouldn't be using a linked list. It's just not possible to ensure the locality of the entire list in memory, or even a major portion, risking cache misses and other such fiddly things.", "votes": "0", "replies": "2", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ughp3esepz1Ib3gCoAEC", "comment": "and not a single homestuck reference.", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugg-JmPZUCuP5HgCoAEC", "comment": "the videos always seem like a compressed version of my first two years of studying computer science. though not as thorough as the lectures back then, these videos really hold up and explain everything extremely well. great job!", "votes": "462", "replies": "1", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgjQLcrQWP3HjHgCoAEC", "comment": "Yes! Another episode! I've beeeen waiting! \ud83d\ude03", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgjWJQ5QSGpJBngCoAEC.8TGg5qwRL-D8TTg5300snb", "comment": "get out of here!!", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UghrSr4cLsPX2HgCoAEC.8TGe-iId0-Q8THosG_wMi2", "comment": "If there is something interesting at memory location 0 then using that value as a null pointer would be a bad idea. Most operating systems store things for their own use in the beginning of memory (in DOS the .com programs start at address 100 hex, which is 256 decimal) so a 0 pointer should never be valid for the user program.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UghrSr4cLsPX2HgCoAEC.8TGe-iId0-Q8TIPM77RpQS", "comment": "Jecel Assump\u00e7\u00e3o Jr, Thank you.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugh4Y6jQX3KXiHgCoAEC.8TFunlmtec_8TG1SiRWMqB", "comment": "Not sure why you use AND \u2013 what structure would you suggest if I only need rapid random insertion and deletion that preserves order, without the other two?", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugh4Y6jQX3KXiHgCoAEC.8TFunlmtec_8TG2ItxQ6dy", "comment": "Depending on the size, either an array list, or a segmented array list. The idea is to minimize pointer indirection, really. And, in the original suggestion, order is arbitrary, not to say that you couldn't obtain good behavior from a specialized list with proper segmentation. My point was more, \"Data structure design is hard, don't use a structure unless you understand it\" I would prefer people KNOW the trade-offs they make choosing a purely linked list, or purely array list. It's an important decision to make, and deserves a lot of thought!", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugg-JmPZUCuP5HgCoAEC.8TFr_oSDRVp8dtg0RX3S16", "comment": "Crash course is a great way to refresh your knowledge about almost anything.", "votes": "14", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ughrl2tV5m2lE3gCoAEC", "comment": "Isn't it Java collections and not class?", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UghqNOK90nhBBngCoAEC", "comment": "\"It'd be weird if roots connected to leaves that connected to roots.\" Looks nervously at Bryophyllum daigremontianum >_>", "votes": "104", "replies": "3", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugjwxb8UjAKOQ3gCoAEC", "comment": "+CrashCourse i think your link to FB is a bit different than what is in episode's comment ;)", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ughrkm0sDu64vngCoAEC", "comment": "I prefer to implement queues with arrays instead of linked list", "votes": "0", "replies": "2", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgiAgyhGRFnUkXgCoAEC", "comment": "this series is like my hit of crack every week that keeps me going", "votes": "16", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugh-gPm0d0j9T3gCoAEC", "comment": "Thank you! Now I understand why I always got errors when Iworked with Arrays. They don't want to grow dynamicly^^", "votes": "2", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UggoWwGRaXO8dHgCoAEC", "comment": "God, I wish most languages gave me a tree in their library.  But when they do, they inevitably suck.", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UghOUi3EcOvJ_XgCoAEC", "comment": "Very good summary!", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UghuHNIJyxWVjXgCoAEC", "comment": "Spent the whole semester for this. Thank you!", "votes": "1", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgitiMel2Za8pngCoAEC", "comment": "Since you've now covered push and pop, are you going to cover peek and poke?  I was so excited to see \"Data Structures\" with the thumbnail... sad really.", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgiWLUHacpjStHgCoAEC", "comment": "You can most definitely dynamically define an array - see malloc", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugik4vwmpJ26rXgCoAEC", "comment": "The null character \\0 isn't the same as \"0\"", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugiy_UN5hhMZaHgCoAEC", "comment": "Which language doesn't start index at 0?", "votes": "0", "replies": "12", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugiebvg2lfDgHngCoAEC", "comment": "red black tree is super racist! black nodes are always at the bottom! this reinforces the idea that blacks being at the bottom ensures a balanced social structure! jk", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgjL7i8W4o3wn3gCoAEC", "comment": "I cry everytime people bring up product types without also mentions sum types, which are just as fundamental.", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UghU9y6ws5FU6XgCoAEC", "comment": "this is an awesome series. i was honestly expecting it to just barely skim the surface of this topic, but it's actually going in to a fair amount of detail. i love it.", "votes": "18", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugiiu9rG2UQ9vXgCoAEC", "comment": "<-- Also not John Green", "votes": "87", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UggdTU3-_LXZaXgCoAEC", "comment": "What was that bit, just after the opening, and continuing to the end?", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UggWp4cV7Bvn6XgCoAEC", "comment": "Here in M\u00e9xico in my college they teach you about all of this plus the paradigm of object-oriented programming in two courses, called \"Object-oriented algorithms and linear storage patterns\" and \"Object-oriented algorithms and non-linear storage patterns\", We just call them by the initials, wich in spanish are APALOO and APANLOO, respectively.", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugj-mHHKXukJaHgCoAEC", "comment": "I love u and ur video", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UghqNOK90nhBBngCoAEC.8TFogbz6Vfk8TGTTSAOuI2", "comment": "Found the botanist! Seriously though, that's a dope plant.", "votes": "26", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UghqNOK90nhBBngCoAEC.8TFogbz6Vfk8Y3JecfMUmM", "comment": "I am happy you are here :)", "votes": "3", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UghqNOK90nhBBngCoAEC.8TFogbz6Vfk8nTVBbJIlTL", "comment": "I think most people would be freaked out a lil by how peanuts grow.", "votes": "4", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ughrkm0sDu64vngCoAEC.8TFjqPPFhgX8TG3gTMi-m1", "comment": "Good choice.", "votes": "1", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ughrkm0sDu64vngCoAEC.8TFjqPPFhgX8TGTiZ2e6bY", "comment": "Binary trees aswell. I think I can count the times I needed to use linked lists in practice on my fingers.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugiy_UN5hhMZaHgCoAEC.8TFYi1ynANR8TG3v3JTCnK", "comment": "The best known ones are COBOL, Fortran, Julia, Lua, Mathematica, MATLAB, Smalltalk and SQL (not really a programming language, though)", "votes": "1", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugiy_UN5hhMZaHgCoAEC.8TFYi1ynANR8TGBHg_fn5l", "comment": "Pascal and Commodore 64 BASIC first came to my mind. Unless I missed something.", "votes": "1", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugiy_UN5hhMZaHgCoAEC.8TFYi1ynANR8TGHZOodnk4", "comment": "I should've remembered smalltalk. And I didn't realize that SQL arrays started at 1 (knew postgresql supports it but never used the feature - sure enough though - don't care about Oracle either way). Lua is a gray area though - when I've used it, they were always array[0] however apparently you can do array[1]. Just looked in an old book aimed at turbo pascal, and though I couldn't find it stated all of the definitions were: array[1, upper] type datatype  So I'm guessing 0 was weird in pascal.   Wrt c64 basic - have a book for that too, but it smells too bad and the language is too ugly, so I'll take your word for it :) ", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugiy_UN5hhMZaHgCoAEC.8TFYi1ynANR8TQmvY8C7AN", "comment": "This may sound like a dumb question, but why do array indexes in most languages start at 0? Isn't it more intuitive to start at 1?", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugiy_UN5hhMZaHgCoAEC.8TFYi1ynANR8TQqm9kzYV8", "comment": "Probably a Ritchie thing as (I've done a bit of looking around) it seemed to change around C in favor of 0 (though it may be with B or even Ada). I'll start a thread on TUHS and post a link in a bit. ", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugiy_UN5hhMZaHgCoAEC.8TFYi1ynANR8TQs0gbi5IU", "comment": "As explained by Edsger Dijkstra himself: http://www.cs.utexas.edu/users/EWD/transcriptions/EWD08xx/EWD831.html", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugiy_UN5hhMZaHgCoAEC.8TFYi1ynANR8TWHN6rAusN", "comment": "Anyone interested, I just started this thread. Already been pointed to some bell labs papers (haven't even looked at yet). The list is public - they keep spam out by making you do a little OSINT though.   marc.info", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugiy_UN5hhMZaHgCoAEC.8TFYi1ynANR8TWPZD6RCj_", "comment": "None of the replies so far seem to answer the question, though.  Dijkstra's letter I've linked above argues from mathematical beauty, so to speak. There is also a valid practical argument, though: in N-bit systems, all addresses can be expressed in N bits only if we start counting with 0. For example, imagine we have a system with only 2\u00b3 = 8 memory addresses. If we start counting with 0, all addresses are in range 0,...,7 and can be expressed binary in only three bits, from 000 to 111. If we start counting with 1, however, addresses are in range 1,...,8 which might look more intuitive at first but requires an additional bit because in binary the addressing now goes from 0001 to 1000. That's an important reason why we index whole memory from 0. And it's natural to follow the same convention when addressing within arrays (you can view whole memory as one big array).", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugiy_UN5hhMZaHgCoAEC.8TFYi1ynANR8TWSLSDXe_C", "comment": "The binary thing is apt and gets you into the proper mindset. However all languages go through a lexer, compiler (and sometimes a linker). So if you aren't dealing with memory (or xc or python Array or similar lower level features) it doesn't really matter where you count from - it's ASCII as input. ", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugiy_UN5hhMZaHgCoAEC.8TFYi1ynANR8TWT75gUdu3", "comment": "If you aren't dealing with memory. The thing is that you often are (or at least were back in the day). E.g. pointers in C are just memory addresses.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugiy_UN5hhMZaHgCoAEC.8TFYi1ynANR8TWUR71_Y_U", "comment": "Yeah and you also did a bit of bit banging there too and their arrays started at 0. But pascal and Fortran and COBOL and basic and smalltalk were meant for business. So while a common thing to do was to poke / peek in basic, you weren't expected to be at that level (at least very often). ", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugiy_UN5hhMZaHgCoAEC.8TFYi1ynANR8TWqw3roFD9", "comment": "Mathematically, it's nicer to start at zero, too. Take numbers mod 3, for example: 0 mod 3 = 0 1 mod 3 = 1 2 mod 3 = 2 3 mod 3 = 0 4 mod 3 = 1 5 mod 3 = 2 etc. You will get nice blocks of three. 0,1,2,0,1,2,... Same with dividing by 3: (integer division) 0 / 3 = 0 1 / 3 = 0 2 / 3 = 0 3 / 3 = 1 4 / 3 = 1 5 / 3 = 1 again, nice blocks of three. 0,0.0,1,1,1,2,2,2,...", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UghGL4rEbMQ2nngCoAEC", "comment": "God I love crash course :) I only wish you made actual courses on this subject. I am a currently earning my BS in CS and I absolutely love to talk about data structures. Programming is my blood. However, there are so many techniques and different ways to structure your data that I want to know everything I can.", "votes": "1", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgiOcg4_Tzdkh3gCoAEC", "comment": "Does the Java data structure Lists use nodes?", "votes": "0", "replies": "1", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UghhYpQ8XsUqR3gCoAEC", "comment": "For anyone who may just be starting to learn low level languages, be careful when using \"NUL\" vs \"NULL\" because they can mean two different things. \"NUL\" refers to the NUL character or ASCII zero. \"NULL\" refers to a null pointer - a reference to a non-existent location in memory.", "votes": "220", "replies": "4", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UghVr3R6rWIMqngCoAEC", "comment": "Sick burn on John there", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ughp0jSwtdz-tHgCoAEC", "comment": "\"Standard Template Library\" is the old name.  It's the C++ Standard Library now.  Glad C++ got a shout-out anyway.", "votes": "5", "replies": "1", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UghDTTO72W1bH3gCoAEC", "comment": "It would be nice to go into red black trees. That was listed as bonus content in my book.", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UggeZgpbI1UN-XgCoAEC", "comment": "or you could go python, which is almost indented english", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgiFZQSpxs6KCHgCoAEC", "comment": "Wow. This was super fast! If I didn't already know this stuff, I could easily get lost in all the information!", "votes": "8", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgjogOyjspFEg3gCoAEC", "comment": "Please talk about immutable data structures at some point, a good time to teach people about modern software development.", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UghtRPArkMapHXgCoAEC", "comment": "so lovely and intelligent", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugj3aehWzMTQ-3gCoAEC", "comment": "Have u done a video on blockchain yet?", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UggjCdZUlF1u9XgCoAEC", "comment": "This should have been in the Sylladex training course.", "votes": "1", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UggNzBp8vNitjHgCoAEC", "comment": "I would have preferred to see Morpheus myself \"C'mon stop trying to hit me, and hit me!\"", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UggUSHWUmozYKHgCoAEC", "comment": "This series is why I'm getting into arduino programming, and this video just helped me get past a hurdle I encountered on my project. Thanks! =D", "votes": "6", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgiXaLarlcLtY3gCoAEC", "comment": "Data structures was my favorite subject in my CS courses in college! It all just makes so much sense, and thinking about how each piece of data relates to all the others is like a fun puzzle.", "votes": "66", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UghKgRYgnohfwXgCoAEC", "comment": "Theres no elevator scene after the new level of abstraction!!!! Argh i watch this every week for that!!!!", "votes": "43", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgjiXUDRRSBAV3gCoAEC", "comment": "Gah! Holding out on me with the \"next level of abstraction\" graphic.", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgjICQLl-MHUrXgCoAEC", "comment": "MATLab confusingly uses 1 instead of 0 for the start of an array.", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgiYZXRNzq9JNXgCoAEC", "comment": "Here's a list of everything wrong in this episode: 1)Arrays addresses are based on byte addresses so if sizeof(var)!=1, the next index is not at the subsequent index but n fact at an offset equal to sizeof(var).  2)Arrays can be resized using realloc() in place if there is sufficient nearby memory, or by remapping allocating overflow pages.  3)Everyone learns non circular linked lists with null terminators first.  4)Characters need not be one byte in size, so its worth mentioning that null terminated string operations work on a byte by byte basis for 7bit ASCII  I'm sure there's more but I just stopped watching.", "votes": "0", "replies": "3", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UggnA4omxfg_lHgCoAEC", "comment": "We may have fifo and filo but do we have convfefe?", "votes": "169", "replies": "2", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgiOcg4_Tzdkh3gCoAEC.8TFLuBpJ-NR8TFgcEDrhaF", "comment": "Shogun of Japan The Collections framework uses many base structures. Stack<T> and Queue<T> both extend LinkedList<T>.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UghhYpQ8XsUqR3gCoAEC.8TFKF2C90508TWXT676z0W", "comment": "\"Null\" is its name and NULL was its original abbreviation.  So not as wrong as all that.  https://en.wikipedia.org/wiki/ASCII", "votes": "1", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UghhYpQ8XsUqR3gCoAEC.8TFKF2C90508epWaQCUW5a", "comment": "NULL could also be nullptr. NUL can also be '\\0' (char type).", "votes": "1", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UghhYpQ8XsUqR3gCoAEC.8TFKF2C90508ovCjjA3tgX", "comment": "thanks much sir", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UghhYpQ8XsUqR3gCoAEC.8TFKF2C905096b_ffUwNF5", "comment": "Thank you", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ughp0jSwtdz-tHgCoAEC.8TFI_YrgAWt8TI3ICbcz-7", "comment": "Hell yeah someone else likes c++", "votes": "2", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgiYZXRNzq9JNXgCoAEC.8TF9qIP3yvr8TFEw5IWl_A", "comment": "You do understand that this series is not directed at people who already understand a lot about computers, do you? Of course things are being oversimplified here.  also, in C, you can't realloc() a statically defined array, the type this episode covered. only dynamic buffers created by malloc().", "votes": "2", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgiYZXRNzq9JNXgCoAEC.8TF9qIP3yvr8TFGuuvC6mL", "comment": "I might be less concerned if there was an asterisk next to every such statement, but if you aren't specific in computer science, that's no better than spreading misinformation.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgiYZXRNzq9JNXgCoAEC.8TF9qIP3yvr8TFIASMxNzX", "comment": "While we're listing things, I suppose I should mention she in fact said \"[...] arrays, sometimes called vectors or lists\".  Which if anything supports that she was not referring to static arrays, because those names are usually reserved for ADTs that support list operations.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UggnA4omxfg_lHgCoAEC.8TF9mTURvjd8TJOokVPSWc", "comment": "uvuvwevwevwe", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UggnA4omxfg_lHgCoAEC.8TF9mTURvjd8h114iSFfeR", "comment": "Ben Cradick ?", "votes": "1", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgiauAmpQ7wvBngCoAEC", "comment": "I'm a computer engineer and I'm doing some Java stuff for like 5 years, and this video gave me the envy to go back doing some C again, like I did back at school.  And I like that.", "votes": "6", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugh472gzJWZxf3gCoAEC", "comment": "This episode was released in the time I finished Ep13!", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugh6XoP35okMlngCoAEC", "comment": "I'm computer stupid and want to learn SQL for cheap for my job. Where do I go", "votes": "1", "replies": "6", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Uggosg7oT68Kf3gCoAEC", "comment": "Not all strings need to end in NULL. Seeing as strings are just arrays, and some languages store the length of an array, a string's length would just use the same value.", "votes": "28", "replies": "18", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugh9di7yiw72XHgCoAEC", "comment": "Carrie Anne <3", "votes": "3", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UghQaqLQ1uhJ_ngCoAEC", "comment": "right now I just hope this will be a never-ending course", "votes": "34", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugilp1MgYQWGeHgCoAEC", "comment": "Isn't a graph more of an abstraction than an actual data structure, given that there are so many ways to implement the same graph? Wouldn't the individual types like adjacency lists and adjacency matrices be the actual data structures?", "votes": "7", "replies": "3", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UghWWeKl3v4Nr3gCoAEC", "comment": "I am LOVING THIS SERIES! LOVE YOU CARRIE ANNE AND CRASH COURSE!", "votes": "9", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UggxOB5t3XD5d3gCoAEC", "comment": "will we check out gpu and hdd/ssd aswell?", "votes": "1", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugg8RhzV3Z515HgCoAEC", "comment": "Can someone tell me why people place so much importance on linked lists? Aren't array's far more efficient for most tasks?  Also, remember, people, that not all heaps are the same. The word \"heap\" is used for 2 different and unrelated things in computer science.  Aside from that, I don't like how she uses \"struct\" instead of \"structure,\" (minor pet-peave) and how she seems to assume that all strings are null-terminated and how all arrays are zero-indexed. Most arrays are zero-indexed, but there are exceptions like Lua, while most languages nowadays don't use null terminated strings at all and instead store a length variable.", "votes": "2", "replies": "18", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugjx4wqywB0BnHgCoAEC", "comment": "Hey Carry Anne/CrashCourse! I found the quick pass over \\0 terminated strings a little short. are you going to be discussing them in another episode? and/or make an entire episode of \\0 vs bit-byte terminated strings later?", "votes": "0", "replies": "2", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ughq-8usenEPPngCoAEC", "comment": "Always great folks but that was pretty much an entire term's class-worth of data structures in 10 mins. It'd be fascinating to know how many people who encountered this for the first time kept up!  As a side-note it's really good how you refer everything back to memory locations. So often these days people are taught to use data structures as basic language building blocks with no idea what's going on \"under the hood\".  So, object orientation next week? :-)", "votes": "381", "replies": "16", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgixH_wl4edmyXgCoAEC", "comment": "\"... which we don't have to time to cover\" That's a shame. There's no many more interesting things to say about Data Structures.", "votes": "0", "replies": "1", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugi7-GZAsNmfMXgCoAEC", "comment": "No, array index 5 is the fifth number, array index 0 is the zeroth number.", "votes": "7", "replies": "6", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UghOx7cfAM3PAHgCoAEC", "comment": "Could you guys do a crash course Art history series", "votes": "21", "replies": "2", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UggA7Xc5jk0sgHgCoAEC", "comment": "This is why we always say zeroth instead of first.", "votes": "8", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UghX7c5uER0_d3gCoAEC", "comment": "i get pushing the stack but how do i pop my pancakes?", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugg_atgfGtbgaXgCoAEC", "comment": "Earliest programming advice: Once you understand tables (arrays in ML or Assembly) you are 80% there", "votes": "29", "replies": "13", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UggzQXzpma7s73gCoAEC", "comment": "Lua laughs at your petty indexing conventions.", "votes": "16", "replies": "3", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugj_OPoEVGwKgHgCoAEC", "comment": "wow. who are you guys ?? historians ? biologists ? physicists ? now computer programmers ?", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugh6XoP35okMlngCoAEC.8TF5sxJbp9M8TFAKbsG3O5", "comment": "SELECT TOP 1 course_name FROM courses WHERE course_price = 'free' AND course_difficulty = 'beginner' ORDER BY course_rating DESC -- OUTPUT: codecademy", "votes": "6", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugh6XoP35okMlngCoAEC.8TF5sxJbp9M8TFDYj61iyE", "comment": "Miltiadis Orfanos will look into this. Appreciate it kind YouTube profile", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugh6XoP35okMlngCoAEC.8TF5sxJbp9M8TFOYZoLqx4", "comment": "Good luck! Codeacademy is excellent'); DELETE FROM Users WHERE UserName='asud815'; --", "votes": "2", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugh6XoP35okMlngCoAEC.8TF5sxJbp9M8TFOmqG3Ty2", "comment": "Heh...I was just playing around...you know...runs", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugh6XoP35okMlngCoAEC.8TF5sxJbp9M8ZZ3Bz6Z0sO", "comment": "SQL in 10 minutes, sams teach yourself", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugh6XoP35okMlngCoAEC.8TF5sxJbp9M8h13pqgmWcX", "comment": "W3 school? The sql manual?", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Uggosg7oT68Kf3gCoAEC.8TF5V_grgyC8TFA4kkx_6G", "comment": "True, and both ways have their advantages and disadvantages. Let's say you have a really long string, like loading an entire file (not generally a good idea to load it into a string, use buffers or something instead, but this is an example), then null-terminated strings are smaller, as you'd need more than the size of a character to represent the length of the string if the string stored its length up-front, while the null-terminated string would only add the size of an additional character. Now this isn't a large amount of space, but because scenarios like this exist, the string data type in many languages use large numbers like ints or longs, even if the string is only very short, meaning if you're using hundreds or thousands of strings in a program (for example think about localization files for programs or games) then you're using up a lot more memory this way.  On the other extreme though, there are many calculations where you want to know the size of the array, but don't wish to modify or read the array, just know its size, in a null-terminated string the entire array must be iterated down until the null is found to calculate the size (it can possibly be stored afterwards so you only iterate once, but anyways) while storing the size up-front allows you to simply read this value, making these types of operations faster.  So both have some advantages and disadvantages and if you're lucky enough to be using a language where you can choose to use either or then choose based on the task, and otherwise other languages that don't have them sometimes have ways for you to implement them yourself if need be.", "votes": "3", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Uggosg7oT68Kf3gCoAEC.8TF5V_grgyC8TFB4WYOpox", "comment": "There is one more disadvantage of null-terminated strings: you cannot store nulls inside the string, as they are interpreted as termination signs.", "votes": "5", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Uggosg7oT68Kf3gCoAEC.8TF5V_grgyC8TFtPq8jwEj", "comment": "If you store your strings as immutable structures in memory, the size issues kind of vanish, depending on whether or not length references number of bytes, or number of UTF-8 glyph encodings(Which can be different). Moreover, you can have multiple variants of \"String\" all implementing the same interface, and encoding length as different width values in the structure. Though, as soon as you get past the length being one byte, it's pretty valid to stop caring about what data type you're encoding length as(Max for a 1 byte value is 1:256).  Now, if they ARE mutable, things get fun, and you get into heuristically predicting the possible max size of your string, and giving it a data type wide enough for... however long your string gets. Granted, if your string gets beyond about 9 QUINTILLION characters(on a 64-bit processor, which is the modern standard) you have a very different problem.  All told, storing the length of strings has a great many advantages over not doing so, and most modern languages DO do so, because most concerns of space sort of evaporate in the face of modern hardware, and the vast amounts of memory available(Not to mention the fact that 8 bytes to store the lengths of the longest things humans have ever written PALES in comparison to what 8 bytes of length can store)", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Uggosg7oT68Kf3gCoAEC.8TF5V_grgyC8TGDr0qmlL8", "comment": "The main problem with null terminated strings is that you have to be careful of the target size of the character array, this is why you should use strncat rather than strcat. Also it is easier to resize a target string because you can easily determine the size of the strings without traversing the source arrays then allocate the desired memory and do the copy. In fact overall null terminated strings are considered unsafe programming because there is the risk of someone using a buffer overflow to hack you if you don't carefully determine the lengths.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Uggosg7oT68Kf3gCoAEC.8TF5V_grgyC8TGJ7UjBinq", "comment": "+Piotr Zaborski you typically wouldn't want to stored null characters in a string, it's a special character", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Uggosg7oT68Kf3gCoAEC.8TF5V_grgyC8TGKPW2V1ir", "comment": "You may want to store wide characters or unicode, then the null terminated array just won't cut it. It's an outdated concept. Used it a lot once but it just doesn't work in a global market.", "votes": "2", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Uggosg7oT68Kf3gCoAEC.8TF5V_grgyC8TGWzvfrjPB", "comment": "Probably best to just adopt strings that are both sized and null terminated, so you can have a double safety net and maintain a level of compatibility between systems that require one or the other.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Uggosg7oT68Kf3gCoAEC.8TF5V_grgyC8TH4N9QaJmY", "comment": "+Mike Meyer I meant to type hundreds OF thousands, not or. But how often do you deal with game programming? Because when it comes to games where you have gigabytes worth of assets every memory optimization can make a major difference, to the point where people are even concerned over the size of pointers themselves. When you're making a game, or a server for example that may have hundreds or thousands of people on them (this time I meant \"or\") storing their names, and other info about them, plus localization files translating every sentence of dialogue in the game into other languages, etc, you'll end up finding that you use a lot of strings, so making sure you use them as optimally as possible is important in a game.  Secondly stop putting words in my mouth. I did not say loading an entire file is a bad idea, I said loading it all into a damned string is generally not a good idea. Usually in large programs data isn't structured in a format like YAML, JSON, XML, etc, large multi-GB assets are usually of a more binary format where the action you take next depends on the data you received previous, thus loading the asset may require seekable locations in the file. Reading data into a large section of memory is very different than loading it specifically into a string. When you allocate a large section of memory like you mentioned you usually also store the size of that section of memory as well, and you could do that with a string. I was simply trying to give a damned example of how one type of string is better than the other depending on whether you have a lot of small strings, or a few very large ones. If you're going to try to correct someone please pay attention to what they actually say and not what you think they said or whatever you skimmed over.  Many of the more efficient game engines load files directly into memory and then cast the pointer to be of a pointer to a struct, so that they save and load data directly already formatted. When you say \"bad intuition\" how that reads to me is you're saying that other people are pathetic at coding and you're coming off as acting like you're superior to others. I've been programming for 14 years and yet the way you worded your comment made it sound like you didn't think I programmed at all, which is a rather stupid assumption. I've seen you around this channel several times before and nearly every time you reply to someone it's in a condescending manner.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Uggosg7oT68Kf3gCoAEC.8TF5V_grgyC8TI1GhgIbRp", "comment": "+Mike Meyer yes, in a way. I don't do much with games at the scale many do. But I know several people on the internet to whom this type of optimizations is literally essential to their job. Relative pointers are a fairly big deal to many developers of high-end modern games and game engines. I mean you're dealing with millions of pointers per frame when dealing with large complex games, meaning in addition to the actual data being stored. If you have a struct storing a short player name (like 8 chars in ASCII not Unicode, so 8-bit), and like 3 integers (32 bit) that keep some scores and etc. The data totals in this case either 21 bytes (using null-terminated) or 24-28 bytes (depending on whether it's int (4-byte) or long (8-byte) sized strings). Meanwhile on 64-bit systems the pointer itself is 8 bytes, which is approximately 20-25% of the size of the data, which is not insignificant. Meaning if you had 1 GB worth of this type of data you'd have about 200-250 MB of RAM used just for pointers. on 32-bit systems it's not as bad because it's only 4 bytes so about 11-13% of the size of the data. Then when you deal with more complex data structures like linked lists where a pointer is storing the next node, you have have a data type there that's 4 or 8 bytes or slightly more or less and then the size of the pointer can sometimes even exceed the size of the data. And while I'm giving a game example, also think about server applications, maybe a database software that caches results to speed up querying.  Even though we have lots of memory these days to throw around, doesn't mean we should just do so. There's a pattern evolving where languages these days are trying to be so safe that practically anyone can use them without making certain types of mistakes, and while that's cool in concept it's causing most people introduced to coding these days to be taught methods of coding that are generally considered bad practices. In 50 years how many people will we have that know how to program well enough to be the people who write the compilers, who write the base engines that everything runs on, the operating systems, etc, when everyone has been taught to forgo the effort of memory optimization because we'll just throw more memory at it. Being someone who has a lower-end computer, it does upset me when developers intentionally waste resources they could use more efficiently, for the sake of making their lives slightly easier. There are so many horribly optimized programs on the internet that can't run on my computer, not because my computer isn't good enough to run those types of programs (because I can run even more sophisticated ones when they're actually optimized) but because the developers took the mindset of \"Oh these days people have lots of memory so we don't have to worry at all about trying to be efficient in any capacity at all\", to the sufferance of the percentage that don't upgrade their computers every year or so.", "votes": "1", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Uggosg7oT68Kf3gCoAEC.8TF5V_grgyC8TIIx2QSCm-", "comment": "I see, upon reading again I see how you meant it. And such is why I don't trust the way colleges/universities teach this stuff. I haven't gone to college for computer programming or computer science and yet when I chat with people who have I don't feel like I'm missing out on anything, I've chatted with several people who have gone through university or college and I explain why I dislike certain programming practices and several people have told me that after hearing the explanation they don't understand why the school taught that concept. Another problem is that As more people enter the field that don't have adequate knowledge of more complex programming, the more the need for such libraries. The more libraries available the easier it is for someone who doesn't know fully the consequences of their code to make stuff. And when programming jobs are one of the most demanded fields these days, many companies will take what they can get, often times business leaders aren't exactly the coding types themselves and don't realize how it affects the work environment. These practices and restrictions make it easier to create lower quality products, while simultaneously restricting good programmers from being able to do good work, because they have to deal with workarounds or arbitrary restrictions, often by the language itself. There's a reason most high-performance software is written in languages like C/C++, it's not the speed, there are languages of comparable speed out there, but most of said languages impose stupid restrictions like not allowing you to work with pointers in favor of garbage collection, which in small programs is fine, but in large programs is deathly slow, and prevents good programmers from actually making use of their skills, by placing them in an environment that promotes worse practices and penalizes generally good practices. ( Note I wouldn't consider myself one of those \"good\" coders, but I would say I'm quite above average these days ;/ )", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Uggosg7oT68Kf3gCoAEC.8TF5V_grgyC8TInBL7e7ya", "comment": "\"If you have a struct storing a short player name (like 8 chars in ASCII not Unicode, so 8-bit)\" ASCII is 7-bit, so 8 chars could use just 7 bytes if you are memory constrained. Even better, many of those characters and non-printable or punctuation marks, which you probably don't want or need for user names, so you can restrict to something like base64 and use only 6 bits per character.  \"The data totals in this case either 21 bytes (using null-terminated) or 24-28 bytes (depending on whether it's int (4-byte) or long (8-byte) sized strings).\" Or you can use 8 bits long size variable for short strings and have the same memory usage as null-terminated strings. I mean, there is no rule in programming that prevents you from using two slightly different string representations. If you provide a common API (like size() returning int in both cases), there is really no added complexity in your code. My point is \u2013 for large strings memory difference doesn't matter, and for small strings you can use simple, specialized implementation. I'm not saying that it's easier or better than null-termination. But it's definitely not an unsolvable problem.  \"There's a pattern evolving where languages these days are trying to be so safe that practically anyone can use them without making certain types of mistakes, and while that's cool in concept it's causing most people introduced to coding these days to be taught methods of coding that are generally considered bad practices.\" The thing is that even experienced, \"old-school\" programmers make mistakes and old code is often full of glaring problems that are being exploited years later. So it was quickly realized that to produce good code even good programmer sometimes needs help \u2013 from runtime, complier or a language itself. Computing evolved and so did programming challenges \u2013 we don't need to worry about memory consumption most of the time but programmers in the 70s usually didn't need to worry about remote attacks by state-sponsored actors. So I don't buy this \"programmers nowadays are lazy and uneducated\" argument. To me it seems that you are evaluating 2010s reality with 1970s metrics that \u2013 if not completely irrelevant \u2013 are not a top priority any more. And by the way, Knuth coined his famous \"premature optimization is the root of all evil\" phrase in 1974. Prioritizing ease of maintenance over every bit of efficiency is not exactly a new concept.  \"most of said languages impose stupid restrictions like not allowing you to work with pointers in favor of garbage collection\" They mostly do this not because of garbage collection but because pointers are unsafe and require a lot of attention. And we all cut corners sometimes...", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Uggosg7oT68Kf3gCoAEC.8TF5V_grgyC8TJizs8OL4R", "comment": "+Mike Meyers I never said anything about the history, I'm well aware it used to be taught properly, I never said it wasn't, I said the way it's taught these days. And yes, of the more modern languages out there, Rust is actually one I like the direction of. I know that C++ has GC, but you don't have to use it, the GC is only used when you specifically reference it  and decide you want to use it. i was talking more about languages where it's on all the time and you don't have a choice, for example Java as you mentioned. And Garbage collection can be beneficial for sure. The reason I keep bringing up the example of games is because that's the type of programming I work with most. And GC for games can be a nightmare. I games you tend to have a lot of small objects, versus a handful of really large ones (you have those two but those large objects really just store the smaller ones), and when a game may allocate and no longer use hundreds of thousands or millions of objects per frame or per tick cycle, having the garbage collector periodically have to cycle through all of those references can cause some major stuttering. Another thing is that one major optimizations that most games do is heaping, we get a massive chunk of memory from the operating system at once and reuse it, we don't create and throw away memory locations as OS allocation and deallocation calls are actually pretty slow when you're trying keep really low render and update times. So we'll end up having our own utilities for managing memory, and using pointers is extremely important when it comes to this. Garbage collection doesn't tend to work well here, at least not stock, if we need garbage collection we have to make our own that interfaces with our memory management instead of interfacing with operating system memory management. One such system I've seen is a delete queue, when memory is allocated that only needs to exist for that update, its pointer can be added to a delete queue, and between updates the delete queue is traversed and managed, similar to garbage collection in a way, only without reference counts (as we only add memory we know won't be referenced next update) and every update instead of every few seconds or minutes so it's effect is pretty much not perceivable. Another thing, we may sometimes use utilities that use reference counting, but instead of checking periodically, a quick check of the reference count is checked upon a reference being lost, so that the memory is cleaned immediately.  +Piotr Zaborski except if you wish to use extended ASCII then it's 8-bits, and secondly if you're going to store 7 bits per character, that is possible, but the language has to have support for it or you have to create your own utilities, using tools like bitshifting and bitwise operators, which makes effective use or memory at a slight cost of increased computation time. RAM is more plentiful than CPU time under most cases, and in games both are important. About using 8-bit long strings for short strings the language has to have support once again for doing so, and not all languages do. Some languages have specific types, a handful of languages automatically type depending on length, but most languages and especially most modern languages that take the philosophy of \"make it easy enough for anyone to use without making many mistakes\", don't have this ability, not even the ability to make it yourself without seriously costly hacks. And about your comment on programming having changed. Yes I understand, I didn't say the changes were inherently bad all around, but for certain industries, such as once again games or other extremely time-sensitive highly interactive responsive systems that use a lot of resources and have to do it fast, the changes that almost all modern languages make literally won't allow developers of such software to do practically any of the optimizations they need to to get their programs running at proper speeds. You try writing one of the modern triple-A titles on most modern programming languages and see how damned fast it runs. When you're dealing with these types of programs it's not a small issue at all, and no where near irrelevant. As for the pointers are unsafe. This is true, but oh hell \"We have a really powerful language feature that has the potential to be dangerous if a mistake is made, so let's prevent them from using it at all period\". That's the attitude the industry is going towards and it's completely putrid. Pointers are dangerous, but the ability to use and manipulate them is essentially the most important feature for many entire types of programming. Go talk to almost any developer of any large game and ask them how often they deal with pointers. They'll tell you many many times, every single hour. They are dangerous, but they are powerful at the same time. You seem to over and over ignore the fact that I'm talking about specific industries within the programming environment, I'm not talking about general-day trivial programs. I understand maintainability, but instead of using a dumbed down language that treats people like no one is ever able to make the right choices, how about people actually learn different programming patterns. Your philosophy is to put more padding over anything remotely dangerous, rather than work towards providing utilities that make those tasks easier to debug. It'd be a fairly rivial feature to add to a compiler the ability to compile with an optional flag to track pointers. aka all references and references, increments and etc would all be wrapped in a debugging class that can then be profiled, oh wait, utilities like this already exist and make such jobs fairly trivial, but no one uses them because everyone's more concerned on lowering performance by going the other directions. These newer safer languages are fine for general use, in fact I use a few of them myself, but when I want to actually code something where the performance matters a lot, such as a game, a video editor, a 3D rendered, a compiler, etc, I'd use a language like C,C++, D, or even ASM.  All programmers make mistakes, the thing that good programmers do is they go and fix them. They don't ignore them. You say \"premature optimization\", then get some context, have you ever worked on or coded part of a game engine? If you have and you haven't considered any of the optimizations that have been mentioned so far then the engine probably would handle making a game the size of most modern games. There is a place for all forms of optimization, \"premature optimization\" refers more specifically to doing these optimizations from the start, not doing them in general. Get your program up and running and then worry about performance.", "votes": "1", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Uggosg7oT68Kf3gCoAEC.8TF5V_grgyC8TK2bsDKyXP", "comment": "+Mike Meyers to damned hell, I never said anywhere in my comment anything about me applying this philosophy across all programming applications, this is yet another case of you putting words in my mouth where there were none. I simply game examples from one specific area, I never said that anything I mentioned applied to other fields, so for goodness sake. If there's one thing you really need to work on it's learning to actually understand what someone's saying and not putting words in their mouth. It's really starting to piss me off the way you act here. I never said 90% of what you just claimed I did, I only made claims *within the context of game programming*, never generalized, this is now the third time you've completely misunderstood every single thing I wrote.  Also please pay attention to how I specifically talked about standard garbage collection that is part of the language itself and not allowed to be controlled, I made no mention of garbage collection being bad when you have the ability to choose when and how it's used. My entire comment hinged on me explaining my disgust in very specific programming languages, languages like Java \"you don't have to not use GC at all, you just have to not use it when it might impact those constraints\" you CAN'T choose when languages like Java perform garbage collections, you also don't decide how or what, not in a way that gives you much power over it at least. You can tell Java which garbage collector you want and a handful or params, but in the code triggering garbage collections in java requires some quite hacky solutions. In languages like Java everything is garbage collected, the interval and how much is collected at a time depend on a few things, you can use the incremental collector which doesn't collect all of it at once, and that reduces the affects to micro-stutters instead of second-long stutters, but in java you can't not use garbage collection, unless you deal with the stupidly boilerplate and messy code needed to deal with Java Unsafe. If the language allows you control over the garbage collection it's fine, it the language forces it, that's something I dislike.  This entire conversation started, I mentioned some benefits and downsides to certain ways of representing datatypes, and people replied back with \"you an use both\" To which my argument was and still is  that \"specific languages do not let you, most modern languages and some old ones even prefer making things overly safe while not letting people access the utilities required to do certain jobs. If the language doesn't allow you lower level access you can't simply use both types, because you can't really make an efficient version of the type to use. If the language doesn't allow you to specify details to the garbage collection and forces you to use it, then that's also a problem in my opinion. I know that I can just stay with the languages that don't have these constraints, but hat doesn't change the fact that more and more languages these days are becoming these languages that inhibit the ability to use such tools by placing too much safety in front of the languages functionality. I just feat that in 30 years from now there will barely be anyone who knows enough to be the people working on the underlying infrastructure. How will people be building compilers 30 years from now, how about updating existing ones to work on future architectures. If the most they know is more modern languages, what happens when the language they know no longer works on their new systems because no one has updated the compiler. If someone writes a compiler in java for example for another language, what will happen once the JVM no longer works on a new OS and no one knows how to understand the code for the JVM, or what happens when even more so the compiler for compiling the code for the JVM which their compiler for another language needs to be updated. Obviously there will be people who can update these programs, that's not in question, but the percentage of people who will have the skills for that type of work will be rarer than they are now and were in the past. It's fine to continue working towards safer easier to use languages, but people still should be taught how this stuff works and still be taught lower-level concepts, even if they don't use them that much.  In summary I feel that languages should still have the functionality, just implement it in a way that newer programmers can ignore it, but that others can use it if needed. Either through an advanced standard library, or through compile-time directives. Like I said, in Java you can manage pointers, but it's ridiculous to do though Java Unsafe, sure Java lets you do it, but it makes it so tedious to implement that all it serves to do is inhibit people who wish to use it. It's possible to make a language with support for things like pointers, operator overloading, direct memory management, etc, and make it so that others don't have to use the functionality. The problem is that we have most languages being 1 of 2 options, either you need to use these features, which could make people who aren't educated on them cause large problems, or we have languages where you really can't use these features which only makes more advanced coders job harder because now they have to work around these layers of protection. We need more languages that allow most programmers to create good code, but still provide the facilities to allow great programmers to make great code. I wouldn't even consider myself close to being great at coding, but still I understand how ridiculously high-friction the environment for any of them are, some friends of mine are extremely adept with code and we chat often about how annoying it is to many of them.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Uggosg7oT68Kf3gCoAEC.8TF5V_grgyC8TKVhii-uez", "comment": "I regret drunkenly commenting on this thread.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Uggosg7oT68Kf3gCoAEC.8TF5V_grgyC8TL8jKrW5ui", "comment": "\"About using 8-bit long strings for short strings the language has to have support once again for doing so, and not all languages do.\" Or you can create your own implementation, it's not that hard. I mean, at one place you are complaining that low level, efficient programming is becoming a lost art but at another you seem to suggest that either language has a direct support or we are screwed. I'm not sure what your point is.  \"You try writing one of the modern triple-A titles on most modern programming languages and see how damned fast it runs.\" That's why modern triple-A titles are not written in Java or Python, while other types of programs are. Different languages for different problems. You keep mentioning games. That's a perfect example of a field that needs extremely fast code but can be riddled with bugs. It's one of these fields where efficiency is prioritized over safety. However, different programs will have different priorities. Web server doesn't need to display 60 frames per second but on the other hand buffer overflow could be disastrous for it.  \"You seem to over and over ignore the fact that I'm talking about specific industries within the programming environment\" No, it's you who seem to generalize your experiences in one field on the entire domain. When you write things like \"most of said languages impose stupid restrictions\", it sound like you think every language should be a good fit for your use case. All I'm trying to say is that no, they are not \"stupid\". They simply try to solve different problems than you.  \"I'm not talking about general-day trivial programs.\" \"General-day\" doesn't imply \"trivial\", I think you are showing a bit of a bias here. The site you are on right now, Youtube, was written in Python. I guarantee you that it's not a trivial program. Hell, Facebook is written in damn PHP.  \"Your philosophy is to put more padding over anything remotely dangerous, rather than work towards providing utilities that make those tasks easier to debug.\" For a person that complains when people twist your words, it would be great if you weren't doing exactly the same. I haven't said a word about my philosophy. I'm only pointing out that those \"modern\" languages that you are so quick to dismiss have a merit too.  \"when I want to actually code something where the performance matters a lot, such as a game, a video editor, a 3D rendered, a compiler, etc, I'd use a language like C,C++, D, or even ASM.\" And that's totally fine. Again, what's your point? That most modern languages specialize in what most modern programmers do instead of excelling in rather niche fields?  \"All programmers make mistakes, the thing that good programmers do is they go and fix them.\" The biggest problem with mistakes is that they are hard to spot, not hard to fix. Fairly regularly I hear about bugs in code bases that were discovered after a decade and fixed within two days.  \"Like I said, in Java you can manage pointers, but it's ridiculous to do though Java Unsafe, sure Java lets you do it, but it makes it so tedious to implement that all it serves to do is inhibit people who wish to use it.\" Speaking of Java, I think its success and popularity in many fields is the best evidence that those fields don't need direct pointer management.  And speaking of \"modern\" and \"old\" languages: C was created 45 years ago, C++ has almost 35 years. Both are massively popular to this day and I'm fairly sure they will remain popular 30 years from now. The reason why most newly designed languages are the way they are is that they were created to solve problems that older languages didn't need to solve. 30-40 years ago we didn't have web servers, smartphones and ubiquitous personal computing. It's perfectly understandable that lower level programming is done using older languages because they were designed for it and are still a good fit for the job. On the other hand, it's also understandable that most modern languages are higher level because that's the field that was underdeveloped for a long time and they try to fill that void.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Uggosg7oT68Kf3gCoAEC.8TF5V_grgyC8TMKZG9geqz", "comment": "+Piotr Zaborski It's almost as if you skimmed over it or read it in such a way where you immediately thought everything I said was a persona attack or something. In every single one of my comments I never generalized to all fields, I always talked about problems in relation to specific industries and languages. I never said memory problems or efficiency concerns with memory use or language/language feature use were a problem in every single field, I mentioned specifically low-level fields because without all those low-level fields you wouldn't have many of the the frameworks to work on the high-level stuff. So my entire argument is that in 50-100 years from how how many people will have been trained to be able to maintain and update the infrastructure that allows everyone else to use these higher-level constructs. There's nothing wrong with these higher level concepts and languages, my main point is that there is still a place for languages like C++ (obviously as it's still very popular), and yet most schools are teaching less and less of it. Of every single thing I ever mentioned here in this entire chain of comments, that was my main concern, that people aren't being taught certain languages or language concepts as much, even in the fields where they can be important. (sorry to use games as a reference, but many schools now teach how to use a specific game engine like UE4 versus learning more than absolute basics of graphics programming), and similar lapses in what is taught can be found in other areas.  As for the why triple-a titles aren't written in Java or Python, you literally said exactly what I just said, so what exactly is your argument here, that's exactly what I said and was exactly my point. But I know different programs have different priorities, many large corporate software is slower because they prioritize maintainability, as it needs to be updated regularly, and that's a valid sacrifice, I don't have problems with that. My concern comes only from how schools, including elite collages and universities are teaching fundamental skills less and less each year and moving towards only teaching higher level concepts. That was and is my only damned point this entire conversation.  \"And that's totally fine. Again, what's your point? That most modern languages specialize in what most modern programmers do instead of excelling in rather niche fields?\" While they may be niece fields but: Game development is a really fast growing industry with the indie scene exploding rapidly, I wouldn't really call it niche anymore. Compiler development, while niche is um, kinda important, to reiterate what I said earlier, when people are learning less and less the low-level skills, then in 50-100 years how hard will it be to find someone who can maintain these compilers so that other people can even code to begin with, while many compilers themselves are written in other languages, then compilers or interpreters for those languages also then need to be maintained. eventually looking backwards through the languages used to write even the most high-level compiler out there somewhere down the line there will be a dependency on something low level, possibly even machine code or at least ASM. THIS is my primary concern, I simply feel that the education shouldn't teach less of this stuff, it should still be taught, not necessarily in all fields, but in more of them. Now note, schools do still teach low-level concepts and fundamentals, but they are teaching less and less every year, that to me is in a problem because that could mean that in 20 years people aren't taught it at all. Even if there are people who then still know how to do these tasks, they'll be rarer and thus updating will take longer and be more expensive.  Yes mistakes are very hard to find often, but memory mistakes are becoming easier and easier to find. There are as I said tools within certain compiler tool-chains that allow you to build versions of the game that wrap your code in layers that allow the process to monitor the systems at work, so you an see the memory usage, and specifically what parts of the code are using more memory, and which parts increase their memory, or track the number of allocation vs deallocation calls globally, file-scope and function-scope, and it makes debugging memory errors magnitudes easier than several years ago. Logic mistakes can be hard to find many times as well, but that would be a problem regardless of the language you use, these problems are most easily aided by good commenting and documentation, although that costs time so many people don't do so.  And as for java, yeah, many fields don't need direct pointer management, and that's good, there are edge cases as well, where the problem may not need pointers but could benefit quite a bit from being able to use them. many corporations want to have working code, and people to code it, so if more people know Java and are easier to find than other languages, unless the job is nearly impossible to port over or already setup with large amounts of infrastructure behind it, then it's not unforeseeable that they'll move over, even it it makes specific tasks harder. Java enterprise-style code is quite structured, in such a way that's fairly unnatural for fast production. The work environment can have a lot of friction, classes tend to ave long descriptive names (which is good for maintainability and understandability, but does reduce the production speed). In such cases where functionality is needed that does require pointers however, although rate, still existent, then the programmers who know how to do the task then create utilities for such operations that then allow other coders to use it easily. Now this same practice could be put to use in other languages, if you wanted less risk of people making memory errors or such in your program, you can have the coders who are more experienced with that type of code make utilities that abstract that specific part of the implementation away for others. And if the language supports compile-time code introspection, you can even raise compiler errors on any dereferences and pointer use outside of files that define a specific value or are not certain names.  As for your last comment I agree. I don't have any problem with modern languages themselves, again, my problem is taught people are less and less being taught anything but them. Although I do wish there were more modern languages that were still low-level, there's a lot of really good concepts in modern languages that low-level languages could probably deal with having, but some of these features are found on a handful of modern languages that specifically don't have certain low-level access. It would be nice for more modern low-level languages to still be created, as they too can benefit from that \"what can we change now that we have less restrictions and more powerful tools at our disposal. I'd say compared to C/C++, D is more modern even though it's been around for over 10 years. But one feature it got rid of was headers, because modern-day systems can generate the equivalent information for the linker automatically, and forward-declaring is something many modern languages get rid of because the reason it's in many older languages was because of limitations at the time.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Uggosg7oT68Kf3gCoAEC.8TF5V_grgyC8TMQjv-aeMf", "comment": "\"In every single one of my comments I never generalized to all fields, I always talked about problems in relation to specific industries and languages.\" Well, you keep claiming that but in the same time you structure your arguments in a way that suggests the contrary. For example, if you wanted to say that garbage collection and lack of direct pointer management are ill-suited for high performance computing, you should have written that. Instead you've called them stupid. When you want to say \"it's stupid to use X for Y\" and actually say \"X is stupid\", don't act surprised when others interpret it as \"X is stupid\", because that's exactly what you've said.  As for the change in education \u2013 again, I think it has mainly to do with shift in computing. 40 years ago low(ish)-level programming was pretty much the only type of programming there was, so I think it's understandable that we teach less of it now, as new fields developed. I don't think it's valid to extrapolate from this that we won't be teaching it at all 50 years from now. Last I've checked the university I've graduated from still uses C++ as lingua franca and still has compulsory courses on things like computer architecture and low level programming (which is mainly assembly with a dose of lower level features of C++). Admittedly, it also teaches network programming with Java and functional programming with Haskell (not sure if it counts as a modern language but it's only 5 years older than Java). If I remember correctly, the general sentiment (that I didn't share) back in a day was that we were being taught too much of \"archaic\" stuff, instead of for example some popular web framework. Anyway, where I work we are using tons of C++ for practically everything (and Java for web servers) and younger guys and gals have no problem excelling in those areas. So I'm a bit more optimistic for the future.", "votes": "1", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Uggosg7oT68Kf3gCoAEC.8TF5V_grgyC8VvjTKytYhq", "comment": "generally having a null terminated string has more of an advantage, however, having a more array based string has some advantages, such as basically instant lookup of string length", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugilp1MgYQWGeHgCoAEC.8TF4sWDKN6O8TF5y1CdbE6", "comment": "angeldude101 Yes I agree", "votes": "1", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugilp1MgYQWGeHgCoAEC.8TF4sWDKN6O8TF7J2UBi6v", "comment": "That depends solely on the implementation. In the end a graph is like a tree or list. It has a value for each node, and several values for neighbors.  A linked list is a specific kind of graph as is a tree.  The implementation is dependent on the language you use or your intended use if you build the structure yourself using simpler datatypes.  In the end it goes (as so often in programming) two ways: Either it's fast, but uses a lot of memory (for redundancies to access the data quicker instead of traversing memory) or it's small but takes longer to get from one node to another.  I'm fairly certain that the series will address that \"law\" of programming.", "votes": "5", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugilp1MgYQWGeHgCoAEC.8TF4sWDKN6O8TF9RKwSrF6", "comment": "Sure, graph is more of an abstraction. But the same could be said about trees, heaps, queues etc. There are many implementations for each of those.", "votes": "2", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugg8RhzV3Z515HgCoAEC.8TF4DS0wL808TF6VUyTcjY", "comment": "Allocation is an expensive operation, but allocating many small objects is more expensive than a single large one. Doubling the size of list of length 10 makes 10 discrete allocations for a linked list, but only 1 and a memcpy for an array. Additionally, accessing a node of a linked list requires traversing the entire list, or even worse, suffering a cache miss on every node. People don't think about it very much, but cache misses can be as devastating to performance as a larger big-O.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugg8RhzV3Z515HgCoAEC.8TF4DS0wL808TF7HsC-WH2", "comment": "Linked lists are pretty much the simplest data structures that use pointers. Their value is primarily educational, just as selection sort is often used as an example of a sorting algorithm, even though it's rarely used in CS practice.  As for zero-indexed arrays, in 0:58 she says \"Almost all programming languages start arrays at index zero.\" \u2013 almost, i.e. not all.  As for zero-terminated strings and a statement that \"most languages nowadays don't use null terminated strings at all\": two out of three most popular languages according to https://www.tiobe.com/tiobe-index/ use zero-terminated strings. But you are right, it's far from the only option and it could be clarified in the video.", "votes": "1", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugg8RhzV3Z515HgCoAEC.8TF4DS0wL808TF7IqZ58ia", "comment": "A megabyte sized array sounds bad, but expanding it doesn't even necessitate a memcpy. If you know you'll be dealing with arrays larger than 4 kiB, then it can all go into a single page and expanding it just requires the kernel to allocate a new page and shuffle some things around. That's way cheaper than allocating a thousand nodes that zip around the whole address space. Alternatively, keep your array on disk and only map in 4kiB of it at a time.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugg8RhzV3Z515HgCoAEC.8TF4DS0wL808TF7nyUCnt4", "comment": "angeldude101 What is most effective between linked lists and arrays depends on the circumstances, both have pros and cons, for instance arrays have random access while linked lists have dynamic memory. Now to answer the rest of your comment, I think the reason they don't mention all that stuff is because they are trying to keep things simple.", "votes": "1", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugg8RhzV3Z515HgCoAEC.8TF4DS0wL808TF7xYOBS4t", "comment": "Depending on what you want to model, you might simply need something like a linked list (or tree or graph). Arrays are (usually) the smallest way (in term of memory usage) to store that data, while your code will have to deal with traversing and retrieving what you need (thus taking a bit longer). Other implementations closer to an actual linked list might have redundancies stored with the data to be able to access the data faster, but will need more memory to do so.  The simpler the language, the more likely it \"only\" supports arrays in the first place and you will have to implement more complex structures using those (or use libraries of others that already did the feat).  Linked lists and especially trees are mostly used in to index larger data collections to access data quickly (like in a relational database).", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugg8RhzV3Z515HgCoAEC.8TF4DS0wL808TF9PWQnqS_", "comment": "\"struct\" instead of \"structure\" is pretty common. I agree that she should have pointed out not all strings are null-terminated. But zero-indexed arrays are ubiquitous enough that it's true for most cases. Lua is actually the only commonly used language *I personally* know about that doesn't use zero-indexed arrays.", "votes": "1", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugg8RhzV3Z515HgCoAEC.8TF4DS0wL808TF9xZ2vm8O", "comment": "dkSilo OK. I don't know much about relational databases, so it's possible they store information in a tree or linked-list like structure.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugg8RhzV3Z515HgCoAEC.8TF4DS0wL808TFAZvR78Y4", "comment": "@almost everyone Most modern languages support the idea of dynamically-sized arrays \u2013 like C++'s vector or Java's ArrayList, so dynamic size isn't really a linked list's advantage. Pretty much the only advantage of linked list that I'm aware of is that elements can be inserted in the middle, which is rarely useful in practice (in my experience).", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugg8RhzV3Z515HgCoAEC.8TF4DS0wL808TFBTnX6X1d", "comment": "People say that inserting into a linked list is faster than an array, but in both cases it's O(n), finding the element for the linked list or copying the elements of an array. Except that it's closing to array insertion being n units of time while a linked list is closer to 50n units of time. For the one use case that linked lists are said to be faster, it's in fact  far slower. What's faster, knocking on every house on one side of a street, or asking the owner where the next house is and walking across town? People might not think that the \"walk across town\" part applies to a computer but it does.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugg8RhzV3Z515HgCoAEC.8TF4DS0wL808TFCp5IbXMD", "comment": "@angeldude101 To play devil's advocate: You are assuming that the only way of accessing a list's node is by traversing from head. That's not always the case. Also, if insertion happens at or near head, it's O(1).", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugg8RhzV3Z515HgCoAEC.8TF4DS0wL808TFD63kGsOv", "comment": "Piotr Zaborski And inserting to the tail of an array is also O(1) most of the time. Also, linked lists are not write-only memory. It's going to be accessed at some point.  Just did a quick benchmark. In roughly 1 and a half minutes, I was able to insert 200000 into random points of a linked list. The same operation on arrays (supposedly worse at this exact thing) in the same time was performed 1000000 times. That's 5 times as many operations in the same time.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugg8RhzV3Z515HgCoAEC.8TF4DS0wL808TFRMZZTYnP", "comment": "> inserting to the tail of an array is also O(1) most of the time. If you are willing to waste space and do not care about the fact that you might run out of contiguous space, yes.  > The same operation on arrays (supposedly worse at this exact thing) in the same time was performed 1000000 times. How many times has the array been resized during that run? How many times it had to move to a new contiguous space region? Not all programming languages allow for realloc() like in C, btw.  Linked lists often make sense in combination with other data structures, like a tree e.g., where all leafes are connected by a linked list. Here is a nice example of a clever data structure that utilizes a list: https://en.wikipedia.org/wiki/Pairing_heap .  For most cases (like 97% or so) arrays (or vectors like the one in C++) are the better choice but there can be situations where lists are better. One has to know both to make a sensible descision when to use what.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugg8RhzV3Z515HgCoAEC.8TF4DS0wL808TFS8U1i9Al", "comment": "I have no idea if Go, the language I wrote the benchmark in, uses realloc. \"run out of contiguous space.\" The virtual address space on most 64 bit architectures is 256 TiB. You're going to run out of physical space before you run out of contiguous space. And most dynamic array implementations double when reallocating, so if what you're holding is smaller or the same size as a pointer, the array will always take no more memory than a linked list.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugg8RhzV3Z515HgCoAEC.8TF4DS0wL808TFYZ_zG5RF", "comment": "\"the constant is smaller for arrays\" That's an understatement. And isn't removal/insertion O(1) only after you've found it, which takes O(n)? \"Lists are usually faster for things that change the collection.\" The benchmarks say otherwise. See this link for more: (the title is misleading, it's focusing on number crunching and doesn't mean to forbid them everywhere) https://kjellkod.wordpress.com/2012/02/25/why-you-should-never-ever-ever-use-linked-list-in-your-code-again/", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugg8RhzV3Z515HgCoAEC.8TF4DS0wL808TFjq0uXYR4", "comment": "You may have never seen the linked list get used, buy you have used it if you've ever used a hash map or if you've ever used and adjacency list for a graph.  They are actually used in real code.", "votes": "1", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugg8RhzV3Z515HgCoAEC.8TF4DS0wL808TG0fUx1kiw", "comment": "\"And inserting to the tail of an array is also O(1) most of the time.\" Sure. So if you need a data structure that will often add elements at the end, array is preferable. If you will add mostly at the beginning, linked list would be faster. Different structures for different use cases.  \"Just did a quick benchmark. In roughly 1 and a half minutes, I was able to insert 200000 into random points of a linked list. The same operation on arrays (supposedly worse at this exact thing) in the same time was performed 1000000 times.\" As I've already mentioned: you are assuming that accessing elements of a linked list requires traversal of elements from head. That's not always the case. For example, look at association arrays with predictable iteration order, like LinkedHashMap in Java. Arrays would be much slower for that use case than linked lists.  \"> inserting to the tail of an array is also O(1) most of the time. If you are willing to waste space [...]\" In linked lists you \"waste\" space with each element, as you need to store a pointer to the next one. In fact better usage of memory is one of the main advantages of arrays vs linked lists.  \"You may have never seen the linked list get used, buy you have used it if you've ever used a hash map or if you've ever used and adjacency list for a graph.\" Neither of those requires linked lists.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugg8RhzV3Z515HgCoAEC.8TF4DS0wL808TGM4qeoUxI", "comment": "Piotr Zaborski A hash map doesn't require a linked list, but it's the best structure to use when there are collisions when compared to the risk of not having the contiguous free space when trying to grow an array.", "votes": "1", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugg8RhzV3Z515HgCoAEC.8TF4DS0wL808TGXJyJBzk3", "comment": "@ita6aki Exactly. Especially if your hash map can vary by factors in size, i.e. load factor exceeds some threshold. The case where you need a new bucket array and rehash all elements.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugjx4wqywB0BnHgCoAEC.8TF3q8rD0X18TF543SfrJe", "comment": "I doubt it, it's just a minute detail of string implementation.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugjx4wqywB0BnHgCoAEC.8TF3q8rD0X18TF8EmUkbSU", "comment": "They also skipped over how a non string array knows what it out of bounds or that in older languages you could access \"random\" bit of memory by addressing an index in array that was not defined for it.  Seeing as most modern languages don't allow that and memory size is not much of an issue nowadays, I doubt it will be discussed in more detail.", "votes": "1", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ughq-8usenEPPngCoAEC.8TF3V5Im0SS8TFFJtPxKD0", "comment": "Yep, nice but very, very concentrated. As I was listening I too thought that it might be hard to follow or even a bit misleading for a person new to the material. Universal referents and particular implementations got a bit tangled up. Still, an impressive effort given the time constraint.", "votes": "7", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ughq-8usenEPPngCoAEC.8TF3V5Im0SS8TFNWLRIusB", "comment": "Interesting. As a C# programmer did you find the discussion of stings at all confusing?", "votes": "2", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ughq-8usenEPPngCoAEC.8TF3V5Im0SS8TFQU5SgnW2", "comment": "In my college is the opposite, and we had to build a Java class implementing the basic of each and one of the structures that the video showns. For example in an exam I had we needed to implement a funcion in a binary tree in wich we pass an array of numbers in any order and then the numbers got stored in the tree in order.", "votes": "3", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ughq-8usenEPPngCoAEC.8TF3V5Im0SS8TFUS-7GLRA", "comment": "+Pepys  Thanks, maybe my criticism was misplaced. I suspected that people would watch that and think \"oh, that's what a sting ~is~\" rather than \"that's one good way to implement a string.\"   Your mention of C# jumped out at me since it is an example of a language that does strings differently than presented.    Sorry that I misinterpreted your programming experience.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ughq-8usenEPPngCoAEC.8TF3V5Im0SS8TFaCpvpPln", "comment": "Many CrashCourse episodes are like crammed with a little too much info to get in one pass. Sociology for example.   I tended to work with languages that were weak in data structures so I had to create my own with strings. Slow, but a great way to learn about data structures. (Hint: the secret is to have a delimiter character for each dimension that is never included in the data content.)", "votes": "1", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ughq-8usenEPPngCoAEC.8TF3V5Im0SS8TGhxPUqXgJ", "comment": "You should change your school... Took one class in my school.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ughq-8usenEPPngCoAEC.8TF3V5Im0SS8TIECH6u20H", "comment": "+David Durant I agree. If you initially know nothing about data structures this would be a WHAAAAA???? You would need to go through it several times. I was not confused because I learned this so many years ago in a one term course called (funny enough) DATA STRUCTURES!", "votes": "2", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ughq-8usenEPPngCoAEC.8TF3V5Im0SS8TP95U-q1U1", "comment": "They probably explained it using relative memory locations BECAUSE it's language agnostic. I don't see the value in teaching core concepts in language bound terms that may become irrelevant eventually.", "votes": "1", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ughq-8usenEPPngCoAEC.8TF3V5Im0SS8TWG6S6O9NG", "comment": "I fail to understand most of them. Only some which I've already encountered before watching this", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ughq-8usenEPPngCoAEC.8TF3V5Im0SS8TXB_auIPPd", "comment": "David Durant I'm watching for a 3rd time with a background in Web development and ActionScript lol", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ughq-8usenEPPngCoAEC.8TF3V5Im0SS8UPAIx5n_Jj", "comment": "David Durant I normal watch sections I don't understand again after the video is over until I understand them", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ughq-8usenEPPngCoAEC.8TF3V5Im0SS8XQJIfz6Ctk", "comment": "haha good to know Im not the only one that felt like this video was far more advanced than the previous 14.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ughq-8usenEPPngCoAEC.8TF3V5Im0SS8ppdG2Wcvgv", "comment": "Im trying to teach myself computer science, and I had to play stat .75 speed with subtitles, three times for full comprehension. not taking notes though, I'll start soon.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ughq-8usenEPPngCoAEC.8TF3V5Im0SS8qmPLMoynaH", "comment": "This was my first encounter with data stuctures ever. I can tell that the presenter is very keen about this topic.  Of course this is so much information that i didn't even try to remember any of it.   It's good to watch passively ill probably watch it over again right now a number of times hope I absorb some of the concepts and terms with out thinking too much. Also ill come back later and watch some more.   I like it.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ughq-8usenEPPngCoAEC.8TF3V5Im0SS8sBV6NHWkpB", "comment": "@meLon  Ages ago I took plain old C, and we talked a ton of about linked lists, pointers, queues and stacks.  I've  never run into much use for them in day to day coding in c#.   Arrays and lists all the time, an occasional struct, but much of the other stuff not so much", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ughq-8usenEPPngCoAEC.8TF3V5Im0SS8xfoBsLWipj", "comment": "Not gonna lie, my brain felt like a spinning top! :D", "votes": "1", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgixH_wl4edmyXgCoAEC.8TF3-0iikik99NZGV2TLKc", "comment": "*so", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugi7-GZAsNmfMXgCoAEC.8TF2p24qKKk8TF7yl_hO0Y", "comment": "it does not work like that, look at this index      :  0  | 1 | 2 | 3 | 4 element :  A | B | C | D |  E                      ^ see index 0 is the first element, (what zeroth element even mean)", "votes": "2", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugi7-GZAsNmfMXgCoAEC.8TF2p24qKKk8TF92VjbJEF", "comment": "Zeroth is a term that's used.  See laws of thermodynamics https://en.wikipedia.org/wiki/Zeroth_law_of_thermodynamics", "votes": "3", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugi7-GZAsNmfMXgCoAEC.8TF2p24qKKk8TF9vItfR0o", "comment": "whatever, just take away the index and see that your \"Zeroth\" element is really the first element of the array,  btw why stop at 0 and not just call it the -1 or the -2 or the -n element,", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugi7-GZAsNmfMXgCoAEC.8TF2p24qKKk8TFI-KOV1-b", "comment": "Creuilcreuil _  -1 is the last element, -2 is the second last element etc", "votes": "2", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugi7-GZAsNmfMXgCoAEC.8TF2p24qKKk8TFL2Pi4l_9", "comment": "cool story bro", "votes": "2", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugi7-GZAsNmfMXgCoAEC.8TF2p24qKKk8TFVq6-WxIe", "comment": "This guy isn't just making up some \"0th item\" rule. It literally the industry standard terminology", "votes": "4", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UghOx7cfAM3PAHgCoAEC.8TF22LNmUv48UPAbh5cpkg", "comment": "RaidenLP PBS digital studios also produces artrageous with Nate & The art assignment hosted by Sarah Urist Green. The art assignment is also in the complexly network.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UghOx7cfAM3PAHgCoAEC.8TF22LNmUv48hxlH5m94f0", "comment": "art history! yes please!", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugg_atgfGtbgaXgCoAEC.8TF1FsqMp1h8TFBwiijYy5", "comment": "haha Nope. Atlease not for me. Stupit C++ pointers there the killer.", "votes": "3", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugg_atgfGtbgaXgCoAEC.8TF1FsqMp1h8TGJmt3bgLu", "comment": "+kevindt12 would it blow your mind to realise that arrays are essentially pointers?", "votes": "1", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugg_atgfGtbgaXgCoAEC.8TF1FsqMp1h8TInG8aCA_k", "comment": "Explance please do.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugg_atgfGtbgaXgCoAEC.8TF1FsqMp1h8TM5VmbY1EC", "comment": ".", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugg_atgfGtbgaXgCoAEC.8TF1FsqMp1h8TMYw5qtj_P", "comment": "Once upon a time, programmers used the machine language directly to make the computer run quickly. This removed a layer of abstraction which just slowed everything down. ML is like programming with DNA!", "votes": "3", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugg_atgfGtbgaXgCoAEC.8TF1FsqMp1h8TMaY7HrLhJ", "comment": "you mean assembly.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugg_atgfGtbgaXgCoAEC.8TF1FsqMp1h8TZSamY4TON", "comment": "Assembly is a level of abstraction up from machine language.  ML is the binary code - Assembly is statements like add (r0, r1), mnemonics for the ML that you then run through an assembler to get ML.", "votes": "2", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugg_atgfGtbgaXgCoAEC.8TF1FsqMp1h8TZTzB7g3N5", "comment": "+Martin Olminkhof : Arrays aren't pointers, quite.  Any pointer is just a reference to a memory location.  For array j, there is a pointer to the start of the array, memory address 1000 in the example in the video.  In some languages, this pointer is returned if you just use the array variable without qualifying it with an index.  At 1:15, j[0] is 5, the contents of the zeroeth location in the array.  j by itself is usually 1000, the memory location, but depending on the language, may not be defined.  So arrays are sets of data items that are stored in a section of memory referenced by a pointer plus an offset.  Where things really get complicated, especially in C and C++, is that pointers are data types, and an array can be a list of pointers, and the pointers can be pointing to pointing to lists of pointers, and so on down the rabbit hole.  This is often how multidimensional arrays are implemented. The value of j[0][1] might be found by checking j[0], getting its value as a pointer to the start of the array that holds the data j[0][k], where k is an offset from the pointer stored in array location j[0].  Worse yet, C and C++ provide multiple syntax possibilities for accessing j[0][1].", "votes": "3", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugg_atgfGtbgaXgCoAEC.8TF1FsqMp1h8TZh44jgqxN", "comment": "If you have not hand-assembled ML, you don't know frustration! When coding in ML, one of two things happen. Either it does not work, and you spend a month trying to figure out why - or is DOES work, and you spend a month figuring  out why. This is why I would write routines in BASIC (I'm old), then re-craft them in ML. Make it work in BASIC, Make it fast in ML.", "votes": "4", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugg_atgfGtbgaXgCoAEC.8TF1FsqMp1h8ULWUXA5XWY", "comment": "Please stop abbreviating machine language (commonly known as machine code) as ML; there's a large group of programming languages centered around ML, the Meta Language: https://en.m.wikipedia.org/wiki/ML_(programming_language) Those include Standard ML (SML) and O'Caml. Also, you pretty much only deal with machine code when writing a code generator (such as an LLVM backend) or debugging assembly tools.", "votes": "2", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugg_atgfGtbgaXgCoAEC.8TF1FsqMp1h8UN4-GcGlSu", "comment": "I'm afraid that machine language as a term came long before Meta and its use as terminology, depends on your local area.  I'll also agree that machine language/code isn't used by many programmers these days, but still is employed in some niche applications - embedded systems and video game development for antique video game systems among them.  And not even completely there - both applications often use a high level language like C for the bulk of the work, then hand-code short routines where speed or memory are at a premium.", "votes": "3", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugg_atgfGtbgaXgCoAEC.8TF1FsqMp1h8UQ0AB_k0tF", "comment": "Falbert Forester Exactly. But it is a lot more FUN !", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugg_atgfGtbgaXgCoAEC.8TF1FsqMp1h8ZmRU2ZgsPt", "comment": "Funny, I wish I had seen this a day or 2 ago. Every \"beginners guide\" jumps right into strings, and I'm like okay, great, but what is a string and why am I making a calculator in python.. I came here after some digging around and found out I am missing a lot of the foundation. It's like they are trying to teach you guitar but going strait into a musical scale with out even telling you what a guitar even does.", "votes": "7", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UggzQXzpma7s73gCoAEC.8TF0uPTuBI88TFI4U5BY6r", "comment": "The civilized world wishes Lua would catch up.", "votes": "24", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UggzQXzpma7s73gCoAEC.8TF0uPTuBI88TWT4pOV4hG", "comment": "Lua is like the cousin the family ignored. He's plotting his revenge, just wait and see.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UggzQXzpma7s73gCoAEC.8TF0uPTuBI88c5u1xA8nct", "comment": "So does Julia... and Smalltalk.... and....", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgijQO4DdbOfIXgCoAEC", "comment": "Another fantastic video. Should help me with my Algorithms exam tomorrow \ud83d\ude0a.", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgjnPFGO3hxdFngCoAEC", "comment": "Really nice lesson, keep it up! \ud83d\ude01", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugi6FMvEV6hLmXgCoAEC", "comment": "My comp sci prof taught us about stacks using papers, thank god, had she used pancakes i would've never listened.", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgiPqF1isy4TLXgCoAEC", "comment": "Question:  can a Linked-List (doubly, circular, single, etc.) be put as children nodes in a BST (binary search tree) and what would be the advantage of that besides packing in a lot of information in a tree-like manner for sorting?  If it's possible, what's the general logic to retrieving a particular linked-list node stored in a BST?", "votes": "5", "replies": "19", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgiSeRrDNV2J93gCoAEC", "comment": "Woo early! Where's the scrolling through YouTube when a new crash course appeared squad?     (Is that a thing? I've never asked about squads before)", "votes": "1", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugg6CiGjP_fFCHgCoAEC", "comment": "hey! you didn't play the new level of abstraction clip!", "votes": "88", "replies": "3", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UggPBmDd9cDGVHgCoAEC", "comment": "Taking about arrays starting at zero but not talking about off by one errors. Tisk tisk tisk", "votes": "2", "replies": "3", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UghdZRzRh42v8XgCoAEC", "comment": "0:22 could've fooled me.", "votes": "41", "replies": "1", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgiwTc1dIDcLf3gCoAEC", "comment": "I love these videos and feel that I am actually finally understanding computers! thank you", "votes": "68", "replies": "1", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgiDN9T-3AD2vXgCoAEC", "comment": "You didn't play the \"A new level of abstraction!\" jingle! How could you?!", "votes": "705", "replies": "10", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UghS1I2H2LgTCXgCoAEC", "comment": "If string concatenation = a strcat Then does a string array = stingray?", "votes": "197", "replies": "13", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgjKVqJbFpSLGXgCoAEC", "comment": "A lot of programming languages are very particular about the type of data you give to a function, whereas more flexible ones can accept multiple types. The trade off is inflexibility against precision.", "votes": "13", "replies": "3", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgiyY3rcKCPnNXgCoAEC", "comment": "247th view", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgiPfbDYtFRx9HgCoAEC", "comment": "Who the f disliked???", "votes": "0", "replies": "2", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugh3Jc_rQkznfXgCoAEC", "comment": "two minutes old annnnnd it's been disliked", "votes": "0", "replies": "1", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "Ugim9x7fUqf7ZngCoAEC", "comment": "Same", "votes": "0", "replies": "", "reply": false}, {"vid": "DuDz6B4cqVc", "cid": "UgiPqF1isy4TLXgCoAEC.8TF-0DqB_K38TF-o_N7HBL", "comment": "Um, you mean using a linked-list object being used as nodes of the BST, or the linked-lists themselves are integrated into the tree?", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgiPqF1isy4TLXgCoAEC.8TF-0DqB_K38TF05-TKpzW", "comment": "The first one.  Nevermind, I don't think that's possible since they're two different data structures.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgiPqF1isy4TLXgCoAEC.8TF-0DqB_K38TF0FbKm8VJ", "comment": "I don't see why not, as long as the data in your doubly linked list =/= the data in your BST. i.e. your BST would just be a data structure filled with linked lists. If you're wondering if you can store data from a linked list in a BST, also very possible, but then what would you use the linked list for? The addresses for the data you want should all be in the BST,  and easier to get to.", "votes": "1", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgiPqF1isy4TLXgCoAEC.8TF-0DqB_K38TF1GLDOkZp", "comment": "Yeah, it would be possible. the data type of a node on a tree would be a linked list. however, this might not be super practical depending on your application. if you had to do a search, you now have to search a linked list on every given node, which, in worst case, would add linear complexity to search node, changing a BST search from O(n) to O(n\u00b2)", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgiPqF1isy4TLXgCoAEC.8TF-0DqB_K38TF1HEqXiza", "comment": "that's entirely possible. Sometimes you just have tree data that requires that you store a linked list. Basically, in the tree structure struct BinaryTree {     BinaryTree* left     BinaryTree* right     LinkedListNode value }  You could also make LinkedListNode a pointer, which means that all that's being stored by the binary tree is 3 pointers, as opposed to multiple data structures.", "votes": "1", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgiPqF1isy4TLXgCoAEC.8TF-0DqB_K38TF1TOJo_3E", "comment": "This is exactly what's used to implement Fibonacci heaps. Each node has pointers to the parent, one of its children and all siblings are arranged in a circular doubly linked list.  That wouldn't be useful for a binary search tree due to the overhead of storing pointers. In general, linked lists take long to traverse, which is why sorted arrays are used in b-trees, which have more than 2 children.", "votes": "2", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgiPqF1isy4TLXgCoAEC.8TF-0DqB_K38TF1aFQ92l4", "comment": "Elegant. Intuitive. Chaos. C=E+I", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgiPqF1isy4TLXgCoAEC.8TF-0DqB_K38TF1vR8zR5_", "comment": "\ubbf8\uc15c\ube44 You could also use a linked list to store the keys, in which case it's just a tree data structure:  struct Tree{      TreeLinkedList children;      int value; }  struct TreeLinkedList {      TreeLinkedList* next;      Tree* child; }", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgiPqF1isy4TLXgCoAEC.8TF-0DqB_K38TF2-EmE7n6", "comment": "Yeah, I agree with Jeff Bond. It's definitely possible -- I can even see the implementation for it in my head -- but It's hard to see any practical reason for doing it. That doesn't mean there isn't a practical reason floating out there somewhere, though if there is, you'd only come across it purely by accident. I never thought there'd be a practical reason for building a 6-dimensional array where the 1st and 6th dimensions were dynamic while the 2nd through 5th dimensions were primitive, but I ended up needing one to write a sudoku solver.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgiPqF1isy4TLXgCoAEC.8TF-0DqB_K38TF2NFtFINZ", "comment": "It's definitely possible. Think of what a pointer actually is: It points to a place in memory that says \"this is where you will find a struct.\" In the examples given on the video, this struct was just another node in the list, or the next branch in a tree, or something of a similar data type. But there's nothing from being able to put a point in one of your DATA fields. So instead of storing the data of \"the number 7\", your data is 'a pointer to a struct.\"   So in your example, you have a binary tree. You can insert a linked list into this tree by setting the data portion of a node to be the entry point of a linked list. So assuming you want to access the 2nd element of the linked list on the 1st righthand child node, you'd be like BST->RightChild->Data(this is the first node of the linked list)>NextNode>Data.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgiPqF1isy4TLXgCoAEC.8TF-0DqB_K38TF45F_vyj-", "comment": "A kind of similar idea to this is what's\u00a0behind a B+ tree which gets used in\u00a0database operations and by the OS for storing files. Basically the idea is that you have all your data in child nodes at the bottom stored in a linked list\u00a0with a (non-binary) search tree constructed as a sparse index over that list (you don't store all the data from the list in the tree, only some relative information). This is really useful for storing and then later accessing large amounts of contiguous data.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgiPqF1isy4TLXgCoAEC.8TF-0DqB_K38TF4DIbXCtl", "comment": "The only constraint for what type of data you can store in BST is that each two instances of that type must be comparable (i.e. you need to be able to tell if they are equal and if not, which one is larger). If you decide how to compare two linked lists (and there are several ways to do that), then you surely can store them in a BST.  As for \"what would be the advantage of that\" \u2013 advantage as compared to what?", "votes": "1", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgiPqF1isy4TLXgCoAEC.8TF-0DqB_K38TFgUrLexa_", "comment": "\ubbf8\uc15c\ube44 Database developer here. Yes. It is called a B-Tree Index. But it is not technically a Binary Tree. This is advanced database stuff so not a surprise most programmers here haven't answered it. You would rarely encounter a B-tree Index unless you were tweaking the code of the query optimizer yourself.   It is like a binary tree, but always balanced and never deeper than four or five levels, with three or more values in each node instead of the binary tree two. At the bottom all of the leaves are connected to one another as a linked list and everything is sorted left to right. The values in these leaves are actually Row ID's or RIDs. They point to the file blocks that contains the data that makes up the database table itself. These file blocks are created as your database populates and they are usually a heap or a cluster. Each row has an address inside of the file block. This address is your row ID. Since the file data is unsorted, we keep an index, and that index itself is sorted. B-Tree Index.   Hope that doesn't confuse you more, but I deal with these things when making stuff. I have never had to actually build one. They come as part of a database management system. They are in both relational and non relational databases.", "votes": "1", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgiPqF1isy4TLXgCoAEC.8TF-0DqB_K38TFgtSeaPmz", "comment": "In other words, we use a B Tree Index to keep track of the physical addresses in memory, of items stored in a heap. Because searching a heap sucks.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgiPqF1isy4TLXgCoAEC.8TF-0DqB_K38TFhjuoWCRY", "comment": "\ubbf8\uc15c\ube44 and to answer your last question. We would have a B Tree for every column in the table. The leaf nodes are sorted by that column's values. You get the speed of inserting the rows into the heap without the slowdown of searching the heap. Instead you search the B Tree. If there was a case where you wanted every value bigger than a certain amount or a case where you wanted a range of values, instead of searching the heap which would be horrible, instead of going down the tree every single time, the linked list is there at the bottom, you just move to the right and your addresses are all there. ", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgiPqF1isy4TLXgCoAEC.8TF-0DqB_K38TFzDFn4JbA", "comment": "Christopher, OP was asking about linked lists as values of a BST. B-Tree is not a BST.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgiPqF1isy4TLXgCoAEC.8TF-0DqB_K38TG3N5L1YAU", "comment": "Piotr is right, a tree will be sorted if you build it with BST rules or perform a bunch of AVL rotations and then it can be searched by just going left at any given node if the parent you're leaving from is too big, right if it's too small.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgiPqF1isy4TLXgCoAEC.8TF-0DqB_K38TGWCN9c-pB", "comment": "Sounds impractical for just about anything to me! The other way around seems more useful, i.e. a linked list of trees. Fibonacci heaps do something similar :)", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgiPqF1isy4TLXgCoAEC.8TF-0DqB_K38TJxhMNY6Ps", "comment": "Piotr Zaborski yeah I should have specified that it no longer counts as a Binary Tree. B-tree is still a similar shape and concept. But, the important part is that we are linking end leaves as nodes.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugg6CiGjP_fFCHgCoAEC.8TEzyGNzDS-8TF0jaeE9oO", "comment": "Is that so bad? It's like 5 seconds long and I kinda just sit there like \"yeah, I get it hahahaaa\"", "votes": "7", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugg6CiGjP_fFCHgCoAEC.8TEzyGNzDS-8TFAxHJOU0o", "comment": "Mongols are the exception to being the next level of abstraction.", "votes": "9", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugg6CiGjP_fFCHgCoAEC.8TEzyGNzDS-8TFRrBYVTpV", "comment": "That's device dependent.", "votes": "2", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UggPBmDd9cDGVHgCoAEC.8TEzxRD8Hzp8TF36nlZ0OU", "comment": "also: talking about jagged arrays and calling it multidimensional array... and talking about null-terminated strings...", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UggPBmDd9cDGVHgCoAEC.8TEzxRD8Hzp8TF5-WGJ_X7", "comment": "JustTo Watch No, they are not. They are arrays of arrays, not multidimensional... Let's compare a real multidimensional array from C# to a jagged array: var x = new int[4,4]; var y = new int[4][4]; First things first: The second assignment is invalid in C# since you can't initialize a jagged array this way, a more accurate way would be var y = new int[4][]; for (var i = 0; i < 4; i++) y[i] = new int[4]; And now you can see what the real difference is. Iterating over the real multidimensional array with boundaries that were once checked is ok, since you can be sure that the length of each line is the same as the line before. Not the same with a jagged array. There is nothing preventing you from doing something like this: var y = new int[4][]; y[0] = new int[5]; y[1] = new int[4]; ... So, checking the length of y[0] and using that as the maximum would result in IndexOutOfBoundsExceptions. There's also a difference in memory representation. The compiler or runtime knows the size of the array and can create a real multidimensional memory map. This means that all rows follow each other. A jagged array is actually an array of pointers to other arrays.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UggPBmDd9cDGVHgCoAEC.8TEzxRD8Hzp8TF7I5J0A0r", "comment": "JustTo Watch In a superficial view, yes, multidimensional arrays are arrays of arrays, but that is still not true in the finer view. Furthermore, modern languages use objects or object-like structures for arrays that store different data, eg the length. This is only once in a multidimensional array (length is once per dimension) in a jagged array it is stored for every row and the array of the arrays. This overhead gets worse the more \"dimensions\" you have.  Also, iterating the wrong way (over rows in a column-oriented system or the other way around) is way more expensive with jagged array, because you have to resolve pointers for accessing each entry twice (once for getting the array of arrays and once for the data array) while multidimensional arrays allow the same with one resolution.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UghdZRzRh42v8XgCoAEC.8TEzW9gQaPq8Y99fZF9eEn", "comment": "Insanity Cubed who are they kidding? we are all john green.", "votes": "1", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgiwTc1dIDcLf3gCoAEC.8TEzJ7QnvKM8bUs059KqfW", "comment": "dont mean to be rude or discouraging, but this is basically nothing ;(", "votes": "4", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgiDN9T-3AD2vXgCoAEC.8TEzG4hmC_f8TFWp1APVEE", "comment": "It's the same abstraction.", "votes": "31", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgiDN9T-3AD2vXgCoAEC.8TEzG4hmC_f8TFYp8Cjo4e", "comment": "I feel cheated. I demand a reupload with proper jingle.", "votes": "71", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgiDN9T-3AD2vXgCoAEC.8TEzG4hmC_f8THOVpOt2PT", "comment": "It has been abstracted so it's no longer shown.", "votes": "29", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgiDN9T-3AD2vXgCoAEC.8TEzG4hmC_f8THneiioNO_", "comment": "I love the jingle and spontaneously combust whenever it comes on.", "votes": "2", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgiDN9T-3AD2vXgCoAEC.8TEzG4hmC_f8THumbvELb1", "comment": "Anthony Z Soo you catch on fire?!?", "votes": "5", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgiDN9T-3AD2vXgCoAEC.8TEzG4hmC_f8UkQ51naz9w", "comment": "mike johnston Bob j", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgiDN9T-3AD2vXgCoAEC.8TEzG4hmC_f8Y3Ipg-ePab", "comment": "well i was just about to watch but now i think i'm gonna skip this vid", "votes": "2", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgiDN9T-3AD2vXgCoAEC.8TEzG4hmC_f8Y3hFKqam1V", "comment": "sceKernelDestroy", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgiDN9T-3AD2vXgCoAEC.8TEzG4hmC_f8yB_nl4N9VY", "comment": "Honestly I'm getting tired of the jingle.", "votes": "1", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgiDN9T-3AD2vXgCoAEC.8TEzG4hmC_f8yI2uGY0FwQ", "comment": "So glad she didn't. Am I the only one who skips all those?", "votes": "1", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UghS1I2H2LgTCXgCoAEC.8TEz9B4Sr0N8TF1ebulnHA", "comment": "stringray", "votes": "22", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UghS1I2H2LgTCXgCoAEC.8TEz9B4Sr0N8TF4WsU1O4U", "comment": "strcat = string catenation  catenation and concatenation are synonyms but strcat has more obvious meaning than strcon, so that's why it was chosen for a name of the method (I presume).", "votes": "3", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UghS1I2H2LgTCXgCoAEC.8TEz9B4Sr0N8TFF_-a-Ciw", "comment": "Stringray, strray, and strarr are three likely candidates.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UghS1I2H2LgTCXgCoAEC.8TEz9B4Sr0N8TFIYvmHEyv", "comment": "strarray, but I can see the intention of the joke.", "votes": "1", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UghS1I2H2LgTCXgCoAEC.8TEz9B4Sr0N8TFRgvuplzE", "comment": "String Array = Fruit of the Loom", "votes": "1", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UghS1I2H2LgTCXgCoAEC.8TEz9B4Sr0N8TFXQXIbUku", "comment": "strtoarray...", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UghS1I2H2LgTCXgCoAEC.8TEz9B4Sr0N8TGiCUEAPm_", "comment": "cast the array type from char to uint8, regardless of the joke.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UghS1I2H2LgTCXgCoAEC.8TEz9B4Sr0N8TGlD8h5vY6", "comment": "but the string is array ha ha ha", "votes": "2", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UghS1I2H2LgTCXgCoAEC.8TEz9B4Sr0N8TXU5zmLbX7", "comment": "We just don't make arrays of strings in the first place.  We make arrays of pointers to strings, which opens all kinds of fascinating ways to engineer segfaults.", "votes": "4", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UghS1I2H2LgTCXgCoAEC.8TEz9B4Sr0N8UeotSn8hGi", "comment": "Oh, stop it you!", "votes": "1", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UghS1I2H2LgTCXgCoAEC.8TEz9B4Sr0N8YDc8gLijTw", "comment": "Better call it stray :p", "votes": "1", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UghS1I2H2LgTCXgCoAEC.8TEz9B4Sr0N8oqK6RzxtAs", "comment": "String array = Steve Irwin", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UghS1I2H2LgTCXgCoAEC.8TEz9B4Sr0N8ugz1t8a_I6", "comment": "String : Am I a joke to you?", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgjKVqJbFpSLGXgCoAEC.8TEyk6ucIhE8TF1inpKv4P", "comment": "Sam Whelan some programming languages don't let you play with pointers.", "votes": "2", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgjKVqJbFpSLGXgCoAEC.8TEyk6ucIhE8TF1tD5jwKX", "comment": "A$= \"at\"+10+\"shun\"", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgjKVqJbFpSLGXgCoAEC.8TEyk6ucIhE8TF7oKmJrgH", "comment": "The main drawback is that miss-typing isn't caught until the system tries to do an operation expecting one type and you give it another. Static typing generally catches this before any of your code gets run. Even worse is when the system preforms a different operation because it's a different type. The first time I used python, 10 < 5.", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgiPfbDYtFRx9HgCoAEC.8TEyIKisCzT8TEzXKJaf4S", "comment": "Uh, why? you havent even watched the video", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "UgiPfbDYtFRx9HgCoAEC.8TEyIKisCzT8TF27smCabk", "comment": "So, it's all magic, like Arthur Clarke\"s Third Law says?", "votes": "0", "replies": "", "reply": true}, {"vid": "DuDz6B4cqVc", "cid": "Ugh3Jc_rQkznfXgCoAEC.8TEyBvd4ZnG8TF2FvbVgrO", "comment": "Years to understand. Seconds to dismiss.", "votes": "1", "replies": "", "reply": true}]